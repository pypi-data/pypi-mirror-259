# coding: utf-8

"""
    OurSky Platform

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.3.2816
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class V1UpdateNodeMetricsRequest(BaseModel):
    """
    V1UpdateNodeMetricsRequest
    """
    node_id: StrictStr = Field(..., alias="nodeId")
    available_disk_bytes: StrictInt = Field(..., alias="availableDiskBytes")
    available_memory_bytes: StrictInt = Field(..., alias="availableMemoryBytes")
    ntp_time_drift_ms: StrictInt = Field(..., alias="ntpTimeDriftMs")
    min_slew_speed_ms: Optional[StrictInt] = Field(None, alias="minSlewSpeedMs")
    max_slew_speed_ms: Optional[StrictInt] = Field(None, alias="maxSlewSpeedMs")
    min_slew_and_center_speed_ms: Optional[StrictInt] = Field(None, alias="minSlewAndCenterSpeedMs")
    max_slew_and_center_speed_ms: Optional[StrictInt] = Field(None, alias="maxSlewAndCenterSpeedMs")
    min_slew_accuracy_arcseconds: Optional[StrictInt] = Field(None, alias="minSlewAccuracyArcseconds")
    max_slew_accuracy_arcseconds: Optional[StrictInt] = Field(None, alias="maxSlewAccuracyArcseconds")
    measured_at: datetime = Field(..., alias="measuredAt")
    __properties = ["nodeId", "availableDiskBytes", "availableMemoryBytes", "ntpTimeDriftMs", "minSlewSpeedMs", "maxSlewSpeedMs", "minSlewAndCenterSpeedMs", "maxSlewAndCenterSpeedMs", "minSlewAccuracyArcseconds", "maxSlewAccuracyArcseconds", "measuredAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1UpdateNodeMetricsRequest:
        """Create an instance of V1UpdateNodeMetricsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1UpdateNodeMetricsRequest:
        """Create an instance of V1UpdateNodeMetricsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1UpdateNodeMetricsRequest.parse_obj(obj)

        _obj = V1UpdateNodeMetricsRequest.parse_obj({
            "node_id": obj.get("nodeId"),
            "available_disk_bytes": obj.get("availableDiskBytes"),
            "available_memory_bytes": obj.get("availableMemoryBytes"),
            "ntp_time_drift_ms": obj.get("ntpTimeDriftMs"),
            "min_slew_speed_ms": obj.get("minSlewSpeedMs"),
            "max_slew_speed_ms": obj.get("maxSlewSpeedMs"),
            "min_slew_and_center_speed_ms": obj.get("minSlewAndCenterSpeedMs"),
            "max_slew_and_center_speed_ms": obj.get("maxSlewAndCenterSpeedMs"),
            "min_slew_accuracy_arcseconds": obj.get("minSlewAccuracyArcseconds"),
            "max_slew_accuracy_arcseconds": obj.get("maxSlewAccuracyArcseconds"),
            "measured_at": obj.get("measuredAt")
        })
        return _obj


