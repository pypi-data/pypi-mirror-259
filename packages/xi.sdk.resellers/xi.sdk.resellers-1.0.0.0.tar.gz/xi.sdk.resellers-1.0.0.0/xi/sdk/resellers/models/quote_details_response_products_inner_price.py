# coding: utf-8

"""
    XI Sdk Resellers

    For Resellers. Who are looking to Innovate with Ingram Micro's API SolutionsAutomate your eCommerce with our offering of APIs and Webhooks to create a seamless experience for your customers.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class QuoteDetailsResponseProductsInnerPrice(BaseModel):
    """
    QuoteDetailsResponseProductsInnerPrice
    """ # noqa: E501
    quote_price: Optional[StrictInt] = Field(default=None, description="Ingram Micro quoted price specific to the reseller and quote.", alias="quotePrice")
    msrp: Optional[StrictInt] = Field(default=None, description="Manufacturer Suggested Retail Price")
    extended_msrp: Optional[StrictInt] = Field(default=None, description="Extended MSRP - Manufacturer Suggested Retail Price X Quantity", alias="extendedMsrp")
    extended_quote_price: Optional[StrictInt] = Field(default=None, description="Extended reseller quoted price (cost to reseller) X Quantity", alias="extendedQuotePrice")
    discount_off_list: Optional[StrictStr] = Field(default=None, description="Discount off list percentage extended", alias="discountOffList")
    vendorprice: Optional[Union[StrictFloat, StrictInt]] = None
    extendedvendorprice: Optional[Union[StrictFloat, StrictInt]] = None
    total_visible_reserve_quantity: Optional[StrictInt] = Field(default=None, alias="totalVisibleReserveQuantity")
    type: Optional[StrictStr] = None
    recurring_price_model: Optional[StrictStr] = Field(default=None, alias="recurringPriceModel")
    __properties: ClassVar[List[str]] = ["quotePrice", "msrp", "extendedMsrp", "extendedQuotePrice", "discountOffList", "vendorprice", "extendedvendorprice", "totalVisibleReserveQuantity", "type", "recurringPriceModel"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuoteDetailsResponseProductsInnerPrice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuoteDetailsResponseProductsInnerPrice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quotePrice": obj.get("quotePrice"),
            "msrp": obj.get("msrp"),
            "extendedMsrp": obj.get("extendedMsrp"),
            "extendedQuotePrice": obj.get("extendedQuotePrice"),
            "discountOffList": obj.get("discountOffList"),
            "vendorprice": obj.get("vendorprice"),
            "extendedvendorprice": obj.get("extendedvendorprice"),
            "totalVisibleReserveQuantity": obj.get("totalVisibleReserveQuantity"),
            "type": obj.get("type"),
            "recurringPriceModel": obj.get("recurringPriceModel")
        })
        return _obj


