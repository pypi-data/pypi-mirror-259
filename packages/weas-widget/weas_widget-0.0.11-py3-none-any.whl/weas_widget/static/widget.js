import*as r from"https://unpkg.com/weas/dist/weas.mjs";function d({model:e,el:i}){let t,n=document.createElement("div");n.style.cssText="position: relative; width: 600px; height: 400px;",i.appendChild(n);let l=()=>{let a=e.get("atoms"),s;Array.isArray(a)?s=a.map(u=>new r.Atoms(u)):s=new r.Atoms(a);let o=e.get("guiConfig"),c={debug:e.get("debug"),_modelStyle:e.get("modelStyle"),_colorType:e.get("colorType"),_materialType:e.get("materialType"),_atomLabelType:e.get("atomLabelType"),_showCell:e.get("showCell"),_showBondedAtoms:e.get("showBondedAtoms"),_boundary:e.get("boundary")};return t=new r.AtomsViewer(n,s,c,o),t.selectedAtomsIndices=e.get("selectedAtomsIndices"),t.isosurfaceManager.volumetricData=g(e.get("volumetricData"),s.cell),t.isosurfaceManager.fromSettings(e.get("isoSettings")),t.VFManager.fromSettings(e.get("vectorField")),t.showVectorField=e.get("showVectorField"),t.drawModels(),t.render(),t};setTimeout(()=>{t=l()},10),e.on("change:js_task",()=>{let a=e.get("js_task");function s(o){switch(o.name){case"drawModels":t.drawModels();break;case"exportImage":let c=t.tjs.exportImage(o.kwargs.resolutionScale);e.set("imageData",c),e.save_changes();break;case"downloadImage":t.tjs.downloadImage(o.kwargs.filename);break;case"setCameraPosition":t.tjs.updateCameraAndControls(t.atoms.getCenterOfGeometry(),o.kwargs.position);break}}s(a)}),e.on("change:atoms",()=>{let a=e.get("atoms");if(a.uuid&&t.atoms.uuid&&t.atoms.uuid===a.uuid)return;let s=new r.Atoms(a);t.updateAtoms(s),console.log("update viewer from Python.")}),n.addEventListener("atomsUpdated",a=>{let s=[];a.detail.forEach(o=>{s.push(o.to_dict())}),s.uuid=t.uuid,e.set("atoms",s),e.save_changes(),console.log("Updated atoms from event.")}),n.addEventListener("viewerUpdated",a=>{let s=a.detail;for(let o in s)e.set(o,s[o]);e.save_changes(),console.log("Updated viewer: ",s)}),e.on("change:modelStyle",()=>{t.modelStyle=e.get("modelStyle")}),e.on("change:colorType",()=>{t.colorType=e.get("colorType")}),e.on("change:materialType",()=>{t.materialType=e.get("materialType")}),e.on("change:atomLabelType",()=>{t.atomLabelType=e.get("atomLabelType")}),e.on("change:showCell",()=>{t.showCell=e.get("showCell")}),e.on("change:showBondedAtoms",()=>{t.showBondedAtoms=e.get("showBondedAtoms")}),e.on("change:atomScales",()=>{t.atomScales=e.get("atomScales")}),e.on("change:modelSticks",()=>{t.modelSticks=e.get("modelSticks")}),e.on("change:modelPolyhedras",()=>{t.modelPolyhedras=e.get("modelPolyhedras")}),e.on("change:selectedAtomsIndices",()=>{t.selectedAtomsIndices=e.get("selectedAtomsIndices")}),e.on("change:boundary",()=>{t.boundary=e.get("boundary")}),e.on("change:volumetricData",()=>{let a=e.get("volumetricData");t.isosurfaceManager.volumetricData=g(a)}),e.on("change:isoSettings",()=>{let a=e.get("isoSettings");t.isosurfaceManager.fromSettings(a),t.isosurfaceManager.drawIsosurfaces()}),e.on("change:vectorField",()=>{let a=e.get("vectorField");t.VFManager.fromSettings(a),t.VFManager.drawVectorFields()})}function g(e,i=[[1,0,0],[0,1,0],[0,0,1]]){let t=[e.values.length,e.values[0].length,e.values[0][0].length],n=[].concat.apply([],[].concat.apply([],e.values));return{dims:t,values:n,cell:i,origin:[0,0,0]}}var w={render:d};export{w as default};
