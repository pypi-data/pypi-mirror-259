
[build-system]
requires = ["poetry-core>=1.5"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "fold-core"
packages = [
    { include="fold", from="./src" },
]
version = "2.0.1"
authors = ["Mark Aron Szulyovszky", "Daniel Szemerey" ]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "License :: Other/Proprietary License",
  "Operating System :: OS Independent",
]
description = "A Time Series Cross-Validation library that lets you build, deploy and update composite models easily. An order of magnitude speed-up, combined with flexibility and rigour."
keywords = ["time-series", "machine-learning", "forecasting", "forecast", "nowcast", "models", "time-series-regression", "time-series-classification", "financial-machine-learning"]
license = "Proprietary"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
pandas = ">=2.0"
numpy = ">=1.16"
scikit-learn = ">=1.4"
tqdm = ">=4.0"
iteration_utilities = ">=0.11"
typing_extensions = ">=4.4.0"
deepmerge = ">=1.0.0"
finml-utils = ">=2.1"

pre-commit = {version = "~=2.20.0", optional = true}
pytest = {version = "~=7.1.2", optional = true}
pytest-cov = {version = ">=4.0", optional = true}
imbalanced-learn = {version = ">=0.11.0", optional = true}
holidays = {version = ">=0.10", optional = true}
pandas_market_calendars = {version = ">=4.1.4", optional = true}
krisi = {version = ">=1.3.0", optional = true}
mkdocs = {version = ">=1.2", optional = true}
mkdocs-material = {version = ">=9.0.0", optional = true}
mkdocstrings-python = {version = ">=0.9.0", optional = true}
mkdocs-include-markdown-plugin = {version = ">=4.0", optional = true}
mkdocs-autorefs = {version = ">=0.4", optional = true}
mkdocs-jupyter = {version = ">=0.22", optional = true}
image = {version = ">=1.5.33", optional = true}
mkdocs-gallery = {version = ">=0.7", optional = true}
mkdocs-glightbox = {version = "<=0.3.2", optional = true}
ray = {version = ">=1.4", optional = true}
p_tqdm = {version = ">=1.3", optional = true}
statsmodels = {version = ">=0.12.1", optional = true}
pyarrow = {version = ">=2.0", optional = true}
lightgbm = {version = ">=3.2.1", optional = true}

[project.urls]
Documentation = "https://dream-faster.github.io/fold"
Issues = "https://github.com/dream-faster/fold/issues"
Source = "https://github.com/dream-faster/fold"

[tool.poetry.extras]
quality = [
  "black",
  "flake8",
  "isort",
  "pre-commit",
]
tests = [
  "pytest",
  "pytest-cov",
  "imbalanced-learn",
  "holidays",
  "statsmodels",
  "krisi",
  "pyarrow",
  "pandas_market_calendars"
]
docs = [
  "mkdocs-material",
  "mkdocstrings-python",
  "mkdocs-include-markdown-plugin",
  "mkdocs-autorefs",
  "mkdocs-jupyter",
  "image",
  "mkdocs-gallery",
  "mkdocs-glightbox"
]
ray = ["ray"]
all = [
  "ray",
  "holidays",
  "krisi",
  "p_tqdm",
  "statsmodels",
  "pandas_market_calendars"
]
sktime = [
  "sktime",
  "pmdarima"
]
statsforecast = [
  "statsforecast"
]
statsmodels = [
  "statsmodels"
]
xgboost = [
  "xgboost"
]
prophet = [
  "prophet"
]

lightgbm = [
  "lightgbm"
]
arch = [
  "arch"
]


[tool.hatch.envs.quality]
dependencies = [
  ".[quality]"
]
detached = true

[tool.hatch.envs.quality.scripts]
check = [
  "flake8 src tests",
  "black --check --diff --preview src tests",
  "isort --check-only --diff src tests",
]
format = [
  "isort src tests",
  "black --preview src tests",
  "check"
]


[tool.isort]
profile = "black"


[tool.pytest.ini_options]
pythonpath = [
  "src"
]
testpaths = ["tests/fold"]
addopts = [
  "--doctest-modules",
  "--durations=0",
]
# log_cli = true
# log_cli_level = "DEBUG"


[tool.hatch.metadata]
allow-direct-references = true

# bumpver command: ``bumpver update --patch``
[tool.bumpver]
current_version = "2.0.1"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "chore(Release): Bump version from {old_version} -> {new_version}"
commit = true
tag = true
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'current_version = "{version}"',
    'version = "{version}"'
]


[tool.ruff]
target-version = "py311"

ignore = ["RUF200", "DTZ011","PD901", "PGH003", "COM812", "ISC001", "PD101", "C408", "DTZ005", "E501", "PLR2004", "PLR0913", "B904", "N803", "ARG001", "ARG002", "PD010", "N806", "I001", "TID252", "N802", "A002", "PD011", "PGH004", "N818", "PLR0911", "PT011", "PD003", "DTZ001", "INP001", "N815", "A003"]
select = [
  # pyflakes
  "F",
  # pycodestyle
  "E",
  "W",
  # isort
  "I",
  # pep8-naming
  "N",
  # pyupgrade
  "UP",
  # flake8-annotations
  # "ANN",
  # flake8-bandit
  # "S",
  # flake8-blind-except
  "BLE",
  # flake8-boolean-trap
  # "FBT",
  # flake8-bugbear
  "B",
  # flake8-builtins
  "A",
  # flake8-commas
  "COM",
  # flake8-comprehensions
  "C4",
  # flake8-datetimez
  "DTZ",
  # flake8-debugger
  "T10",
  # flake8-errmsg
  # "EM",
  # flake8-executable
  # "EXE",
  # flake8-implicit-str-concat
  "ISC",
  # flake8-import-conventions
  "ICN",
  # flake8-logging-format
  # "G",
  # flake8-no-pep420
  "INP",
  # flake8-pie
  "PIE",
  # flake8-print
  # "T20",
  # flake8-pytest-style
  "PT",
  # flake8-quotes
  "Q",
  # flake8-return
  "RET",
  # flake8-simplify
  "SIM",
  # flake8-tidy-imports
  # "TID",
  # flake8-type-checking
  # "TCH",
  # flake8-unused-arguments
  "ARG",
  # flake8-use-pathlib
  "PTH",
  # pandas-vet
  "PD",
  # pygrep-hooks
  "PGH",
  # pylint
  "PLE", "PLR", "PLW",
  # flake8-raise
  "RSE",
  # ruff-specific rules
  "RUF"
]
fixable = ["ALL"]
unsafe-fixes = true


[per-file-ignores]
"__init__.py" = ["E", "F", "I", "N", "F403"]

