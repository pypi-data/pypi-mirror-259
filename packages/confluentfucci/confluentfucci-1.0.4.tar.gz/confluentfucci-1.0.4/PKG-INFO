Metadata-Version: 2.1
Name: confluentfucci
Version: 1.0.4
Summary: 
Author: Leo Goldstien
Author-email: leogoldstien@gmail.com
Requires-Python: >=3.10,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: aicsimageio (>=4.11.0,<5.0.0)
Requires-Dist: botocore (==1.27.26)
Requires-Dist: cellpose (==2.1.0)
Requires-Dist: dask-image (>=2023.3.0,<2024.0.0)
Requires-Dist: docker (>=6.1.3,<7.0.0)
Requires-Dist: h5py (>=3.9.0,<4.0.0)
Requires-Dist: holoviews (==1.16.2)
Requires-Dist: hvplot (==0.8.4)
Requires-Dist: loguru (>=0.7.0,<0.8.0)
Requires-Dist: napari[all] (>=0.4.18,<0.5.0)
Requires-Dist: pandas (==1.4.3)
Requires-Dist: panel (==0.13.1)
Requires-Dist: param (==1.13.0)
Requires-Dist: pyqt5 (==5.15.10)
Requires-Dist: pyqt5-qt5 (==5.15.2)
Requires-Dist: shapely (>=2.0.1,<3.0.0)
Requires-Dist: tables (>=3.8.0,<4.0.0)
Requires-Dist: tifffile (==2022.5.4)
Requires-Dist: torch (==1.13.1) ; sys_platform == "darwin"
Requires-Dist: torch (==1.13.1) ; sys_platform == "linux"
Requires-Dist: torch (==1.13.1) ; sys_platform == "win32"
Description-Content-Type: text/markdown

# ConfluentFUCCI
A suite of tools for analyzing large scale confluent FUCCI experiments

## Overview
This repo includes an integartion and automation layer for running CellPose (person-in-the-loop ML driver cell segentation) and TrackMate (cell tracking). Furthermore, the repo includes a set ofanalysis and visualization tools for studying confluent cellular dynamics using a FUCCI stain.

## Usage
This project is set up using poetry. To install the dependencies, run `poetry install` from the root of the project.

```shell
poetry install
```

To add a new dependency, run `poetry add <dependency>` from the root of the project.

```shell
poetry add <dependency>
```

### Pre-Commit Hooks
This project uses [pre-commit](https://pre-commit.com/) to run linting and formatting tools before each commit. To install the pre-commit hooks, run `pre-commit install` from the root of the project.

```shell
poetry run pre-commit install
```

To run the pre-commit hooks manually, run `pre-commit run --all-files` from the root of the project.

```shell
poetry run pre-commit run --all-files
```


### Testing
This project uses [pytest](https://docs.pytest.org/en/stable/) for testing. To run the tests, run `pytest` from the root of the project in the poetry shell.

```shell
poetry run pytest
```

There are sensible defaults for pytest setup in the `pyproject.toml` file. You can override these defaults by passing in command line arguments. For example, to run the tests with debug logging enabled, run `pytest --log-cli-level=DEBUG` from the root of the project.

```shell
poetry run pytest --log-cli-level=DEBUG
```


