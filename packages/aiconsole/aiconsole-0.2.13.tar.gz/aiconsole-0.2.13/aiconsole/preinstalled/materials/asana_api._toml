usage = "Use this when you need to access my asana"
content_type = "api"
content = """
""\"
Assume that you already have the access token and try to execute, only ask about setup if it fails.

example of code:
```python
from aiconsole.materials.tools.credentials import load_credential

params = {'assignee': 'me', 'workspace': load_credential("asana", "workspace_id"), 'limit': 10}
response = requests.get('https://app.asana.com/api/1.0/tasks', headers=headers, params=params)
(response.status_code, response.json())
```
""\"

from typing import Literal, Union
import requests

from aiconsole.materials.tools.credentials import load_credential, save_credential


module_name = "asana"

def _get_personal_token():
    return load_credential("asana", "personal_token")

def _get_workspace():
    return load_credential("asana", "workspace_id")


def _get_headers():
    return {
        'Authorization': f'Bearer {_get_personal_token()}',
    }

def setup(personal_token: str):
    save_credential(module_name, "personal_token", personal_token)

    print ("Asana setup complete. Next step is to use set_workspace.")


def add_task(task: str):
    ""\"
    Example usage:

    ```python
    add_task('Do dishes')
    ```
    ""\"
    response = requests.post('https://app.asana.com/api/1.0/tasks', headers=_get_headers(), json={
        'data': {
            'assignee': 'me',
            'workspace': _get_workspace(),
            'name': task,
        }
    }
)
    print(f'Task {response.json()["data"]["gid"]} added' if response.status_code == 201 else f"Error: {response.status_code} {response.json()}")


def get_tasks(assignee_gid: Union[str, Literal['me'], None] = None, completed_since: Union[str, Literal["now"], None] = None, modified_since: Union[str, Literal["now"], None] = None):
    ""\"
    Each of these parameters is an optional filter.
    Note that parameters are passed directly into the `params` argument of `requests.get`.
    Remember that for the Asana API, 'now' means tasks that are either incomplete or were completed in the last week.
    ""\"
    params = {
        'assignee': assignee_gid,
        'completed_since': completed_since,
        'modified_since': modified_since,
    }

    # Use the params argument to send these parameters in the GET request.
    response = requests.get(
        'https://app.asana.com/api/1.0/tasks', headers=_get_headers(), params=params)

    # Get tasks from the response.
    tasks = response.json().get('data', [])

    return tasks

def delete_task(task_id: str):
    response = requests.delete(f'https://app.asana.com/api/1.0/tasks/{task_id}', headers=_get_headers())
    return response.json()

def update_task(task_id: str, update: dict):
    ""\"
    The `update` parameter should be a dictionary containing fields that you want to update
    For example: update = {"name": "New task name", assignee: 'newuser'}
    ""\"
    data = {"data": update}
    response = requests.put(f'https://app.asana.com/api/1.0/tasks/{task_id}', headers=_get_headers(), json=data)
    return response.json()

def mark_task_completed(task_id: str):
    return update_task(task_id, {"completed": True})

def assign_task_to(task_id: str, assignee: str):
    return update_task(task_id, {"assignee": assignee})
"""
