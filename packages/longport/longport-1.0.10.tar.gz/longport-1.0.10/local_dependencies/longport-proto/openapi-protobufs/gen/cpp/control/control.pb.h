// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control/control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_2fcontrol_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_control_2fcontrol_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_control_2fcontrol_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_control_2fcontrol_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_control_2fcontrol_2eproto;
namespace longportapp {
namespace control {
namespace v1 {
class AuthRequest;
struct AuthRequestDefaultTypeInternal;
extern AuthRequestDefaultTypeInternal _AuthRequest_default_instance_;
class AuthResponse;
struct AuthResponseDefaultTypeInternal;
extern AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
class Close;
struct CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
class Heartbeat;
struct HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class ReconnectRequest;
struct ReconnectRequestDefaultTypeInternal;
extern ReconnectRequestDefaultTypeInternal _ReconnectRequest_default_instance_;
class ReconnectResponse;
struct ReconnectResponseDefaultTypeInternal;
extern ReconnectResponseDefaultTypeInternal _ReconnectResponse_default_instance_;
}  // namespace v1
}  // namespace control
}  // namespace longportapp
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace longportapp {
namespace control {
namespace v1 {
enum Close_Code : int {
  Close_Code_HeartbeatTimeout = 0,
  Close_Code_ServerError = 1,
  Close_Code_ServerShutdown = 2,
  Close_Code_UnpackError = 3,
  Close_Code_AuthError = 4,
  Close_Code_SessExpired = 5,
  Close_Code_ConnectDuplicate = 6,
  Close_Code_Close_Code_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Close_Code_Close_Code_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Close_Code_IsValid(int value);
constexpr Close_Code Close_Code_Code_MIN = static_cast<Close_Code>(0);
constexpr Close_Code Close_Code_Code_MAX = static_cast<Close_Code>(6);
constexpr int Close_Code_Code_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
Close_Code_descriptor();
template <typename T>
const std::string& Close_Code_Name(T value) {
  static_assert(std::is_same<T, Close_Code>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Code_Name().");
  return Close_Code_Name(static_cast<Close_Code>(value));
}
template <>
inline const std::string& Close_Code_Name(Close_Code value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Close_Code_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Close_Code_Parse(absl::string_view name, Close_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Close_Code>(
      Close_Code_descriptor(), name, value);
}
enum Command : int {
  CMD_CLOSE = 0,
  CMD_HEARTBEAT = 1,
  CMD_AUTH = 2,
  CMD_RECONNECT = 3,
  Command_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Command_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Command_IsValid(int value);
constexpr Command Command_MIN = static_cast<Command>(0);
constexpr Command Command_MAX = static_cast<Command>(3);
constexpr int Command_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Command_descriptor();
template <typename T>
const std::string& Command_Name(T value) {
  static_assert(std::is_same<T, Command>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Command_Name().");
  return Command_Name(static_cast<Command>(value));
}
template <>
inline const std::string& Command_Name(Command value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Command_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Command_Parse(absl::string_view name, Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command>(
      Command_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Close final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.control.v1.Close) */ {
 public:
  inline Close() : Close(nullptr) {}
  ~Close() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Close(::google::protobuf::internal::ConstantInitialized);

  Close(const Close& from);
  Close(Close&& from) noexcept
    : Close() {
    *this = ::std::move(from);
  }

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }
  inline Close& operator=(Close&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Close& default_instance() {
    return *internal_default_instance();
  }
  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Close& a, Close& b) {
    a.Swap(&b);
  }
  inline void Swap(Close* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Close* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Close* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Close>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Close& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Close& from) {
    Close::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Close* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.control.v1.Close";
  }
  protected:
  explicit Close(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Code = Close_Code;
  static constexpr Code HeartbeatTimeout = Close_Code_HeartbeatTimeout;
  static constexpr Code ServerError = Close_Code_ServerError;
  static constexpr Code ServerShutdown = Close_Code_ServerShutdown;
  static constexpr Code UnpackError = Close_Code_UnpackError;
  static constexpr Code AuthError = Close_Code_AuthError;
  static constexpr Code SessExpired = Close_Code_SessExpired;
  static constexpr Code ConnectDuplicate = Close_Code_ConnectDuplicate;
  static inline bool Code_IsValid(int value) {
    return Close_Code_IsValid(value);
  }
  static constexpr Code Code_MIN = Close_Code_Code_MIN;
  static constexpr Code Code_MAX = Close_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE = Close_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Code_descriptor() {
    return Close_Code_descriptor();
  }
  template <typename T>
  static inline const std::string& Code_Name(T value) {
    return Close_Code_Name(value);
  }
  static inline bool Code_Parse(absl::string_view name, Code* value) {
    return Close_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string reason = 2 [json_name = "reason"];
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* ptr);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // .longportapp.control.v1.Close.Code code = 1 [json_name = "code"];
  void clear_code() ;
  ::longportapp::control::v1::Close_Code code() const;
  void set_code(::longportapp::control::v1::Close_Code value);

  private:
  ::longportapp::control::v1::Close_Code _internal_code() const;
  void _internal_set_code(::longportapp::control::v1::Close_Code value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.control.v1.Close)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr reason_;
    int code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_2fcontrol_2eproto;
};// -------------------------------------------------------------------

class Heartbeat final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.control.v1.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  ~Heartbeat() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Heartbeat(::google::protobuf::internal::ConstantInitialized);

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heartbeat* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Heartbeat& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Heartbeat& from) {
    Heartbeat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.control.v1.Heartbeat";
  }
  protected:
  explicit Heartbeat(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kHeartbeatIdFieldNumber = 2,
  };
  // int64 timestamp = 1 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // optional int32 heartbeat_id = 2 [json_name = "heartbeatId"];
  bool has_heartbeat_id() const;
  void clear_heartbeat_id() ;
  ::int32_t heartbeat_id() const;
  void set_heartbeat_id(::int32_t value);

  private:
  ::int32_t _internal_heartbeat_id() const;
  void _internal_set_heartbeat_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.control.v1.Heartbeat)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t timestamp_;
    ::int32_t heartbeat_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_2fcontrol_2eproto;
};// -------------------------------------------------------------------

class AuthRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.control.v1.AuthRequest) */ {
 public:
  inline AuthRequest() : AuthRequest(nullptr) {}
  ~AuthRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AuthRequest(::google::protobuf::internal::ConstantInitialized);

  AuthRequest(const AuthRequest& from);
  AuthRequest(AuthRequest&& from) noexcept
    : AuthRequest() {
    *this = ::std::move(from);
  }

  inline AuthRequest& operator=(const AuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthRequest& operator=(AuthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthRequest* internal_default_instance() {
    return reinterpret_cast<const AuthRequest*>(
               &_AuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuthRequest& a, AuthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AuthRequest& from) {
    AuthRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.control.v1.AuthRequest";
  }
  protected:
  explicit AuthRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1 [json_name = "token"];
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.control.v1.AuthRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 48, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr token_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_2fcontrol_2eproto;
};// -------------------------------------------------------------------

class AuthResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.control.v1.AuthResponse) */ {
 public:
  inline AuthResponse() : AuthResponse(nullptr) {}
  ~AuthResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AuthResponse(::google::protobuf::internal::ConstantInitialized);

  AuthResponse(const AuthResponse& from);
  AuthResponse(AuthResponse&& from) noexcept
    : AuthResponse() {
    *this = ::std::move(from);
  }

  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthResponse& operator=(AuthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthResponse* internal_default_instance() {
    return reinterpret_cast<const AuthResponse*>(
               &_AuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthResponse& a, AuthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AuthResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AuthResponse& from) {
    AuthResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.control.v1.AuthResponse";
  }
  protected:
  explicit AuthResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kExpiresFieldNumber = 2,
    kLimitFieldNumber = 3,
    kOnlineFieldNumber = 4,
  };
  // string session_id = 1 [json_name = "sessionId"];
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* ptr);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // int64 expires = 2 [json_name = "expires"];
  void clear_expires() ;
  ::int64_t expires() const;
  void set_expires(::int64_t value);

  private:
  ::int64_t _internal_expires() const;
  void _internal_set_expires(::int64_t value);

  public:
  // uint32 limit = 3 [json_name = "limit"];
  void clear_limit() ;
  ::uint32_t limit() const;
  void set_limit(::uint32_t value);

  private:
  ::uint32_t _internal_limit() const;
  void _internal_set_limit(::uint32_t value);

  public:
  // uint32 online = 4 [json_name = "online"];
  void clear_online() ;
  ::uint32_t online() const;
  void set_online(::uint32_t value);

  private:
  ::uint32_t _internal_online() const;
  void _internal_set_online(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.control.v1.AuthResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 54, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::int64_t expires_;
    ::uint32_t limit_;
    ::uint32_t online_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_2fcontrol_2eproto;
};// -------------------------------------------------------------------

class ReconnectRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.control.v1.ReconnectRequest) */ {
 public:
  inline ReconnectRequest() : ReconnectRequest(nullptr) {}
  ~ReconnectRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReconnectRequest(::google::protobuf::internal::ConstantInitialized);

  ReconnectRequest(const ReconnectRequest& from);
  ReconnectRequest(ReconnectRequest&& from) noexcept
    : ReconnectRequest() {
    *this = ::std::move(from);
  }

  inline ReconnectRequest& operator=(const ReconnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconnectRequest& operator=(ReconnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReconnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReconnectRequest* internal_default_instance() {
    return reinterpret_cast<const ReconnectRequest*>(
               &_ReconnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReconnectRequest& a, ReconnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconnectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReconnectRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReconnectRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReconnectRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReconnectRequest& from) {
    ReconnectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconnectRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.control.v1.ReconnectRequest";
  }
  protected:
  explicit ReconnectRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1 [json_name = "sessionId"];
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* ptr);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // @@protoc_insertion_point(class_scope:longportapp.control.v1.ReconnectRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 58, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_2fcontrol_2eproto;
};// -------------------------------------------------------------------

class ReconnectResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:longportapp.control.v1.ReconnectResponse) */ {
 public:
  inline ReconnectResponse() : ReconnectResponse(nullptr) {}
  ~ReconnectResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReconnectResponse(::google::protobuf::internal::ConstantInitialized);

  ReconnectResponse(const ReconnectResponse& from);
  ReconnectResponse(ReconnectResponse&& from) noexcept
    : ReconnectResponse() {
    *this = ::std::move(from);
  }

  inline ReconnectResponse& operator=(const ReconnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconnectResponse& operator=(ReconnectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReconnectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReconnectResponse* internal_default_instance() {
    return reinterpret_cast<const ReconnectResponse*>(
               &_ReconnectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReconnectResponse& a, ReconnectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconnectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconnectResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReconnectResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReconnectResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReconnectResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReconnectResponse& from) {
    ReconnectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconnectResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "longportapp.control.v1.ReconnectResponse";
  }
  protected:
  explicit ReconnectResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kExpiresFieldNumber = 2,
    kLimitFieldNumber = 3,
    kOnlineFieldNumber = 4,
  };
  // string session_id = 1 [json_name = "sessionId"];
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* ptr);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // int64 expires = 2 [json_name = "expires"];
  void clear_expires() ;
  ::int64_t expires() const;
  void set_expires(::int64_t value);

  private:
  ::int64_t _internal_expires() const;
  void _internal_set_expires(::int64_t value);

  public:
  // uint32 limit = 3 [json_name = "limit"];
  void clear_limit() ;
  ::uint32_t limit() const;
  void set_limit(::uint32_t value);

  private:
  ::uint32_t _internal_limit() const;
  void _internal_set_limit(::uint32_t value);

  public:
  // uint32 online = 4 [json_name = "online"];
  void clear_online() ;
  ::uint32_t online() const;
  void set_online(::uint32_t value);

  private:
  ::uint32_t _internal_online() const;
  void _internal_set_online(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:longportapp.control.v1.ReconnectResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 59, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::int64_t expires_;
    ::uint32_t limit_;
    ::uint32_t online_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_control_2fcontrol_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Close

// .longportapp.control.v1.Close.Code code = 1 [json_name = "code"];
inline void Close::clear_code() {
  _impl_.code_ = 0;
}
inline ::longportapp::control::v1::Close_Code Close::code() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.Close.code)
  return _internal_code();
}
inline void Close::set_code(::longportapp::control::v1::Close_Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:longportapp.control.v1.Close.code)
}
inline ::longportapp::control::v1::Close_Code Close::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::longportapp::control::v1::Close_Code>(_impl_.code_);
}
inline void Close::_internal_set_code(::longportapp::control::v1::Close_Code value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_ = value;
}

// string reason = 2 [json_name = "reason"];
inline void Close::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& Close::reason() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.Close.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Close::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:longportapp.control.v1.Close.reason)
}
inline std::string* Close::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:longportapp.control.v1.Close.reason)
  return _s;
}
inline const std::string& Close::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void Close::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* Close::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reason_.Mutable( GetArenaForAllocation());
}
inline std::string* Close::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.control.v1.Close.reason)
  return _impl_.reason_.Release();
}
inline void Close::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.control.v1.Close.reason)
}

// -------------------------------------------------------------------

// Heartbeat

// int64 timestamp = 1 [json_name = "timestamp"];
inline void Heartbeat::clear_timestamp() {
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t Heartbeat::timestamp() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.Heartbeat.timestamp)
  return _internal_timestamp();
}
inline void Heartbeat::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:longportapp.control.v1.Heartbeat.timestamp)
}
inline ::int64_t Heartbeat::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void Heartbeat::_internal_set_timestamp(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// optional int32 heartbeat_id = 2 [json_name = "heartbeatId"];
inline bool Heartbeat::has_heartbeat_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Heartbeat::clear_heartbeat_id() {
  _impl_.heartbeat_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Heartbeat::heartbeat_id() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.Heartbeat.heartbeat_id)
  return _internal_heartbeat_id();
}
inline void Heartbeat::set_heartbeat_id(::int32_t value) {
  _internal_set_heartbeat_id(value);
  // @@protoc_insertion_point(field_set:longportapp.control.v1.Heartbeat.heartbeat_id)
}
inline ::int32_t Heartbeat::_internal_heartbeat_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.heartbeat_id_;
}
inline void Heartbeat::_internal_set_heartbeat_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.heartbeat_id_ = value;
}

// -------------------------------------------------------------------

// AuthRequest

// string token = 1 [json_name = "token"];
inline void AuthRequest::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& AuthRequest::token() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.AuthRequest.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthRequest::set_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:longportapp.control.v1.AuthRequest.token)
}
inline std::string* AuthRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:longportapp.control.v1.AuthRequest.token)
  return _s;
}
inline const std::string& AuthRequest::_internal_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.token_.Get();
}
inline void AuthRequest::_internal_set_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthRequest::_internal_mutable_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthRequest::release_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.control.v1.AuthRequest.token)
  return _impl_.token_.Release();
}
inline void AuthRequest::set_allocated_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.control.v1.AuthRequest.token)
}

// -------------------------------------------------------------------

// AuthResponse

// string session_id = 1 [json_name = "sessionId"];
inline void AuthResponse::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& AuthResponse::session_id() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.AuthResponse.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthResponse::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:longportapp.control.v1.AuthResponse.session_id)
}
inline std::string* AuthResponse::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:longportapp.control.v1.AuthResponse.session_id)
  return _s;
}
inline const std::string& AuthResponse::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_.Get();
}
inline void AuthResponse::_internal_set_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthResponse::_internal_mutable_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.session_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthResponse::release_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.control.v1.AuthResponse.session_id)
  return _impl_.session_id_.Release();
}
inline void AuthResponse::set_allocated_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.control.v1.AuthResponse.session_id)
}

// int64 expires = 2 [json_name = "expires"];
inline void AuthResponse::clear_expires() {
  _impl_.expires_ = ::int64_t{0};
}
inline ::int64_t AuthResponse::expires() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.AuthResponse.expires)
  return _internal_expires();
}
inline void AuthResponse::set_expires(::int64_t value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:longportapp.control.v1.AuthResponse.expires)
}
inline ::int64_t AuthResponse::_internal_expires() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expires_;
}
inline void AuthResponse::_internal_set_expires(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expires_ = value;
}

// uint32 limit = 3 [json_name = "limit"];
inline void AuthResponse::clear_limit() {
  _impl_.limit_ = 0u;
}
inline ::uint32_t AuthResponse::limit() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.AuthResponse.limit)
  return _internal_limit();
}
inline void AuthResponse::set_limit(::uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:longportapp.control.v1.AuthResponse.limit)
}
inline ::uint32_t AuthResponse::_internal_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.limit_;
}
inline void AuthResponse::_internal_set_limit(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.limit_ = value;
}

// uint32 online = 4 [json_name = "online"];
inline void AuthResponse::clear_online() {
  _impl_.online_ = 0u;
}
inline ::uint32_t AuthResponse::online() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.AuthResponse.online)
  return _internal_online();
}
inline void AuthResponse::set_online(::uint32_t value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:longportapp.control.v1.AuthResponse.online)
}
inline ::uint32_t AuthResponse::_internal_online() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.online_;
}
inline void AuthResponse::_internal_set_online(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.online_ = value;
}

// -------------------------------------------------------------------

// ReconnectRequest

// string session_id = 1 [json_name = "sessionId"];
inline void ReconnectRequest::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& ReconnectRequest::session_id() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.ReconnectRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReconnectRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:longportapp.control.v1.ReconnectRequest.session_id)
}
inline std::string* ReconnectRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:longportapp.control.v1.ReconnectRequest.session_id)
  return _s;
}
inline const std::string& ReconnectRequest::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_.Get();
}
inline void ReconnectRequest::_internal_set_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReconnectRequest::_internal_mutable_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.session_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ReconnectRequest::release_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.control.v1.ReconnectRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void ReconnectRequest::set_allocated_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.control.v1.ReconnectRequest.session_id)
}

// -------------------------------------------------------------------

// ReconnectResponse

// string session_id = 1 [json_name = "sessionId"];
inline void ReconnectResponse::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& ReconnectResponse::session_id() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.ReconnectResponse.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReconnectResponse::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:longportapp.control.v1.ReconnectResponse.session_id)
}
inline std::string* ReconnectResponse::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:longportapp.control.v1.ReconnectResponse.session_id)
  return _s;
}
inline const std::string& ReconnectResponse::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_.Get();
}
inline void ReconnectResponse::_internal_set_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReconnectResponse::_internal_mutable_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.session_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ReconnectResponse::release_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:longportapp.control.v1.ReconnectResponse.session_id)
  return _impl_.session_id_.Release();
}
inline void ReconnectResponse::set_allocated_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:longportapp.control.v1.ReconnectResponse.session_id)
}

// int64 expires = 2 [json_name = "expires"];
inline void ReconnectResponse::clear_expires() {
  _impl_.expires_ = ::int64_t{0};
}
inline ::int64_t ReconnectResponse::expires() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.ReconnectResponse.expires)
  return _internal_expires();
}
inline void ReconnectResponse::set_expires(::int64_t value) {
  _internal_set_expires(value);
  // @@protoc_insertion_point(field_set:longportapp.control.v1.ReconnectResponse.expires)
}
inline ::int64_t ReconnectResponse::_internal_expires() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.expires_;
}
inline void ReconnectResponse::_internal_set_expires(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.expires_ = value;
}

// uint32 limit = 3 [json_name = "limit"];
inline void ReconnectResponse::clear_limit() {
  _impl_.limit_ = 0u;
}
inline ::uint32_t ReconnectResponse::limit() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.ReconnectResponse.limit)
  return _internal_limit();
}
inline void ReconnectResponse::set_limit(::uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:longportapp.control.v1.ReconnectResponse.limit)
}
inline ::uint32_t ReconnectResponse::_internal_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.limit_;
}
inline void ReconnectResponse::_internal_set_limit(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.limit_ = value;
}

// uint32 online = 4 [json_name = "online"];
inline void ReconnectResponse::clear_online() {
  _impl_.online_ = 0u;
}
inline ::uint32_t ReconnectResponse::online() const {
  // @@protoc_insertion_point(field_get:longportapp.control.v1.ReconnectResponse.online)
  return _internal_online();
}
inline void ReconnectResponse::set_online(::uint32_t value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:longportapp.control.v1.ReconnectResponse.online)
}
inline ::uint32_t ReconnectResponse::_internal_online() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.online_;
}
inline void ReconnectResponse::_internal_set_online(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.online_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace control
}  // namespace longportapp


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::longportapp::control::v1::Close_Code> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::control::v1::Close_Code>() {
  return ::longportapp::control::v1::Close_Code_descriptor();
}
template <>
struct is_proto_enum<::longportapp::control::v1::Command> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::longportapp::control::v1::Command>() {
  return ::longportapp::control::v1::Command_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_control_2fcontrol_2eproto_2epb_2eh
