# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EmbedJobStatus(str, enum.Enum):
    """
    The status of the embed job
    """

    PROCESSING = "processing"
    COMPLETE = "complete"
    CANCELLING = "cancelling"
    CANCELLED = "cancelled"
    FAILED = "failed"

    def visit(
        self,
        processing: typing.Callable[[], T_Result],
        complete: typing.Callable[[], T_Result],
        cancelling: typing.Callable[[], T_Result],
        cancelled: typing.Callable[[], T_Result],
        failed: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EmbedJobStatus.PROCESSING:
            return processing()
        if self is EmbedJobStatus.COMPLETE:
            return complete()
        if self is EmbedJobStatus.CANCELLING:
            return cancelling()
        if self is EmbedJobStatus.CANCELLED:
            return cancelled()
        if self is EmbedJobStatus.FAILED:
            return failed()
