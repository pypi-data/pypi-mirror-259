svleg = g_legend(psv45+theme(legend.position = "bottom"))
# Tree - 4 tnodes
grid.arrange(arrangeGrob(phx41 + theme(legend.position = "none"),
phx45 + theme(legend.position = "none"),
nrow = 1, widths = c(1,1)),
phxleg4,
arrangeGrob(pk41 + theme(legend.position = "none"),
pk45 + theme(legend.position = "none"),
nrow = 1, widths = c(1,1)),
kernleg,
nrow = 4, heights=c(1,0.2,1,0.25))
grid.arrange(arrangeGrob(phx81 + theme(legend.position = "none"),
phx85 + theme(legend.position = "none"),
nrow = 1, widths = c(1,1)),
phxleg8,
arrangeGrob(pk81 + theme(legend.position = "none"),
pk85 + theme(legend.position = "none"),
nrow = 1, widths = c(1,1)),
kernleg,
nrow = 4, heights=c(1,0.2,1,0.25))
# Semivariograms
grid.arrange(arrangeGrob(psv41+theme(legend.position = "none"),
psv45+theme(legend.position = "none"),
psv81+theme(legend.position = "none"),
psv85+theme(legend.position = "none")),
svleg,
nrow = 2, heights = c(1,0.1))
vg = variogram.openbtmixing(xbnds,hgrid,10000,1,
k=param_grid[i,"k"],
0.95,
power = param_grid[i,"pwr"],
a1 = 25,#param_grid[i,"a1"],
a2 = 25,#param_grid[i,"a2"],
4,
type = 'b',
ymin = ymin,
ymax = ymax,
sigma2 = s2,
ncut = 200,
gam = NULL)
plot(vg$vmean)
param_grid[i,"k"]
vg = variogram.openbtmixing(xbnds,hgrid,10000,1,
k=1,#param_grid[i,"k"],
0.95,
power = param_grid[i,"pwr"],
a1 = 25,#param_grid[i,"a1"],
a2 = 25,#param_grid[i,"a2"],
4,
type = 'b',
ymin = ymin,
ymax = ymax,
sigma2 = s2,
ncut = 200,
gam = NULL)
plot(vg$vmean)
vg = variogram.openbtmixing(xbnds,hgrid,10000,1,
k=1,#param_grid[i,"k"],
0.95,
power = param_grid[i,"pwr"],
a1 = 25,#param_grid[i,"a1"],
a2 = 2,#param_grid[i,"a2"],
4,
type = 'b',
ymin = ymin,
ymax = ymax,
sigma2 = s2,
ncut = 200,
gam = NULL)
plot(vg$vmean)
#------------------------------------------------
# 2D Cov
#------------------------------------------------
filedir = "/home/johnyannotty/Documents/Dissertation/results/rpath_bart/variogram_ex1_1d/cov/"
rcp3 = readRDS(paste0(filedir,"rpc_list3_02_21_24.rds"))
rcp4 = readRDS(paste0(filedir,"rpc_list4_02_21_24.rds"))
#------------------------------------------------
# 2D Cov
#------------------------------------------------
filedir = "/home/johnyannotty/Documents/Dissertation/results/rpath_bart/variogram_exs1_1d/cov/"
rcp3 = readRDS(paste0(filedir,"rpc_list3_02_21_24.rds"))
rcp4 = readRDS(paste0(filedir,"rpc_list4_02_21_24.rds"))
paste0(filedir,"rpc_list3_02_21_24.rds")
#------------------------------------------------
# 2D Cov
#------------------------------------------------
filedir = "/home/johnyannotty/Documents/Dissertation/results/rpath_bart/variogram_exs_1d/cov/"
rcp3 = readRDS(paste0(filedir,"rpc_list3_02_21_24.rds"))
rcp4 = readRDS(paste0(filedir,"rpc_list4_02_21_24.rds"))
2/27
xcuts = create_cuts(xmin,xmax,100)
# Sampler
m = 1000
tau_1tree = 1
m = 1000
tau_1tree = 1
alpha = 0.95; beta = 1.25
gam_mean = round(a1/(a1+a2),4)
#------------------------------------------------
# 2D Covariance Kernel
#------------------------------------------------
# Get cutpoints
xcuts = create_cuts(xmin,xmax,100)
m = 1000
tau_1tree = 1
alpha = 0.95; beta = 1.25
phix_list = list()
rpc_list = list()
m_list = c(1,2,5,10,20,50,75,100,200,500,1000)
igrid = expand.grid(1:n_train,1:n_train)
rpc = rep(0,length(igrid))
ind = 1
# Generate beta
a1 = 2; a2 = 25
gam_list = rbeta(m,a1,a2)
xmin
tree = generate_tree(alpha,beta,xcuts,xmin,xmax)
tree
x_train
15*15
runif(n_train)
seq(xmin[1]+0.05,xmax[1]-0.05,length = n_train)
deltax1 = seq(xmin[1]+0.05,xmax[1]-0.05,length = n_train)
deltax1 = diff(seq(xmin[1]+0.05,xmax[1]-0.05,length = n_train))
deltax1
deltax1 = diff(seq(xmin[1]+0.05,xmax[1]-0.05,length = n_train))[1]
deltax1
deltax1 = cumsum(diff(seq(xmin[1]+0.05,xmax[1]-0.05,length = n_train)))
deltax1
deltax1
deltax1 = c(0,deltax1)
x1_train = seq(xmin[1]+0.05,xmax[1]-0.05,length = n_train)
x2_train = seq(xmin[2]+0.05,xmax[2]-0.05,length = n_train)
deltax1 = x1_train[2]-x1_train[1]
deltax1
x1_train = seq(xmin[1]+0.05,xmax[1]-0.05,length = n_train)
x2_train = seq(xmin[2]+0.05,xmax[2]-0.05,length = n_train)
x_train = cbind(x1_train, x2_train)
hgrid = seq(0.02, 4, length = 150)
param_grid = expand.grid(k = c(1,1.5,2), a1 = c(2,5,10), a2 = c(5,10,25), pwr = c(0.5,1.0,2))
#------------------------------------------------
# 2D Covariance Kernel
#------------------------------------------------
# Get cutpoints
xcuts = create_cuts(xmin,xmax,100)
# Sampler
m = 1000
xcuts
m = 1000
tau_1tree = 1
alpha = 0.95; beta = 1.25
phix_list = list()
rpc_list = list()
m_list = c(1,2,5,10,20,50,75,100,200,500,1000)
igrid = expand.grid(1:n_train,1:n_train)
rpc = rep(0,length(igrid))
ind = 1
# Generate beta
a1 = 2; a2 = 25
gam_list = rbeta(m,a1,a2)
# Generate trees
tree_list = list()
for(k in 1:m){
tree = generate_tree(alpha,beta,xcuts,xmin,xmax)
tree_list[[k]] = tree
}
# Compute phix and cov matrix
for(k in 1:m){
# Sample the tree
tree = tree_list[[k]]
# Get bots
bnv = getbots(tree)
# Get path to root for each bn in bnv
paths = list()
for(i in 1:length(bnv)){
paths[[i]] = pathtoroot(tree, bnv[i])
}
# Get lower and upper bounds
xl = c(xmin); xu = c(xmax)
bnds = list()
for(i in 1:length(bnv)){
bnds[[i]] = get_bounds(tree,paths[[i]],xl,xu)
}
# Get bottom nodes per x and map nid to bn number
bart_tnode = c()
for(i in 1:length(x_train)){
b = get_xtnode(tree,x_train[i])
bart_tnode[i] = which(bnv == b)
}
# Sample phix
phix = matrix(0,nrow = n_train, ncol = length(bnv))
# Sample gamma
#gam = rbeta(1,a1,a2)
gam = gam_list[k]
for(i in 1:length(x_train)){
for(b in 1:length(bnv)){
phix[i,b] = rpath_phix(tree, paths[[b]], x_train[i],
bnds[[b]]$lbvec, bnds[[b]]$ubvec, gam=gam, q = 4)
}
}
rpc = rpc + apply(igrid,1,function(x) rpath_cov(phix[x[1],],phix[x[2],],tau_1tree^2))/m
#tree_list[[k]] = get_cuts(tree)
#phix_list[[k]] = phix
if(k == m_list[ind]){
rpc_list[[ind]] = matrix(rpc*m/k,nrow = n_train, ncol = n_train,byrow = FALSE)
diag(rpc_list[[ind]]) = tau_1tree^2
ind = ind + 1
}
cat("Tree: ",k,"\r")
}
phix[i,b] = rpath_phix(tree, paths[[b]], x_train[i,],
bnds[[b]]$lbvec, bnds[[b]]$ubvec, gam=gam, q = 4)
i
i = 1
phix[i,b] = rpath_phix(tree, paths[[b]], x_train[i,],
bnds[[b]]$lbvec, bnds[[b]]$ubvec, gam=gam, q = 4)
phix_list = list()
rpc_list = list()
# Clear results
phix_list = list()
rpc_list = list()
# Compute phix and cov matrix
for(k in 1:m){
# Sample the tree
tree = tree_list[[k]]
# Get bots
bnv = getbots(tree)
# Get path to root for each bn in bnv
paths = list()
for(i in 1:length(bnv)){
paths[[i]] = pathtoroot(tree, bnv[i])
}
# Get lower and upper bounds
xl = c(xmin); xu = c(xmax)
bnds = list()
for(i in 1:length(bnv)){
bnds[[i]] = get_bounds(tree,paths[[i]],xl,xu)
}
# Get bottom nodes per x and map nid to bn number
bart_tnode = c()
for(i in 1:length(x_train)){
b = get_xtnode(tree,x_train[i])
bart_tnode[i] = which(bnv == b)
}
# Sample phix
phix = matrix(0,nrow = n_train, ncol = length(bnv))
# Sample gamma
#gam = rbeta(1,a1,a2)
gam = gam_list[k]
for(i in 1:nrow(x_train)){
for(b in 1:length(bnv)){
phix[i,b] = rpath_phix(tree, paths[[b]], x_train[i,],
bnds[[b]]$lbvec, bnds[[b]]$ubvec, gam=gam, q = 4)
}
}
rpc = rpc + apply(igrid,1,function(x) rpath_cov(phix[x[1],],phix[x[2],],tau_1tree^2))/m
#tree_list[[k]] = get_cuts(tree)
#phix_list[[k]] = phix
if(k == m_list[ind]){
rpc_list[[ind]] = matrix(rpc*m/k,nrow = n_train, ncol = n_train,byrow = FALSE)
diag(rpc_list[[ind]]) = tau_1tree^2
ind = ind + 1
}
cat("Tree: ",k,"\r")
}
pc1 = plot_kernel_viridis(rpc_list[[10]], vopt = "inferno",k_lim = c(-0.01,0.5,1.01))
pc1
phix_list
gam_list
filedir = "/home/johnyannotty/Documents/Dissertation/results/rpath_bart/variogram_sim/"
out = list(tree_list = tree_list, gam_list = gam_list, phix_list = phix_list,
rpc_list = rpc_list,alpha = alpha, beta = beta,a1 = a1, a2 = a2,
x = x_train, xmin = xmin, xmax = xmax, mlist = m_list)
saveRDS(out, paste0(filedir,"rpc_2_25_2d.rds"))
# Generate beta
a1 = 10; a2 = 10
gam_list = rbeta(m,a1,a2)
rpc_list = list()
# Compute phix and cov matrix
for(k in 1:m){
# Sample the tree
tree = tree_list[[k]]
# Get bots
bnv = getbots(tree)
# Get path to root for each bn in bnv
paths = list()
for(i in 1:length(bnv)){
paths[[i]] = pathtoroot(tree, bnv[i])
}
# Get lower and upper bounds
xl = c(xmin); xu = c(xmax)
bnds = list()
for(i in 1:length(bnv)){
bnds[[i]] = get_bounds(tree,paths[[i]],xl,xu)
}
# Get bottom nodes per x and map nid to bn number
bart_tnode = c()
for(i in 1:length(x_train)){
b = get_xtnode(tree,x_train[i])
bart_tnode[i] = which(bnv == b)
}
# Sample phix
phix = matrix(0,nrow = n_train, ncol = length(bnv))
# Sample gamma
#gam = rbeta(1,a1,a2)
gam = gam_list[k]
for(i in 1:nrow(x_train)){
for(b in 1:length(bnv)){
phix[i,b] = rpath_phix(tree, paths[[b]], x_train[i,],
bnds[[b]]$lbvec, bnds[[b]]$ubvec, gam=gam, q = 4)
}
}
rpc = rpc + apply(igrid,1,function(x) rpath_cov(phix[x[1],],phix[x[2],],tau_1tree^2))/m
#tree_list[[k]] = get_cuts(tree)
#phix_list[[k]] = phix
if(k == m_list[ind]){
rpc_list[[ind]] = matrix(rpc*m/k,nrow = n_train, ncol = n_train,byrow = FALSE)
diag(rpc_list[[ind]]) = tau_1tree^2
ind = ind + 1
}
cat("Tree: ",k,"\r")
}
# Clear results
phix_list = list()
rpc_list = list()
rpc = rep(0,length(igrid))
ind = 1
# Compute phix and cov matrix
for(k in 1:m){
# Sample the tree
tree = tree_list[[k]]
# Get bots
bnv = getbots(tree)
# Get path to root for each bn in bnv
paths = list()
for(i in 1:length(bnv)){
paths[[i]] = pathtoroot(tree, bnv[i])
}
# Get lower and upper bounds
xl = c(xmin); xu = c(xmax)
bnds = list()
for(i in 1:length(bnv)){
bnds[[i]] = get_bounds(tree,paths[[i]],xl,xu)
}
# Get bottom nodes per x and map nid to bn number
bart_tnode = c()
for(i in 1:length(x_train)){
b = get_xtnode(tree,x_train[i])
bart_tnode[i] = which(bnv == b)
}
# Sample phix
phix = matrix(0,nrow = n_train, ncol = length(bnv))
# Sample gamma
#gam = rbeta(1,a1,a2)
gam = gam_list[k]
for(i in 1:nrow(x_train)){
for(b in 1:length(bnv)){
phix[i,b] = rpath_phix(tree, paths[[b]], x_train[i,],
bnds[[b]]$lbvec, bnds[[b]]$ubvec, gam=gam, q = 4)
}
}
rpc = rpc + apply(igrid,1,function(x) rpath_cov(phix[x[1],],phix[x[2],],tau_1tree^2))/m
#tree_list[[k]] = get_cuts(tree)
#phix_list[[k]] = phix
if(k == m_list[ind]){
rpc_list[[ind]] = matrix(rpc*m/k,nrow = n_train, ncol = n_train,byrow = FALSE)
diag(rpc_list[[ind]]) = tau_1tree^2
ind = ind + 1
}
cat("Tree: ",k,"\r")
}
pc1 = plot_kernel_viridis(rpc_list[[10]], vopt = "inferno",k_lim = c(-0.01,0.5,1.01))
pc1
filedir = "/home/johnyannotty/Documents/Dissertation/results/rpath_bart/variogram_sim/"
out = list(tree_list = tree_list, gam_list = gam_list, phix_list = phix_list,
rpc_list = rpc_list,alpha = alpha, beta = beta,a1 = a1, a2 = a2,
x = x_train, xmin = xmin, xmax = xmax, mlist = m_list)
saveRDS(out, paste0(filedir,"rpc_10_10_2d.rds"))
# Generate beta
a1 = 10; a2 = 5
gam_list = rbeta(m,a1,a2)
rpc_list = list()
# Clear results
phix_list = list()
rpc_list = list()
rpc = rep(0,length(igrid))
ind = 1
# Compute phix and cov matrix
for(k in 1:m){
# Sample the tree
tree = tree_list[[k]]
# Get bots
bnv = getbots(tree)
# Get path to root for each bn in bnv
paths = list()
for(i in 1:length(bnv)){
paths[[i]] = pathtoroot(tree, bnv[i])
}
# Get lower and upper bounds
xl = c(xmin); xu = c(xmax)
bnds = list()
for(i in 1:length(bnv)){
bnds[[i]] = get_bounds(tree,paths[[i]],xl,xu)
}
# Get bottom nodes per x and map nid to bn number
bart_tnode = c()
for(i in 1:length(x_train)){
b = get_xtnode(tree,x_train[i])
bart_tnode[i] = which(bnv == b)
}
# Sample phix
phix = matrix(0,nrow = n_train, ncol = length(bnv))
# Sample gamma
#gam = rbeta(1,a1,a2)
gam = gam_list[k]
for(i in 1:nrow(x_train)){
for(b in 1:length(bnv)){
phix[i,b] = rpath_phix(tree, paths[[b]], x_train[i,],
bnds[[b]]$lbvec, bnds[[b]]$ubvec, gam=gam, q = 4)
}
}
rpc = rpc + apply(igrid,1,function(x) rpath_cov(phix[x[1],],phix[x[2],],tau_1tree^2))/m
#tree_list[[k]] = get_cuts(tree)
#phix_list[[k]] = phix
if(k == m_list[ind]){
rpc_list[[ind]] = matrix(rpc*m/k,nrow = n_train, ncol = n_train,byrow = FALSE)
diag(rpc_list[[ind]]) = tau_1tree^2
ind = ind + 1
}
cat("Tree: ",k,"\r")
}
pc1 = plot_kernel_viridis(rpc_list[[10]], vopt = "inferno",k_lim = c(-0.01,0.5,1.01))
pc1
filedir = "/home/johnyannotty/Documents/Dissertation/results/rpath_bart/variogram_sim/"
out = list(tree_list = tree_list, gam_list = gam_list, phix_list = phix_list,
rpc_list = rpc_list,alpha = alpha, beta = beta,a1 = a1, a2 = a2,
x = x_train, xmin = xmin, xmax = xmax, mlist = m_list)
saveRDS(out, paste0(filedir,"rpc_10_5_2d.rds"))
#------------------------------------------------
# 2D Cov
#------------------------------------------------
filedir = "/home/johnyannotty/Documents/Dissertation/results/rpath_bart/variogram_sim/"
rpc1 = readRDS(paste0(filedir,"rpc_10_5_2d.rds"))
rpc1 = readRDS(paste0(filedir,"rpc_2_25_2d.rds"))
rpc2 = readRDS(paste0(filedir,"rpc_10_10_2d.rds"))
# Plot the kernel
pk1 = plot_kernel_viridis(csvg41$rpc_kernel, vopt = "inferno",
title = TeX("$\\alpha_1 = 2, \\alpha_1 = 25$")) +
theme(legend.key.height = unit(1.5,"cm"))
pk5 = plot_kernel_viridis(csvg45$rpc_kernel, vopt = "inferno",
title = TeX("$\\alpha_1 = 25, \\alpha_1 = 25$")) +
theme(legend.key.height = unit(1.5,"cm") )
pk5
# Plot the kernel
pk1 = plot_kernel_viridis(rpc1$rpc_list[[11]], vopt = "inferno",
title = TeX("$\\alpha_1 = 2, \\alpha_1 = 25$")) +
theme(legend.key.height = unit(1.5,"cm"))
pk1
pk2 = plot_kernel_viridis(rpc2$rpc_list[[11]], vopt = "inferno",
title = TeX("$\\alpha_1 = 25, \\alpha_1 = 25$")) +
theme(legend.key.height = unit(1.5,"cm") )
grid.arrange(arrangeGrob(pk41 + theme(legend.position = "none"),
pk45 + theme(legend.position = "none"),
nrow = 1, widths = c(1,1)),
kernleg,
nrow = 2, heights=c(1,0.25))
grid.arrange(arrangeGrob(pk41 + theme(legend.position = "none"),
pk45 + theme(legend.position = "none"),
nrow = 1, widths = c(1,1)),
kernleg,
nrow = 2, heights=c(1,0.20))
grid.arrange(arrangeGrob(pk1 + theme(legend.position = "none"),
pk2 + theme(legend.position = "none"),
nrow = 1, widths = c(1,1)),
kernleg,
nrow = 2, heights=c(1,0.20))
rpc2 = readRDS(paste0(filedir,"rpc_10_5_2d.rds"))
rpc3 = readRDS(paste0(filedir,"rpc_10_5_2d.rds"))
rpc2 = readRDS(paste0(filedir,"rpc_10_10_2d.rds"))
pk3 = plot_kernel_viridis(rpc3$rpc_list[[11]], vopt = "inferno",
title = TeX("$\\alpha_1 = 10, \\alpha_1 = 5$")) +
theme(legend.key.height = unit(1.5,"cm") )
grid.arrange(arrangeGrob(pk1 + theme(legend.position = "none"),
pk2 + theme(legend.position = "none"),
pk3 + theme(legend.position = "none"),
nrow = 1, widths = c(1,1,1)),
kernleg,
nrow = 2, heights=c(1,0.20))
grid.arrange(arrangeGrob(pk1 + theme(legend.position = "none"),
pk2 + theme(legend.position = "none"),
#pk3 + theme(legend.position = "none"),
nrow = 1),
kernleg,
nrow = 2, heights=c(1,0.20))
# Plot the kernel
pk1 = plot_kernel_viridis(rpc1$rpc_list[[11]], vopt = "inferno",
title = TeX("$\\alpha_1 = 2, \\alpha_2 = 25$")) +
theme(legend.key.height = unit(1.5,"cm"))
pk2 = plot_kernel_viridis(rpc2$rpc_list[[11]], vopt = "inferno",
title = TeX("$\\alpha_1 = 10, \\alpha_2 = 10$")) +
theme(legend.key.height = unit(1.5,"cm") )
pk3 = plot_kernel_viridis(rpc3$rpc_list[[11]], vopt = "inferno",
title = TeX("$\\alpha_1 = 10, \\alpha_2 = 5$")) +
theme(legend.key.height = unit(1.5,"cm") )
grid.arrange(arrangeGrob(pk1 + theme(legend.position = "none"),
pk2 + theme(legend.position = "none"),
#pk3 + theme(legend.position = "none"),
nrow = 1),
kernleg,
nrow = 2, heights=c(1,0.20))
variogram.openbtmixing
args(variogram.openbtmixing)
