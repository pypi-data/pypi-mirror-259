#!/usr/bin/env python3

__description__ = 'Tool to find CVEs and Exploits.'
__author__ = 'msd0pe'
__version__ = '2.5.1'
__date__ = '2024/01/13'

"""
CHANGELOG:
    2024/01/13 : V2.5.1 - Searching exploits on Github (get option).
    2024/01/04 : V2.5.0 - Switching to cmd lib & removing shodan option.
    2023/01/22 : V2.4.3 - Fixing Bugs. Removing detect and remote options.
    2022/07/25 : V2.4.2 - Code optimizations.
    2021/09/20 : V2.4.1 - CVE-MAKER is now working on ArchLinux + VI editor available.
    2021/09/14 : V2.4.0 - Optimizing the code + adding last criticals CVE option + adding the shodan option.
    2020/08/02 : V2.3.0 - Optimizing the code + download an exploit without execution is now possible.
    2020/02/22 : V2.2.0 - Customize your exploit + fix bug.
	2019/12/30 : V2.1.0 - Sending a remote exploit is now automated + auto detecting the compilation / usage options.
	2019/09/14 : V2.0.0 - Remote exploitation is now possible.
	2019/08/03 : V1.3.2 - Upgrading to Python 3.7, optimizing Detect option & detecting payloads languages.
	2019/07/05 : V1.3.1 - Optimization of the Search and Detect options.
	2019/06/28 : V1.3.0 - Adding the Searching option.
	2019/06/28 : V1.2.0 - Adding the EDB Check option.
	2019/06/25 : V1.1.0 - Adding the Detection option.
	2019/06/23 : V1.0.0 - Project Start.
"""

import re
import os
import cmd
import json
import random
import tarfile
import datetime
import requests
import colorama
from pwn import *
from pathlib import Path
from prettytable import PrettyTable

home = str(Path.home())
ua = open(str(Path( __file__ ).absolute()).replace("cve-maker.py","headers.txt")).read().splitlines()
header = {"User-Agent": random.choice(ua), "X-Requested-With": "XMLHttpRequest"}

class cvemaker(cmd.Cmd):

    def do_update(self,arg):
        'Update exploits database. Usage: update'
        print()
        update_exploits_log = log.progress("Updating exploits database metadatas")
        try:
            gitlab_url = requests.get("https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv", headers = header)
            with open(f"{home}/.local/share/cve-maker/files_exploits.csv", 'w') as outfile:
                outfile.write(gitlab_url.text)
                update_exploits_log.success(colorama.Fore.GREEN + "✓" + colorama.Style.RESET_ALL + " now up to date ! - " + str(datetime.datetime.fromtimestamp(os.path.getmtime(f"{home}/.local/share/cve-maker/files_exploits.csv"))))
        except Exception as e:
            update_exploits_log.failure(e)

        update_exploits_log = log.progress("Updating exploits database")
        try:
            ## Dirty curl because requests is very slow...
            os.system(f"curl -s \"https://gitlab.com/exploit-database/exploitdb/-/archive/main/exploitdb-main.tar.gz?path=exploits\" -o {home}/.local/share/cve-maker/exploitdb-main.tar.gz")
            update_exploits_log.success(colorama.Fore.GREEN + "✓" + colorama.Style.RESET_ALL + " now up to date ! - " + str(datetime.datetime.fromtimestamp(os.path.getmtime(f"{home}/.local/share/cve-maker/exploitdb-main.tar.gz"))))
            extract_log = log.progress("Extracting new exploits")
            try:
                tar_file = tarfile.open(f"{home}/.local/share/cve-maker/exploitdb-main.tar.gz")
                tar_file.extractall(f"{home}/.local/share/cve-maker/")
                tar_file.close()
                extract_log.success(colorama.Fore.GREEN + "✓" + colorama.Style.RESET_ALL)
                print()
            except Exception as e:
                update_exploits_log.failure(e)
                print()
        except Exception as e:
            update_exploits_log.failure(e)
            print()

    v1 = Path(f"{home}/.local/share/cve-maker")
    if Path.exists(v1):
        pass
    else:
        try:
            v1.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            print(e)

    v2 = Path(f"{home}/.local/share/cve-maker/exploitdb-main.tar.gz")
    if Path.exists(v2):
        pass
    else:
        do_update("","update")

    colors = list(vars(colorama.Fore).values())
    prompt = random.choice(colors) + 'cve-maker \> ' + colorama.Style.RESET_ALL

    def do_critical(self,arg):
        'Get latest critical CVEs. Usage: critical'
        print()
        critical_log = log.progress("Looking for the latest critical CVEs")
        try:
            critical_url = requests.get("https://www.opencve.io/cve?cvss=critical&search=", headers = header)
            criticals = re.findall("<strong>(CVE-.*?)<\/strong>.*?(?:\n.*?)+(?:vendor=(.*?)&product=(.*?)'.*\n.*(\d{4}-\d{2}-\d{2})|(\d{4}-\d{2}-\d{2})).*?(?:\n.*?(\d?\d.\d).*?|\n.*?)+<tr class=\"cve-summary\">\n.*colspan=\"5\">(.*)", critical_url.text)
            critical_log.success(colorama.Fore.GREEN  + "✓" + colorama.Style.RESET_ALL)
            x = PrettyTable()
            x.field_names = ["CVE", "CVSS", "Vendor", "Product", "Description", "Update"]
            for i in range(len(criticals)):
                x.add_row([criticals[i][0], colorama.Fore.RED + criticals[i][5] + colorama.Style.RESET_ALL, criticals[i][1].upper()[:20], criticals[i][2][:20], criticals[i][6][:100], criticals[i][3]])
            print()
            print(x)
            print()
        except Exception as e:
            critical_log.failure(e)

    def do_search(self,arg):
        'Search for CVEs/Exploits. Usage: search <strings>'
        print()
        search_cve_log = log.progress("Looking for the latest " + arg + " CVEs")
        try:
            search_url = requests.get("https://www.opencve.io/cve?search=" + arg, headers = header)
            searchs = re.findall("<strong>(CVE-.*?)<\/strong>.*?(?:\n.*?)+(?:vendor=(.*?)&product=(.*?)'.*\n.*(\d{4}-\d{2}-\d{2})|(\d{4}-\d{2}-\d{2})).*?(?:\n.*?(\d?\d.\d).*?|\n.*?)+<tr class=\"cve-summary\">\n.*colspan=\"5\">(.*)", search_url.text, re.IGNORECASE)
            x = PrettyTable()
            x.field_names = ["CVE", "CVSS", "Vendor", "Product", "Description", "Update"]
            for i in range(len(searchs)):
                if searchs[i][1] == "":
                    date = searchs[i][4]
                else:
                    date = searchs[i][3]
                if searchs[i][5] == "":
                    score = colorama.Fore.WHITE + "N/A" + colorama.Style.RESET_ALL
                else:
                    if float(searchs[i][5]) > 8.9:
                        score = colorama.Fore.RED + searchs[i][5] + colorama.Style.RESET_ALL
                    elif float(searchs[i][5]) > 6.9:
                        score = colorama.Fore.YELLOW + searchs[i][5] + colorama.Style.RESET_ALL
                    elif float(searchs[i][5]) > 3.9:
                        score = colorama.Fore.BLUE + searchs[i][5] + colorama.Style.RESET_ALL
                    else:
                        score = colorama.Fore.GREEN + searchs[i][5] + colorama.Style.RESET_ALL
                x.add_row([searchs[i][0], colorama.Fore.RED + score + colorama.Style.RESET_ALL, searchs[i][1].upper()[:20], searchs[i][2][:20], searchs[i][6][:100], date])
            search_cve_log.success(colorama.Fore.GREEN  + "✓" + colorama.Style.RESET_ALL)
            print()
            print(x)
            print()
        except Exception as e:
            search_cve_log.failure(e)

        search_exploit_log = log.progress("Looking ExploitDB exploits for " + arg)
        try:
            x = PrettyTable()
            x.field_names = ["EDB", "language", "Description", "Author", "Release Date", "Update"]
            exploits_match = []
            with open(f"{home}/.local/share/cve-maker/files_exploits.csv", "r") as infile:
                for line in infile.readlines():
                    if arg.casefold() in line.casefold():
                        exploits_match.append(line)

                for exploit in exploits_match:
                    exploit = exploit.split(",")
                    exploit_id = exploit[0]
                    exploit_path = exploit[1]
                    exploit_summ = exploit[2]
                    exploit_rel_date = exploit[3]
                    exploit_author = exploit[4]
                    exploit_update = exploit[9]
                    if exploit_path[-4:] == ".cpp":
                        lang = colorama.Fore.CYAN + "c++" + colorama.Style.RESET_ALL
                    elif exploit_path[-2:] == ".c":
                        lang = colorama.Fore.CYAN + "c" + colorama.Style.RESET_ALL
                    elif exploit_path[-3:] == ".sh":
                        lang = colorama.Fore.GREEN + "sh" + colorama.Style.RESET_ALL
                    elif exploit_path[-3:] == ".rb":
                        lang = colorama.Fore.RED + "ruby" + colorama.Style.RESET_ALL
                    elif exploit_path[-3:] == ".pl":
                        lang = colorama.Fore.MAGENTA + "perl" + colorama.Style.RESET_ALL
                    elif exploit_path[-3:] == ".py":
                        lang = colorama.Fore.YELLOW + "python" + colorama.Style.RESET_ALL
                    elif exploit_path[-4:] == ".php":
                        lang = colorama.Fore.BLUE + "php" + colorama.Style.RESET_ALL
                    elif exploit_path[-4:] == ".txt":
                        lang = colorama.Fore.WHITE + "text" + colorama.Style.RESET_ALL
                    elif exploit_path[-4:] == ".jsp":
                        lang = colorama.Fore.BLACK + "jsp" + colorama.Style.RESET_ALL

                    x.add_row(["EDB-" + exploit_id, lang, exploit_summ[:100].strip('"'), exploit_author.strip('"'), exploit_rel_date, exploit_update])

            search_exploit_log.success(colorama.Fore.GREEN  + "✓" + colorama.Style.RESET_ALL)
            print()
            print(x)
            print()
        except Exception as e:
            search_exploit_log.failure(e)

    def do_get(self,arg):
        'Download an exploit from CVE-ID/EDB-ID. Usage: get <CVE-ID> or get <EDB-ID>'
        print()
        arg = arg.upper()
        if arg[:4] == "CVE-":
            get_cve_log = log.progress("Retrieving " + arg + " informations")
            print()
            try:
                search_url = requests.get(f"https://www.opencve.io/cve/{arg}", headers = header)
                search_summ = re.findall("<div class=\"box-body\">.*\n.*<span class=\"dropcap\">(.*?)\n.*<\/div>", search_url.text)
                print(colorama.Fore.RED + arg + colorama.Style.RESET_ALL + " " + search_summ[0].replace('</span>',''))
                get_cve_log.success(colorama.Fore.GREEN  + "✓" + colorama.Style.RESET_ALL)
                print()
            except Exception as e:
                get_cve_log.failure("CVE not found.")
            get_exploit_log = log.progress(f"Searching ExploitDB exploits for {arg}")
            print()
            try:
                cve = arg.strip("CVE-")
                cve_url = requests.get(f"https://www.exploit-db.com/search?cve={cve}", headers=header).json()
                cve_infos = json.dumps(cve_url, sort_keys=False, indent=4)
                cve_infos = json.loads(cve_infos)
                cve_infos = cve_infos['data']
                if cve_infos == []:
                    get_exploit_log.failure("No payloads available yet for this CVE on ExploitDB.")
                else:
                    for i in range(len(cve_infos)):
                        cve_infos_edb = cve_infos[i]['id']
                        cve_infos_summ = cve_infos[i]['description'][1]
                        with open(f"{home}/.local/share/cve-maker/files_exploits.csv", "r") as infile:
                            for line in infile.readlines():
                                if cve_infos_edb == line.split(',')[0]:
                                    exploit = line.split(",")
                                    exploit_id = exploit[0]
                                    exploit_path = exploit[1]
                                    exploit_summ = exploit[2]
                                    exploit_rel_date = exploit[3]
                                    exploit_author = exploit[4]
                                    exploit_update = exploit[9]
                                    if exploit_path[-4:] == ".cpp":
                                        exploit_lang = colorama.Fore.CYAN + "c++" + colorama.Style.RESET_ALL
                                    elif exploit_path[-2:] == ".c":
                                        exploit_lang = colorama.Fore.CYAN + "c" + colorama.Style.RESET_ALL
                                    elif exploit_path[-3:] == ".sh":
                                        exploit_lang = colorama.Fore.GREEN + "sh" + colorama.Style.RESET_ALL
                                    elif exploit_path[-3:] == ".rb":
                                        exploit_lang = colorama.Fore.RED + "ruby" + colorama.Style.RESET_ALL
                                    elif exploit_path[-3:] == ".pl":
                                        exploit_lang = colorama.Fore.MAGENTA + "perl" + colorama.Style.RESET_ALL
                                    elif exploit_path[-3:] == ".py":
                                        exploit_lang = colorama.Fore.YELLOW + "python" + colorama.Style.RESET_ALL
                                    elif exploit_path[-4:] == ".php":
                                        exploit_lang = colorama.Fore.BLUE + "php" + colorama.Style.RESET_ALL
                                    elif exploit_path[-4:] == ".txt":
                                        exploit_lang = colorama.Fore.WHITE + "text" + colorama.Style.RESET_ALL
                                    elif exploit_path[-4:] == ".jsp":
                                        exploit_lang = colorama.Fore.BLACK + "jsp" + colorama.Style.RESET_ALL
                                    print(f"\t - Exploit EDB-ID: {cve_infos_edb}")
                                    print(f"\t - Exploit name: {cve_infos_summ}")
                                    print(f"\t - Exploit language: {exploit_lang}")
                                    print(f"\t - Exploit author: " + exploit_author.strip('"'))
                                    print(f"\t - Exploit release date: {exploit_rel_date}")
                                    print(f"\t - Exploit last update: {exploit_update}")
                                    print(f"\t - Exploit path: {home}/.local/share/cve-maker/exploitdb-main-exploits/{exploit_path}")
                                    if exploit_lang == colorama.Fore.CYAN + "c" + colorama.Style.RESET_ALL or exploit_lang == colorama.Fore.CYAN + "c++" + colorama.Style.RESET_ALL:
                                        try:
                                            with open(f"{home}/.local/share/cve-maker/exploitdb-main-exploits/{exploit_path}", "r") as payload:
                                                payload = payload.read()
                                                compilation = re.search(r"((gcc|g\+\+) .*?)(\\r\\n|\\n)", payload).group(1)
                                                if compilation != '':
                                                    compilation = re.sub(' \S*\.cpp', f" {home}/.local/share/cve-maker/exploitdb-main-exploits/{exploit_path}", compilation).strip("\"")
                                                    compilation = re.sub(' \S*\.c', f" {home}/.local/share/cve-maker/exploitdb-main-exploits/{exploit_path}", compilation).strip("\"")
                                                    compilation = re.sub('-o \S*', f'-o /tmp/' + exploit_path.split('/')[-1].split(".")[0], compilation).strip("\"")
                                                    print(f"\t - Exploit compilation command: {compilation}")
                                        except:
                                             compilation = f"gcc {home}/.local/share/cve-maker/exploitdb-main-exploits/{exploit_path} -o /tmp/" + exploit_path.split('/')[-1].split(".")[0]
                                             print(f"\t - Exploit compilation command not detected, default command: {compilation}")
                                    print()
                    get_exploit_log.success(colorama.Fore.GREEN  + "✓" + colorama.Style.RESET_ALL)

            except Exception as e:
                get_exploit_log.failure(e)

            get_exploit_log = log.progress(f"Searching Github exploits for {arg}")
            print()
            try:
                cve = arg
                github_url = requests.get(f"https://github.com/search?q={cve}&type=repositories", headers = header)
                github_exploits = re.findall("(\[{.*?}\])", github_url.text)[0]
                github_exploits = json.loads(github_exploits)
                x = PrettyTable()
                x.field_names = ["CVE", "Repository", "Language", "Updated", "Stars", "Clone"]
                for exploit in github_exploits:
                    exploit_repo = exploit['hl_name'].replace("<em>","").replace("</em>","")
                    exploit_lang = exploit['language']
                    exploit_stars = exploit['followers']
                    exploit_update = exploit['repo']['repository']['updated_at'][:10]
                    exploit_clone = "git clone https://github.com/" + exploit_repo
                    if exploit_lang == "C++":
                        exploit_lang = colorama.Fore.CYAN + "c++" + colorama.Style.RESET_ALL
                    elif exploit_lang == "C":
                        exploit_lang = colorama.Fore.CYAN + "c" + colorama.Style.RESET_ALL
                    elif exploit_lang == "Shell":
                        exploit_lang = colorama.Fore.GREEN + "sh" + colorama.Style.RESET_ALL
                    elif exploit_lang == "Ruby":
                        exploit_lang = colorama.Fore.RED + "ruby" + colorama.Style.RESET_ALL
                    elif exploit_lang == "Perl":
                        exploit_lang = colorama.Fore.MAGENTA + "perl" + colorama.Style.RESET_ALL
                    elif exploit_lang == "Python":
                        exploit_lang = colorama.Fore.YELLOW + "python" + colorama.Style.RESET_ALL
                    elif exploit_lang == "PHP":
                        exploit_lang = colorama.Fore.BLUE + "php" + colorama.Style.RESET_ALL
                    elif exploit_lang == "JavaScript":
                        exploit_lang = colorama.Fore.BLACK + "js" + colorama.Style.RESET_ALL
                    x.add_row([cve, exploit_repo, exploit_lang, exploit_update, exploit_stars, exploit_clone])
                print(x)
                get_exploit_log.success(colorama.Fore.GREEN  + "✓" + colorama.Style.RESET_ALL)
                print()

            except:
                get_exploit_log.failure("No payloads available yet for this CVE on Github.")

        elif arg[:4] == "EDB-":
            cves = []
            arg = arg.upper()
            get_edb_to_cve_log = log.progress(f"Retrieving {arg} informations ")
            try:
                edb = arg.strip("EDB-")
                edb_url = requests.get(f"https://www.exploit-db.com/exploits/{edb}", headers=header)
                cve_names = re.findall("target=\"_blank\">.*\n(.*?-.*?)\n.*<\/a>",edb_url.text)
                for cve in cve_names:
                    cve = "CVE-" + cve.strip(' ')
                    cves.append(cve)
                if cve_names == []:
                    get_edb_to_cve_log.failure(f"No CVE found for EDB-{edb}")
                else:
                    get_edb_to_cve_log.success(colorama.Fore.GREEN  + "✓" + colorama.Style.RESET_ALL + " - " + str(cves))
                    for cve in cves:
                        get_cve_log = log.progress(f"Retrieving {cve} informations")
                        print()
                        try:
                            search_url = requests.get(f"https://www.opencve.io/cve/{cve}", headers = header)
                            search_summ = re.findall("<div class=\"box-body\">.*\n.*<span class=\"dropcap\">(.*?)\n.*<\/div>", search_url.text)
                            print(colorama.Fore.RED + cve + colorama.Style.RESET_ALL + " " + search_summ[0].replace('</span>',''))
                            get_cve_log.success(colorama.Fore.GREEN  + "✓" + colorama.Style.RESET_ALL)
                        except Exception as e:
                            get_cve_log.failure(e)
                        print()
            except Exception as e:
                get_edb_to_cve_log.failure(e)

            get_exploit_log = log.progress(f"Searching ExploitDB exploits for {arg}")
            print()
            try:
                exploits_match = []
                edb = arg.strip("EDB-")
                with open(f"{home}/.local/share/cve-maker/files_exploits.csv", "r") as infile:
                    for line in infile.readlines():
                        if edb == line.split(',')[0]:
                            exploits_match.append(line)

                    for exploit in exploits_match:
                        exploit = exploit.split(",")
                        exploit_id = exploit[0]
                        exploit_path = exploit[1]
                        exploit_summ = exploit[2]
                        exploit_rel_date = exploit[3]
                        exploit_author = exploit[4]
                        exploit_update = exploit[9]
                        if exploit_path[-4:] == ".cpp":
                            exploit_lang = colorama.Fore.CYAN + "c++" + colorama.Style.RESET_ALL
                        elif exploit_path[-2:] == ".c":
                            exploit_lang = colorama.Fore.CYAN + "c" + colorama.Style.RESET_ALL
                        elif exploit_path[-3:] == ".sh":
                            exploit_lang = colorama.Fore.GREEN + "sh" + colorama.Style.RESET_ALL
                        elif exploit_path[-3:] == ".rb":
                            exploit_lang = colorama.Fore.RED + "ruby" + colorama.Style.RESET_ALL
                        elif exploit_path[-3:] == ".pl":
                            exploit_lang = colorama.Fore.MAGENTA + "perl" + colorama.Style.RESET_ALL
                        elif exploit_path[-3:] == ".py":
                            exploit_lang = colorama.Fore.YELLOW + "python" + colorama.Style.RESET_ALL
                        elif exploit_path[-4:] == ".php":
                            exploit_lang = colorama.Fore.BLUE + "php" + colorama.Style.RESET_ALL
                        elif exploit_path[-4:] == ".txt":
                            exploit_lang = colorama.Fore.WHITE + "text" + colorama.Style.RESET_ALL
                        elif exploit_path[-4:] == ".jsp":
                            exploit_lang = colorama.Fore.BLACK + "jsp" + colorama.Style.RESET_ALL
                        print(f"\t - Exploit EDB-ID: {exploit_id}")
                        print(f"\t - Exploit name: {exploit_summ}")
                        print(f"\t - Exploit language: {exploit_lang}")
                        print(f"\t - Exploit author: " + exploit_author.strip('"'))
                        print(f"\t - Exploit release date: {exploit_rel_date}")
                        print(f"\t - Exploit last update: {exploit_update}")
                        print(f"\t - Exploit path: {home}/.local/share/cve-maker/exploitdb-main-exploits/{exploit_path}")
                        if exploit_lang == colorama.Fore.CYAN + "c" + colorama.Style.RESET_ALL or exploit_lang == colorama.Fore.CYAN + "c++" + colorama.Style.RESET_ALL:
                            try:
                                with open(f"{home}/.local/share/cve-maker/exploitdb-main-exploits/" + exploit_path, "r") as payload:
                                    payload = payload.read()
                                    compilation = re.search(r"((gcc|g\+\+) .*?)(\r\n|\n)", payload).group(1)
                                    if compilation != '':
                                        compilation = re.sub(' \S*\.cpp', f" {home}/.local/share/cve-maker/exploitdb-main-exploits/{exploit_path[:-2]}", compilation).strip("\"")
                                        compilation = re.sub(' \S*\.c', f" {home}/.local/share/cve-maker/exploitdb-main-exploits/{exploit_path}", compilation).strip("\"")
                                        compilation = re.sub('-o \S*', '-o /tmp/' + exploit_path.split('/')[-1].split(".")[0], compilation).strip("\"")
                                        print(f"\t - Exploit compilation command: {compilation}")
                            except:
                                 compilation = f"gcc {home}/.local/share/cve-maker/exploitdb-main-exploits/{exploit_path} -o /tmp/" + exploit_path.split('/')[-1].split(".")[0]
                                 print(f"\t - Exploit compilation command not detected, default command: {compilation}")
                        print()
                get_exploit_log.success(colorama.Fore.GREEN  + "✓" + colorama.Style.RESET_ALL)

                get_exploit_log = log.progress(f"Searching Github exploits for {arg}")
                print()

            except Exception as e:
                get_exploit_log.failure(e)

            try:
                github_url = requests.get(f"https://github.com/search?q={cve}&type=repositories", headers = header)
                github_exploits = re.findall("(\[{.*?}\])", github_url.text)[0]
                github_exploits = json.loads(github_exploits)
                x = PrettyTable()
                x.field_names = ["CVE", "Repository", "Language", "Updated", "Stars", "Clone"]
                for exploit in github_exploits:
                    exploit_repo = exploit['hl_name'].replace("<em>","").replace("</em>","")
                    exploit_lang = exploit['language']
                    exploit_stars = exploit['followers']
                    exploit_update = exploit['repo']['repository']['updated_at'][:10]
                    exploit_clone = "git clone https://github.com/" + exploit_repo
                    if exploit_lang == "C++":
                        exploit_lang = colorama.Fore.CYAN + "c++" + colorama.Style.RESET_ALL
                    elif exploit_lang == "C":
                        exploit_lang = colorama.Fore.CYAN + "c" + colorama.Style.RESET_ALL
                    elif exploit_lang == "Shell":
                        exploit_lang = colorama.Fore.GREEN + "sh" + colorama.Style.RESET_ALL
                    elif exploit_lang == "Ruby":
                        exploit_lang = colorama.Fore.RED + "ruby" + colorama.Style.RESET_ALL
                    elif exploit_lang == "Perl":
                        exploit_lang = colorama.Fore.MAGENTA + "perl" + colorama.Style.RESET_ALL
                    elif exploit_lang == "Python":
                        exploit_lang = colorama.Fore.YELLOW + "python" + colorama.Style.RESET_ALL
                    elif exploit_lang == "PHP":
                        exploit_lang = colorama.Fore.BLUE + "php" + colorama.Style.RESET_ALL
                    elif exploit_lang == "JavaScript":
                        exploit_lang = colorama.Fore.BLACK + "js" + colorama.Style.RESET_ALL
                    x.add_row([cve, exploit_repo, exploit_lang, exploit_update, exploit_stars, exploit_clone])
                print(x)
                get_exploit_log.success(colorama.Fore.GREEN  + "✓" + colorama.Style.RESET_ALL)
                print()

            except:
                get_exploit_log.failure("No payloads available yet for this CVE on Github.")

        else:
            print("Usage: get <CVE-ID> or get <EDB-ID>")
            print()

    def do_exit(self, arg):
        'Exit cve-maker. Usage: exit'
        print()
        exit(0)

if __name__ == '__main__':
    try:
        banner = "\n"
        banner +=  ('  CVE-MAKER\t%s\t%s\n\n' % (__version__,__date__))
        banner += ('  %s\n' % __description__)
        banner += ('  Source code put in public domain by ' + colorama.Fore.MAGENTA + '\033[1m%s\033[0m' + colorama.Style.RESET_ALL + ', ' + colorama.Fore.RED + '\033[1mno Copyright\033[0m\n' + colorama.Style.RESET_ALL) % (__author__)
        banner += ('  Any malicious or illegal activity may be punishable by law\n')
        banner += ('  Use at your own risk\n\n')
        banner += ('  Last local EXPLOITs database update: ' + str(datetime.datetime.fromtimestamp(os.path.getmtime(f"{home}/.local/share/cve-maker/exploitdb-main.tar.gz"))) + "\n")
        cvemaker().cmdloop(banner)
    except KeyboardInterrupt:
        print()
        exit(0)
