# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mcu_protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class motor_stats(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = motor_stats()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsmotor_stats(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # motor_stats
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # motor_stats
    def RealtimeSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # motor_stats
    def AvgLoad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # motor_stats
    def MaxLoad(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # motor_stats
    def MotorInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mcu_protocol.motor_basic_info import motor_basic_info
            obj = motor_basic_info()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def motor_statsStart(builder):
    builder.StartObject(4)

def Start(builder):
    motor_statsStart(builder)

def motor_statsAddRealtimeSpeed(builder, realtimeSpeed):
    builder.PrependFloat32Slot(0, realtimeSpeed, 0.0)

def AddRealtimeSpeed(builder, realtimeSpeed):
    motor_statsAddRealtimeSpeed(builder, realtimeSpeed)

def motor_statsAddAvgLoad(builder, avgLoad):
    builder.PrependFloat32Slot(1, avgLoad, 0.0)

def AddAvgLoad(builder, avgLoad):
    motor_statsAddAvgLoad(builder, avgLoad)

def motor_statsAddMaxLoad(builder, maxLoad):
    builder.PrependFloat32Slot(2, maxLoad, 0.0)

def AddMaxLoad(builder, maxLoad):
    motor_statsAddMaxLoad(builder, maxLoad)

def motor_statsAddMotorInfo(builder, motorInfo):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(motorInfo), 0)

def AddMotorInfo(builder, motorInfo):
    motor_statsAddMotorInfo(builder, motorInfo)

def motor_statsEnd(builder):
    return builder.EndObject()

def End(builder):
    return motor_statsEnd(builder)
