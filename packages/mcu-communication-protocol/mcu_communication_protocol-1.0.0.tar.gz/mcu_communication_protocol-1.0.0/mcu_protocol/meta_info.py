# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mcu_protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class meta_info(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = meta_info()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsmeta_info(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # meta_info
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # meta_info
    def Column(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # meta_info
    def Row(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # meta_info
    def PortDriveMapping(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # meta_info
    def PortDriveMappingAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # meta_info
    def PortDriveMappingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # meta_info
    def PortDriveMappingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # meta_info
    def EjectionDelay(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # meta_info
    def EjectionDelayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # meta_info
    def EjectionDelayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # meta_info
    def EjectionDelayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # meta_info
    def EjectionLasting(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # meta_info
    def EjectionLastingAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # meta_info
    def EjectionLastingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # meta_info
    def EjectionLastingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def meta_infoStart(builder):
    builder.StartObject(5)

def Start(builder):
    meta_infoStart(builder)

def meta_infoAddColumn(builder, column):
    builder.PrependUint8Slot(0, column, 0)

def AddColumn(builder, column):
    meta_infoAddColumn(builder, column)

def meta_infoAddRow(builder, row):
    builder.PrependUint8Slot(1, row, 0)

def AddRow(builder, row):
    meta_infoAddRow(builder, row)

def meta_infoAddPortDriveMapping(builder, portDriveMapping):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(portDriveMapping), 0)

def AddPortDriveMapping(builder, portDriveMapping):
    meta_infoAddPortDriveMapping(builder, portDriveMapping)

def meta_infoStartPortDriveMappingVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartPortDriveMappingVector(builder, numElems: int) -> int:
    return meta_infoStartPortDriveMappingVector(builder, numElems)

def meta_infoAddEjectionDelay(builder, ejectionDelay):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ejectionDelay), 0)

def AddEjectionDelay(builder, ejectionDelay):
    meta_infoAddEjectionDelay(builder, ejectionDelay)

def meta_infoStartEjectionDelayVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartEjectionDelayVector(builder, numElems: int) -> int:
    return meta_infoStartEjectionDelayVector(builder, numElems)

def meta_infoAddEjectionLasting(builder, ejectionLasting):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(ejectionLasting), 0)

def AddEjectionLasting(builder, ejectionLasting):
    meta_infoAddEjectionLasting(builder, ejectionLasting)

def meta_infoStartEjectionLastingVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartEjectionLastingVector(builder, numElems: int) -> int:
    return meta_infoStartEjectionLastingVector(builder, numElems)

def meta_infoEnd(builder):
    return builder.EndObject()

def End(builder):
    return meta_infoEnd(builder)
