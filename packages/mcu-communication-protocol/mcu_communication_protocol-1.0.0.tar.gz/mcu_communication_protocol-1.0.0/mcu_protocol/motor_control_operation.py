# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mcu_protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class motor_control_operation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = motor_control_operation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsmotor_control_operation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # motor_control_operation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # motor_control_operation
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # motor_control_operation
    def MotorInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mcu_protocol.motor_basic_info import motor_basic_info
            obj = motor_basic_info()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def motor_control_operationStart(builder):
    builder.StartObject(2)

def Start(builder):
    motor_control_operationStart(builder)

def motor_control_operationAddValue(builder, value):
    builder.PrependUint8Slot(0, value, 0)

def AddValue(builder, value):
    motor_control_operationAddValue(builder, value)

def motor_control_operationAddMotorInfo(builder, motorInfo):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(motorInfo), 0)

def AddMotorInfo(builder, motorInfo):
    motor_control_operationAddMotorInfo(builder, motorInfo)

def motor_control_operationEnd(builder):
    return builder.EndObject()

def End(builder):
    return motor_control_operationEnd(builder)
