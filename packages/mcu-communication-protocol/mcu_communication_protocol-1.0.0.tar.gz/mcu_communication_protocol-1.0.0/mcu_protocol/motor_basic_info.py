# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mcu_protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class motor_basic_info(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = motor_basic_info()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsmotor_basic_info(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # motor_basic_info
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # motor_basic_info
    def DriverType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # motor_basic_info
    def ComAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def motor_basic_infoStart(builder):
    builder.StartObject(2)

def Start(builder):
    motor_basic_infoStart(builder)

def motor_basic_infoAddDriverType(builder, driverType):
    builder.PrependUint8Slot(0, driverType, 0)

def AddDriverType(builder, driverType):
    motor_basic_infoAddDriverType(builder, driverType)

def motor_basic_infoAddComAddress(builder, comAddress):
    builder.PrependUint8Slot(1, comAddress, 0)

def AddComAddress(builder, comAddress):
    motor_basic_infoAddComAddress(builder, comAddress)

def motor_basic_infoEnd(builder):
    return builder.EndObject()

def End(builder):
    return motor_basic_infoEnd(builder)
