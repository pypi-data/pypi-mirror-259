# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mcu_protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ejector_data(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ejector_data()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsejector_data(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ejector_data
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ejector_data
    def TriggerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ejector_data
    def GroupId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ejector_data
    def OpenStatus(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ejector_data
    def OpenStatusAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # ejector_data
    def OpenStatusLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ejector_data
    def OpenStatusIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # ejector_data
    def DelayTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ejector_data
    def DelayTimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ejector_data
    def DelayTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ejector_data
    def DelayTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # ejector_data
    def LastingTime(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ejector_data
    def LastingTimeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ejector_data
    def LastingTimeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ejector_data
    def LastingTimeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def ejector_dataStart(builder):
    builder.StartObject(5)

def Start(builder):
    ejector_dataStart(builder)

def ejector_dataAddTriggerId(builder, triggerId):
    builder.PrependInt64Slot(0, triggerId, 0)

def AddTriggerId(builder, triggerId):
    ejector_dataAddTriggerId(builder, triggerId)

def ejector_dataAddGroupId(builder, groupId):
    builder.PrependInt32Slot(1, groupId, 0)

def AddGroupId(builder, groupId):
    ejector_dataAddGroupId(builder, groupId)

def ejector_dataAddOpenStatus(builder, openStatus):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(openStatus), 0)

def AddOpenStatus(builder, openStatus):
    ejector_dataAddOpenStatus(builder, openStatus)

def ejector_dataStartOpenStatusVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartOpenStatusVector(builder, numElems: int) -> int:
    return ejector_dataStartOpenStatusVector(builder, numElems)

def ejector_dataAddDelayTime(builder, delayTime):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(delayTime), 0)

def AddDelayTime(builder, delayTime):
    ejector_dataAddDelayTime(builder, delayTime)

def ejector_dataStartDelayTimeVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartDelayTimeVector(builder, numElems: int) -> int:
    return ejector_dataStartDelayTimeVector(builder, numElems)

def ejector_dataAddLastingTime(builder, lastingTime):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(lastingTime), 0)

def AddLastingTime(builder, lastingTime):
    ejector_dataAddLastingTime(builder, lastingTime)

def ejector_dataStartLastingTimeVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartLastingTimeVector(builder, numElems: int) -> int:
    return ejector_dataStartLastingTimeVector(builder, numElems)

def ejector_dataEnd(builder):
    return builder.EndObject()

def End(builder):
    return ejector_dataEnd(builder)
