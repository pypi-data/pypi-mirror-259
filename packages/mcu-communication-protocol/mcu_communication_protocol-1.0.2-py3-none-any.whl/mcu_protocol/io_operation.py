# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mcu_protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class io_operation(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = io_operation()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsio_operation(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # io_operation
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # io_operation
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # io_operation
    def IoAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # io_operation
    def DelayInMs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return -1

    # io_operation
    def LastingTimeInMs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return -1

    # io_operation
    def Repeat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return -1

def io_operationStart(builder):
    builder.StartObject(5)

def Start(builder):
    io_operationStart(builder)

def io_operationAddStatus(builder, status):
    builder.PrependBoolSlot(0, status, 0)

def AddStatus(builder, status):
    io_operationAddStatus(builder, status)

def io_operationAddIoAddress(builder, ioAddress):
    builder.PrependInt32Slot(1, ioAddress, 0)

def AddIoAddress(builder, ioAddress):
    io_operationAddIoAddress(builder, ioAddress)

def io_operationAddDelayInMs(builder, delayInMs):
    builder.PrependInt64Slot(2, delayInMs, -1)

def AddDelayInMs(builder, delayInMs):
    io_operationAddDelayInMs(builder, delayInMs)

def io_operationAddLastingTimeInMs(builder, lastingTimeInMs):
    builder.PrependInt64Slot(3, lastingTimeInMs, -1)

def AddLastingTimeInMs(builder, lastingTimeInMs):
    io_operationAddLastingTimeInMs(builder, lastingTimeInMs)

def io_operationAddRepeat(builder, repeat):
    builder.PrependInt64Slot(4, repeat, -1)

def AddRepeat(builder, repeat):
    io_operationAddRepeat(builder, repeat)

def io_operationEnd(builder):
    return builder.EndObject()

def End(builder):
    return io_operationEnd(builder)
