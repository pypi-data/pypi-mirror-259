# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mcu_protocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class request(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = request()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsrequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # request
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # request
    def RequestId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # request
    def FunctionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # request
    def PayloadType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # request
    def Payload(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def requestStart(builder):
    builder.StartObject(4)

def Start(builder):
    requestStart(builder)

def requestAddRequestId(builder, requestId):
    builder.PrependInt64Slot(0, requestId, 0)

def AddRequestId(builder, requestId):
    requestAddRequestId(builder, requestId)

def requestAddFunctionId(builder, functionId):
    builder.PrependUint8Slot(1, functionId, 0)

def AddFunctionId(builder, functionId):
    requestAddFunctionId(builder, functionId)

def requestAddPayloadType(builder, payloadType):
    builder.PrependUint8Slot(2, payloadType, 0)

def AddPayloadType(builder, payloadType):
    requestAddPayloadType(builder, payloadType)

def requestAddPayload(builder, payload):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(payload), 0)

def AddPayload(builder, payload):
    requestAddPayload(builder, payload)

def requestEnd(builder):
    return builder.EndObject()

def End(builder):
    return requestEnd(builder)
