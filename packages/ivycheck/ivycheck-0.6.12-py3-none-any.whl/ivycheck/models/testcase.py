"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from ivycheck import utils
from typing import Any, List, Optional


@dataclasses.dataclass
class TestCaseInput:
    pass


@dataclasses.dataclass
class TestCaseSegments:
    pass


@dataclasses.dataclass
class TestCaseInfo:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TestCase:
    UNSET='__SPEAKEASY_UNSET__'
    dataset_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataset_id') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    time_created: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_created'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    time_updated: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_updated'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    created_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by') }})
    updated_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_by') }})
    owner_org: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_org') }})
    input: Optional[TestCaseInput] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input'), 'exclude': lambda f: f is TestCase.UNSET }})
    message_history: Optional[List[Any]] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_history'), 'exclude': lambda f: f is TestCase.UNSET }})
    context: Optional[List[Any]] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is TestCase.UNSET }})
    golden_answer: Optional[str] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('golden_answer'), 'exclude': lambda f: f is TestCase.UNSET }})
    golden_context: Optional[List[Any]] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('golden_context'), 'exclude': lambda f: f is TestCase.UNSET }})
    segments: Optional[TestCaseSegments] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segments'), 'exclude': lambda f: f is TestCase.UNSET }})
    info: Optional[TestCaseInfo] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info'), 'exclude': lambda f: f is TestCase.UNSET }})
    

