"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from ivycheck import utils
from typing import Optional


@dataclasses.dataclass
class AggregateResults:
    pass


@dataclasses.dataclass
class TestConfig:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EvaluationDataset:
    UNSET='__SPEAKEASY_UNSET__'
    test_case_dataset_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test_case_dataset_id') }})
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    time_created: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_created'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    time_updated: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_updated'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    created_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_by') }})
    updated_by: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_by') }})
    owner_org: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_org') }})
    project_id: Optional[str] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project_id'), 'exclude': lambda f: f is EvaluationDataset.UNSET }})
    description: Optional[str] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is EvaluationDataset.UNSET }})
    aggregate_results: Optional[AggregateResults] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregate_results'), 'exclude': lambda f: f is EvaluationDataset.UNSET }})
    test_config: Optional[TestConfig] = dataclasses.field(default=UNSET, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('test_config'), 'exclude': lambda f: f is EvaluationDataset.UNSET }})
    

