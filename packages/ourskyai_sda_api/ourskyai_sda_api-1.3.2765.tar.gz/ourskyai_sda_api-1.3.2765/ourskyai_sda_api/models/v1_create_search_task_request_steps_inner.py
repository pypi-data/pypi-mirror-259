# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/[get]/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/[get]/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/[post]/v1/communications/webhook) endpoint to receive TDMs automatically (preferred) or use the [tdms](#tag/tdms/[get]/v1/tdms) endpoint to poll for TDMs.

    The version of the OpenAPI document: 1.3.2765
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class V1CreateSearchTaskRequestStepsInner(BaseModel):
    """
    Search steps  # noqa: E501
    """
    ra: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Right Ascension in degrees. Required for SIDEREAL trackingType. Should be null for TARGET_RATE trackingType.")
    dec: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Declination in degrees. Required for SIDEREAL trackingType. Should be null for TARGET_RATE trackingType.")
    ra_offset: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="raOffset", description="Offset in degrees from the ra. Required for TARGET_RATE trackingType. Should be null for SIDEREAL trackingType.")
    dec_offset: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="decOffset", description="Offset in degrees from the dec. Required for TARGET_RATE trackingType. Should be null for SIDEREAL trackingType.")
    start_time: datetime = Field(..., alias="startTime")
    end_time: datetime = Field(..., alias="endTime")
    __properties = ["ra", "dec", "raOffset", "decOffset", "startTime", "endTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CreateSearchTaskRequestStepsInner:
        """Create an instance of V1CreateSearchTaskRequestStepsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CreateSearchTaskRequestStepsInner:
        """Create an instance of V1CreateSearchTaskRequestStepsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CreateSearchTaskRequestStepsInner.parse_obj(obj)

        _obj = V1CreateSearchTaskRequestStepsInner.parse_obj({
            "ra": obj.get("ra"),
            "dec": obj.get("dec"),
            "ra_offset": obj.get("raOffset"),
            "dec_offset": obj.get("decOffset"),
            "start_time": obj.get("startTime"),
            "end_time": obj.get("endTime")
        })
        return _obj


