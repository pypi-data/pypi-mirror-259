# coding: utf-8

"""
    OurSky SDA

    The basic flow for a new organization is as follows: 1. View the available satellite targets with the [satellite targets](#tag/satellite-targets/[get]/v1/satellite-targets) endpoint. Copy the id of the target you want to observe. 2. Create an organization target with the [organization target](#tag/organization-targets/[get]/v1/organization-targets) endpoint. Use the id copied from above. 3. Create a webhook with the [webhook](#tag/webhooks/[post]/v1/communications/webhook) endpoint to receive TDMs automatically (preferred) or use the [tdms](#tag/tdms/[get]/v1/tdms) endpoint to poll for TDMs.

    The version of the OpenAPI document: 1.3.2765
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from ourskyai_sda_api.models.tracking_type import TrackingType
from ourskyai_sda_api.models.v1_create_search_task_request_steps_inner import V1CreateSearchTaskRequestStepsInner

class V1CreateSearchTaskRequest(BaseModel):
    """
    V1CreateSearchTaskRequest
    """
    node_id: StrictStr = Field(..., alias="nodeId")
    target_id: StrictStr = Field(..., alias="targetId")
    tracking_type: Optional[TrackingType] = Field(None, alias="trackingType")
    steps: conlist(V1CreateSearchTaskRequestStepsInner) = Field(...)
    __properties = ["nodeId", "targetId", "trackingType", "steps"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CreateSearchTaskRequest:
        """Create an instance of V1CreateSearchTaskRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item in self.steps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['steps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CreateSearchTaskRequest:
        """Create an instance of V1CreateSearchTaskRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CreateSearchTaskRequest.parse_obj(obj)

        _obj = V1CreateSearchTaskRequest.parse_obj({
            "node_id": obj.get("nodeId"),
            "target_id": obj.get("targetId"),
            "tracking_type": obj.get("trackingType"),
            "steps": [V1CreateSearchTaskRequestStepsInner.from_dict(_item) for _item in obj.get("steps")] if obj.get("steps") is not None else None
        })
        return _obj


