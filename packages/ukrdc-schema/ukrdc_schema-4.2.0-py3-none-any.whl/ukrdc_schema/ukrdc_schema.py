# ./pyxb_build/ukrdc_schema/ukrdc_schema.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:b283486cd1f9e7fb1a0724a433c1f070770f0869
# Generated 2024-02-27 11:37:31.390806 by PyXB version 1.2.6 using Python 3.9.18.final.0
# Namespace http://www.rixg.org.uk/

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:9765b230-d564-11ee-8eae-1f589632abcd')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.rixg.org.uk/', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 74, 16)
    _Documentation = None
STD_ANON._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(500))
STD_ANON._InitializeFacetMap(STD_ANON._CF_maxLength)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 97, 16)
    _Documentation = None
STD_ANON_._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(500))
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_maxLength)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 111, 16)
    _Documentation = None
STD_ANON_2._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(500))
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_maxLength)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 36, 28)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.RR50 = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='RR50', tag='RR50')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 43, 28)
    _Documentation = None
STD_ANON_4._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_maxLength)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 50, 28)
    _Documentation = None
STD_ANON_5._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_maxLength)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 69, 28)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.RR51 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='RR51', tag='RR51')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 76, 28)
    _Documentation = None
STD_ANON_7._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_maxLength)
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 83, 28)
    _Documentation = None
STD_ANON_8._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_maxLength)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 17, 16)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.PRIMARY = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='PRIMARY', tag='PRIMARY')
STD_ANON_9.SECONDARY = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='SECONDARY', tag='SECONDARY')
STD_ANON_9.OTHER = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='OTHER', tag='OTHER')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 55, 16)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.unconfirmed = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='unconfirmed', tag='unconfirmed')
STD_ANON_10.provisional = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='provisional', tag='provisional')
STD_ANON_10.differential = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='differential', tag='differential')
STD_ANON_10.confirmed = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='confirmed', tag='confirmed')
STD_ANON_10.refuted = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='refuted', tag='refuted')
STD_ANON_10.entered_in_error = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='entered-in-error', tag='entered_in_error')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)
_module_typeBindings.STD_ANON_10 = STD_ANON_10

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 59, 16)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.unconfirmed = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='unconfirmed', tag='unconfirmed')
STD_ANON_11.provisional = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='provisional', tag='provisional')
STD_ANON_11.differential = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='differential', tag='differential')
STD_ANON_11.confirmed = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='confirmed', tag='confirmed')
STD_ANON_11.refuted = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='refuted', tag='refuted')
STD_ANON_11.entered_in_error = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='entered-in-error', tag='entered_in_error')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)
_module_typeBindings.STD_ANON_11 = STD_ANON_11

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 18, 16)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.PRIMARY = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='PRIMARY', tag='PRIMARY')
STD_ANON_12.SECONDARY = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='SECONDARY', tag='SECONDARY')
STD_ANON_12.OTHER = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='OTHER', tag='OTHER')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)
_module_typeBindings.STD_ANON_12 = STD_ANON_12

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 80, 16)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.unconfirmed = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='unconfirmed', tag='unconfirmed')
STD_ANON_13.provisional = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='provisional', tag='provisional')
STD_ANON_13.differential = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='differential', tag='differential')
STD_ANON_13.confirmed = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='confirmed', tag='confirmed')
STD_ANON_13.refuted = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='refuted', tag='refuted')
STD_ANON_13.entered_in_error = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='entered-in-error', tag='entered_in_error')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)
_module_typeBindings.STD_ANON_13 = STD_ANON_13

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 41, 16)
    _Documentation = None
STD_ANON_14._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(220))
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_maxLength)
_module_typeBindings.STD_ANON_14 = STD_ANON_14

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 18, 16)
    _Documentation = None
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.E = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='E', tag='E')
STD_ANON_15.I = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='I', tag='I')
STD_ANON_15.N = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='N', tag='N')
STD_ANON_15.G = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='G', tag='G')
STD_ANON_15.P = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='P', tag='P')
STD_ANON_15.S = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='S', tag='S')
STD_ANON_15.R = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='R', tag='R')
STD_ANON_15.B = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='B', tag='B')
STD_ANON_15.C = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='C', tag='C')
STD_ANON_15.U = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='U', tag='U')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)
_module_typeBindings.STD_ANON_15 = STD_ANON_15

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 19, 16)
    _Documentation = None
STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.E = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='E', tag='E')
STD_ANON_16.I = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='I', tag='I')
STD_ANON_16.O = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='O', tag='O')
STD_ANON_16.N = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='N', tag='N')
STD_ANON_16.G = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='G', tag='G')
STD_ANON_16.P = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='P', tag='P')
STD_ANON_16.S = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='S', tag='S')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)
_module_typeBindings.STD_ANON_16 = STD_ANON_16

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 84, 16)
    _Documentation = None
STD_ANON_17._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_maxLength)
_module_typeBindings.STD_ANON_17 = STD_ANON_17

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 99, 28)
    _Documentation = None
STD_ANON_18._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_18, enum_prefix=None)
STD_ANON_18.HOME = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='HOME', tag='HOME')
STD_ANON_18.INCENTRE = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='INCENTRE', tag='INCENTRE')
STD_ANON_18.ASSISTED = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='ASSISTED', tag='ASSISTED')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_enumeration)
_module_typeBindings.STD_ANON_18 = STD_ANON_18

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 49, 16)
    _Documentation = None
STD_ANON_19._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_maxLength)
_module_typeBindings.STD_ANON_19 = STD_ANON_19

# Atomic simple type: [anonymous]
class STD_ANON_20 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 63, 16)
    _Documentation = None
STD_ANON_20._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_maxLength)
_module_typeBindings.STD_ANON_20 = STD_ANON_20

# Atomic simple type: [anonymous]
class STD_ANON_21 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 110, 16)
    _Documentation = None
STD_ANON_21._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_21._InitializeFacetMap(STD_ANON_21._CF_maxLength)
_module_typeBindings.STD_ANON_21 = STD_ANON_21

# Atomic simple type: [anonymous]
class STD_ANON_22 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 123, 16)
    _Documentation = None
STD_ANON_22._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
STD_ANON_22._InitializeFacetMap(STD_ANON_22._CF_maxLength)
_module_typeBindings.STD_ANON_22 = STD_ANON_22

# Atomic simple type: [anonymous]
class STD_ANON_23 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 179, 16)
    _Documentation = None
STD_ANON_23._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(2))
STD_ANON_23._InitializeFacetMap(STD_ANON_23._CF_maxLength)
_module_typeBindings.STD_ANON_23 = STD_ANON_23

# Atomic simple type: [anonymous]
class STD_ANON_24 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 199, 16)
    _Documentation = None
STD_ANON_24._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_24, enum_prefix=None)
STD_ANON_24.PRE = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='PRE', tag='PRE')
STD_ANON_24.POST = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='POST', tag='POST')
STD_ANON_24.UNK = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='UNK', tag='UNK')
STD_ANON_24.NA = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='NA', tag='NA')
STD_ANON_24._InitializeFacetMap(STD_ANON_24._CF_enumeration)
_module_typeBindings.STD_ANON_24 = STD_ANON_24

# Atomic simple type: [anonymous]
class STD_ANON_25 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 237, 16)
    _Documentation = None
STD_ANON_25._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
STD_ANON_25._InitializeFacetMap(STD_ANON_25._CF_maxLength)
_module_typeBindings.STD_ANON_25 = STD_ANON_25

# Atomic simple type: [anonymous]
class STD_ANON_26 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 251, 16)
    _Documentation = None
STD_ANON_26._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
STD_ANON_26._InitializeFacetMap(STD_ANON_26._CF_maxLength)
_module_typeBindings.STD_ANON_26 = STD_ANON_26

# Atomic simple type: [anonymous]
class STD_ANON_27 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 265, 16)
    _Documentation = None
STD_ANON_27._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
STD_ANON_27._InitializeFacetMap(STD_ANON_27._CF_maxLength)
_module_typeBindings.STD_ANON_27 = STD_ANON_27

# Atomic simple type: [anonymous]
class STD_ANON_28 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 278, 16)
    _Documentation = None
STD_ANON_28._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(220))
STD_ANON_28._InitializeFacetMap(STD_ANON_28._CF_maxLength)
_module_typeBindings.STD_ANON_28 = STD_ANON_28

# Atomic simple type: [anonymous]
class STD_ANON_29 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 292, 16)
    _Documentation = None
STD_ANON_29._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_29, enum_prefix=None)
STD_ANON_29.POS = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='POS', tag='POS')
STD_ANON_29.NEG = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='NEG', tag='NEG')
STD_ANON_29.UNK = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='UNK', tag='UNK')
STD_ANON_29._InitializeFacetMap(STD_ANON_29._CF_enumeration)
_module_typeBindings.STD_ANON_29 = STD_ANON_29

# Atomic simple type: [anonymous]
class STD_ANON_30 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 317, 16)
    _Documentation = None
STD_ANON_30._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_30, enum_prefix=None)
STD_ANON_30.F = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='F', tag='F')
STD_ANON_30.P = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='P', tag='P')
STD_ANON_30.D = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='D', tag='D')
STD_ANON_30._InitializeFacetMap(STD_ANON_30._CF_enumeration)
_module_typeBindings.STD_ANON_30 = STD_ANON_30

# Atomic simple type: [anonymous]
class STD_ANON_31 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 348, 16)
    _Documentation = None
STD_ANON_31._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1000))
STD_ANON_31._InitializeFacetMap(STD_ANON_31._CF_maxLength)
_module_typeBindings.STD_ANON_31 = STD_ANON_31

# Atomic simple type: [anonymous]
class STD_ANON_32 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 359, 16)
    _Documentation = None
STD_ANON_32._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1000))
STD_ANON_32._InitializeFacetMap(STD_ANON_32._CF_maxLength)
_module_typeBindings.STD_ANON_32 = STD_ANON_32

# Atomic simple type: [anonymous]
class STD_ANON_33 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 21, 16)
    _Documentation = None
STD_ANON_33._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_33._InitializeFacetMap(STD_ANON_33._CF_maxLength)
_module_typeBindings.STD_ANON_33 = STD_ANON_33

# Atomic simple type: [anonymous]
class STD_ANON_34 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 55, 28)
    _Documentation = None
STD_ANON_34._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_34, enum_prefix=None)
STD_ANON_34.SNOMED = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='SNOMED', tag='SNOMED')
STD_ANON_34.RR22 = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='RR22', tag='RR22')
STD_ANON_34._InitializeFacetMap(STD_ANON_34._CF_enumeration)
_module_typeBindings.STD_ANON_34 = STD_ANON_34

# Atomic simple type: [anonymous]
class STD_ANON_35 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 63, 28)
    _Documentation = None
STD_ANON_35._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(18))
STD_ANON_35._InitializeFacetMap(STD_ANON_35._CF_maxLength)
_module_typeBindings.STD_ANON_35 = STD_ANON_35

# Atomic simple type: [anonymous]
class STD_ANON_36 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 70, 28)
    _Documentation = None
STD_ANON_36._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_36._InitializeFacetMap(STD_ANON_36._CF_maxLength)
_module_typeBindings.STD_ANON_36 = STD_ANON_36

# Atomic simple type: [anonymous]
class STD_ANON_37 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 86, 16)
    _Documentation = None
STD_ANON_37._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
STD_ANON_37._InitializeFacetMap(STD_ANON_37._CF_maxLength)
_module_typeBindings.STD_ANON_37 = STD_ANON_37

# Atomic simple type: [anonymous]
class STD_ANON_38 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 98, 16)
    _Documentation = None
STD_ANON_38._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
STD_ANON_38._InitializeFacetMap(STD_ANON_38._CF_maxLength)
_module_typeBindings.STD_ANON_38 = STD_ANON_38

# Atomic simple type: [anonymous]
class STD_ANON_39 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 118, 16)
    _Documentation = None
STD_ANON_39._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_39._InitializeFacetMap(STD_ANON_39._CF_maxLength)
_module_typeBindings.STD_ANON_39 = STD_ANON_39

# Atomic simple type: [anonymous]
class STD_ANON_40 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 39, 28)
    _Documentation = None
STD_ANON_40._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_40._InitializeFacetMap(STD_ANON_40._CF_maxLength)
_module_typeBindings.STD_ANON_40 = STD_ANON_40

# Atomic simple type: [anonymous]
class STD_ANON_41 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 51, 28)
    _Documentation = None
STD_ANON_41._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_41._InitializeFacetMap(STD_ANON_41._CF_maxLength)
_module_typeBindings.STD_ANON_41 = STD_ANON_41

# Atomic simple type: [anonymous]
class STD_ANON_42 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 63, 28)
    _Documentation = None
STD_ANON_42._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_42._InitializeFacetMap(STD_ANON_42._CF_maxLength)
_module_typeBindings.STD_ANON_42 = STD_ANON_42

# Atomic simple type: [anonymous]
class STD_ANON_43 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 78, 16)
    _Documentation = None
STD_ANON_43._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
STD_ANON_43._InitializeFacetMap(STD_ANON_43._CF_maxLength)
_module_typeBindings.STD_ANON_43 = STD_ANON_43

# Atomic simple type: [anonymous]
class STD_ANON_44 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 90, 16)
    _Documentation = None
STD_ANON_44._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
STD_ANON_44._InitializeFacetMap(STD_ANON_44._CF_maxLength)
_module_typeBindings.STD_ANON_44 = STD_ANON_44

# Atomic simple type: [anonymous]
class STD_ANON_45 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 102, 16)
    _Documentation = None
STD_ANON_45._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_45, enum_prefix=None)
STD_ANON_45.PRE = STD_ANON_45._CF_enumeration.addEnumeration(unicode_value='PRE', tag='PRE')
STD_ANON_45.POST = STD_ANON_45._CF_enumeration.addEnumeration(unicode_value='POST', tag='POST')
STD_ANON_45.UNK = STD_ANON_45._CF_enumeration.addEnumeration(unicode_value='UNK', tag='UNK')
STD_ANON_45.NA = STD_ANON_45._CF_enumeration.addEnumeration(unicode_value='NA', tag='NA')
STD_ANON_45._InitializeFacetMap(STD_ANON_45._CF_enumeration)
_module_typeBindings.STD_ANON_45 = STD_ANON_45

# Atomic simple type: [anonymous]
class STD_ANON_46 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 133, 16)
    _Documentation = None
STD_ANON_46._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1000))
STD_ANON_46._InitializeFacetMap(STD_ANON_46._CF_maxLength)
_module_typeBindings.STD_ANON_46 = STD_ANON_46

# Atomic simple type: [anonymous]
class STD_ANON_47 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 34, 16)
    _Documentation = None
STD_ANON_47._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(220))
STD_ANON_47._InitializeFacetMap(STD_ANON_47._CF_maxLength)
_module_typeBindings.STD_ANON_47 = STD_ANON_47

# Atomic simple type: [anonymous]
class STD_ANON_48 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 28, 16)
    _Documentation = None
STD_ANON_48._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_48._InitializeFacetMap(STD_ANON_48._CF_maxLength)
_module_typeBindings.STD_ANON_48 = STD_ANON_48

# Atomic simple type: [anonymous]
class STD_ANON_49 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 39, 16)
    _Documentation = None
STD_ANON_49._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_49._InitializeFacetMap(STD_ANON_49._CF_maxLength)
_module_typeBindings.STD_ANON_49 = STD_ANON_49

# Atomic simple type: [anonymous]
class STD_ANON_50 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 20, 24)
    _Documentation = None
STD_ANON_50._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_50, enum_prefix=None)
STD_ANON_50.DBD = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='DBD', tag='DBD')
STD_ANON_50.DCD = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='DCD', tag='DCD')
STD_ANON_50.LIVE = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='LIVE', tag='LIVE')
STD_ANON_50._InitializeFacetMap(STD_ANON_50._CF_enumeration)
_module_typeBindings.STD_ANON_50 = STD_ANON_50

# Atomic simple type: {http://www.rixg.org.uk/}PostCode
class PostCode (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PostCode')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 2, 4)
    _Documentation = None
PostCode._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
PostCode._CF_pattern = pyxb.binding.facets.CF_pattern()
PostCode._CF_pattern.addPattern(pattern='((([A-Z][0-9]{1,2})|(([A-Z][A-HJ-Y][0-9]{1,2})|(([A-Z][0-9][A-Z])|([A-Z][A-HJ-Y][0-9][A-Z])))) {0,6}([0-9][ABD-HJLNP-UW-Z]{2})?|ZZ99 {0,1}([0-9][A-Z]Z)?)')
PostCode._InitializeFacetMap(PostCode._CF_maxLength,
   PostCode._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'PostCode', PostCode)
_module_typeBindings.PostCode = PostCode

# Atomic simple type: [anonymous]
class STD_ANON_51 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 29, 16)
    _Documentation = None
STD_ANON_51._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(220))
STD_ANON_51._InitializeFacetMap(STD_ANON_51._CF_maxLength)
_module_typeBindings.STD_ANON_51 = STD_ANON_51

# Atomic simple type: [anonymous]
class STD_ANON_52 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 42, 28)
    _Documentation = None
STD_ANON_52._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_52, enum_prefix=None)
STD_ANON_52.ISO3166_1 = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='ISO3166-1', tag='ISO3166_1')
STD_ANON_52._InitializeFacetMap(STD_ANON_52._CF_enumeration)
_module_typeBindings.STD_ANON_52 = STD_ANON_52

# Atomic simple type: [anonymous]
class STD_ANON_53 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 53, 28)
    _Documentation = None
STD_ANON_53._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_53._InitializeFacetMap(STD_ANON_53._CF_maxLength)
_module_typeBindings.STD_ANON_53 = STD_ANON_53

# Atomic simple type: [anonymous]
class STD_ANON_54 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 60, 28)
    _Documentation = None
STD_ANON_54._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_54._InitializeFacetMap(STD_ANON_54._CF_maxLength)
_module_typeBindings.STD_ANON_54 = STD_ANON_54

# Atomic simple type: [anonymous]
class STD_ANON_55 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 74, 12)
    _Documentation = None
STD_ANON_55._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_55, enum_prefix=None)
STD_ANON_55.H = STD_ANON_55._CF_enumeration.addEnumeration(unicode_value='H', tag='H')
STD_ANON_55.PST = STD_ANON_55._CF_enumeration.addEnumeration(unicode_value='PST', tag='PST')
STD_ANON_55.TMP = STD_ANON_55._CF_enumeration.addEnumeration(unicode_value='TMP', tag='TMP')
STD_ANON_55._InitializeFacetMap(STD_ANON_55._CF_enumeration)
_module_typeBindings.STD_ANON_55 = STD_ANON_55

# Atomic simple type: {http://www.rixg.org.uk/}BloodGroup
class BloodGroup (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """See https://www.datadictionary.nhs.uk/data_dictionary/attributes/p/person/person_blood_group_de.asp"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BloodGroup')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/BloodGroup.xsd', 3, 0)
    _Documentation = 'See https://www.datadictionary.nhs.uk/data_dictionary/attributes/p/person/person_blood_group_de.asp'
BloodGroup._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=BloodGroup, enum_prefix=None)
BloodGroup.A = BloodGroup._CF_enumeration.addEnumeration(unicode_value='A', tag='A')
BloodGroup.B = BloodGroup._CF_enumeration.addEnumeration(unicode_value='B', tag='B')
BloodGroup.AB = BloodGroup._CF_enumeration.addEnumeration(unicode_value='AB', tag='AB')
BloodGroup.O = BloodGroup._CF_enumeration.addEnumeration(unicode_value='O', tag='O')
BloodGroup._InitializeFacetMap(BloodGroup._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'BloodGroup', BloodGroup)
_module_typeBindings.BloodGroup = BloodGroup

# Atomic simple type: {http://www.rixg.org.uk/}BloodRhesus
class BloodRhesus (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """See https://www.datadictionary.nhs.uk/data_dictionary/attributes/p/person/person_rhesus_factor_de.asp"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BloodRhesus')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/BloodRhesus.xsd', 3, 0)
    _Documentation = 'See https://www.datadictionary.nhs.uk/data_dictionary/attributes/p/person/person_rhesus_factor_de.asp'
BloodRhesus._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=BloodRhesus, enum_prefix=None)
BloodRhesus.POS = BloodRhesus._CF_enumeration.addEnumeration(unicode_value='POS', tag='POS')
BloodRhesus.NEG = BloodRhesus._CF_enumeration.addEnumeration(unicode_value='NEG', tag='NEG')
BloodRhesus._InitializeFacetMap(BloodRhesus._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'BloodRhesus', BloodRhesus)
_module_typeBindings.BloodRhesus = BloodRhesus

# Atomic simple type: [anonymous]
class STD_ANON_56 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 5, 4)
    _Documentation = None
STD_ANON_56._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_56, enum_prefix=None)
STD_ANON_56.DMD = STD_ANON_56._CF_enumeration.addEnumeration(unicode_value='DM+D', tag='DMD')
STD_ANON_56._InitializeFacetMap(STD_ANON_56._CF_enumeration)
_module_typeBindings.STD_ANON_56 = STD_ANON_56

# Atomic simple type: [anonymous]
class STD_ANON_57 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 12, 4)
    _Documentation = None
STD_ANON_57._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_57._InitializeFacetMap(STD_ANON_57._CF_maxLength)
_module_typeBindings.STD_ANON_57 = STD_ANON_57

# Atomic simple type: [anonymous]
class STD_ANON_58 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 19, 4)
    _Documentation = None
STD_ANON_58._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_58._InitializeFacetMap(STD_ANON_58._CF_maxLength)
_module_typeBindings.STD_ANON_58 = STD_ANON_58

# Atomic simple type: [anonymous]
class STD_ANON_59 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 6, 16)
    _Documentation = None
STD_ANON_59._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_59, enum_prefix=None)
STD_ANON_59.EDTA_COD = STD_ANON_59._CF_enumeration.addEnumeration(unicode_value='EDTA_COD', tag='EDTA_COD')
STD_ANON_59._InitializeFacetMap(STD_ANON_59._CF_enumeration)
_module_typeBindings.STD_ANON_59 = STD_ANON_59

# Atomic simple type: [anonymous]
class STD_ANON_60 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 13, 16)
    _Documentation = None
STD_ANON_60._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_60, enum_prefix=None)
STD_ANON_60.n0 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='0', tag='n0')
STD_ANON_60.n11 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='11', tag='n11')
STD_ANON_60.n12 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='12', tag='n12')
STD_ANON_60.n13 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='13', tag='n13')
STD_ANON_60.n14 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='14', tag='n14')
STD_ANON_60.n15 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='15', tag='n15')
STD_ANON_60.n16 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='16', tag='n16')
STD_ANON_60.n17 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='17', tag='n17')
STD_ANON_60.n18 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='18', tag='n18')
STD_ANON_60.n19 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='19', tag='n19')
STD_ANON_60.n21 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='21', tag='n21')
STD_ANON_60.n22 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='22', tag='n22')
STD_ANON_60.n23 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='23', tag='n23')
STD_ANON_60.n24 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='24', tag='n24')
STD_ANON_60.n25 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='25', tag='n25')
STD_ANON_60.n26 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='26', tag='n26')
STD_ANON_60.n27 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='27', tag='n27')
STD_ANON_60.n28 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='28', tag='n28')
STD_ANON_60.n29 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='29', tag='n29')
STD_ANON_60.n31 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='31', tag='n31')
STD_ANON_60.n32 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='32', tag='n32')
STD_ANON_60.n33 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='33', tag='n33')
STD_ANON_60.n34 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='34', tag='n34')
STD_ANON_60.n35 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='35', tag='n35')
STD_ANON_60.n36 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='36', tag='n36')
STD_ANON_60.n37 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='37', tag='n37')
STD_ANON_60.n38 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='38', tag='n38')
STD_ANON_60.n39 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='39', tag='n39')
STD_ANON_60.n41 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='41', tag='n41')
STD_ANON_60.n42 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='42', tag='n42')
STD_ANON_60.n43 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='43', tag='n43')
STD_ANON_60.n44 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='44', tag='n44')
STD_ANON_60.n45 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='45', tag='n45')
STD_ANON_60.n46 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='46', tag='n46')
STD_ANON_60.n51 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='51', tag='n51')
STD_ANON_60.n52 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='52', tag='n52')
STD_ANON_60.n53 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='53', tag='n53')
STD_ANON_60.n54 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='54', tag='n54')
STD_ANON_60.n61 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='61', tag='n61')
STD_ANON_60.n62 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='62', tag='n62')
STD_ANON_60.n63 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='63', tag='n63')
STD_ANON_60.n64 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='64', tag='n64')
STD_ANON_60.n66 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='66', tag='n66')
STD_ANON_60.n67 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='67', tag='n67')
STD_ANON_60.n68 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='68', tag='n68')
STD_ANON_60.n69 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='69', tag='n69')
STD_ANON_60.n70 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='70', tag='n70')
STD_ANON_60.n71 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='71', tag='n71')
STD_ANON_60.n72 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='72', tag='n72')
STD_ANON_60.n73 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='73', tag='n73')
STD_ANON_60.n79 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='79', tag='n79')
STD_ANON_60.n81 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='81', tag='n81')
STD_ANON_60.n82 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='82', tag='n82')
STD_ANON_60.n99 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='99', tag='n99')
STD_ANON_60.n100 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='100', tag='n100')
STD_ANON_60.n101 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='101', tag='n101')
STD_ANON_60.n102 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='102', tag='n102')
STD_ANON_60.n103 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='103', tag='n103')
STD_ANON_60.n104 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='104', tag='n104')
STD_ANON_60.n105 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='105', tag='n105')
STD_ANON_60.n106 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='106', tag='n106')
STD_ANON_60.n107 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='107', tag='n107')
STD_ANON_60.n108 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='108', tag='n108')
STD_ANON_60.n109 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='109', tag='n109')
STD_ANON_60.n110 = STD_ANON_60._CF_enumeration.addEnumeration(unicode_value='110', tag='n110')
STD_ANON_60._InitializeFacetMap(STD_ANON_60._CF_enumeration)
_module_typeBindings.STD_ANON_60 = STD_ANON_60

# Atomic simple type: [anonymous]
class STD_ANON_61 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 345, 16)
    _Documentation = None
STD_ANON_61._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
STD_ANON_61._InitializeFacetMap(STD_ANON_61._CF_maxLength)
_module_typeBindings.STD_ANON_61 = STD_ANON_61

# Atomic simple type: [anonymous]
class STD_ANON_62 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 6, 16)
    _Documentation = None
STD_ANON_62._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_62, enum_prefix=None)
STD_ANON_62.EDTA = STD_ANON_62._CF_enumeration.addEnumeration(unicode_value='EDTA', tag='EDTA')
STD_ANON_62.EDTA2 = STD_ANON_62._CF_enumeration.addEnumeration(unicode_value='EDTA2', tag='EDTA2')
STD_ANON_62.SNOMED = STD_ANON_62._CF_enumeration.addEnumeration(unicode_value='SNOMED', tag='SNOMED')
STD_ANON_62._InitializeFacetMap(STD_ANON_62._CF_enumeration)
_module_typeBindings.STD_ANON_62 = STD_ANON_62

# Atomic simple type: [anonymous]
class STD_ANON_63 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 15, 16)
    _Documentation = None
STD_ANON_63._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_63, enum_prefix=None)
STD_ANON_63.n0 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='0', tag='n0')
STD_ANON_63.n10 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='10', tag='n10')
STD_ANON_63.n11 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='11', tag='n11')
STD_ANON_63.n12 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='12', tag='n12')
STD_ANON_63.n13 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='13', tag='n13')
STD_ANON_63.n14 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='14', tag='n14')
STD_ANON_63.n15 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='15', tag='n15')
STD_ANON_63.n16 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='16', tag='n16')
STD_ANON_63.n17 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='17', tag='n17')
STD_ANON_63.n19 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='19', tag='n19')
STD_ANON_63.n20 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='20', tag='n20')
STD_ANON_63.n21 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='21', tag='n21')
STD_ANON_63.n22 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='22', tag='n22')
STD_ANON_63.n23 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='23', tag='n23')
STD_ANON_63.n24 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='24', tag='n24')
STD_ANON_63.n25 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='25', tag='n25')
STD_ANON_63.n29 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='29', tag='n29')
STD_ANON_63.n30 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='30', tag='n30')
STD_ANON_63.n31 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='31', tag='n31')
STD_ANON_63.n32 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='32', tag='n32')
STD_ANON_63.n33 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='33', tag='n33')
STD_ANON_63.n34 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='34', tag='n34')
STD_ANON_63.n39 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='39', tag='n39')
STD_ANON_63.n40 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='40', tag='n40')
STD_ANON_63.n41 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='41', tag='n41')
STD_ANON_63.n42 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='42', tag='n42')
STD_ANON_63.n43 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='43', tag='n43')
STD_ANON_63.n49 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='49', tag='n49')
STD_ANON_63.n50 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='50', tag='n50')
STD_ANON_63.n51 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='51', tag='n51')
STD_ANON_63.n52 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='52', tag='n52')
STD_ANON_63.n53 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='53', tag='n53')
STD_ANON_63.n54 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='54', tag='n54')
STD_ANON_63.n59 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='59', tag='n59')
STD_ANON_63.n60 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='60', tag='n60')
STD_ANON_63.n61 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='61', tag='n61')
STD_ANON_63.n63 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='63', tag='n63')
STD_ANON_63.n66 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='66', tag='n66')
STD_ANON_63.n70 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='70', tag='n70')
STD_ANON_63.n71 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='71', tag='n71')
STD_ANON_63.n72 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='72', tag='n72')
STD_ANON_63.n73 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='73', tag='n73')
STD_ANON_63.n74 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='74', tag='n74')
STD_ANON_63.n75 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='75', tag='n75')
STD_ANON_63.n76 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='76', tag='n76')
STD_ANON_63.n78 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='78', tag='n78')
STD_ANON_63.n79 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='79', tag='n79')
STD_ANON_63.n80 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='80', tag='n80')
STD_ANON_63.n81 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='81', tag='n81')
STD_ANON_63.n82 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='82', tag='n82')
STD_ANON_63.n83 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='83', tag='n83')
STD_ANON_63.n84 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='84', tag='n84')
STD_ANON_63.n85 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='85', tag='n85')
STD_ANON_63.n86 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='86', tag='n86')
STD_ANON_63.n87 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='87', tag='n87')
STD_ANON_63.n88 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='88', tag='n88')
STD_ANON_63.n89 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='89', tag='n89')
STD_ANON_63.n90 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='90', tag='n90')
STD_ANON_63.n91 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='91', tag='n91')
STD_ANON_63.n92 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='92', tag='n92')
STD_ANON_63.n93 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='93', tag='n93')
STD_ANON_63.n94 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='94', tag='n94')
STD_ANON_63.n95 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='95', tag='n95')
STD_ANON_63.n96 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='96', tag='n96')
STD_ANON_63.n99 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='99', tag='n99')
STD_ANON_63.n1003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1003', tag='n1003')
STD_ANON_63.n1019 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1019', tag='n1019')
STD_ANON_63.n1026 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1026', tag='n1026')
STD_ANON_63.n1035 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1035', tag='n1035')
STD_ANON_63.n1042 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1042', tag='n1042')
STD_ANON_63.n1057 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1057', tag='n1057')
STD_ANON_63.n1061 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1061', tag='n1061')
STD_ANON_63.n1074 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1074', tag='n1074')
STD_ANON_63.n1088 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1088', tag='n1088')
STD_ANON_63.n1090 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1090', tag='n1090')
STD_ANON_63.n1100 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1100', tag='n1100')
STD_ANON_63.n1116 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1116', tag='n1116')
STD_ANON_63.n1128 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1128', tag='n1128')
STD_ANON_63.n1137 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1137', tag='n1137')
STD_ANON_63.n1144 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1144', tag='n1144')
STD_ANON_63.n1159 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1159', tag='n1159')
STD_ANON_63.n1163 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1163', tag='n1163')
STD_ANON_63.n1171 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1171', tag='n1171')
STD_ANON_63.n1185 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1185', tag='n1185')
STD_ANON_63.n1192 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1192', tag='n1192')
STD_ANON_63.n1205 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1205', tag='n1205')
STD_ANON_63.n1214 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1214', tag='n1214')
STD_ANON_63.n1222 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1222', tag='n1222')
STD_ANON_63.n1233 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1233', tag='n1233')
STD_ANON_63.n1246 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1246', tag='n1246')
STD_ANON_63.n1251 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1251', tag='n1251')
STD_ANON_63.n1267 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1267', tag='n1267')
STD_ANON_63.n1279 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1279', tag='n1279')
STD_ANON_63.n1280 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1280', tag='n1280')
STD_ANON_63.n1298 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1298', tag='n1298')
STD_ANON_63.n1308 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1308', tag='n1308')
STD_ANON_63.n1312 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1312', tag='n1312')
STD_ANON_63.n1320 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1320', tag='n1320')
STD_ANON_63.n1331 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1331', tag='n1331')
STD_ANON_63.n1349 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1349', tag='n1349')
STD_ANON_63.n1354 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1354', tag='n1354')
STD_ANON_63.n1365 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1365', tag='n1365')
STD_ANON_63.n1377 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1377', tag='n1377')
STD_ANON_63.n1383 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1383', tag='n1383')
STD_ANON_63.n1396 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1396', tag='n1396')
STD_ANON_63.n1401 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1401', tag='n1401')
STD_ANON_63.n1417 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1417', tag='n1417')
STD_ANON_63.n1429 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1429', tag='n1429')
STD_ANON_63.n1438 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1438', tag='n1438')
STD_ANON_63.n1440 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1440', tag='n1440')
STD_ANON_63.n1455 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1455', tag='n1455')
STD_ANON_63.n1464 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1464', tag='n1464')
STD_ANON_63.n1472 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1472', tag='n1472')
STD_ANON_63.n1486 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1486', tag='n1486')
STD_ANON_63.n1493 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1493', tag='n1493')
STD_ANON_63.n1504 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1504', tag='n1504')
STD_ANON_63.n1515 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1515', tag='n1515')
STD_ANON_63.n1527 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1527', tag='n1527')
STD_ANON_63.n1536 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1536', tag='n1536')
STD_ANON_63.n1543 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1543', tag='n1543')
STD_ANON_63.n1558 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1558', tag='n1558')
STD_ANON_63.n1562 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1562', tag='n1562')
STD_ANON_63.n1570 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1570', tag='n1570')
STD_ANON_63.n1589 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1589', tag='n1589')
STD_ANON_63.n1591 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1591', tag='n1591')
STD_ANON_63.n1602 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1602', tag='n1602')
STD_ANON_63.n1618 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1618', tag='n1618')
STD_ANON_63.n1625 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1625', tag='n1625')
STD_ANON_63.n1639 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1639', tag='n1639')
STD_ANON_63.n1641 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1641', tag='n1641')
STD_ANON_63.n1656 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1656', tag='n1656')
STD_ANON_63.n1660 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1660', tag='n1660')
STD_ANON_63.n1673 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1673', tag='n1673')
STD_ANON_63.n1687 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1687', tag='n1687')
STD_ANON_63.n1694 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1694', tag='n1694')
STD_ANON_63.n1706 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1706', tag='n1706')
STD_ANON_63.n1710 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1710', tag='n1710')
STD_ANON_63.n1723 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1723', tag='n1723')
STD_ANON_63.n1734 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1734', tag='n1734')
STD_ANON_63.n1747 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1747', tag='n1747')
STD_ANON_63.n1752 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1752', tag='n1752')
STD_ANON_63.n1768 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1768', tag='n1768')
STD_ANON_63.n1775 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1775', tag='n1775')
STD_ANON_63.n1781 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1781', tag='n1781')
STD_ANON_63.n1799 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1799', tag='n1799')
STD_ANON_63.n1809 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1809', tag='n1809')
STD_ANON_63.n1813 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1813', tag='n1813')
STD_ANON_63.n1821 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1821', tag='n1821')
STD_ANON_63.n1832 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1832', tag='n1832')
STD_ANON_63.n1845 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1845', tag='n1845')
STD_ANON_63.n1850 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1850', tag='n1850')
STD_ANON_63.n1866 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1866', tag='n1866')
STD_ANON_63.n1878 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1878', tag='n1878')
STD_ANON_63.n1884 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1884', tag='n1884')
STD_ANON_63.n1897 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1897', tag='n1897')
STD_ANON_63.n1907 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1907', tag='n1907')
STD_ANON_63.n1911 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1911', tag='n1911')
STD_ANON_63.n1924 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1924', tag='n1924')
STD_ANON_63.n1930 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1930', tag='n1930')
STD_ANON_63.n1948 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1948', tag='n1948')
STD_ANON_63.n1953 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1953', tag='n1953')
STD_ANON_63.n1969 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1969', tag='n1969')
STD_ANON_63.n1976 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1976', tag='n1976')
STD_ANON_63.n1982 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1982', tag='n1982')
STD_ANON_63.n1995 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1995', tag='n1995')
STD_ANON_63.n2005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2005', tag='n2005')
STD_ANON_63.n2014 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2014', tag='n2014')
STD_ANON_63.n2022 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2022', tag='n2022')
STD_ANON_63.n2033 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2033', tag='n2033')
STD_ANON_63.n2046 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2046', tag='n2046')
STD_ANON_63.n2051 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2051', tag='n2051')
STD_ANON_63.n2067 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2067', tag='n2067')
STD_ANON_63.n2079 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2079', tag='n2079')
STD_ANON_63.n2080 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2080', tag='n2080')
STD_ANON_63.n2098 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2098', tag='n2098')
STD_ANON_63.n2108 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2108', tag='n2108')
STD_ANON_63.n2112 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2112', tag='n2112')
STD_ANON_63.n2120 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2120', tag='n2120')
STD_ANON_63.n2131 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2131', tag='n2131')
STD_ANON_63.n2149 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2149', tag='n2149')
STD_ANON_63.n2154 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2154', tag='n2154')
STD_ANON_63.n2165 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2165', tag='n2165')
STD_ANON_63.n2177 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2177', tag='n2177')
STD_ANON_63.n2183 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2183', tag='n2183')
STD_ANON_63.n2196 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2196', tag='n2196')
STD_ANON_63.n2203 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2203', tag='n2203')
STD_ANON_63.n2219 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2219', tag='n2219')
STD_ANON_63.n2226 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2226', tag='n2226')
STD_ANON_63.n2235 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2235', tag='n2235')
STD_ANON_63.n2242 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2242', tag='n2242')
STD_ANON_63.n2257 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2257', tag='n2257')
STD_ANON_63.n2261 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2261', tag='n2261')
STD_ANON_63.n2274 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2274', tag='n2274')
STD_ANON_63.n2288 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2288', tag='n2288')
STD_ANON_63.n2290 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2290', tag='n2290')
STD_ANON_63.n2300 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2300', tag='n2300')
STD_ANON_63.n2316 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2316', tag='n2316')
STD_ANON_63.n2328 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2328', tag='n2328')
STD_ANON_63.n2337 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2337', tag='n2337')
STD_ANON_63.n2344 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2344', tag='n2344')
STD_ANON_63.n2359 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2359', tag='n2359')
STD_ANON_63.n2363 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2363', tag='n2363')
STD_ANON_63.n2371 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2371', tag='n2371')
STD_ANON_63.n2385 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2385', tag='n2385')
STD_ANON_63.n2392 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2392', tag='n2392')
STD_ANON_63.n2407 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2407', tag='n2407')
STD_ANON_63.n2411 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2411', tag='n2411')
STD_ANON_63.n2424 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2424', tag='n2424')
STD_ANON_63.n2430 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2430', tag='n2430')
STD_ANON_63.n2448 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2448', tag='n2448')
STD_ANON_63.n2453 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2453', tag='n2453')
STD_ANON_63.n2469 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2469', tag='n2469')
STD_ANON_63.n2476 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2476', tag='n2476')
STD_ANON_63.n2482 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2482', tag='n2482')
STD_ANON_63.n2495 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2495', tag='n2495')
STD_ANON_63.n2509 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2509', tag='n2509')
STD_ANON_63.n2513 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2513', tag='n2513')
STD_ANON_63.n2521 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2521', tag='n2521')
STD_ANON_63.n2532 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2532', tag='n2532')
STD_ANON_63.n2545 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2545', tag='n2545')
STD_ANON_63.n2550 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2550', tag='n2550')
STD_ANON_63.n2566 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2566', tag='n2566')
STD_ANON_63.n2578 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2578', tag='n2578')
STD_ANON_63.n2584 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2584', tag='n2584')
STD_ANON_63.n2597 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2597', tag='n2597')
STD_ANON_63.n2606 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2606', tag='n2606')
STD_ANON_63.n2610 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2610', tag='n2610')
STD_ANON_63.n2623 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2623', tag='n2623')
STD_ANON_63.n2634 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2634', tag='n2634')
STD_ANON_63.n2647 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2647', tag='n2647')
STD_ANON_63.n2652 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2652', tag='n2652')
STD_ANON_63.n2668 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2668', tag='n2668')
STD_ANON_63.n2675 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2675', tag='n2675')
STD_ANON_63.n2681 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2681', tag='n2681')
STD_ANON_63.n2699 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2699', tag='n2699')
STD_ANON_63.n2702 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2702', tag='n2702')
STD_ANON_63.n2718 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2718', tag='n2718')
STD_ANON_63.n2725 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2725', tag='n2725')
STD_ANON_63.n2739 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2739', tag='n2739')
STD_ANON_63.n2741 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2741', tag='n2741')
STD_ANON_63.n2756 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2756', tag='n2756')
STD_ANON_63.n2760 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2760', tag='n2760')
STD_ANON_63.n2773 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2773', tag='n2773')
STD_ANON_63.n2787 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2787', tag='n2787')
STD_ANON_63.n2794 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2794', tag='n2794')
STD_ANON_63.n2804 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2804', tag='n2804')
STD_ANON_63.n2815 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2815', tag='n2815')
STD_ANON_63.n2827 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2827', tag='n2827')
STD_ANON_63.n2836 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2836', tag='n2836')
STD_ANON_63.n2843 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2843', tag='n2843')
STD_ANON_63.n2858 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2858', tag='n2858')
STD_ANON_63.n2862 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2862', tag='n2862')
STD_ANON_63.n2870 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2870', tag='n2870')
STD_ANON_63.n2889 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2889', tag='n2889')
STD_ANON_63.n2891 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2891', tag='n2891')
STD_ANON_63.n2901 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2901', tag='n2901')
STD_ANON_63.n2917 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2917', tag='n2917')
STD_ANON_63.n2929 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2929', tag='n2929')
STD_ANON_63.n2938 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2938', tag='n2938')
STD_ANON_63.n2940 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2940', tag='n2940')
STD_ANON_63.n2955 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2955', tag='n2955')
STD_ANON_63.n2964 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2964', tag='n2964')
STD_ANON_63.n2972 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2972', tag='n2972')
STD_ANON_63.n2986 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2986', tag='n2986')
STD_ANON_63.n2993 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2993', tag='n2993')
STD_ANON_63.n3000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3000', tag='n3000')
STD_ANON_63.n3016 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3016', tag='n3016')
STD_ANON_63.n3028 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3028', tag='n3028')
STD_ANON_63.n3037 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3037', tag='n3037')
STD_ANON_63.n3044 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3044', tag='n3044')
STD_ANON_63.n3059 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3059', tag='n3059')
STD_ANON_63.n3063 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3063', tag='n3063')
STD_ANON_63.n3071 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3071', tag='n3071')
STD_ANON_63.n3085 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3085', tag='n3085')
STD_ANON_63.n3092 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3092', tag='n3092')
STD_ANON_63.n3102 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3102', tag='n3102')
STD_ANON_63.n3118 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3118', tag='n3118')
STD_ANON_63.n3125 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3125', tag='n3125')
STD_ANON_63.n3139 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3139', tag='n3139')
STD_ANON_63.n3141 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3141', tag='n3141')
STD_ANON_63.n3156 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3156', tag='n3156')
STD_ANON_63.n3160 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3160', tag='n3160')
STD_ANON_63.n3173 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3173', tag='n3173')
STD_ANON_63.n3187 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3187', tag='n3187')
STD_ANON_63.n3194 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3194', tag='n3194')
STD_ANON_63.n3207 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3207', tag='n3207')
STD_ANON_63.n3211 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3211', tag='n3211')
STD_ANON_63.n3224 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3224', tag='n3224')
STD_ANON_63.n3230 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3230', tag='n3230')
STD_ANON_63.n3248 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3248', tag='n3248')
STD_ANON_63.n3253 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3253', tag='n3253')
STD_ANON_63.n3269 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3269', tag='n3269')
STD_ANON_63.n3276 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3276', tag='n3276')
STD_ANON_63.n3282 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3282', tag='n3282')
STD_ANON_63.n3295 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3295', tag='n3295')
STD_ANON_63.n3305 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3305', tag='n3305')
STD_ANON_63.n3314 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3314', tag='n3314')
STD_ANON_63.n3322 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3322', tag='n3322')
STD_ANON_63.n3333 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3333', tag='n3333')
STD_ANON_63.n3346 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3346', tag='n3346')
STD_ANON_63.n3351 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3351', tag='n3351')
STD_ANON_63.n3367 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3367', tag='n3367')
STD_ANON_63.n3379 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3379', tag='n3379')
STD_ANON_63.n3380 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3380', tag='n3380')
STD_ANON_63.n3398 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3398', tag='n3398')
STD_ANON_63.n3403 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3403', tag='n3403')
STD_ANON_63.n3419 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3419', tag='n3419')
STD_ANON_63.n3426 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3426', tag='n3426')
STD_ANON_63.n3435 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3435', tag='n3435')
STD_ANON_63.n3442 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3442', tag='n3442')
STD_ANON_63.n3457 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3457', tag='n3457')
STD_ANON_63.n3461 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3461', tag='n3461')
STD_ANON_63.n3474 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3474', tag='n3474')
STD_ANON_63.n3488 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3488', tag='n3488')
STD_ANON_63.n3490 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3490', tag='n3490')
STD_ANON_63.n3501 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3501', tag='n3501')
STD_ANON_63.n3517 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3517', tag='n3517')
STD_ANON_63.n3529 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3529', tag='n3529')
STD_ANON_63.n3538 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3538', tag='n3538')
STD_ANON_63.n3540 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3540', tag='n3540')
STD_ANON_63.n3555 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3555', tag='n3555')
STD_ANON_63.n3564 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3564', tag='n3564')
STD_ANON_63.n3572 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3572', tag='n3572')
STD_ANON_63.n3604 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3604', tag='n3604')
STD_ANON_63.n3615 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3615', tag='n3615')
STD_ANON_63.n3627 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3627', tag='n3627')
STD_ANON_63.n3636 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3636', tag='n3636')
STD_ANON_63.n3643 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3643', tag='n3643')
STD_ANON_63.n3658 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3658', tag='n3658')
STD_ANON_63.n3662 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3662', tag='n3662')
STD_ANON_63.n3670 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3670', tag='n3670')
STD_ANON_63.n3689 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3689', tag='n3689')
STD_ANON_63.n3691 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3691', tag='n3691')
STD_ANON_63.n3708 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3708', tag='n3708')
STD_ANON_63.n3712 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3712', tag='n3712')
STD_ANON_63.n3720 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3720', tag='n3720')
STD_ANON_63.n3731 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3731', tag='n3731')
STD_ANON_63.n3749 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3749', tag='n3749')
STD_ANON_63.n3754 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3754', tag='n3754')
STD_ANON_63.n3765 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3765', tag='n3765')
STD_ANON_63.n3777 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3777', tag='n3777')
STD_ANON_63.n3783 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3783', tag='n3783')
STD_ANON_63.n3796 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3796', tag='n3796')
STD_ANON_63.n3806 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3806', tag='n3806')
STD_ANON_63.n3810 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3810', tag='n3810')
STD_ANON_63.n3823 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3823', tag='n3823')
STD_ANON_63.n3834 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3834', tag='n3834')
STD_ANON_63.n3847 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3847', tag='n3847')
STD_ANON_63.n3852 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3852', tag='n3852')
STD_ANON_63.n36171008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='36171008', tag='n36171008')
STD_ANON_63.n52254009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='52254009', tag='n52254009')
STD_ANON_63.n445119005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='445119005', tag='n445119005')
STD_ANON_63.n449820008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='449820008', tag='n449820008')
STD_ANON_63.n705065000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='705065000', tag='n705065000')
STD_ANON_63.n48796009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='48796009', tag='n48796009')
STD_ANON_63.n197601003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='197601003', tag='n197601003')
STD_ANON_63.n722369003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722369003', tag='n722369003')
STD_ANON_63.n236384008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236384008', tag='n236384008')
STD_ANON_63.n236385009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236385009', tag='n236385009')
STD_ANON_63.n722118005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722118005', tag='n722118005')
STD_ANON_63.n44785005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='44785005', tag='n44785005')
STD_ANON_63.n236407003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236407003', tag='n236407003')
STD_ANON_63.n445404003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='445404003', tag='n445404003')
STD_ANON_63.n282364005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='282364005', tag='n282364005')
STD_ANON_63.n236411009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236411009', tag='n236411009')
STD_ANON_63.n722119002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722119002', tag='n722119002')
STD_ANON_63.n722086002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722086002', tag='n722086002')
STD_ANON_63.n722120008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722120008', tag='n722120008')
STD_ANON_63.n722168002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722168002', tag='n722168002')
STD_ANON_63.n75888001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='75888001', tag='n75888001')
STD_ANON_63.n59479006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='59479006', tag='n59479006')
STD_ANON_63.n236409000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236409000', tag='n236409000')
STD_ANON_63.n236398000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236398000', tag='n236398000')
STD_ANON_63.n236403004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236403004', tag='n236403004')
STD_ANON_63.n445388002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='445388002', tag='n445388002')
STD_ANON_63.n445388002_ = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='445388002', tag='n445388002_')
STD_ANON_63.n444977005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='444977005', tag='n444977005')
STD_ANON_63.n444977005_ = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='444977005', tag='n444977005_')
STD_ANON_63.n236403004_ = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236403004', tag='n236403004_')
STD_ANON_63.n713887002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='713887002', tag='n713887002')
STD_ANON_63.n722139003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722139003', tag='n722139003')
STD_ANON_63.n722147003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722147003', tag='n722147003')
STD_ANON_63.n3704008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3704008', tag='n3704008')
STD_ANON_63.n35546006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='35546006', tag='n35546006')
STD_ANON_63.n83866005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='83866005', tag='n83866005')
STD_ANON_63.n36171008_ = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='36171008', tag='n36171008_')
STD_ANON_63.n46956008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='46956008', tag='n46956008')
STD_ANON_63.n195353004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='195353004', tag='n195353004')
STD_ANON_63.n239928004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='239928004', tag='n239928004')
STD_ANON_63.n82275008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='82275008', tag='n82275008')
STD_ANON_63.n155441006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='155441006', tag='n155441006')
STD_ANON_63.n236506009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236506009', tag='n236506009')
STD_ANON_63.n50581000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='50581000', tag='n50581000')
STD_ANON_63.n68815009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='68815009', tag='n68815009')
STD_ANON_63.n68815009_ = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='68815009', tag='n68815009_')
STD_ANON_63.n191306005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='191306005', tag='n191306005')
STD_ANON_63.n236502006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236502006', tag='n236502006')
STD_ANON_63.n239947001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='239947001', tag='n239947001')
STD_ANON_63.n239947001_ = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='239947001', tag='n239947001_')
STD_ANON_63.n128971000119101 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='128971000119101', tag='n128971000119101')
STD_ANON_63.n28807005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='28807005', tag='n28807005')
STD_ANON_63.n197764002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='197764002', tag='n197764002')
STD_ANON_63.n707208009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='707208009', tag='n707208009')
STD_ANON_63.n204949001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='204949001', tag='n204949001')
STD_ANON_63.n737562008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='737562008', tag='n737562008')
STD_ANON_63.n710571007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='710571007', tag='n710571007')
STD_ANON_63.n609572000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='609572000', tag='n609572000')
STD_ANON_63.n253864004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='253864004', tag='n253864004')
STD_ANON_63.n373584008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='373584008', tag='n373584008')
STD_ANON_63.n373585009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='373585009', tag='n373585009')
STD_ANON_63.n253900005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='253900005', tag='n253900005')
STD_ANON_63.n5187006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='5187006', tag='n5187006')
STD_ANON_63.n445387007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='445387007', tag='n445387007')
STD_ANON_63.n61758007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='61758007', tag='n61758007')
STD_ANON_63.n253904001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='253904001', tag='n253904001')
STD_ANON_63.n18417009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='18417009', tag='n18417009')
STD_ANON_63.n90241004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='90241004', tag='n90241004')
STD_ANON_63.n723074006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='723074006', tag='n723074006')
STD_ANON_63.n722077007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722077007', tag='n722077007')
STD_ANON_63.n722085003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722085003', tag='n722085003')
STD_ANON_63.n698757009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='698757009', tag='n698757009')
STD_ANON_63.n722078002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722078002', tag='n722078002')
STD_ANON_63.n722082000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722082000', tag='n722082000')
STD_ANON_63.n722081007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722081007', tag='n722081007')
STD_ANON_63.n722089009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722089009', tag='n722089009')
STD_ANON_63.n722088001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722088001', tag='n722088001')
STD_ANON_63.n197808006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='197808006', tag='n197808006')
STD_ANON_63.n236017004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236017004', tag='n236017004')
STD_ANON_63.n236015007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236015007', tag='n236015007')
STD_ANON_63.n49120005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='49120005', tag='n49120005')
STD_ANON_63.n95566004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='95566004', tag='n95566004')
STD_ANON_63.n444717006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='444717006', tag='n444717006')
STD_ANON_63.n37497004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='37497004', tag='n37497004')
STD_ANON_63.n444690001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='444690001', tag='n444690001')
STD_ANON_63.n267441009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='267441009', tag='n267441009')
STD_ANON_63.n28689008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='28689008', tag='n28689008')
STD_ANON_63.n428255004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='428255004', tag='n428255004')
STD_ANON_63.n37061001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='37061001', tag='n37061001')
STD_ANON_63.n236514003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236514003', tag='n236514003')
STD_ANON_63.n439990003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='439990003', tag='n439990003')
STD_ANON_63.n59400006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='59400006', tag='n59400006')
STD_ANON_63.n704203009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='704203009', tag='n704203009')
STD_ANON_63.n704205002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='704205002', tag='n704205002')
STD_ANON_63.n704206001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='704206001', tag='n704206001')
STD_ANON_63.n704055002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='704055002', tag='n704055002')
STD_ANON_63.n53556002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='53556002', tag='n53556002')
STD_ANON_63.n4390004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='4390004', tag='n4390004')
STD_ANON_63.n704204003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='704204003', tag='n704204003')
STD_ANON_63.n236496000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236496000', tag='n236496000')
STD_ANON_63.n190829000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='190829000', tag='n190829000')
STD_ANON_63.n33763006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='33763006', tag='n33763006')
STD_ANON_63.n7725007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='7725007', tag='n7725007')
STD_ANON_63.n3321001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='3321001', tag='n3321001')
STD_ANON_63.n80640009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='80640009', tag='n80640009')
STD_ANON_63.n44323002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='44323002', tag='n44323002')
STD_ANON_63.n77377001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='77377001', tag='n77377001')
STD_ANON_63.n102455002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='102455002', tag='n102455002')
STD_ANON_63.n38898003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='38898003', tag='n38898003')
STD_ANON_63.n713504001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='713504001', tag='n713504001')
STD_ANON_63.n236706006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236706006', tag='n236706006')
STD_ANON_63.n40733004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='40733004', tag='n40733004')
STD_ANON_63.n421893009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='421893009', tag='n421893009')
STD_ANON_63.n420279001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='420279001', tag='n420279001')
STD_ANON_63.n38481006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='38481006', tag='n38481006')
STD_ANON_63.n65443008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='65443008', tag='n65443008')
STD_ANON_63.n65443008_ = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='65443008', tag='n65443008_')
STD_ANON_63.n445108007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='445108007', tag='n445108007')
STD_ANON_63.n710565001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='710565001', tag='n710565001')
STD_ANON_63.n302233006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='302233006', tag='n302233006')
STD_ANON_63.n51677000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='51677000', tag='n51677000')
STD_ANON_63.n51677000_ = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='51677000', tag='n51677000_')
STD_ANON_63.n2900003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='2900003', tag='n2900003')
STD_ANON_63.n236488005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236488005', tag='n236488005')
STD_ANON_63.n15842009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='15842009', tag='n15842009')
STD_ANON_63.n445236007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='445236007', tag='n445236007')
STD_ANON_63.n51292008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='51292008', tag='n51292008')
STD_ANON_63.n48713002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='48713002', tag='n48713002')
STD_ANON_63.n274945004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='274945004', tag='n274945004')
STD_ANON_63.n23132008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='23132008', tag='n23132008')
STD_ANON_63.n66451004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='66451004', tag='n66451004')
STD_ANON_63.n367528006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='367528006', tag='n367528006')
STD_ANON_63.n32278006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='32278006', tag='n32278006')
STD_ANON_63.n373604002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='373604002', tag='n373604002')
STD_ANON_63.n73305009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='73305009', tag='n73305009')
STD_ANON_63.n373421000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='373421000', tag='n373421000')
STD_ANON_63.n373422007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='373422007', tag='n373422007')
STD_ANON_63.n78129009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='78129009', tag='n78129009')
STD_ANON_63.n111407006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='111407006', tag='n111407006')
STD_ANON_63.n444976001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='444976001', tag='n444976001')
STD_ANON_63.n722721004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722721004', tag='n722721004')
STD_ANON_63.n373420004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='373420004', tag='n373420004')
STD_ANON_63.n736993008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='736993008', tag='n736993008')
STD_ANON_63.n736992003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='736992003', tag='n736992003')
STD_ANON_63.n13886001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='13886001', tag='n13886001')
STD_ANON_63.n28728008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='28728008', tag='n28728008')
STD_ANON_63.n253878003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='253878003', tag='n253878003')
STD_ANON_63.n253879006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='253879006', tag='n253879006')
STD_ANON_63.n28770003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='28770003', tag='n28770003')
STD_ANON_63.n399340005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='399340005', tag='n399340005')
STD_ANON_63.n236421001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236421001', tag='n236421001')
STD_ANON_63.n236418003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236418003', tag='n236418003')
STD_ANON_63.n236439005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236439005', tag='n236439005')
STD_ANON_63.n726017001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='726017001', tag='n726017001')
STD_ANON_63.n723373006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='723373006', tag='n723373006')
STD_ANON_63.n46785007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='46785007', tag='n46785007')
STD_ANON_63.n204958008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='204958008', tag='n204958008')
STD_ANON_63.n444830001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='444830001', tag='n444830001')
STD_ANON_63.n444558002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='444558002', tag='n444558002')
STD_ANON_63.n444749006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='444749006', tag='n444749006')
STD_ANON_63.n446989009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='446989009', tag='n446989009')
STD_ANON_63.n446991001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='446991001', tag='n446991001')
STD_ANON_63.n447335007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='447335007', tag='n447335007')
STD_ANON_63.n236466005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236466005', tag='n236466005')
STD_ANON_63.n197744007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='197744007', tag='n197744007')
STD_ANON_63.n444645005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='444645005', tag='n444645005')
STD_ANON_63.n79385002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='79385002', tag='n79385002')
STD_ANON_63.n698953004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='698953004', tag='n698953004')
STD_ANON_63.n85020001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='85020001', tag='n85020001')
STD_ANON_63.n190681003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='190681003', tag='n190681003')
STD_ANON_63.n226309007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='226309007', tag='n226309007')
STD_ANON_63.n82236004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='82236004', tag='n82236004')
STD_ANON_63.n90505000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='90505000', tag='n90505000')
STD_ANON_63.n1776003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='1776003', tag='n1776003')
STD_ANON_63.n24790002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='24790002', tag='n24790002')
STD_ANON_63.n236461000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236461000', tag='n236461000')
STD_ANON_63.n722468005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722468005', tag='n722468005')
STD_ANON_63.n111395007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='111395007', tag='n111395007')
STD_ANON_63.n10406007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='10406007', tag='n10406007')
STD_ANON_63.n35759001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='35759001', tag='n35759001')
STD_ANON_63.n124274002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='124274002', tag='n124274002')
STD_ANON_63.n31742004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='31742004', tag='n31742004')
STD_ANON_63.n707742001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='707742001', tag='n707742001')
STD_ANON_63.n707756004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='707756004', tag='n707756004')
STD_ANON_63.n707747007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='707747007', tag='n707747007')
STD_ANON_63.n237770005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='237770005', tag='n237770005')
STD_ANON_63.n237743003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='237743003', tag='n237743003')
STD_ANON_63.n237604008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='237604008', tag='n237604008')
STD_ANON_63.n43941006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='43941006', tag='n43941006')
STD_ANON_63.n15689008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='15689008', tag='n15689008')
STD_ANON_63.n237885008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='237885008', tag='n237885008')
STD_ANON_63.n711152006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='711152006', tag='n711152006')
STD_ANON_63.n80710001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='80710001', tag='n80710001')
STD_ANON_63.n17901006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='17901006', tag='n17901006')
STD_ANON_63.n65520001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='65520001', tag='n65520001')
STD_ANON_63.n40951006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='40951006', tag='n40951006')
STD_ANON_63.n734990008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='734990008', tag='n734990008')
STD_ANON_63.n16652001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='16652001', tag='n16652001')
STD_ANON_63.n190919008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='190919008', tag='n190919008')
STD_ANON_63.n236527004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236527004', tag='n236527004')
STD_ANON_63.n45582004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='45582004', tag='n45582004')
STD_ANON_63.n7199000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='7199000', tag='n7199000')
STD_ANON_63.n46659004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='46659004', tag='n46659004')
STD_ANON_63.n236443009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236443009', tag='n236443009')
STD_ANON_63.n41729002 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='41729002', tag='n41729002')
STD_ANON_63.n445431000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='445431000', tag='n445431000')
STD_ANON_63.n446449009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='446449009', tag='n446449009')
STD_ANON_63.n290006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='290006', tag='n290006')
STD_ANON_63.n63247009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='63247009', tag='n63247009')
STD_ANON_63.n24750000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='24750000', tag='n24750000')
STD_ANON_63.n232059000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='232059000', tag='n232059000')
STD_ANON_63.n240096000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='240096000', tag='n240096000')
STD_ANON_63.n236419006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236419006', tag='n236419006')
STD_ANON_63.n14669001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='14669001', tag='n14669001')
STD_ANON_63.n722096006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722096006', tag='n722096006')
STD_ANON_63.n722095005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722095005', tag='n722095005')
STD_ANON_63.n722278006 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722278006', tag='n722278006')
STD_ANON_63.n23697004 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='23697004', tag='n23697004')
STD_ANON_63.n236428007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236428007', tag='n236428007')
STD_ANON_63.n444794000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='444794000', tag='n444794000')
STD_ANON_63.n36689008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='36689008', tag='n36689008')
STD_ANON_63.n126880001 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='126880001', tag='n126880001')
STD_ANON_63.n254915003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='254915003', tag='n254915003')
STD_ANON_63.n408642003 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='408642003', tag='n408642003')
STD_ANON_63.n302849000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='302849000', tag='n302849000')
STD_ANON_63.n307604008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='307604008', tag='n307604008')
STD_ANON_63.n236513009 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='236513009', tag='n236513009')
STD_ANON_63.n249582007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='249582007', tag='n249582007')
STD_ANON_63.n722149000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722149000', tag='n722149000')
STD_ANON_63.n722467000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722467000', tag='n722467000')
STD_ANON_63.n722098007 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722098007', tag='n722098007')
STD_ANON_63.n90688005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='90688005', tag='n90688005')
STD_ANON_63.n53298000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='53298000', tag='n53298000')
STD_ANON_63.n29738008 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='29738008', tag='n29738008')
STD_ANON_63.n722150000 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='722150000', tag='n722150000')
STD_ANON_63.n42399005 = STD_ANON_63._CF_enumeration.addEnumeration(unicode_value='42399005', tag='n42399005')
STD_ANON_63._InitializeFacetMap(STD_ANON_63._CF_enumeration)
_module_typeBindings.STD_ANON_63 = STD_ANON_63

# Atomic simple type: [anonymous]
class STD_ANON_64 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 2947, 16)
    _Documentation = None
STD_ANON_64._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
STD_ANON_64._InitializeFacetMap(STD_ANON_64._CF_maxLength)
_module_typeBindings.STD_ANON_64 = STD_ANON_64

# Atomic simple type: [anonymous]
class STD_ANON_65 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 5, 4)
    _Documentation = None
STD_ANON_65._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_65, enum_prefix=None)
STD_ANON_65.HL7_0004 = STD_ANON_65._CF_enumeration.addEnumeration(unicode_value='HL7_0004', tag='HL7_0004')
STD_ANON_65._InitializeFacetMap(STD_ANON_65._CF_enumeration)
_module_typeBindings.STD_ANON_65 = STD_ANON_65

# Atomic simple type: [anonymous]
class STD_ANON_66 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 12, 4)
    _Documentation = None
STD_ANON_66._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_66, enum_prefix=None)
STD_ANON_66.E = STD_ANON_66._CF_enumeration.addEnumeration(unicode_value='E', tag='E')
STD_ANON_66.I = STD_ANON_66._CF_enumeration.addEnumeration(unicode_value='I', tag='I')
STD_ANON_66.O = STD_ANON_66._CF_enumeration.addEnumeration(unicode_value='O', tag='O')
STD_ANON_66.P = STD_ANON_66._CF_enumeration.addEnumeration(unicode_value='P', tag='P')
STD_ANON_66.R = STD_ANON_66._CF_enumeration.addEnumeration(unicode_value='R', tag='R')
STD_ANON_66.B = STD_ANON_66._CF_enumeration.addEnumeration(unicode_value='B', tag='B')
STD_ANON_66.D = STD_ANON_66._CF_enumeration.addEnumeration(unicode_value='D', tag='D')
STD_ANON_66.W = STD_ANON_66._CF_enumeration.addEnumeration(unicode_value='W', tag='W')
STD_ANON_66.S = STD_ANON_66._CF_enumeration.addEnumeration(unicode_value='S', tag='S')
STD_ANON_66.K = STD_ANON_66._CF_enumeration.addEnumeration(unicode_value='K', tag='K')
STD_ANON_66._InitializeFacetMap(STD_ANON_66._CF_enumeration)
_module_typeBindings.STD_ANON_66 = STD_ANON_66

# Atomic simple type: [anonymous]
class STD_ANON_67 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 68, 4)
    _Documentation = None
STD_ANON_67._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_67._InitializeFacetMap(STD_ANON_67._CF_maxLength)
_module_typeBindings.STD_ANON_67 = STD_ANON_67

# Atomic simple type: [anonymous]
class STD_ANON_68 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 5, 4)
    _Documentation = None
STD_ANON_68._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_68, enum_prefix=None)
STD_ANON_68.HL7_00204 = STD_ANON_68._CF_enumeration.addEnumeration(unicode_value='HL7_00204', tag='HL7_00204')
STD_ANON_68._InitializeFacetMap(STD_ANON_68._CF_enumeration)
_module_typeBindings.STD_ANON_68 = STD_ANON_68

# Atomic simple type: [anonymous]
class STD_ANON_69 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 12, 4)
    _Documentation = None
STD_ANON_69._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_69, enum_prefix=None)
STD_ANON_69.DA = STD_ANON_69._CF_enumeration.addEnumeration(unicode_value='DA', tag='DA')
STD_ANON_69.FA = STD_ANON_69._CF_enumeration.addEnumeration(unicode_value='FA', tag='FA')
STD_ANON_69.MA = STD_ANON_69._CF_enumeration.addEnumeration(unicode_value='MA', tag='MA')
STD_ANON_69.MC = STD_ANON_69._CF_enumeration.addEnumeration(unicode_value='MC', tag='MC')
STD_ANON_69._InitializeFacetMap(STD_ANON_69._CF_enumeration)
_module_typeBindings.STD_ANON_69 = STD_ANON_69

# Atomic simple type: [anonymous]
class STD_ANON_70 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 38, 4)
    _Documentation = None
STD_ANON_70._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_70._InitializeFacetMap(STD_ANON_70._CF_maxLength)
_module_typeBindings.STD_ANON_70 = STD_ANON_70

# Atomic simple type: [anonymous]
class STD_ANON_71 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 5, 4)
    _Documentation = None
STD_ANON_71._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_71, enum_prefix=None)
STD_ANON_71.HL7_00206 = STD_ANON_71._CF_enumeration.addEnumeration(unicode_value='HL7_00206', tag='HL7_00206')
STD_ANON_71._InitializeFacetMap(STD_ANON_71._CF_enumeration)
_module_typeBindings.STD_ANON_71 = STD_ANON_71

# Atomic simple type: [anonymous]
class STD_ANON_72 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 12, 4)
    _Documentation = None
STD_ANON_72._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_72, enum_prefix=None)
STD_ANON_72.SV = STD_ANON_72._CF_enumeration.addEnumeration(unicode_value='SV', tag='SV')
STD_ANON_72.MO = STD_ANON_72._CF_enumeration.addEnumeration(unicode_value='MO', tag='MO')
STD_ANON_72.MI = STD_ANON_72._CF_enumeration.addEnumeration(unicode_value='MI', tag='MI')
STD_ANON_72._InitializeFacetMap(STD_ANON_72._CF_enumeration)
_module_typeBindings.STD_ANON_72 = STD_ANON_72

# Atomic simple type: [anonymous]
class STD_ANON_73 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 33, 4)
    _Documentation = None
STD_ANON_73._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_73._InitializeFacetMap(STD_ANON_73._CF_maxLength)
_module_typeBindings.STD_ANON_73 = STD_ANON_73

# Atomic simple type: [anonymous]
class STD_ANON_74 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 5, 16)
    _Documentation = None
STD_ANON_74._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_74, enum_prefix=None)
STD_ANON_74.CF_RR23 = STD_ANON_74._CF_enumeration.addEnumeration(unicode_value='CF_RR23', tag='CF_RR23')
STD_ANON_74._InitializeFacetMap(STD_ANON_74._CF_enumeration)
_module_typeBindings.STD_ANON_74 = STD_ANON_74

# Atomic simple type: [anonymous]
class STD_ANON_75 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 12, 16)
    _Documentation = None
STD_ANON_75._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_75, enum_prefix=None)
STD_ANON_75.l = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='l', tag='l')
STD_ANON_75.dl = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='dl', tag='dl')
STD_ANON_75.ml = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='ml', tag='ml')
STD_ANON_75.g = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='g', tag='g')
STD_ANON_75.mg = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='mg', tag='mg')
STD_ANON_75.ug = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='ug', tag='ug')
STD_ANON_75.g_ = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='μg', tag='g_')
STD_ANON_75.ng = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='ng', tag='ng')
STD_ANON_75.tab = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='tab', tag='tab')
STD_ANON_75.units = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='units', tag='units')
STD_ANON_75.mmol = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='mmol', tag='mmol')
STD_ANON_75.other = STD_ANON_75._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_75._InitializeFacetMap(STD_ANON_75._CF_enumeration)
_module_typeBindings.STD_ANON_75 = STD_ANON_75

# Atomic simple type: [anonymous]
class STD_ANON_76 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 79, 16)
    _Documentation = None
STD_ANON_76._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_76._InitializeFacetMap(STD_ANON_76._CF_maxLength)
_module_typeBindings.STD_ANON_76 = STD_ANON_76

# Atomic simple type: [anonymous]
class STD_ANON_77 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 5, 16)
    _Documentation = None
STD_ANON_77._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_77, enum_prefix=None)
STD_ANON_77.CF_RR7_DISCHARGE = STD_ANON_77._CF_enumeration.addEnumeration(unicode_value='CF_RR7_DISCHARGE', tag='CF_RR7_DISCHARGE')
STD_ANON_77._InitializeFacetMap(STD_ANON_77._CF_enumeration)
_module_typeBindings.STD_ANON_77 = STD_ANON_77

# Atomic simple type: [anonymous]
class STD_ANON_78 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 12, 16)
    _Documentation = None
STD_ANON_78._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_78, enum_prefix=None)
STD_ANON_78.n30 = STD_ANON_78._CF_enumeration.addEnumeration(unicode_value='30', tag='n30')
STD_ANON_78.n38 = STD_ANON_78._CF_enumeration.addEnumeration(unicode_value='38', tag='n38')
STD_ANON_78.n90 = STD_ANON_78._CF_enumeration.addEnumeration(unicode_value='90', tag='n90')
STD_ANON_78.n91 = STD_ANON_78._CF_enumeration.addEnumeration(unicode_value='91', tag='n91')
STD_ANON_78.n95 = STD_ANON_78._CF_enumeration.addEnumeration(unicode_value='95', tag='n95')
STD_ANON_78.n84 = STD_ANON_78._CF_enumeration.addEnumeration(unicode_value='84', tag='n84')
STD_ANON_78.n85 = STD_ANON_78._CF_enumeration.addEnumeration(unicode_value='85', tag='n85')
STD_ANON_78.n86 = STD_ANON_78._CF_enumeration.addEnumeration(unicode_value='86', tag='n86')
STD_ANON_78.n92 = STD_ANON_78._CF_enumeration.addEnumeration(unicode_value='92', tag='n92')
STD_ANON_78._InitializeFacetMap(STD_ANON_78._CF_enumeration)
_module_typeBindings.STD_ANON_78 = STD_ANON_78

# Atomic simple type: [anonymous]
class STD_ANON_79 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 64, 16)
    _Documentation = None
STD_ANON_79._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_79._InitializeFacetMap(STD_ANON_79._CF_maxLength)
_module_typeBindings.STD_ANON_79 = STD_ANON_79

# Atomic simple type: [anonymous]
class STD_ANON_80 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 5, 16)
    _Documentation = None
STD_ANON_80._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_80, enum_prefix=None)
STD_ANON_80.CF_RR7_TREATMENT = STD_ANON_80._CF_enumeration.addEnumeration(unicode_value='CF_RR7_TREATMENT', tag='CF_RR7_TREATMENT')
STD_ANON_80._InitializeFacetMap(STD_ANON_80._CF_enumeration)
_module_typeBindings.STD_ANON_80 = STD_ANON_80

# Atomic simple type: [anonymous]
class STD_ANON_81 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 12, 16)
    _Documentation = None
STD_ANON_81._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_81, enum_prefix=None)
STD_ANON_81.n1 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='1', tag='n1')
STD_ANON_81.n2 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='2', tag='n2')
STD_ANON_81.n3 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='3', tag='n3')
STD_ANON_81.n5 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='5', tag='n5')
STD_ANON_81.n10 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='10', tag='n10')
STD_ANON_81.n11 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='11', tag='n11')
STD_ANON_81.n12 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='12', tag='n12')
STD_ANON_81.n13 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='13', tag='n13')
STD_ANON_81.n14 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='14', tag='n14')
STD_ANON_81.n15 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='15', tag='n15')
STD_ANON_81.n16 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='16', tag='n16')
STD_ANON_81.n17 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='17', tag='n17')
STD_ANON_81.n20 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='20', tag='n20')
STD_ANON_81.n78 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='78', tag='n78')
STD_ANON_81.n29 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='29', tag='n29')
STD_ANON_81.n120 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='120', tag='n120')
STD_ANON_81.n81 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='81', tag='n81')
STD_ANON_81.n82 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='82', tag='n82')
STD_ANON_81.n83 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='83', tag='n83')
STD_ANON_81.n88 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='88', tag='n88')
STD_ANON_81.n101 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='101', tag='n101')
STD_ANON_81.n93 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='93', tag='n93')
STD_ANON_81.n94 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='94', tag='n94')
STD_ANON_81.n110 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='110', tag='n110')
STD_ANON_81.n111 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='111', tag='n111')
STD_ANON_81.n121 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='121', tag='n121')
STD_ANON_81.n201 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='201', tag='n201')
STD_ANON_81.n202 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='202', tag='n202')
STD_ANON_81.n203 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='203', tag='n203')
STD_ANON_81.n900 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='900', tag='n900')
STD_ANON_81.n901 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='901', tag='n901')
STD_ANON_81.n902 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='902', tag='n902')
STD_ANON_81.n903 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='903', tag='n903')
STD_ANON_81.n904 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='904', tag='n904')
STD_ANON_81.n4 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='4', tag='n4')
STD_ANON_81.n9 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='9', tag='n9')
STD_ANON_81.n19 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='19', tag='n19')
STD_ANON_81.n21 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='21', tag='n21')
STD_ANON_81.n22 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='22', tag='n22')
STD_ANON_81.n23 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='23', tag='n23')
STD_ANON_81.n24 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='24', tag='n24')
STD_ANON_81.n25 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='25', tag='n25')
STD_ANON_81.n26 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='26', tag='n26')
STD_ANON_81.n27 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='27', tag='n27')
STD_ANON_81.n28 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='28', tag='n28')
STD_ANON_81.n31 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='31', tag='n31')
STD_ANON_81.n32 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='32', tag='n32')
STD_ANON_81.n74 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='74', tag='n74')
STD_ANON_81.n75 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='75', tag='n75')
STD_ANON_81.n77 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='77', tag='n77')
STD_ANON_81.n80 = STD_ANON_81._CF_enumeration.addEnumeration(unicode_value='80', tag='n80')
STD_ANON_81._InitializeFacetMap(STD_ANON_81._CF_enumeration)
_module_typeBindings.STD_ANON_81 = STD_ANON_81

# Atomic simple type: [anonymous]
class STD_ANON_82 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 274, 16)
    _Documentation = None
STD_ANON_82._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_82._InitializeFacetMap(STD_ANON_82._CF_maxLength)
_module_typeBindings.STD_ANON_82 = STD_ANON_82

# Atomic simple type: [anonymous]
class STD_ANON_83 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 5, 4)
    _Documentation = None
STD_ANON_83._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_83, enum_prefix=None)
STD_ANON_83.SNOMED = STD_ANON_83._CF_enumeration.addEnumeration(unicode_value='SNOMED', tag='SNOMED')
STD_ANON_83._InitializeFacetMap(STD_ANON_83._CF_enumeration)
_module_typeBindings.STD_ANON_83 = STD_ANON_83

# Atomic simple type: [anonymous]
class STD_ANON_84 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 12, 4)
    _Documentation = None
STD_ANON_84._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(18))
STD_ANON_84._InitializeFacetMap(STD_ANON_84._CF_maxLength)
_module_typeBindings.STD_ANON_84 = STD_ANON_84

# Atomic simple type: [anonymous]
class STD_ANON_85 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 19, 4)
    _Documentation = None
STD_ANON_85._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
STD_ANON_85._InitializeFacetMap(STD_ANON_85._CF_maxLength)
_module_typeBindings.STD_ANON_85 = STD_ANON_85

# Atomic simple type: [anonymous]
class STD_ANON_86 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 5, 16)
    _Documentation = None
STD_ANON_86._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_86, enum_prefix=None)
STD_ANON_86.LOCAL = STD_ANON_86._CF_enumeration.addEnumeration(unicode_value='LOCAL', tag='LOCAL')
STD_ANON_86.ODS = STD_ANON_86._CF_enumeration.addEnumeration(unicode_value='ODS', tag='ODS')
STD_ANON_86.PV_USERS = STD_ANON_86._CF_enumeration.addEnumeration(unicode_value='PV_USERS', tag='PV_USERS')
STD_ANON_86._InitializeFacetMap(STD_ANON_86._CF_enumeration)
_module_typeBindings.STD_ANON_86 = STD_ANON_86

# Atomic simple type: [anonymous]
class STD_ANON_87 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 14, 16)
    _Documentation = None
STD_ANON_87._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_87._InitializeFacetMap(STD_ANON_87._CF_maxLength)
_module_typeBindings.STD_ANON_87 = STD_ANON_87

# Atomic simple type: [anonymous]
class STD_ANON_88 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 21, 16)
    _Documentation = None
STD_ANON_88._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_88._InitializeFacetMap(STD_ANON_88._CF_maxLength)
_module_typeBindings.STD_ANON_88 = STD_ANON_88

# Atomic simple type: [anonymous]
class STD_ANON_89 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 5, 4)
    _Documentation = None
STD_ANON_89._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_89._InitializeFacetMap(STD_ANON_89._CF_maxLength)
_module_typeBindings.STD_ANON_89 = STD_ANON_89

# Atomic simple type: [anonymous]
class STD_ANON_90 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 12, 4)
    _Documentation = None
STD_ANON_90._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_90._InitializeFacetMap(STD_ANON_90._CF_maxLength)
_module_typeBindings.STD_ANON_90 = STD_ANON_90

# Atomic simple type: [anonymous]
class STD_ANON_91 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 19, 4)
    _Documentation = None
STD_ANON_91._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_91._InitializeFacetMap(STD_ANON_91._CF_maxLength)
_module_typeBindings.STD_ANON_91 = STD_ANON_91

# Atomic simple type: [anonymous]
class STD_ANON_92 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 13, 16)
    _Documentation = None
STD_ANON_92._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_92._InitializeFacetMap(STD_ANON_92._CF_maxLength)
_module_typeBindings.STD_ANON_92 = STD_ANON_92

# Atomic simple type: [anonymous]
class STD_ANON_93 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 8, 4)
    _Documentation = None
STD_ANON_93._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(80))
STD_ANON_93._InitializeFacetMap(STD_ANON_93._CF_maxLength)
_module_typeBindings.STD_ANON_93 = STD_ANON_93

# Atomic simple type: [anonymous]
class STD_ANON_94 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 18, 4)
    _Documentation = None
STD_ANON_94._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(70))
STD_ANON_94._InitializeFacetMap(STD_ANON_94._CF_maxLength)
_module_typeBindings.STD_ANON_94 = STD_ANON_94

# Atomic simple type: [anonymous]
class STD_ANON_95 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 29, 3)
    _Documentation = None
STD_ANON_95._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_95, enum_prefix=None)
STD_ANON_95.PRN = STD_ANON_95._CF_enumeration.addEnumeration(unicode_value='PRN', tag='PRN')
STD_ANON_95.WPN = STD_ANON_95._CF_enumeration.addEnumeration(unicode_value='WPN', tag='WPN')
STD_ANON_95.PRS = STD_ANON_95._CF_enumeration.addEnumeration(unicode_value='PRS', tag='PRS')
STD_ANON_95.NET = STD_ANON_95._CF_enumeration.addEnumeration(unicode_value='NET', tag='NET')
STD_ANON_95._InitializeFacetMap(STD_ANON_95._CF_enumeration)
_module_typeBindings.STD_ANON_95 = STD_ANON_95

# Atomic simple type: [anonymous]
class STD_ANON_96 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 5, 4)
    _Documentation = None
STD_ANON_96._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_96, enum_prefix=None)
STD_ANON_96.SNOMED = STD_ANON_96._CF_enumeration.addEnumeration(unicode_value='SNOMED', tag='SNOMED')
STD_ANON_96.ICD_10 = STD_ANON_96._CF_enumeration.addEnumeration(unicode_value='ICD-10', tag='ICD_10')
STD_ANON_96.LOCAL = STD_ANON_96._CF_enumeration.addEnumeration(unicode_value='LOCAL', tag='LOCAL')
STD_ANON_96._InitializeFacetMap(STD_ANON_96._CF_enumeration)
_module_typeBindings.STD_ANON_96 = STD_ANON_96

# Atomic simple type: [anonymous]
class STD_ANON_97 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 14, 4)
    _Documentation = None
STD_ANON_97._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(18))
STD_ANON_97._InitializeFacetMap(STD_ANON_97._CF_maxLength)
_module_typeBindings.STD_ANON_97 = STD_ANON_97

# Atomic simple type: [anonymous]
class STD_ANON_98 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 21, 4)
    _Documentation = None
STD_ANON_98._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
STD_ANON_98._InitializeFacetMap(STD_ANON_98._CF_maxLength)
_module_typeBindings.STD_ANON_98 = STD_ANON_98

# Atomic simple type: [anonymous]
class STD_ANON_99 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 19, 4)
    _Documentation = None
STD_ANON_99._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(125))
STD_ANON_99._InitializeFacetMap(STD_ANON_99._CF_maxLength)
_module_typeBindings.STD_ANON_99 = STD_ANON_99

# Atomic simple type: [anonymous]
class STD_ANON_100 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 30, 4)
    _Documentation = None
STD_ANON_100._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
STD_ANON_100._InitializeFacetMap(STD_ANON_100._CF_maxLength)
_module_typeBindings.STD_ANON_100 = STD_ANON_100

# Atomic simple type: [anonymous]
class STD_ANON_101 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 5, 16)
    _Documentation = None
STD_ANON_101._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_101, enum_prefix=None)
STD_ANON_101.NHS_DATA_DICTIONARY = STD_ANON_101._CF_enumeration.addEnumeration(unicode_value='NHS_DATA_DICTIONARY', tag='NHS_DATA_DICTIONARY')
STD_ANON_101._InitializeFacetMap(STD_ANON_101._CF_enumeration)
_module_typeBindings.STD_ANON_101 = STD_ANON_101

# Atomic simple type: [anonymous]
class STD_ANON_102 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 17, 16)
    _Documentation = None
STD_ANON_102._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_102, enum_prefix=None)
STD_ANON_102.A = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='A', tag='A')
STD_ANON_102.B = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='B', tag='B')
STD_ANON_102.C = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='C', tag='C')
STD_ANON_102.D = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='D', tag='D')
STD_ANON_102.E = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='E', tag='E')
STD_ANON_102.F = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='F', tag='F')
STD_ANON_102.G = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='G', tag='G')
STD_ANON_102.H = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='H', tag='H')
STD_ANON_102.J = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='J', tag='J')
STD_ANON_102.K = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='K', tag='K')
STD_ANON_102.L = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='L', tag='L')
STD_ANON_102.M = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='M', tag='M')
STD_ANON_102.N = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='N', tag='N')
STD_ANON_102.P = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='P', tag='P')
STD_ANON_102.R = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='R', tag='R')
STD_ANON_102.S = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='S', tag='S')
STD_ANON_102.Z = STD_ANON_102._CF_enumeration.addEnumeration(unicode_value='Z', tag='Z')
STD_ANON_102._InitializeFacetMap(STD_ANON_102._CF_enumeration)
_module_typeBindings.STD_ANON_102 = STD_ANON_102

# Atomic simple type: [anonymous]
class STD_ANON_103 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 109, 16)
    _Documentation = None
STD_ANON_103._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_103._InitializeFacetMap(STD_ANON_103._CF_maxLength)
_module_typeBindings.STD_ANON_103 = STD_ANON_103

# Atomic simple type: [anonymous]
class STD_ANON_104 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 12, 16)
    _Documentation = None
STD_ANON_104._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(6))
STD_ANON_104._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_104._CF_pattern.addPattern(pattern='([A-HJ-NPWY][0-9]{5})|((ALD|JER|GUE)[0-9]{3})')
STD_ANON_104._InitializeFacetMap(STD_ANON_104._CF_maxLength,
   STD_ANON_104._CF_pattern)
_module_typeBindings.STD_ANON_104 = STD_ANON_104

# Atomic simple type: [anonymous]
class STD_ANON_105 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 24, 16)
    _Documentation = None
STD_ANON_105._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(8))
STD_ANON_105._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_105._CF_pattern.addPattern(pattern='G[0-9]{7}')
STD_ANON_105._InitializeFacetMap(STD_ANON_105._CF_maxLength,
   STD_ANON_105._CF_pattern)
_module_typeBindings.STD_ANON_105 = STD_ANON_105

# Atomic simple type: {http://www.rixg.org.uk/}Gender
class Gender (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Gender')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Gender.xsd', 3, 0)
    _Documentation = None
Gender._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=Gender, enum_prefix=None)
Gender.n1 = Gender._CF_enumeration.addEnumeration(unicode_value='1', tag='n1')
Gender.n2 = Gender._CF_enumeration.addEnumeration(unicode_value='2', tag='n2')
Gender.n9 = Gender._CF_enumeration.addEnumeration(unicode_value='9', tag='n9')
Gender._InitializeFacetMap(Gender._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'Gender', Gender)
_module_typeBindings.Gender = Gender

# Atomic simple type: [anonymous]
class STD_ANON_106 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 5, 4)
    _Documentation = None
STD_ANON_106._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_106, enum_prefix=None)
STD_ANON_106.NHS_DATA_DICTIONARY_LANGUAGE_CODE = STD_ANON_106._CF_enumeration.addEnumeration(unicode_value='NHS_DATA_DICTIONARY_LANGUAGE_CODE', tag='NHS_DATA_DICTIONARY_LANGUAGE_CODE')
STD_ANON_106._InitializeFacetMap(STD_ANON_106._CF_enumeration)
_module_typeBindings.STD_ANON_106 = STD_ANON_106

# Atomic simple type: [anonymous]
class STD_ANON_107 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 16, 4)
    _Documentation = None
STD_ANON_107._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_107, enum_prefix=None)
STD_ANON_107.aa = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='aa', tag='aa')
STD_ANON_107.ab = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ab', tag='ab')
STD_ANON_107.ae = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ae', tag='ae')
STD_ANON_107.af = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='af', tag='af')
STD_ANON_107.ak = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ak', tag='ak')
STD_ANON_107.am = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='am', tag='am')
STD_ANON_107.an = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='an', tag='an')
STD_ANON_107.ar = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ar', tag='ar')
STD_ANON_107.as_ = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='as', tag='as_')
STD_ANON_107.av = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='av', tag='av')
STD_ANON_107.ay = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ay', tag='ay')
STD_ANON_107.az = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='az', tag='az')
STD_ANON_107.ba = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ba', tag='ba')
STD_ANON_107.be = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='be', tag='be')
STD_ANON_107.bg = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='bg', tag='bg')
STD_ANON_107.bh = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='bh', tag='bh')
STD_ANON_107.bi = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='bi', tag='bi')
STD_ANON_107.bm = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='bm', tag='bm')
STD_ANON_107.bn = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='bn', tag='bn')
STD_ANON_107.bo = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='bo', tag='bo')
STD_ANON_107.br = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='br', tag='br')
STD_ANON_107.bs = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='bs', tag='bs')
STD_ANON_107.ca = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ca', tag='ca')
STD_ANON_107.ce = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ce', tag='ce')
STD_ANON_107.ch = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ch', tag='ch')
STD_ANON_107.co = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='co', tag='co')
STD_ANON_107.cr = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='cr', tag='cr')
STD_ANON_107.cs = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='cs', tag='cs')
STD_ANON_107.cu = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='cu', tag='cu')
STD_ANON_107.cv = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='cv', tag='cv')
STD_ANON_107.cy = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='cy', tag='cy')
STD_ANON_107.da = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='da', tag='da')
STD_ANON_107.de = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='de', tag='de')
STD_ANON_107.dv = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='dv', tag='dv')
STD_ANON_107.dz = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='dz', tag='dz')
STD_ANON_107.ee = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ee', tag='ee')
STD_ANON_107.el = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='el', tag='el')
STD_ANON_107.en = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='en', tag='en')
STD_ANON_107.eo = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='eo', tag='eo')
STD_ANON_107.es = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='es', tag='es')
STD_ANON_107.et = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='et', tag='et')
STD_ANON_107.eu = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='eu', tag='eu')
STD_ANON_107.fa = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='fa', tag='fa')
STD_ANON_107.ff = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ff', tag='ff')
STD_ANON_107.fi = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='fi', tag='fi')
STD_ANON_107.fj = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='fj', tag='fj')
STD_ANON_107.fo = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='fo', tag='fo')
STD_ANON_107.fr = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='fr', tag='fr')
STD_ANON_107.fy = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='fy', tag='fy')
STD_ANON_107.ga = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ga', tag='ga')
STD_ANON_107.gd = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='gd', tag='gd')
STD_ANON_107.gl = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='gl', tag='gl')
STD_ANON_107.gn = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='gn', tag='gn')
STD_ANON_107.gu = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='gu', tag='gu')
STD_ANON_107.gv = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='gv', tag='gv')
STD_ANON_107.ha = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ha', tag='ha')
STD_ANON_107.he = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='he', tag='he')
STD_ANON_107.hi = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='hi', tag='hi')
STD_ANON_107.ho = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ho', tag='ho')
STD_ANON_107.hr = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='hr', tag='hr')
STD_ANON_107.ht = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ht', tag='ht')
STD_ANON_107.hu = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='hu', tag='hu')
STD_ANON_107.hy = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='hy', tag='hy')
STD_ANON_107.hz = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='hz', tag='hz')
STD_ANON_107.ia = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ia', tag='ia')
STD_ANON_107.id = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='id', tag='id')
STD_ANON_107.ie = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ie', tag='ie')
STD_ANON_107.ig = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ig', tag='ig')
STD_ANON_107.ii = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ii', tag='ii')
STD_ANON_107.ik = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ik', tag='ik')
STD_ANON_107.io = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='io', tag='io')
STD_ANON_107.is_ = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='is', tag='is_')
STD_ANON_107.it = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='it', tag='it')
STD_ANON_107.iu = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='iu', tag='iu')
STD_ANON_107.ja = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ja', tag='ja')
STD_ANON_107.jv = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='jv', tag='jv')
STD_ANON_107.ka = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ka', tag='ka')
STD_ANON_107.kg = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='kg', tag='kg')
STD_ANON_107.ki = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ki', tag='ki')
STD_ANON_107.kj = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='kj', tag='kj')
STD_ANON_107.kk = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='kk', tag='kk')
STD_ANON_107.kl = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='kl', tag='kl')
STD_ANON_107.km = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='km', tag='km')
STD_ANON_107.kn = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='kn', tag='kn')
STD_ANON_107.ko = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ko', tag='ko')
STD_ANON_107.kr = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='kr', tag='kr')
STD_ANON_107.ks = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ks', tag='ks')
STD_ANON_107.ku = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ku', tag='ku')
STD_ANON_107.kv = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='kv', tag='kv')
STD_ANON_107.kw = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='kw', tag='kw')
STD_ANON_107.ky = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ky', tag='ky')
STD_ANON_107.la = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='la', tag='la')
STD_ANON_107.lb = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='lb', tag='lb')
STD_ANON_107.lg = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='lg', tag='lg')
STD_ANON_107.li = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='li', tag='li')
STD_ANON_107.ln = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ln', tag='ln')
STD_ANON_107.lo = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='lo', tag='lo')
STD_ANON_107.lt = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='lt', tag='lt')
STD_ANON_107.lu = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='lu', tag='lu')
STD_ANON_107.lv = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='lv', tag='lv')
STD_ANON_107.mg = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='mg', tag='mg')
STD_ANON_107.mh = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='mh', tag='mh')
STD_ANON_107.mi = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='mi', tag='mi')
STD_ANON_107.mk = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='mk', tag='mk')
STD_ANON_107.ml = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ml', tag='ml')
STD_ANON_107.mn = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='mn', tag='mn')
STD_ANON_107.mr = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='mr', tag='mr')
STD_ANON_107.ms = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ms', tag='ms')
STD_ANON_107.mt = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='mt', tag='mt')
STD_ANON_107.my = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='my', tag='my')
STD_ANON_107.na = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='na', tag='na')
STD_ANON_107.nb = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='nb', tag='nb')
STD_ANON_107.nd = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='nd', tag='nd')
STD_ANON_107.ne = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ne', tag='ne')
STD_ANON_107.ng = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ng', tag='ng')
STD_ANON_107.nl = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='nl', tag='nl')
STD_ANON_107.nn = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='nn', tag='nn')
STD_ANON_107.no = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='no', tag='no')
STD_ANON_107.nr = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='nr', tag='nr')
STD_ANON_107.nv = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='nv', tag='nv')
STD_ANON_107.ny = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ny', tag='ny')
STD_ANON_107.oc = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='oc', tag='oc')
STD_ANON_107.oj = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='oj', tag='oj')
STD_ANON_107.om = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='om', tag='om')
STD_ANON_107.or_ = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='or', tag='or_')
STD_ANON_107.os = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='os', tag='os')
STD_ANON_107.pa = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='pa', tag='pa')
STD_ANON_107.pi = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='pi', tag='pi')
STD_ANON_107.pl = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='pl', tag='pl')
STD_ANON_107.ps = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ps', tag='ps')
STD_ANON_107.pt = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='pt', tag='pt')
STD_ANON_107.qu = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='qu', tag='qu')
STD_ANON_107.rm = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='rm', tag='rm')
STD_ANON_107.rn = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='rn', tag='rn')
STD_ANON_107.ro = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ro', tag='ro')
STD_ANON_107.ru = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ru', tag='ru')
STD_ANON_107.rw = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='rw', tag='rw')
STD_ANON_107.sa = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sa', tag='sa')
STD_ANON_107.sc = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sc', tag='sc')
STD_ANON_107.sd = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sd', tag='sd')
STD_ANON_107.se = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='se', tag='se')
STD_ANON_107.sg = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sg', tag='sg')
STD_ANON_107.si = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='si', tag='si')
STD_ANON_107.sk = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sk', tag='sk')
STD_ANON_107.sl = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sl', tag='sl')
STD_ANON_107.sm = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sm', tag='sm')
STD_ANON_107.sn = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sn', tag='sn')
STD_ANON_107.so = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='so', tag='so')
STD_ANON_107.sq = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sq', tag='sq')
STD_ANON_107.sr = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sr', tag='sr')
STD_ANON_107.ss = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ss', tag='ss')
STD_ANON_107.st = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='st', tag='st')
STD_ANON_107.su = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='su', tag='su')
STD_ANON_107.sv = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sv', tag='sv')
STD_ANON_107.sw = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='sw', tag='sw')
STD_ANON_107.ta = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ta', tag='ta')
STD_ANON_107.te = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='te', tag='te')
STD_ANON_107.tg = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='tg', tag='tg')
STD_ANON_107.th = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='th', tag='th')
STD_ANON_107.ti = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ti', tag='ti')
STD_ANON_107.tk = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='tk', tag='tk')
STD_ANON_107.tl = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='tl', tag='tl')
STD_ANON_107.tn = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='tn', tag='tn')
STD_ANON_107.to = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='to', tag='to')
STD_ANON_107.tr = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='tr', tag='tr')
STD_ANON_107.ts = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ts', tag='ts')
STD_ANON_107.tt = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='tt', tag='tt')
STD_ANON_107.tw = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='tw', tag='tw')
STD_ANON_107.ty = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ty', tag='ty')
STD_ANON_107.ug = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ug', tag='ug')
STD_ANON_107.uk = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='uk', tag='uk')
STD_ANON_107.ur = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ur', tag='ur')
STD_ANON_107.uz = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='uz', tag='uz')
STD_ANON_107.ve = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='ve', tag='ve')
STD_ANON_107.vi = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='vi', tag='vi')
STD_ANON_107.vo = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='vo', tag='vo')
STD_ANON_107.wa = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='wa', tag='wa')
STD_ANON_107.wo = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='wo', tag='wo')
STD_ANON_107.xh = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='xh', tag='xh')
STD_ANON_107.yi = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='yi', tag='yi')
STD_ANON_107.yo = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='yo', tag='yo')
STD_ANON_107.za = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='za', tag='za')
STD_ANON_107.zh = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='zh', tag='zh')
STD_ANON_107.zu = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='zu', tag='zu')
STD_ANON_107.q1 = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='q1', tag='q1')
STD_ANON_107.q2 = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='q2', tag='q2')
STD_ANON_107.q3 = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='q3', tag='q3')
STD_ANON_107.q4 = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='q4', tag='q4')
STD_ANON_107.q5 = STD_ANON_107._CF_enumeration.addEnumeration(unicode_value='q5', tag='q5')
STD_ANON_107._InitializeFacetMap(STD_ANON_107._CF_enumeration)
_module_typeBindings.STD_ANON_107 = STD_ANON_107

# Atomic simple type: [anonymous]
class STD_ANON_108 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 971, 4)
    _Documentation = None
STD_ANON_108._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_108._InitializeFacetMap(STD_ANON_108._CF_maxLength)
_module_typeBindings.STD_ANON_108 = STD_ANON_108

# Atomic simple type: [anonymous]
class STD_ANON_109 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 5, 16)
    _Documentation = None
STD_ANON_109._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_109, enum_prefix=None)
STD_ANON_109.LOCAL = STD_ANON_109._CF_enumeration.addEnumeration(unicode_value='LOCAL', tag='LOCAL')
STD_ANON_109.ODS = STD_ANON_109._CF_enumeration.addEnumeration(unicode_value='ODS', tag='ODS')
STD_ANON_109.PV_UNITS = STD_ANON_109._CF_enumeration.addEnumeration(unicode_value='PV_UNITS', tag='PV_UNITS')
STD_ANON_109.RR1 = STD_ANON_109._CF_enumeration.addEnumeration(unicode_value='RR1+', tag='RR1')
STD_ANON_109._InitializeFacetMap(STD_ANON_109._CF_enumeration)
_module_typeBindings.STD_ANON_109 = STD_ANON_109

# Atomic simple type: [anonymous]
class STD_ANON_110 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 15, 16)
    _Documentation = None
STD_ANON_110._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_110._InitializeFacetMap(STD_ANON_110._CF_maxLength)
_module_typeBindings.STD_ANON_110 = STD_ANON_110

# Atomic simple type: [anonymous]
class STD_ANON_111 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 22, 16)
    _Documentation = None
STD_ANON_111._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_111._InitializeFacetMap(STD_ANON_111._CF_maxLength)
_module_typeBindings.STD_ANON_111 = STD_ANON_111

# Atomic simple type: {http://www.rixg.org.uk/}NV_RR14
class NV_RR14 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NV_RR14')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/NV_RR14.xsd', 2, 4)
    _Documentation = None
NV_RR14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NV_RR14, enum_prefix=None)
NV_RR14.n10 = NV_RR14._CF_enumeration.addEnumeration(unicode_value='10', tag='n10')
NV_RR14.n11 = NV_RR14._CF_enumeration.addEnumeration(unicode_value='11', tag='n11')
NV_RR14.n12 = NV_RR14._CF_enumeration.addEnumeration(unicode_value='12', tag='n12')
NV_RR14.n13 = NV_RR14._CF_enumeration.addEnumeration(unicode_value='13', tag='n13')
NV_RR14.n14 = NV_RR14._CF_enumeration.addEnumeration(unicode_value='14', tag='n14')
NV_RR14._InitializeFacetMap(NV_RR14._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NV_RR14', NV_RR14)
_module_typeBindings.NV_RR14 = NV_RR14

# Atomic simple type: [anonymous]
class STD_ANON_112 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 8, 16)
    _Documentation = None
STD_ANON_112._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10))
STD_ANON_112._InitializeFacetMap(STD_ANON_112._CF_maxLength)
_module_typeBindings.STD_ANON_112 = STD_ANON_112

# Atomic simple type: [anonymous]
class STD_ANON_113 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 18, 16)
    _Documentation = None
STD_ANON_113._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(2))
STD_ANON_113._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(60))
STD_ANON_113._InitializeFacetMap(STD_ANON_113._CF_minLength,
   STD_ANON_113._CF_maxLength)
_module_typeBindings.STD_ANON_113 = STD_ANON_113

# Atomic simple type: [anonymous]
class STD_ANON_114 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 29, 16)
    _Documentation = None
STD_ANON_114._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(2))
STD_ANON_114._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(60))
STD_ANON_114._InitializeFacetMap(STD_ANON_114._CF_minLength,
   STD_ANON_114._CF_maxLength)
_module_typeBindings.STD_ANON_114 = STD_ANON_114

# Atomic simple type: [anonymous]
class STD_ANON_115 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 40, 16)
    _Documentation = None
STD_ANON_115._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(60))
STD_ANON_115._InitializeFacetMap(STD_ANON_115._CF_maxLength)
_module_typeBindings.STD_ANON_115 = STD_ANON_115

# Atomic simple type: [anonymous]
class STD_ANON_116 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 50, 16)
    _Documentation = None
STD_ANON_116._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(10))
STD_ANON_116._InitializeFacetMap(STD_ANON_116._CF_maxLength)
_module_typeBindings.STD_ANON_116 = STD_ANON_116

# Atomic simple type: [anonymous]
class STD_ANON_117 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 61, 12)
    _Documentation = None
STD_ANON_117._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_117, enum_prefix=None)
STD_ANON_117.B = STD_ANON_117._CF_enumeration.addEnumeration(unicode_value='B', tag='B')
STD_ANON_117.D = STD_ANON_117._CF_enumeration.addEnumeration(unicode_value='D', tag='D')
STD_ANON_117.L = STD_ANON_117._CF_enumeration.addEnumeration(unicode_value='L', tag='L')
STD_ANON_117._InitializeFacetMap(STD_ANON_117._CF_enumeration)
_module_typeBindings.STD_ANON_117 = STD_ANON_117

# Atomic simple type: [anonymous]
class STD_ANON_118 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 5, 16)
    _Documentation = None
STD_ANON_118._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_118, enum_prefix=None)
STD_ANON_118.NHS_DATA_DICTIONARY_EMPLOYMENT_STATUS = STD_ANON_118._CF_enumeration.addEnumeration(unicode_value='NHS_DATA_DICTIONARY_EMPLOYMENT_STATUS', tag='NHS_DATA_DICTIONARY_EMPLOYMENT_STATUS')
STD_ANON_118._InitializeFacetMap(STD_ANON_118._CF_enumeration)
_module_typeBindings.STD_ANON_118 = STD_ANON_118

# Atomic simple type: [anonymous]
class STD_ANON_119 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 16, 16)
    _Documentation = None
STD_ANON_119._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_119, enum_prefix=None)
STD_ANON_119.n01 = STD_ANON_119._CF_enumeration.addEnumeration(unicode_value='01', tag='n01')
STD_ANON_119.n02 = STD_ANON_119._CF_enumeration.addEnumeration(unicode_value='02', tag='n02')
STD_ANON_119.n03 = STD_ANON_119._CF_enumeration.addEnumeration(unicode_value='03', tag='n03')
STD_ANON_119.n04 = STD_ANON_119._CF_enumeration.addEnumeration(unicode_value='04', tag='n04')
STD_ANON_119.n05 = STD_ANON_119._CF_enumeration.addEnumeration(unicode_value='05', tag='n05')
STD_ANON_119.n06 = STD_ANON_119._CF_enumeration.addEnumeration(unicode_value='06', tag='n06')
STD_ANON_119.n07 = STD_ANON_119._CF_enumeration.addEnumeration(unicode_value='07', tag='n07')
STD_ANON_119.n08 = STD_ANON_119._CF_enumeration.addEnumeration(unicode_value='08', tag='n08')
STD_ANON_119.ZZ = STD_ANON_119._CF_enumeration.addEnumeration(unicode_value='ZZ', tag='ZZ')
STD_ANON_119._InitializeFacetMap(STD_ANON_119._CF_enumeration)
_module_typeBindings.STD_ANON_119 = STD_ANON_119

# Atomic simple type: [anonymous]
class STD_ANON_120 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 67, 16)
    _Documentation = None
STD_ANON_120._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_120._InitializeFacetMap(STD_ANON_120._CF_maxLength)
_module_typeBindings.STD_ANON_120 = STD_ANON_120

# Atomic simple type: [anonymous]
class STD_ANON_121 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 10, 16)
    _Documentation = None
STD_ANON_121._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_121._InitializeFacetMap(STD_ANON_121._CF_maxLength)
_module_typeBindings.STD_ANON_121 = STD_ANON_121

# Atomic simple type: [anonymous]
class STD_ANON_122 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 21, 16)
    _Documentation = None
STD_ANON_122._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(100))
STD_ANON_122._InitializeFacetMap(STD_ANON_122._CF_maxLength)
_module_typeBindings.STD_ANON_122 = STD_ANON_122

# Atomic simple type: [anonymous]
class STD_ANON_123 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 38, 16)
    _Documentation = None
STD_ANON_123._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
STD_ANON_123._InitializeFacetMap(STD_ANON_123._CF_maxLength)
_module_typeBindings.STD_ANON_123 = STD_ANON_123

# Atomic simple type: [anonymous]
class STD_ANON_124 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 15, 16)
    _Documentation = None
STD_ANON_124._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
STD_ANON_124._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(50))
STD_ANON_124._InitializeFacetMap(STD_ANON_124._CF_minLength,
   STD_ANON_124._CF_maxLength)
_module_typeBindings.STD_ANON_124 = STD_ANON_124

# Atomic simple type: [anonymous]
class STD_ANON_125 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 27, 16)
    _Documentation = None
STD_ANON_125._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_125, enum_prefix=None)
STD_ANON_125.NHS = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='NHS', tag='NHS')
STD_ANON_125.CHI = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='CHI', tag='CHI')
STD_ANON_125.HSC = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='HSC', tag='HSC')
STD_ANON_125.UKRR = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='UKRR', tag='UKRR')
STD_ANON_125.SRR = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='SRR', tag='SRR')
STD_ANON_125.NHSBT = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='NHSBT', tag='NHSBT')
STD_ANON_125.RADAR = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='RADAR', tag='RADAR')
STD_ANON_125.BAPN = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='BAPN', tag='BAPN')
STD_ANON_125.LOCALHOSP = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='LOCALHOSP', tag='LOCALHOSP')
STD_ANON_125.UKRR_UID = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='UKRR_UID', tag='UKRR_UID')
STD_ANON_125.STUDYNO = STD_ANON_125._CF_enumeration.addEnumeration(unicode_value='STUDYNO', tag='STUDYNO')
STD_ANON_125._InitializeFacetMap(STD_ANON_125._CF_enumeration)
_module_typeBindings.STD_ANON_125 = STD_ANON_125

# Atomic simple type: [anonymous]
class STD_ANON_126 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 89, 16)
    _Documentation = None
STD_ANON_126._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_126, enum_prefix=None)
STD_ANON_126.MRN = STD_ANON_126._CF_enumeration.addEnumeration(unicode_value='MRN', tag='MRN')
STD_ANON_126.NI = STD_ANON_126._CF_enumeration.addEnumeration(unicode_value='NI', tag='NI')
STD_ANON_126._InitializeFacetMap(STD_ANON_126._CF_enumeration)
_module_typeBindings.STD_ANON_126 = STD_ANON_126

# Atomic simple type: {http://www.rixg.org.uk/}UKRDCSchemaVersion
class UKRDCSchemaVersion (pyxb.binding.datatypes.string):

    """UKRDC Schema Version in 0.0.0 Format"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UKRDCSchemaVersion')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/RRTypes.xsd', 3, 0)
    _Documentation = 'UKRDC Schema Version in 0.0.0 Format'
UKRDCSchemaVersion._CF_pattern = pyxb.binding.facets.CF_pattern()
UKRDCSchemaVersion._CF_pattern.addPattern(pattern='\\d+\\.\\d+\\.\\d+')
UKRDCSchemaVersion._InitializeFacetMap(UKRDCSchemaVersion._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'UKRDCSchemaVersion', UKRDCSchemaVersion)
_module_typeBindings.UKRDCSchemaVersion = UKRDCSchemaVersion

# Atomic simple type: {http://www.rixg.org.uk/}RRYesNo
class RRYesNo (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RRYesNo')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/RRTypes.xsd', 12, 0)
    _Documentation = None
RRYesNo._CF_pattern = pyxb.binding.facets.CF_pattern()
RRYesNo._CF_pattern.addPattern(pattern='Y|N')
RRYesNo._InitializeFacetMap(RRYesNo._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'RRYesNo', RRYesNo)
_module_typeBindings.RRYesNo = RRYesNo

# Atomic simple type: {http://www.rixg.org.uk/}RRYesNoUnk
class RRYesNoUnk (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RRYesNoUnk')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/RRTypes.xsd', 18, 0)
    _Documentation = None
RRYesNoUnk._CF_pattern = pyxb.binding.facets.CF_pattern()
RRYesNoUnk._CF_pattern.addPattern(pattern='Y|N|U')
RRYesNoUnk._InitializeFacetMap(RRYesNoUnk._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'RRYesNoUnk', RRYesNoUnk)
_module_typeBindings.RRYesNoUnk = RRYesNoUnk

# Atomic simple type: {http://www.rixg.org.uk/}RROneTwo
class RROneTwo (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RROneTwo')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/RRTypes.xsd', 24, 0)
    _Documentation = None
RROneTwo._CF_pattern = pyxb.binding.facets.CF_pattern()
RROneTwo._CF_pattern.addPattern(pattern='1|2')
RROneTwo._InitializeFacetMap(RROneTwo._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'RROneTwo', RROneTwo)
_module_typeBindings.RROneTwo = RROneTwo

# Atomic simple type: {http://www.rixg.org.uk/}RRNegPosUk
class RRNegPosUk (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RRNegPosUk')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/RRTypes.xsd', 30, 0)
    _Documentation = None
RRNegPosUk._CF_pattern = pyxb.binding.facets.CF_pattern()
RRNegPosUk._CF_pattern.addPattern(pattern='NEG|POS|UK')
RRNegPosUk._InitializeFacetMap(RRNegPosUk._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'RRNegPosUk', RRNegPosUk)
_module_typeBindings.RRNegPosUk = RRNegPosUk

# Atomic simple type: {http://www.rixg.org.uk/}SendingExtract
class SendingExtract (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SendingExtract')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingExtract.xsd', 3, 0)
    _Documentation = None
SendingExtract._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SendingExtract, enum_prefix=None)
SendingExtract.SURVEY = SendingExtract._CF_enumeration.addEnumeration(unicode_value='SURVEY', tag='SURVEY')
SendingExtract.PVMIG = SendingExtract._CF_enumeration.addEnumeration(unicode_value='PVMIG', tag='PVMIG')
SendingExtract.HSMIG = SendingExtract._CF_enumeration.addEnumeration(unicode_value='HSMIG', tag='HSMIG')
SendingExtract.PV = SendingExtract._CF_enumeration.addEnumeration(unicode_value='PV', tag='PV')
SendingExtract.RADAR = SendingExtract._CF_enumeration.addEnumeration(unicode_value='RADAR', tag='RADAR')
SendingExtract.UKRDC = SendingExtract._CF_enumeration.addEnumeration(unicode_value='UKRDC', tag='UKRDC')
SendingExtract.MIRTH = SendingExtract._CF_enumeration.addEnumeration(unicode_value='MIRTH', tag='MIRTH')
SendingExtract.UKRR = SendingExtract._CF_enumeration.addEnumeration(unicode_value='UKRR', tag='UKRR')
SendingExtract._InitializeFacetMap(SendingExtract._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SendingExtract', SendingExtract)
_module_typeBindings.SendingExtract = SendingExtract

# Atomic simple type: {http://www.rixg.org.uk/}SendingFacilityType
class SendingFacilityType (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SendingFacilityType')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingFacility.xsd', 4, 4)
    _Documentation = None
SendingFacilityType._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
SendingFacilityType._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(7))
SendingFacilityType._InitializeFacetMap(SendingFacilityType._CF_minLength,
   SendingFacilityType._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'SendingFacilityType', SendingFacilityType)
_module_typeBindings.SendingFacilityType = SendingFacilityType

# Atomic simple type: [anonymous]
class STD_ANON_127 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 5, 16)
    _Documentation = None
STD_ANON_127._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_127, enum_prefix=None)
STD_ANON_127.SNOMED = STD_ANON_127._CF_enumeration.addEnumeration(unicode_value='SNOMED', tag='SNOMED')
STD_ANON_127.LOINC = STD_ANON_127._CF_enumeration.addEnumeration(unicode_value='LOINC', tag='LOINC')
STD_ANON_127.UKRR = STD_ANON_127._CF_enumeration.addEnumeration(unicode_value='UKRR', tag='UKRR')
STD_ANON_127.PV = STD_ANON_127._CF_enumeration.addEnumeration(unicode_value='PV', tag='PV')
STD_ANON_127.LOCAL = STD_ANON_127._CF_enumeration.addEnumeration(unicode_value='LOCAL', tag='LOCAL')
STD_ANON_127._InitializeFacetMap(STD_ANON_127._CF_enumeration)
_module_typeBindings.STD_ANON_127 = STD_ANON_127

# Atomic simple type: [anonymous]
class STD_ANON_128 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 36, 16)
    _Documentation = None
STD_ANON_128._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_128._InitializeFacetMap(STD_ANON_128._CF_maxLength)
_module_typeBindings.STD_ANON_128 = STD_ANON_128

# Atomic simple type: [anonymous]
class STD_ANON_129 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 43, 16)
    _Documentation = None
STD_ANON_129._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(32000))
STD_ANON_129._InitializeFacetMap(STD_ANON_129._CF_maxLength)
_module_typeBindings.STD_ANON_129 = STD_ANON_129

# Atomic simple type: [anonymous]
class STD_ANON_130 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 43, 36)
    _Documentation = None
STD_ANON_130._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_130, enum_prefix=None)
STD_ANON_130.n1 = STD_ANON_130._CF_enumeration.addEnumeration(unicode_value='1', tag='n1')
STD_ANON_130.n2 = STD_ANON_130._CF_enumeration.addEnumeration(unicode_value='2', tag='n2')
STD_ANON_130.n3 = STD_ANON_130._CF_enumeration.addEnumeration(unicode_value='3', tag='n3')
STD_ANON_130.n4 = STD_ANON_130._CF_enumeration.addEnumeration(unicode_value='4', tag='n4')
STD_ANON_130._InitializeFacetMap(STD_ANON_130._CF_enumeration)
_module_typeBindings.STD_ANON_130 = STD_ANON_130

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 33, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SendingFacility uses Python identifier SendingFacility
    __SendingFacility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SendingFacility'), 'SendingFacility', '__httpwww_rixg_org_uk_CTD_ANON_SendingFacility', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 35, 16), )

    
    SendingFacility = property(__SendingFacility.value, __SendingFacility.set, None, '\n                        The value of this element is the Site or System responsible for the data being sent.\n                        ')

    
    # Element SendingExtract uses Python identifier SendingExtract
    __SendingExtract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SendingExtract'), 'SendingExtract', '__httpwww_rixg_org_uk_CTD_ANON_SendingExtract', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 45, 16), )

    
    SendingExtract = property(__SendingExtract.value, __SendingExtract.set, None, '\n                        The type of data feed. This is used to enable different behaviour when the original source of data was something other than a UKRDC feed (i.e. when "PV XML" is converted to "RDA XML" it is given a SendingExtract of "PV"). Unless told otherwise the value should be set to "UKRDC".\n                        ')

    
    # Element Patient uses Python identifier Patient
    __Patient = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Patient'), 'Patient', '__httpwww_rixg_org_uk_CTD_ANON_Patient', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 55, 16), )

    
    Patient = property(__Patient.value, __Patient.set, None, 'Patient Demographics')

    
    # Element LabOrders uses Python identifier LabOrders
    __LabOrders = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabOrders'), 'LabOrders', '__httpwww_rixg_org_uk_CTD_ANON_LabOrders', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 63, 16), )

    
    LabOrders = property(__LabOrders.value, __LabOrders.set, None, 'Lab Orders')

    
    # Element SocialHistories uses Python identifier SocialHistories
    __SocialHistories = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SocialHistories'), 'SocialHistories', '__httpwww_rixg_org_uk_CTD_ANON_SocialHistories', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 72, 16), )

    
    SocialHistories = property(__SocialHistories.value, __SocialHistories.set, None, 'Other Health Related Behaviours')

    
    # Element FamilyHistories uses Python identifier FamilyHistories
    __FamilyHistories = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FamilyHistories'), 'FamilyHistories', '__httpwww_rixg_org_uk_CTD_ANON_FamilyHistories', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 85, 16), )

    
    FamilyHistories = property(__FamilyHistories.value, __FamilyHistories.set, None, 'Family Histories')

    
    # Element Observations uses Python identifier Observations
    __Observations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Observations'), 'Observations', '__httpwww_rixg_org_uk_CTD_ANON_Observations', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 98, 16), )

    
    Observations = property(__Observations.value, __Observations.set, None, '\n                        Observations. These are measurements taken about a patient that do not involve a Laboratory.\n                        ')

    
    # Element Allergies uses Python identifier Allergies
    __Allergies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Allergies'), 'Allergies', '__httpwww_rixg_org_uk_CTD_ANON_Allergies', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 108, 16), )

    
    Allergies = property(__Allergies.value, __Allergies.set, None, '\n                        Allergies.\n                        ')

    
    # Element Diagnoses uses Python identifier Diagnoses
    __Diagnoses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Diagnoses'), 'Diagnoses', '__httpwww_rixg_org_uk_CTD_ANON_Diagnoses', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 123, 16), )

    
    Diagnoses = property(__Diagnoses.value, __Diagnoses.set, None, None)

    
    # Element Medications uses Python identifier Medications
    __Medications = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Medications'), 'Medications', '__httpwww_rixg_org_uk_CTD_ANON_Medications', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 153, 16), )

    
    Medications = property(__Medications.value, __Medications.set, None, 'Medications')

    
    # Element DialysisPrescriptions uses Python identifier DialysisPrescriptions
    __DialysisPrescriptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DialysisPrescriptions'), 'DialysisPrescriptions', '__httpwww_rixg_org_uk_CTD_ANON_DialysisPrescriptions', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 166, 16), )

    
    DialysisPrescriptions = property(__DialysisPrescriptions.value, __DialysisPrescriptions.set, None, 'Dialysis Prescriptions')

    
    # Element Procedures uses Python identifier Procedures
    __Procedures = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Procedures'), 'Procedures', '__httpwww_rixg_org_uk_CTD_ANON_Procedures', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 181, 16), )

    
    Procedures = property(__Procedures.value, __Procedures.set, None, 'Procedures')

    
    # Element Documents uses Python identifier Documents
    __Documents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Documents'), 'Documents', '__httpwww_rixg_org_uk_CTD_ANON_Documents', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 222, 16), )

    
    Documents = property(__Documents.value, __Documents.set, None, 'Documents')

    
    # Element Encounters uses Python identifier Encounters
    __Encounters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Encounters'), 'Encounters', '__httpwww_rixg_org_uk_CTD_ANON_Encounters', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 235, 16), )

    
    Encounters = property(__Encounters.value, __Encounters.set, None, None)

    
    # Element ProgramMemberships uses Python identifier ProgramMemberships
    __ProgramMemberships = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProgramMemberships'), 'ProgramMemberships', '__httpwww_rixg_org_uk_CTD_ANON_ProgramMemberships', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 265, 16), )

    
    ProgramMemberships = property(__ProgramMemberships.value, __ProgramMemberships.set, None, '\n                        Program Memberships. These are used to record whether or not a patient wishes to participate in one of the UKRDC’s member projects. In the case of projects such as RADAR the Program Membership record should only be closed if the patient actively wishes to withdraw. It should not be end dated when they leave the unit or die. If a patient decides to leave a project and then re-joins a new Program Membership record should be created (with a different ExternalID) rather than re-opening the original one.\n                        ')

    
    # Element OptOuts uses Python identifier OptOuts
    __OptOuts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OptOuts'), 'OptOuts', '__httpwww_rixg_org_uk_CTD_ANON_OptOuts', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 280, 16), )

    
    OptOuts = property(__OptOuts.value, __OptOuts.set, None, 'Opt-Outs')

    
    # Element ClinicalRelationships uses Python identifier ClinicalRelationships
    __ClinicalRelationships = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ClinicalRelationships'), 'ClinicalRelationships', '__httpwww_rixg_org_uk_CTD_ANON_ClinicalRelationships', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 293, 16), )

    
    ClinicalRelationships = property(__ClinicalRelationships.value, __ClinicalRelationships.set, None, 'This is used to record the relationship between a Patient and a Clinician or Care Facility. This element should not be submitted without prior discussion with the UKRR.')

    
    # Element Surveys uses Python identifier Surveys
    __Surveys = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Surveys'), 'Surveys', '__httpwww_rixg_org_uk_CTD_ANON_Surveys', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 306, 16), )

    
    Surveys = property(__Surveys.value, __Surveys.set, None, 'Surveys')

    
    # Element Assessments uses Python identifier Assessments
    __Assessments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Assessments'), 'Assessments', '__httpwww_rixg_org_uk_CTD_ANON_Assessments', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 319, 16), )

    
    Assessments = property(__Assessments.value, __Assessments.set, None, 'Assessments')

    
    # Element PVData uses Python identifier PVData
    __PVData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PVData'), 'PVData', '__httpwww_rixg_org_uk_CTD_ANON_PVData', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 332, 16), )

    
    PVData = property(__PVData.value, __PVData.set, None, '\n                        This is used internally to hold data items sent in PV XML files and should not be sent by external parties.')

    _ElementMap.update({
        __SendingFacility.name() : __SendingFacility,
        __SendingExtract.name() : __SendingExtract,
        __Patient.name() : __Patient,
        __LabOrders.name() : __LabOrders,
        __SocialHistories.name() : __SocialHistories,
        __FamilyHistories.name() : __FamilyHistories,
        __Observations.name() : __Observations,
        __Allergies.name() : __Allergies,
        __Diagnoses.name() : __Diagnoses,
        __Medications.name() : __Medications,
        __DialysisPrescriptions.name() : __DialysisPrescriptions,
        __Procedures.name() : __Procedures,
        __Documents.name() : __Documents,
        __Encounters.name() : __Encounters,
        __ProgramMemberships.name() : __ProgramMemberships,
        __OptOuts.name() : __OptOuts,
        __ClinicalRelationships.name() : __ClinicalRelationships,
        __Surveys.name() : __Surveys,
        __Assessments.name() : __Assessments,
        __PVData.name() : __PVData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Other Health Related Behaviours"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 79, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SocialHistory uses Python identifier SocialHistory
    __SocialHistory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SocialHistory'), 'SocialHistory', '__httpwww_rixg_org_uk_CTD_ANON__SocialHistory', False, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 81, 28), )

    
    SocialHistory = property(__SocialHistory.value, __SocialHistory.set, None, None)

    _ElementMap.update({
        __SocialHistory.name() : __SocialHistory
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Family Histories"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 92, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FamilyHistory uses Python identifier FamilyHistory
    __FamilyHistory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FamilyHistory'), 'FamilyHistory', '__httpwww_rixg_org_uk_CTD_ANON_2_FamilyHistory', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 94, 28), )

    
    FamilyHistory = property(__FamilyHistory.value, __FamilyHistory.set, None, None)

    _ElementMap.update({
        __FamilyHistory.name() : __FamilyHistory
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """
                        Allergies.
                        """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 117, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Allergy uses Python identifier Allergy
    __Allergy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Allergy'), 'Allergy', '__httpwww_rixg_org_uk_CTD_ANON_3_Allergy', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 119, 28), )

    
    Allergy = property(__Allergy.value, __Allergy.set, None, None)

    _ElementMap.update({
        __Allergy.name() : __Allergy
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 124, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Diagnosis uses Python identifier Diagnosis
    __Diagnosis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Diagnosis'), 'Diagnosis', '__httpwww_rixg_org_uk_CTD_ANON_4_Diagnosis', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 126, 28), )

    
    Diagnosis = property(__Diagnosis.value, __Diagnosis.set, None, 'Co-Morbidities')

    
    # Element CauseOfDeath uses Python identifier CauseOfDeath
    __CauseOfDeath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CauseOfDeath'), 'CauseOfDeath', '__httpwww_rixg_org_uk_CTD_ANON_4_CauseOfDeath', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 134, 28), )

    
    CauseOfDeath = property(__CauseOfDeath.value, __CauseOfDeath.set, None, 'Cause of Death')

    
    # Element RenalDiagnosis uses Python identifier RenalDiagnosis
    __RenalDiagnosis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RenalDiagnosis'), 'RenalDiagnosis', '__httpwww_rixg_org_uk_CTD_ANON_4_RenalDiagnosis', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 142, 28), )

    
    RenalDiagnosis = property(__RenalDiagnosis.value, __RenalDiagnosis.set, None, 'Renal Diagnoses')

    _ElementMap.update({
        __Diagnosis.name() : __Diagnosis,
        __CauseOfDeath.name() : __CauseOfDeath,
        __RenalDiagnosis.name() : __RenalDiagnosis
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Medications"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 160, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Medication uses Python identifier Medication
    __Medication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Medication'), 'Medication', '__httpwww_rixg_org_uk_CTD_ANON_5_Medication', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 162, 28), )

    
    Medication = property(__Medication.value, __Medication.set, None, None)

    _ElementMap.update({
        __Medication.name() : __Medication
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Dialysis Prescriptions"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 173, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DialysisPrescription uses Python identifier DialysisPrescription
    __DialysisPrescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DialysisPrescription'), 'DialysisPrescription', '__httpwww_rixg_org_uk_CTD_ANON_6_DialysisPrescription', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 175, 28), )

    
    DialysisPrescription = property(__DialysisPrescription.value, __DialysisPrescription.set, None, None)

    
    # Attribute start uses Python identifier start
    __start = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'start'), 'start', '__httpwww_rixg_org_uk_CTD_ANON_6_start', pyxb.binding.datatypes.date)
    __start._DeclarationLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 177, 24)
    __start._UseLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 177, 24)
    
    start = property(__start.value, __start.set, None, None)

    
    # Attribute stop uses Python identifier stop
    __stop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'stop'), 'stop', '__httpwww_rixg_org_uk_CTD_ANON_6_stop', pyxb.binding.datatypes.date)
    __stop._DeclarationLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 178, 24)
    __stop._UseLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 178, 24)
    
    stop = property(__stop.value, __stop.set, None, None)

    _ElementMap.update({
        __DialysisPrescription.name() : __DialysisPrescription
    })
    _AttributeMap.update({
        __start.name() : __start,
        __stop.name() : __stop
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Procedures"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 185, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Procedure uses Python identifier Procedure
    __Procedure = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Procedure'), 'Procedure', '__httpwww_rixg_org_uk_CTD_ANON_7_Procedure', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 187, 28), )

    
    Procedure = property(__Procedure.value, __Procedure.set, None, 'Procedures (not otherwise Specified)')

    
    # Element DialysisSessions uses Python identifier DialysisSessions
    __DialysisSessions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DialysisSessions'), 'DialysisSessions', '__httpwww_rixg_org_uk_CTD_ANON_7_DialysisSessions', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 195, 28), )

    
    DialysisSessions = property(__DialysisSessions.value, __DialysisSessions.set, None, 'Dialysis Sessions')

    
    # Element Transplant uses Python identifier Transplant
    __Transplant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Transplant'), 'Transplant', '__httpwww_rixg_org_uk_CTD_ANON_7_Transplant', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 203, 28), )

    
    Transplant = property(__Transplant.value, __Transplant.set, None, 'Transplant Procedures')

    
    # Element VascularAccess uses Python identifier VascularAccess
    __VascularAccess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VascularAccess'), 'VascularAccess', '__httpwww_rixg_org_uk_CTD_ANON_7_VascularAccess', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 211, 28), )

    
    VascularAccess = property(__VascularAccess.value, __VascularAccess.set, None, 'Vascular Access Constructions')

    _ElementMap.update({
        __Procedure.name() : __Procedure,
        __DialysisSessions.name() : __DialysisSessions,
        __Transplant.name() : __Transplant,
        __VascularAccess.name() : __VascularAccess
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Documents"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 229, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Document uses Python identifier Document
    __Document = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Document'), 'Document', '__httpwww_rixg_org_uk_CTD_ANON_8_Document', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 231, 28), )

    
    Document = property(__Document.value, __Document.set, None, None)

    _ElementMap.update({
        __Document.name() : __Document
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 236, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Encounter uses Python identifier Encounter
    __Encounter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Encounter'), 'Encounter', '__httpwww_rixg_org_uk_CTD_ANON_9_Encounter', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 238, 28), )

    
    Encounter = property(__Encounter.value, __Encounter.set, None, 'This is used to record the duration of something other than a Treatment. This element should not be submitted without prior discussion with the UKRR.')

    
    # Element Treatment uses Python identifier Treatment
    __Treatment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Treatment'), 'Treatment', '__httpwww_rixg_org_uk_CTD_ANON_9_Treatment', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 246, 28), )

    
    Treatment = property(__Treatment.value, __Treatment.set, None, 'This is used to record the duration a Patient received a particular type of Care/Treatment at a particular Treatment Facility. It is similar in concept to the UKRR TXT records however at the end of the period it should be end-dated rather than an additional record being sent. It is possible for treatment records to overlap if a patient has multiple treatments (such as post-transplant dialysis). A treatment record should exist for any period of time where they would be considered a patient (so for example code 900 record for pre-RRT CKD and a code 94 record for post-RRT Conservative care). Details of Transplants themselves should be recorded as Procedures but Treatment records should be used to record periods of Transplant related Inpatient/Outpatient care.')

    
    # Element TransplantList uses Python identifier TransplantList
    __TransplantList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TransplantList'), 'TransplantList', '__httpwww_rixg_org_uk_CTD_ANON_9_TransplantList', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 254, 28), )

    
    TransplantList = property(__TransplantList.value, __TransplantList.set, None, 'This is only for NHSBT supplied Transplant Waiting List data.')

    _ElementMap.update({
        __Encounter.name() : __Encounter,
        __Treatment.name() : __Treatment,
        __TransplantList.name() : __TransplantList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """
                        Program Memberships. These are used to record whether or not a patient wishes to participate in one of the UKRDC’s member projects. In the case of projects such as RADAR the Program Membership record should only be closed if the patient actively wishes to withdraw. It should not be end dated when they leave the unit or die. If a patient decides to leave a project and then re-joins a new Program Membership record should be created (with a different ExternalID) rather than re-opening the original one.
                        """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 274, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ProgramMembership uses Python identifier ProgramMembership
    __ProgramMembership = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProgramMembership'), 'ProgramMembership', '__httpwww_rixg_org_uk_CTD_ANON_10_ProgramMembership', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 276, 28), )

    
    ProgramMembership = property(__ProgramMembership.value, __ProgramMembership.set, None, None)

    _ElementMap.update({
        __ProgramMembership.name() : __ProgramMembership
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Opt-Outs"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 287, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element OptOut uses Python identifier OptOut
    __OptOut = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OptOut'), 'OptOut', '__httpwww_rixg_org_uk_CTD_ANON_11_OptOut', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 289, 28), )

    
    OptOut = property(__OptOut.value, __OptOut.set, None, None)

    _ElementMap.update({
        __OptOut.name() : __OptOut
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """This is used to record the relationship between a Patient and a Clinician or Care Facility. This element should not be submitted without prior discussion with the UKRR."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 300, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ClinicalRelationship uses Python identifier ClinicalRelationship
    __ClinicalRelationship = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ClinicalRelationship'), 'ClinicalRelationship', '__httpwww_rixg_org_uk_CTD_ANON_12_ClinicalRelationship', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 302, 28), )

    
    ClinicalRelationship = property(__ClinicalRelationship.value, __ClinicalRelationship.set, None, None)

    _ElementMap.update({
        __ClinicalRelationship.name() : __ClinicalRelationship
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Surveys"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 313, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Survey uses Python identifier Survey
    __Survey = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Survey'), 'Survey', '__httpwww_rixg_org_uk_CTD_ANON_13_Survey', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 315, 28), )

    
    Survey = property(__Survey.value, __Survey.set, None, None)

    _ElementMap.update({
        __Survey.name() : __Survey
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Assessments"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 326, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Assessment uses Python identifier Assessment
    __Assessment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Assessment'), 'Assessment', '__httpwww_rixg_org_uk_CTD_ANON_14_Assessment', True, pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 328, 28), )

    
    Assessment = property(__Assessment.value, __Assessment.set, None, None)

    _ElementMap.update({
        __Assessment.name() : __Assessment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type {http://www.rixg.org.uk/}Allergy with content type ELEMENT_ONLY
class Allergy (pyxb.binding.basis.complexTypeDefinition):
    """Allergies. This item should not be submitted without checking with the UKRR."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Allergy')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 7, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Allergy uses Python identifier Allergy
    __Allergy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Allergy'), 'Allergy', '__httpwww_rixg_org_uk_Allergy_Allergy', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 15, 12), )

    
    Allergy = property(__Allergy.value, __Allergy.set, None, 'Substance to which the patient is allergic. (SNOMED)')

    
    # Element AllergyCategory uses Python identifier AllergyCategory
    __AllergyCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AllergyCategory'), 'AllergyCategory', '__httpwww_rixg_org_uk_Allergy_AllergyCategory', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 23, 12), )

    
    AllergyCategory = property(__AllergyCategory.value, __AllergyCategory.set, None, 'Type of Allergy (HL7 00204)')

    
    # Element Severity uses Python identifier Severity
    __Severity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Severity'), 'Severity', '__httpwww_rixg_org_uk_Allergy_Severity', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 31, 12), )

    
    Severity = property(__Severity.value, __Severity.set, None, 'Severity (HL7 00206)')

    
    # Element Clinician uses Python identifier Clinician
    __Clinician = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Clinician'), 'Clinician', '__httpwww_rixg_org_uk_Allergy_Clinician', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 39, 12), )

    
    Clinician = property(__Clinician.value, __Clinician.set, None, 'Diagnosing Clinician')

    
    # Element DiscoveryTime uses Python identifier DiscoveryTime
    __DiscoveryTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DiscoveryTime'), 'DiscoveryTime', '__httpwww_rixg_org_uk_Allergy_DiscoveryTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 47, 12), )

    
    DiscoveryTime = property(__DiscoveryTime.value, __DiscoveryTime.set, None, 'Reported Date')

    
    # Element ConfirmedTime uses Python identifier ConfirmedTime
    __ConfirmedTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConfirmedTime'), 'ConfirmedTime', '__httpwww_rixg_org_uk_Allergy_ConfirmedTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 56, 12), )

    
    ConfirmedTime = property(__ConfirmedTime.value, __ConfirmedTime.set, None, 'Confirmed Time')

    
    # Element Comments uses Python identifier Comments
    __Comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Comments'), 'Comments', '__httpwww_rixg_org_uk_Allergy_Comments', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 65, 12), )

    
    Comments = property(__Comments.value, __Comments.set, None, 'Advice given to the patient')

    
    # Element InactiveTime uses Python identifier InactiveTime
    __InactiveTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InactiveTime'), 'InactiveTime', '__httpwww_rixg_org_uk_Allergy_InactiveTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 80, 12), )

    
    InactiveTime = property(__InactiveTime.value, __InactiveTime.set, None, 'Resolved Time')

    
    # Element FreeTextAllergy uses Python identifier FreeTextAllergy
    __FreeTextAllergy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FreeTextAllergy'), 'FreeTextAllergy', '__httpwww_rixg_org_uk_Allergy_FreeTextAllergy', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 89, 12), )

    
    FreeTextAllergy = property(__FreeTextAllergy.value, __FreeTextAllergy.set, None, 'AL1-5 Free text definition of what happened')

    
    # Element QualifyingDetails uses Python identifier QualifyingDetails
    __QualifyingDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'QualifyingDetails'), 'QualifyingDetails', '__httpwww_rixg_org_uk_Allergy_QualifyingDetails', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 103, 12), )

    
    QualifyingDetails = property(__QualifyingDetails.value, __QualifyingDetails.set, None, 'Details if patient or family reported')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_Allergy_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_Allergy_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __Allergy.name() : __Allergy,
        __AllergyCategory.name() : __AllergyCategory,
        __Severity.name() : __Severity,
        __Clinician.name() : __Clinician,
        __DiscoveryTime.name() : __DiscoveryTime,
        __ConfirmedTime.name() : __ConfirmedTime,
        __Comments.name() : __Comments,
        __InactiveTime.name() : __InactiveTime,
        __FreeTextAllergy.name() : __FreeTextAllergy,
        __QualifyingDetails.name() : __QualifyingDetails,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Allergy = Allergy
Namespace.addCategoryObject('typeBinding', 'Allergy', Allergy)


# Complex type {http://www.rixg.org.uk/}Assessment with content type ELEMENT_ONLY
class Assessment (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Assessment')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element AssessmentStart uses Python identifier AssessmentStart
    __AssessmentStart = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AssessmentStart'), 'AssessmentStart', '__httpwww_rixg_org_uk_Assessment_AssessmentStart', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 10, 12), )

    
    AssessmentStart = property(__AssessmentStart.value, __AssessmentStart.set, None, 'The Date the Assessment Started')

    
    # Element AssessmentEnd uses Python identifier AssessmentEnd
    __AssessmentEnd = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AssessmentEnd'), 'AssessmentEnd', '__httpwww_rixg_org_uk_Assessment_AssessmentEnd', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 18, 12), )

    
    AssessmentEnd = property(__AssessmentEnd.value, __AssessmentEnd.set, None, 'The Date the Assessment Ended')

    
    # Element AssessmentType uses Python identifier AssessmentType
    __AssessmentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AssessmentType'), 'AssessmentType', '__httpwww_rixg_org_uk_Assessment_AssessmentType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 26, 12), )

    
    AssessmentType = property(__AssessmentType.value, __AssessmentType.set, None, 'Assessment Type')

    
    # Element AssessmentOutcome uses Python identifier AssessmentOutcome
    __AssessmentOutcome = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AssessmentOutcome'), 'AssessmentOutcome', '__httpwww_rixg_org_uk_Assessment_AssessmentOutcome', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 59, 12), )

    
    AssessmentOutcome = property(__AssessmentOutcome.value, __AssessmentOutcome.set, None, 'Assessment Outcome')

    _ElementMap.update({
        __AssessmentStart.name() : __AssessmentStart,
        __AssessmentEnd.name() : __AssessmentEnd,
        __AssessmentType.name() : __AssessmentType,
        __AssessmentOutcome.name() : __AssessmentOutcome
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Assessment = Assessment
Namespace.addCategoryObject('typeBinding', 'Assessment', Assessment)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Assessment Type"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 33, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CTD_ANON_15_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 35, 24), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CTD_ANON_15_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 42, 24), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CTD_ANON_15_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 49, 24), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_15 = CTD_ANON_15


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Assessment Outcome"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 66, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CTD_ANON_16_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 68, 24), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CTD_ANON_16_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 75, 24), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CTD_ANON_16_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 82, 24), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_16 = CTD_ANON_16


# Complex type {http://www.rixg.org.uk/}ClinicalRelationship with content type ELEMENT_ONLY
class ClinicalRelationship (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ClinicalRelationship')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FromTime uses Python identifier FromTime
    __FromTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FromTime'), 'FromTime', '__httpwww_rixg_org_uk_ClinicalRelationship_FromTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 11, 12), )

    
    FromTime = property(__FromTime.value, __FromTime.set, None, 'Start of the relationship')

    
    # Element ToTime uses Python identifier ToTime
    __ToTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ToTime'), 'ToTime', '__httpwww_rixg_org_uk_ClinicalRelationship_ToTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 18, 12), )

    
    ToTime = property(__ToTime.value, __ToTime.set, None, 'End of the relationship')

    
    # Element Clinician uses Python identifier Clinician
    __Clinician = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Clinician'), 'Clinician', '__httpwww_rixg_org_uk_ClinicalRelationship_Clinician', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 25, 12), )

    
    Clinician = property(__Clinician.value, __Clinician.set, None, '')

    
    # Element FacilityCode uses Python identifier FacilityCode
    __FacilityCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FacilityCode'), 'FacilityCode', '__httpwww_rixg_org_uk_ClinicalRelationship_FacilityCode', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 31, 12), )

    
    FacilityCode = property(__FacilityCode.value, __FacilityCode.set, None, '')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_ClinicalRelationship_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_ClinicalRelationship_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __FromTime.name() : __FromTime,
        __ToTime.name() : __ToTime,
        __Clinician.name() : __Clinician,
        __FacilityCode.name() : __FacilityCode,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ClinicalRelationship = ClinicalRelationship
Namespace.addCategoryObject('typeBinding', 'ClinicalRelationship', ClinicalRelationship)


# Complex type {http://www.rixg.org.uk/}CauseOfDeath with content type ELEMENT_ONLY
class CauseOfDeath (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CauseOfDeath')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DiagnosisType uses Python identifier DiagnosisType
    __DiagnosisType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DiagnosisType'), 'DiagnosisType', '__httpwww_rixg_org_uk_CauseOfDeath_DiagnosisType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 11, 12), )

    
    DiagnosisType = property(__DiagnosisType.value, __DiagnosisType.set, None, '')

    
    # Element Diagnosis uses Python identifier Diagnosis
    __Diagnosis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Diagnosis'), 'Diagnosis', '__httpwww_rixg_org_uk_CauseOfDeath_Diagnosis', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 37, 12), )

    
    Diagnosis = property(__Diagnosis.value, __Diagnosis.set, None, 'Coded Caused of Death (EDTA)')

    
    # Element Comments uses Python identifier Comments
    __Comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Comments'), 'Comments', '__httpwww_rixg_org_uk_CauseOfDeath_Comments', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 43, 12), )

    
    Comments = property(__Comments.value, __Comments.set, None, 'Free text about the Diagnosis')

    
    # Element VerificationStatus uses Python identifier VerificationStatus
    __VerificationStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VerificationStatus'), 'VerificationStatus', '__httpwww_rixg_org_uk_CauseOfDeath_VerificationStatus', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 50, 12), )

    
    VerificationStatus = property(__VerificationStatus.value, __VerificationStatus.set, None, 'The verification status to support or decline the clinical status of the condition or diagnosis.')

    
    # Element EnteredOn uses Python identifier EnteredOn
    __EnteredOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredOn'), 'EnteredOn', '__httpwww_rixg_org_uk_CauseOfDeath_EnteredOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 90, 12), )

    
    EnteredOn = property(__EnteredOn.value, __EnteredOn.set, None, 'The date the COD was recorded in the medical record.')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_CauseOfDeath_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_CauseOfDeath_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __DiagnosisType.name() : __DiagnosisType,
        __Diagnosis.name() : __Diagnosis,
        __Comments.name() : __Comments,
        __VerificationStatus.name() : __VerificationStatus,
        __EnteredOn.name() : __EnteredOn,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CauseOfDeath = CauseOfDeath
Namespace.addCategoryObject('typeBinding', 'CauseOfDeath', CauseOfDeath)


# Complex type {http://www.rixg.org.uk/}Diagnosis with content type ELEMENT_ONLY
class Diagnosis (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Diagnosis')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DiagnosisType uses Python identifier DiagnosisType
    __DiagnosisType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DiagnosisType'), 'DiagnosisType', '__httpwww_rixg_org_uk_Diagnosis_DiagnosisType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 12, 12), )

    
    DiagnosisType = property(__DiagnosisType.value, __DiagnosisType.set, None, '')

    
    # Element DiagnosingClinician uses Python identifier DiagnosingClinician
    __DiagnosingClinician = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DiagnosingClinician'), 'DiagnosingClinician', '__httpwww_rixg_org_uk_Diagnosis_DiagnosingClinician', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 18, 12), )

    
    DiagnosingClinician = property(__DiagnosingClinician.value, __DiagnosingClinician.set, None, 'National Clinicial code where possible or other local code if not.')

    
    # Element Diagnosis uses Python identifier Diagnosis
    __Diagnosis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Diagnosis'), 'Diagnosis', '__httpwww_rixg_org_uk_Diagnosis_Diagnosis', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 24, 12), )

    
    Diagnosis = property(__Diagnosis.value, __Diagnosis.set, None, 'SNOMED CT coded diagnoses. This should also include any diagnosis that has been submitted elsewhere as a Primary Renal Diagnosis.')

    
    # Element BiopsyPerformed uses Python identifier BiopsyPerformed
    __BiopsyPerformed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BiopsyPerformed'), 'BiopsyPerformed', '__httpwww_rixg_org_uk_Diagnosis_BiopsyPerformed', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 30, 12), )

    
    BiopsyPerformed = property(__BiopsyPerformed.value, __BiopsyPerformed.set, None, 'Was a biopsy performed to arrive at this Diagnosis')

    
    # Element Comments uses Python identifier Comments
    __Comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Comments'), 'Comments', '__httpwww_rixg_org_uk_Diagnosis_Comments', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 36, 12), )

    
    Comments = property(__Comments.value, __Comments.set, None, 'Free text about the Diagnosis')

    
    # Element IdentificationTime uses Python identifier IdentificationTime
    __IdentificationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IdentificationTime'), 'IdentificationTime', '__httpwww_rixg_org_uk_Diagnosis_IdentificationTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 42, 12), )

    
    IdentificationTime = property(__IdentificationTime.value, __IdentificationTime.set, None, 'Date of initial diagnosis')

    
    # Element OnsetTime uses Python identifier OnsetTime
    __OnsetTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OnsetTime'), 'OnsetTime', '__httpwww_rixg_org_uk_Diagnosis_OnsetTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 48, 12), )

    
    OnsetTime = property(__OnsetTime.value, __OnsetTime.set, None, 'Date condition began.')

    
    # Element VerificationStatus uses Python identifier VerificationStatus
    __VerificationStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VerificationStatus'), 'VerificationStatus', '__httpwww_rixg_org_uk_Diagnosis_VerificationStatus', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 54, 12), )

    
    VerificationStatus = property(__VerificationStatus.value, __VerificationStatus.set, None, 'The verification status to support or decline the clinical status of the condition or diagnosis.')

    
    # Element EnteredOn uses Python identifier EnteredOn
    __EnteredOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredOn'), 'EnteredOn', '__httpwww_rixg_org_uk_Diagnosis_EnteredOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 94, 12), )

    
    EnteredOn = property(__EnteredOn.value, __EnteredOn.set, None, 'The date the diagnosis was recorded in the medical record.')

    
    # Element EncounterNumber uses Python identifier EncounterNumber
    __EncounterNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EncounterNumber'), 'EncounterNumber', '__httpwww_rixg_org_uk_Diagnosis_EncounterNumber', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 100, 12), )

    
    EncounterNumber = property(__EncounterNumber.value, __EncounterNumber.set, None, 'This is used to associate a Diagnosis with the activity in a particular Encounter record. This element should not be submitted without prior discussion with the UKRR.\n                    ')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_Diagnosis_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_Diagnosis_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __DiagnosisType.name() : __DiagnosisType,
        __DiagnosingClinician.name() : __DiagnosingClinician,
        __Diagnosis.name() : __Diagnosis,
        __BiopsyPerformed.name() : __BiopsyPerformed,
        __Comments.name() : __Comments,
        __IdentificationTime.name() : __IdentificationTime,
        __OnsetTime.name() : __OnsetTime,
        __VerificationStatus.name() : __VerificationStatus,
        __EnteredOn.name() : __EnteredOn,
        __EncounterNumber.name() : __EncounterNumber,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Diagnosis = Diagnosis
Namespace.addCategoryObject('typeBinding', 'Diagnosis', Diagnosis)


# Complex type {http://www.rixg.org.uk/}RenalDiagnosis with content type ELEMENT_ONLY
class RenalDiagnosis (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RenalDiagnosis')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DiagnosisType uses Python identifier DiagnosisType
    __DiagnosisType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DiagnosisType'), 'DiagnosisType', '__httpwww_rixg_org_uk_RenalDiagnosis_DiagnosisType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 12, 12), )

    
    DiagnosisType = property(__DiagnosisType.value, __DiagnosisType.set, None, '')

    
    # Element DiagnosingClinician uses Python identifier DiagnosingClinician
    __DiagnosingClinician = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DiagnosingClinician'), 'DiagnosingClinician', '__httpwww_rixg_org_uk_RenalDiagnosis_DiagnosingClinician', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 38, 12), )

    
    DiagnosingClinician = property(__DiagnosingClinician.value, __DiagnosingClinician.set, None, 'Clinician Coding Diagnosis')

    
    # Element Diagnosis uses Python identifier Diagnosis
    __Diagnosis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Diagnosis'), 'Diagnosis', '__httpwww_rixg_org_uk_RenalDiagnosis_Diagnosis', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 43, 12), )

    
    Diagnosis = property(__Diagnosis.value, __Diagnosis.set, None, 'Coded Primary Renal Diagnosis')

    
    # Element BiopsyPerformed uses Python identifier BiopsyPerformed
    __BiopsyPerformed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BiopsyPerformed'), 'BiopsyPerformed', '__httpwww_rixg_org_uk_RenalDiagnosis_BiopsyPerformed', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 49, 12), )

    
    BiopsyPerformed = property(__BiopsyPerformed.value, __BiopsyPerformed.set, None, 'Was a biopsy performed to arrive at this Diagnosis')

    
    # Element Comments uses Python identifier Comments
    __Comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Comments'), 'Comments', '__httpwww_rixg_org_uk_RenalDiagnosis_Comments', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 55, 12), )

    
    Comments = property(__Comments.value, __Comments.set, None, 'Free text about the Diagnosis')

    
    # Element IdentificationTime uses Python identifier IdentificationTime
    __IdentificationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IdentificationTime'), 'IdentificationTime', '__httpwww_rixg_org_uk_RenalDiagnosis_IdentificationTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 61, 12), )

    
    IdentificationTime = property(__IdentificationTime.value, __IdentificationTime.set, None, 'Date of initial diagnosis')

    
    # Element OnsetTime uses Python identifier OnsetTime
    __OnsetTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OnsetTime'), 'OnsetTime', '__httpwww_rixg_org_uk_RenalDiagnosis_OnsetTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 68, 12), )

    
    OnsetTime = property(__OnsetTime.value, __OnsetTime.set, None, 'Date condition began.')

    
    # Element VerificationStatus uses Python identifier VerificationStatus
    __VerificationStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VerificationStatus'), 'VerificationStatus', '__httpwww_rixg_org_uk_RenalDiagnosis_VerificationStatus', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 75, 12), )

    
    VerificationStatus = property(__VerificationStatus.value, __VerificationStatus.set, None, 'The verification status to support or decline the clinical status of the condition or diagnosis.')

    
    # Element EnteredOn uses Python identifier EnteredOn
    __EnteredOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredOn'), 'EnteredOn', '__httpwww_rixg_org_uk_RenalDiagnosis_EnteredOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 115, 12), )

    
    EnteredOn = property(__EnteredOn.value, __EnteredOn.set, None, 'The date the diagnosis was recorded in the medical record.')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_RenalDiagnosis_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_RenalDiagnosis_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __DiagnosisType.name() : __DiagnosisType,
        __DiagnosingClinician.name() : __DiagnosingClinician,
        __Diagnosis.name() : __Diagnosis,
        __BiopsyPerformed.name() : __BiopsyPerformed,
        __Comments.name() : __Comments,
        __IdentificationTime.name() : __IdentificationTime,
        __OnsetTime.name() : __OnsetTime,
        __VerificationStatus.name() : __VerificationStatus,
        __EnteredOn.name() : __EnteredOn,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RenalDiagnosis = RenalDiagnosis
Namespace.addCategoryObject('typeBinding', 'RenalDiagnosis', RenalDiagnosis)


# Complex type {http://www.rixg.org.uk/}DialysisPrescription with content type ELEMENT_ONLY
class DialysisPrescription (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DialysisPrescription')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EnteredOn uses Python identifier EnteredOn
    __EnteredOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredOn'), 'EnteredOn', '__httpwww_rixg_org_uk_DialysisPrescription_EnteredOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 10, 12), )

    
    EnteredOn = property(__EnteredOn.value, __EnteredOn.set, None, 'The date the Dialysis Prescription was created.')

    
    # Element FromTime uses Python identifier FromTime
    __FromTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FromTime'), 'FromTime', '__httpwww_rixg_org_uk_DialysisPrescription_FromTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 16, 12), )

    
    FromTime = property(__FromTime.value, __FromTime.set, None, 'Time the Period the Dialysis Prescription Applies To Starts')

    
    # Element ToTime uses Python identifier ToTime
    __ToTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ToTime'), 'ToTime', '__httpwww_rixg_org_uk_DialysisPrescription_ToTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 22, 12), )

    
    ToTime = property(__ToTime.value, __ToTime.set, None, 'Time the Period the Dialysis Prescription Applies To Ends')

    
    # Element SessionType uses Python identifier SessionType
    __SessionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SessionType'), 'SessionType', '__httpwww_rixg_org_uk_DialysisPrescription_SessionType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 28, 12), )

    
    SessionType = property(__SessionType.value, __SessionType.set, None, 'Session Type (Same as QHD41)')

    
    # Element SessionsPerWeek uses Python identifier SessionsPerWeek
    __SessionsPerWeek = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SessionsPerWeek'), 'SessionsPerWeek', '__httpwww_rixg_org_uk_DialysisPrescription_SessionsPerWeek', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 34, 12), )

    
    SessionsPerWeek = property(__SessionsPerWeek.value, __SessionsPerWeek.set, None, 'Number of Dialysis Sessions per Week')

    
    # Element TimeDialysed uses Python identifier TimeDialysed
    __TimeDialysed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TimeDialysed'), 'TimeDialysed', '__httpwww_rixg_org_uk_DialysisPrescription_TimeDialysed', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 40, 12), )

    
    TimeDialysed = property(__TimeDialysed.value, __TimeDialysed.set, None, 'Time Dialysed (Minutes)')

    
    # Element VascularAccess uses Python identifier VascularAccess
    __VascularAccess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VascularAccess'), 'VascularAccess', '__httpwww_rixg_org_uk_DialysisPrescription_VascularAccess', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 46, 12), )

    
    VascularAccess = property(__VascularAccess.value, __VascularAccess.set, None, 'Vascular Access to Use (QHD20)')

    _ElementMap.update({
        __EnteredOn.name() : __EnteredOn,
        __FromTime.name() : __FromTime,
        __ToTime.name() : __ToTime,
        __SessionType.name() : __SessionType,
        __SessionsPerWeek.name() : __SessionsPerWeek,
        __TimeDialysed.name() : __TimeDialysed,
        __VascularAccess.name() : __VascularAccess
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DialysisPrescription = DialysisPrescription
Namespace.addCategoryObject('typeBinding', 'DialysisPrescription', DialysisPrescription)


# Complex type {http://www.rixg.org.uk/}DialysisSessions with content type ELEMENT_ONLY
class DialysisSessions (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}DialysisSessions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DialysisSessions')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DialysisSession uses Python identifier DialysisSession
    __DialysisSession = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DialysisSession'), 'DialysisSession', '__httpwww_rixg_org_uk_DialysisSessions_DialysisSession', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 7, 12), )

    
    DialysisSession = property(__DialysisSession.value, __DialysisSession.set, None, None)

    
    # Attribute start uses Python identifier start
    __start = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'start'), 'start', '__httpwww_rixg_org_uk_DialysisSessions_start', pyxb.binding.datatypes.date)
    __start._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 9, 8)
    __start._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 9, 8)
    
    start = property(__start.value, __start.set, None, None)

    
    # Attribute stop uses Python identifier stop
    __stop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'stop'), 'stop', '__httpwww_rixg_org_uk_DialysisSessions_stop', pyxb.binding.datatypes.date)
    __stop._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 10, 8)
    __stop._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 10, 8)
    
    stop = property(__stop.value, __stop.set, None, None)

    _ElementMap.update({
        __DialysisSession.name() : __DialysisSession
    })
    _AttributeMap.update({
        __start.name() : __start,
        __stop.name() : __stop
    })
_module_typeBindings.DialysisSessions = DialysisSessions
Namespace.addCategoryObject('typeBinding', 'DialysisSessions', DialysisSessions)


# Complex type {http://www.rixg.org.uk/}Document with content type ELEMENT_ONLY
class Document (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Document')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DocumentTime uses Python identifier DocumentTime
    __DocumentTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DocumentTime'), 'DocumentTime', '__httpwww_rixg_org_uk_Document_DocumentTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 12, 12), )

    
    DocumentTime = property(__DocumentTime.value, __DocumentTime.set, None, 'Document Creation')

    
    # Element NoteText uses Python identifier NoteText
    __NoteText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoteText'), 'NoteText', '__httpwww_rixg_org_uk_Document_NoteText', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 18, 12), )

    
    NoteText = property(__NoteText.value, __NoteText.set, None, 'The body of the document as plain text')

    
    # Element DocumentType uses Python identifier DocumentType
    __DocumentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DocumentType'), 'DocumentType', '__httpwww_rixg_org_uk_Document_DocumentType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 24, 12), )

    
    DocumentType = property(__DocumentType.value, __DocumentType.set, None, 'For future use.')

    
    # Element Clinician uses Python identifier Clinician
    __Clinician = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Clinician'), 'Clinician', '__httpwww_rixg_org_uk_Document_Clinician', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 30, 12), )

    
    Clinician = property(__Clinician.value, __Clinician.set, None, 'The person responsibile for the content of the document')

    
    # Element DocumentName uses Python identifier DocumentName
    __DocumentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DocumentName'), 'DocumentName', '__httpwww_rixg_org_uk_Document_DocumentName', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 37, 12), )

    
    DocumentName = property(__DocumentName.value, __DocumentName.set, None, 'Document title')

    
    # Element Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Status'), 'Status', '__httpwww_rixg_org_uk_Document_Status', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 47, 12), )

    
    Status = property(__Status.value, __Status.set, None, 'ACTIVE or INACTIVE')

    
    # Element EnteredBy uses Python identifier EnteredBy
    __EnteredBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredBy'), 'EnteredBy', '__httpwww_rixg_org_uk_Document_EnteredBy', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 53, 12), )

    
    EnteredBy = property(__EnteredBy.value, __EnteredBy.set, None, 'Person entering the document as a National Clinicial code where possible or other local code if not.')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_Document_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 59, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, 'Location the document was created at. Use National coding e.g. RXF01')

    
    # Element FileType uses Python identifier FileType
    __FileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileType'), 'FileType', '__httpwww_rixg_org_uk_Document_FileType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 65, 12), )

    
    FileType = property(__FileType.value, __FileType.set, None, 'The MIME type of the data if supplied as a stream.')

    
    # Element FileName uses Python identifier FileName
    __FileName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileName'), 'FileName', '__httpwww_rixg_org_uk_Document_FileName', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 71, 12), )

    
    FileName = property(__FileName.value, __FileName.set, None, 'The filename of the document')

    
    # Element Stream uses Python identifier Stream
    __Stream = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Stream'), 'Stream', '__httpwww_rixg_org_uk_Document_Stream', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 77, 12), )

    
    Stream = property(__Stream.value, __Stream.set, None, 'This property is used when the Document is binary data, e.g DOC, PDF, JPG')

    
    # Element DocumentURL uses Python identifier DocumentURL
    __DocumentURL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DocumentURL'), 'DocumentURL', '__httpwww_rixg_org_uk_Document_DocumentURL', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 83, 12), )

    
    DocumentURL = property(__DocumentURL.value, __DocumentURL.set, None, 'URL to the document if notetext/stream is not supplied.')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_Document_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_Document_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __DocumentTime.name() : __DocumentTime,
        __NoteText.name() : __NoteText,
        __DocumentType.name() : __DocumentType,
        __Clinician.name() : __Clinician,
        __DocumentName.name() : __DocumentName,
        __Status.name() : __Status,
        __EnteredBy.name() : __EnteredBy,
        __EnteredAt.name() : __EnteredAt,
        __FileType.name() : __FileType,
        __FileName.name() : __FileName,
        __Stream.name() : __Stream,
        __DocumentURL.name() : __DocumentURL,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Document = Document
Namespace.addCategoryObject('typeBinding', 'Document', Document)


# Complex type {http://www.rixg.org.uk/}Encounter with content type ELEMENT_ONLY
class Encounter (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Encounter')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EncounterNumber uses Python identifier EncounterNumber
    __EncounterNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EncounterNumber'), 'EncounterNumber', '__httpwww_rixg_org_uk_Encounter_EncounterNumber', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 12, 12), )

    
    EncounterNumber = property(__EncounterNumber.value, __EncounterNumber.set, None, None)

    
    # Element EncounterType uses Python identifier EncounterType
    __EncounterType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EncounterType'), 'EncounterType', '__httpwww_rixg_org_uk_Encounter_EncounterType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 13, 12), )

    
    EncounterType = property(__EncounterType.value, __EncounterType.set, None, 'General Encounter Type (PV1-2)')

    
    # Element FromTime uses Python identifier FromTime
    __FromTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FromTime'), 'FromTime', '__httpwww_rixg_org_uk_Encounter_FromTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 73, 12), )

    
    FromTime = property(__FromTime.value, __FromTime.set, None, 'Time that encounter starts')

    
    # Element ToTime uses Python identifier ToTime
    __ToTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ToTime'), 'ToTime', '__httpwww_rixg_org_uk_Encounter_ToTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 79, 12), )

    
    ToTime = property(__ToTime.value, __ToTime.set, None, 'Time that encounter ends')

    
    # Element AdmittingClinician uses Python identifier AdmittingClinician
    __AdmittingClinician = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdmittingClinician'), 'AdmittingClinician', '__httpwww_rixg_org_uk_Encounter_AdmittingClinician', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 85, 12), )

    
    AdmittingClinician = property(__AdmittingClinician.value, __AdmittingClinician.set, None, 'Responsible Clinician as a National Clinicial code where possible or other local code if not.')

    
    # Element HealthCareFacility uses Python identifier HealthCareFacility
    __HealthCareFacility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HealthCareFacility'), 'HealthCareFacility', '__httpwww_rixg_org_uk_Encounter_HealthCareFacility', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 91, 12), )

    
    HealthCareFacility = property(__HealthCareFacility.value, __HealthCareFacility.set, None, 'Parent renal unit as national ODS code (e.g. RXF01)')

    
    # Element AdmitReason uses Python identifier AdmitReason
    __AdmitReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdmitReason'), 'AdmitReason', '__httpwww_rixg_org_uk_Encounter_AdmitReason', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 97, 12), )

    
    AdmitReason = property(__AdmitReason.value, __AdmitReason.set, None, 'Reason for change of care')

    
    # Element AdmissionSource uses Python identifier AdmissionSource
    __AdmissionSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdmissionSource'), 'AdmissionSource', '__httpwww_rixg_org_uk_Encounter_AdmissionSource', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 103, 12), )

    
    AdmissionSource = property(__AdmissionSource.value, __AdmissionSource.set, None, 'Parent renal unit as national ODS code (e.g. RXF01)')

    
    # Element DischargeReason uses Python identifier DischargeReason
    __DischargeReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DischargeReason'), 'DischargeReason', '__httpwww_rixg_org_uk_Encounter_DischargeReason', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 109, 12), )

    
    DischargeReason = property(__DischargeReason.value, __DischargeReason.set, None, 'Reason for Discharge (Transplant, Removed from List etc.)')

    
    # Element DischargeLocation uses Python identifier DischargeLocation
    __DischargeLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DischargeLocation'), 'DischargeLocation', '__httpwww_rixg_org_uk_Encounter_DischargeLocation', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 115, 12), )

    
    DischargeLocation = property(__DischargeLocation.value, __DischargeLocation.set, None, 'Parent renal unit as national ODS code (e.g. RXF01)')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_Encounter_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 121, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, 'National code for the hospital providing care - e.g. RXF01')

    
    # Element VisitDescription uses Python identifier VisitDescription
    __VisitDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VisitDescription'), 'VisitDescription', '__httpwww_rixg_org_uk_Encounter_VisitDescription', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 127, 12), )

    
    VisitDescription = property(__VisitDescription.value, __VisitDescription.set, None, 'Details of validation e.g. Date Done, by whom, who provided the info')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_Encounter_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_Encounter_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __EncounterNumber.name() : __EncounterNumber,
        __EncounterType.name() : __EncounterType,
        __FromTime.name() : __FromTime,
        __ToTime.name() : __ToTime,
        __AdmittingClinician.name() : __AdmittingClinician,
        __HealthCareFacility.name() : __HealthCareFacility,
        __AdmitReason.name() : __AdmitReason,
        __AdmissionSource.name() : __AdmissionSource,
        __DischargeReason.name() : __DischargeReason,
        __DischargeLocation.name() : __DischargeLocation,
        __EnteredAt.name() : __EnteredAt,
        __VisitDescription.name() : __VisitDescription,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Encounter = Encounter
Namespace.addCategoryObject('typeBinding', 'Encounter', Encounter)


# Complex type {http://www.rixg.org.uk/}TransplantList with content type ELEMENT_ONLY
class TransplantList (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransplantList')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 7, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EncounterNumber uses Python identifier EncounterNumber
    __EncounterNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EncounterNumber'), 'EncounterNumber', '__httpwww_rixg_org_uk_TransplantList_EncounterNumber', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 13, 12), )

    
    EncounterNumber = property(__EncounterNumber.value, __EncounterNumber.set, None, None)

    
    # Element EncounterType uses Python identifier EncounterType
    __EncounterType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EncounterType'), 'EncounterType', '__httpwww_rixg_org_uk_TransplantList_EncounterType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 14, 12), )

    
    EncounterType = property(__EncounterType.value, __EncounterType.set, None, 'General Encounter Type (PV1-2)')

    
    # Element FromTime uses Python identifier FromTime
    __FromTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FromTime'), 'FromTime', '__httpwww_rixg_org_uk_TransplantList_FromTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 59, 12), )

    
    FromTime = property(__FromTime.value, __FromTime.set, None, 'Start of Registration')

    
    # Element ToTime uses Python identifier ToTime
    __ToTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ToTime'), 'ToTime', '__httpwww_rixg_org_uk_TransplantList_ToTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 65, 12), )

    
    ToTime = property(__ToTime.value, __ToTime.set, None, 'End of Registration')

    
    # Element AdmittingClinician uses Python identifier AdmittingClinician
    __AdmittingClinician = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdmittingClinician'), 'AdmittingClinician', '__httpwww_rixg_org_uk_TransplantList_AdmittingClinician', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 71, 12), )

    
    AdmittingClinician = property(__AdmittingClinician.value, __AdmittingClinician.set, None, 'Responsible Clinician as a National Clinicial code where possible or other local code if not.')

    
    # Element HealthCareFacility uses Python identifier HealthCareFacility
    __HealthCareFacility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HealthCareFacility'), 'HealthCareFacility', '__httpwww_rixg_org_uk_TransplantList_HealthCareFacility', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 77, 12), )

    
    HealthCareFacility = property(__HealthCareFacility.value, __HealthCareFacility.set, None, 'Transplant Unit')

    
    # Element AdmitReason uses Python identifier AdmitReason
    __AdmitReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdmitReason'), 'AdmitReason', '__httpwww_rixg_org_uk_TransplantList_AdmitReason', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 83, 12), )

    
    AdmitReason = property(__AdmitReason.value, __AdmitReason.set, None, 'Type of Organ')

    
    # Element AdmissionSource uses Python identifier AdmissionSource
    __AdmissionSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdmissionSource'), 'AdmissionSource', '__httpwww_rixg_org_uk_TransplantList_AdmissionSource', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 89, 12), )

    
    AdmissionSource = property(__AdmissionSource.value, __AdmissionSource.set, None, 'Referring Unit')

    
    # Element DischargeReason uses Python identifier DischargeReason
    __DischargeReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DischargeReason'), 'DischargeReason', '__httpwww_rixg_org_uk_TransplantList_DischargeReason', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 95, 12), )

    
    DischargeReason = property(__DischargeReason.value, __DischargeReason.set, None, 'Registration End Status')

    
    # Element DischargeLocation uses Python identifier DischargeLocation
    __DischargeLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DischargeLocation'), 'DischargeLocation', '__httpwww_rixg_org_uk_TransplantList_DischargeLocation', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 101, 12), )

    
    DischargeLocation = property(__DischargeLocation.value, __DischargeLocation.set, None, 'Parent renal unit as national ODS code (e.g. RXF01)')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_TransplantList_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 107, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, 'National code for the hospital providing care - e.g. RXF01')

    
    # Element VisitDescription uses Python identifier VisitDescription
    __VisitDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VisitDescription'), 'VisitDescription', '__httpwww_rixg_org_uk_TransplantList_VisitDescription', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 113, 12), )

    
    VisitDescription = property(__VisitDescription.value, __VisitDescription.set, None, 'Details of validation e.g. Date Done, by whom, who provided the info')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_TransplantList_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_TransplantList_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __EncounterNumber.name() : __EncounterNumber,
        __EncounterType.name() : __EncounterType,
        __FromTime.name() : __FromTime,
        __ToTime.name() : __ToTime,
        __AdmittingClinician.name() : __AdmittingClinician,
        __HealthCareFacility.name() : __HealthCareFacility,
        __AdmitReason.name() : __AdmitReason,
        __AdmissionSource.name() : __AdmissionSource,
        __DischargeReason.name() : __DischargeReason,
        __DischargeLocation.name() : __DischargeLocation,
        __EnteredAt.name() : __EnteredAt,
        __VisitDescription.name() : __VisitDescription,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TransplantList = TransplantList
Namespace.addCategoryObject('typeBinding', 'TransplantList', TransplantList)


# Complex type {http://www.rixg.org.uk/}Treatment with content type ELEMENT_ONLY
class Treatment (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Treatment')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 9, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EncounterNumber uses Python identifier EncounterNumber
    __EncounterNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EncounterNumber'), 'EncounterNumber', '__httpwww_rixg_org_uk_Treatment_EncounterNumber', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 15, 12), )

    
    EncounterNumber = property(__EncounterNumber.value, __EncounterNumber.set, None, '')

    
    # Element FromTime uses Python identifier FromTime
    __FromTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FromTime'), 'FromTime', '__httpwww_rixg_org_uk_Treatment_FromTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 22, 12), )

    
    FromTime = property(__FromTime.value, __FromTime.set, None, 'Start of Treatment (TXT00)')

    
    # Element ToTime uses Python identifier ToTime
    __ToTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ToTime'), 'ToTime', '__httpwww_rixg_org_uk_Treatment_ToTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 29, 12), )

    
    ToTime = property(__ToTime.value, __ToTime.set, None, 'End of Treatment (TXT01)')

    
    # Element AdmittingClinician uses Python identifier AdmittingClinician
    __AdmittingClinician = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdmittingClinician'), 'AdmittingClinician', '__httpwww_rixg_org_uk_Treatment_AdmittingClinician', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 36, 12), )

    
    AdmittingClinician = property(__AdmittingClinician.value, __AdmittingClinician.set, None, 'Responsible Clinician as a National Clinicial code where possible or other local code if not.')

    
    # Element HealthCareFacility uses Python identifier HealthCareFacility
    __HealthCareFacility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HealthCareFacility'), 'HealthCareFacility', '__httpwww_rixg_org_uk_Treatment_HealthCareFacility', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 42, 12), )

    
    HealthCareFacility = property(__HealthCareFacility.value, __HealthCareFacility.set, None, 'Treatment Centre (TXT20)')

    
    # Element AdmitReason uses Python identifier AdmitReason
    __AdmitReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdmitReason'), 'AdmitReason', '__httpwww_rixg_org_uk_Treatment_AdmitReason', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 48, 12), )

    
    AdmitReason = property(__AdmitReason.value, __AdmitReason.set, None, 'Modality')

    
    # Element AdmissionSource uses Python identifier AdmissionSource
    __AdmissionSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdmissionSource'), 'AdmissionSource', '__httpwww_rixg_org_uk_Treatment_AdmissionSource', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 54, 12), )

    
    AdmissionSource = property(__AdmissionSource.value, __AdmissionSource.set, None, 'Prior Main Renal Unit')

    
    # Element DischargeReason uses Python identifier DischargeReason
    __DischargeReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DischargeReason'), 'DischargeReason', '__httpwww_rixg_org_uk_Treatment_DischargeReason', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 60, 12), )

    
    DischargeReason = property(__DischargeReason.value, __DischargeReason.set, None, 'Reason for Discharge')

    
    # Element DischargeLocation uses Python identifier DischargeLocation
    __DischargeLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DischargeLocation'), 'DischargeLocation', '__httpwww_rixg_org_uk_Treatment_DischargeLocation', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 66, 12), )

    
    DischargeLocation = property(__DischargeLocation.value, __DischargeLocation.set, None, 'Destination Main Renal Unit')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_Treatment_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 72, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, 'National code for the hospital providing care - e.g. RXF01')

    
    # Element VisitDescription uses Python identifier VisitDescription
    __VisitDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VisitDescription'), 'VisitDescription', '__httpwww_rixg_org_uk_Treatment_VisitDescription', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 78, 12), )

    
    VisitDescription = property(__VisitDescription.value, __VisitDescription.set, None, 'Free text about the Treatment record.')

    
    # Element Attributes uses Python identifier Attributes
    __Attributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Attributes'), 'Attributes', '__httpwww_rixg_org_uk_Treatment_Attributes', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 90, 12), )

    
    Attributes = property(__Attributes.value, __Attributes.set, None, None)

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_Treatment_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_Treatment_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __EncounterNumber.name() : __EncounterNumber,
        __FromTime.name() : __FromTime,
        __ToTime.name() : __ToTime,
        __AdmittingClinician.name() : __AdmittingClinician,
        __HealthCareFacility.name() : __HealthCareFacility,
        __AdmitReason.name() : __AdmitReason,
        __AdmissionSource.name() : __AdmissionSource,
        __DischargeReason.name() : __DischargeReason,
        __DischargeLocation.name() : __DischargeLocation,
        __EnteredAt.name() : __EnteredAt,
        __VisitDescription.name() : __VisitDescription,
        __Attributes.name() : __Attributes,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Treatment = Treatment
Namespace.addCategoryObject('typeBinding', 'Treatment', Treatment)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 91, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element QBL05 uses Python identifier QBL05
    __QBL05 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'QBL05'), 'QBL05', '__httpwww_rixg_org_uk_CTD_ANON_17_QBL05', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 93, 24), )

    
    QBL05 = property(__QBL05.value, __QBL05.set, None, 'HD Treatment Location (RR8) AKA TXT21')

    _ElementMap.update({
        __QBL05.name() : __QBL05
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_17 = CTD_ANON_17


# Complex type {http://www.rixg.org.uk/}FamilyHistory with content type ELEMENT_ONLY
class FamilyHistory (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FamilyHistory')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 7, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FamilyMember uses Python identifier FamilyMember
    __FamilyMember = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FamilyMember'), 'FamilyMember', '__httpwww_rixg_org_uk_FamilyHistory_FamilyMember', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 13, 12), )

    
    FamilyMember = property(__FamilyMember.value, __FamilyMember.set, None, 'Family member')

    
    # Element Diagnosis uses Python identifier Diagnosis
    __Diagnosis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Diagnosis'), 'Diagnosis', '__httpwww_rixg_org_uk_FamilyHistory_Diagnosis', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 19, 12), )

    
    Diagnosis = property(__Diagnosis.value, __Diagnosis.set, None, 'Diagnosis on family member')

    
    # Element NoteText uses Python identifier NoteText
    __NoteText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoteText'), 'NoteText', '__httpwww_rixg_org_uk_FamilyHistory_NoteText', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 25, 12), )

    
    NoteText = property(__NoteText.value, __NoteText.set, None, '')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_FamilyHistory_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 31, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, '')

    
    # Element FromTime uses Python identifier FromTime
    __FromTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FromTime'), 'FromTime', '__httpwww_rixg_org_uk_FamilyHistory_FromTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 37, 12), )

    
    FromTime = property(__FromTime.value, __FromTime.set, None, 'Beginning of period covered')

    
    # Element ToTime uses Python identifier ToTime
    __ToTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ToTime'), 'ToTime', '__httpwww_rixg_org_uk_FamilyHistory_ToTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 43, 12), )

    
    ToTime = property(__ToTime.value, __ToTime.set, None, 'End of period covered')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_FamilyHistory_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_FamilyHistory_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __FamilyMember.name() : __FamilyMember,
        __Diagnosis.name() : __Diagnosis,
        __NoteText.name() : __NoteText,
        __EnteredAt.name() : __EnteredAt,
        __FromTime.name() : __FromTime,
        __ToTime.name() : __ToTime,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FamilyHistory = FamilyHistory
Namespace.addCategoryObject('typeBinding', 'FamilyHistory', FamilyHistory)


# Complex type {http://www.rixg.org.uk/}LabOrders with content type ELEMENT_ONLY
class LabOrders (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}LabOrders with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LabOrders')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 9, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LabOrder uses Python identifier LabOrder
    __LabOrder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabOrder'), 'LabOrder', '__httpwww_rixg_org_uk_LabOrders_LabOrder', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 11, 12), )

    
    LabOrder = property(__LabOrder.value, __LabOrder.set, None, None)

    
    # Attribute start uses Python identifier start
    __start = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'start'), 'start', '__httpwww_rixg_org_uk_LabOrders_start', pyxb.binding.datatypes.date)
    __start._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 13, 8)
    __start._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 13, 8)
    
    start = property(__start.value, __start.set, None, None)

    
    # Attribute stop uses Python identifier stop
    __stop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'stop'), 'stop', '__httpwww_rixg_org_uk_LabOrders_stop', pyxb.binding.datatypes.date)
    __stop._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 15, 8)
    __stop._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 15, 8)
    
    stop = property(__stop.value, __stop.set, None, None)

    _ElementMap.update({
        __LabOrder.name() : __LabOrder
    })
    _AttributeMap.update({
        __start.name() : __start,
        __stop.name() : __stop
    })
_module_typeBindings.LabOrders = LabOrders
Namespace.addCategoryObject('typeBinding', 'LabOrders', LabOrders)


# Complex type {http://www.rixg.org.uk/}ResultItems with content type ELEMENT_ONLY
class ResultItems (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}ResultItems with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResultItems')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 19, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ResultItem uses Python identifier ResultItem
    __ResultItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResultItem'), 'ResultItem', '__httpwww_rixg_org_uk_ResultItems_ResultItem', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 21, 12), )

    
    ResultItem = property(__ResultItem.value, __ResultItem.set, None, None)

    _ElementMap.update({
        __ResultItem.name() : __ResultItem
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ResultItems = ResultItems
Namespace.addCategoryObject('typeBinding', 'ResultItems', ResultItems)


# Complex type {http://www.rixg.org.uk/}LabOrder with content type ELEMENT_ONLY
class LabOrder (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LabOrder')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 25, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReceivingLocation uses Python identifier ReceivingLocation
    __ReceivingLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReceivingLocation'), 'ReceivingLocation', '__httpwww_rixg_org_uk_LabOrder_ReceivingLocation', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 33, 12), )

    
    ReceivingLocation = property(__ReceivingLocation.value, __ReceivingLocation.set, None, 'Location or Facility receiving/performing the order.')

    
    # Element PlacerId uses Python identifier PlacerId
    __PlacerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PlacerId'), 'PlacerId', '__httpwww_rixg_org_uk_LabOrder_PlacerId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 41, 12), )

    
    PlacerId = property(__PlacerId.value, __PlacerId.set, None, "ORC:2 Placer (Hospital)'s Order Id")

    
    # Element FillerId uses Python identifier FillerId
    __FillerId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FillerId'), 'FillerId', '__httpwww_rixg_org_uk_LabOrder_FillerId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 55, 12), )

    
    FillerId = property(__FillerId.value, __FillerId.set, None, "ORC:3 Filler (Lab)'s Order Id")

    
    # Element OrderedBy uses Python identifier OrderedBy
    __OrderedBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OrderedBy'), 'OrderedBy', '__httpwww_rixg_org_uk_LabOrder_OrderedBy', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 69, 12), )

    
    OrderedBy = property(__OrderedBy.value, __OrderedBy.set, None, 'Requesting Location (as in Hospital, GP, etc.)')

    
    # Element OrderItem uses Python identifier OrderItem
    __OrderItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OrderItem'), 'OrderItem', '__httpwww_rixg_org_uk_LabOrder_OrderItem', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 77, 12), )

    
    OrderItem = property(__OrderItem.value, __OrderItem.set, None, 'OBR:4 Service Id - the identity of the test ordered.')

    
    # Element OrderCategory uses Python identifier OrderCategory
    __OrderCategory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OrderCategory'), 'OrderCategory', '__httpwww_rixg_org_uk_LabOrder_OrderCategory', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 85, 12), )

    
    OrderCategory = property(__OrderCategory.value, __OrderCategory.set, None, None)

    
    # Element SpecimenCollectedTime uses Python identifier SpecimenCollectedTime
    __SpecimenCollectedTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SpecimenCollectedTime'), 'SpecimenCollectedTime', '__httpwww_rixg_org_uk_LabOrder_SpecimenCollectedTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 86, 12), )

    
    SpecimenCollectedTime = property(__SpecimenCollectedTime.value, __SpecimenCollectedTime.set, None, 'OBR:22')

    
    # Element SpecimenReceivedTime uses Python identifier SpecimenReceivedTime
    __SpecimenReceivedTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SpecimenReceivedTime'), 'SpecimenReceivedTime', '__httpwww_rixg_org_uk_LabOrder_SpecimenReceivedTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 95, 12), )

    
    SpecimenReceivedTime = property(__SpecimenReceivedTime.value, __SpecimenReceivedTime.set, None, 'OBR:14')

    
    # Element Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Status'), 'Status', '__httpwww_rixg_org_uk_LabOrder_Status', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 104, 12), )

    
    Status = property(__Status.value, __Status.set, None, '')

    
    # Element Priority uses Python identifier Priority
    __Priority = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Priority'), 'Priority', '__httpwww_rixg_org_uk_LabOrder_Priority', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 116, 12), )

    
    Priority = property(__Priority.value, __Priority.set, None, None)

    
    # Element SpecimenSource uses Python identifier SpecimenSource
    __SpecimenSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SpecimenSource'), 'SpecimenSource', '__httpwww_rixg_org_uk_LabOrder_SpecimenSource', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 117, 12), )

    
    SpecimenSource = property(__SpecimenSource.value, __SpecimenSource.set, None, 'OBR:15.1 e.g. serum, blood')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpwww_rixg_org_uk_LabOrder_Duration', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 129, 12), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'OBR:27.3')

    
    # Element ResultItems uses Python identifier ResultItems
    __ResultItems = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResultItems'), 'ResultItems', '__httpwww_rixg_org_uk_LabOrder_ResultItems', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 136, 12), )

    
    ResultItems = property(__ResultItems.value, __ResultItems.set, None, None)

    
    # Element PatientClass uses Python identifier PatientClass
    __PatientClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PatientClass'), 'PatientClass', '__httpwww_rixg_org_uk_LabOrder_PatientClass', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 137, 12), )

    
    PatientClass = property(__PatientClass.value, __PatientClass.set, None, 'In patient / out patient - equivalent to PV1:2 Patient Class')

    
    # Element EnteredOn uses Python identifier EnteredOn
    __EnteredOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredOn'), 'EnteredOn', '__httpwww_rixg_org_uk_LabOrder_EnteredOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 143, 12), )

    
    EnteredOn = property(__EnteredOn.value, __EnteredOn.set, None, 'Date Order entered')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_LabOrder_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 150, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, '')

    
    # Element EnteringOrganization uses Python identifier EnteringOrganization
    __EnteringOrganization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteringOrganization'), 'EnteringOrganization', '__httpwww_rixg_org_uk_LabOrder_EnteringOrganization', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 156, 12), )

    
    EnteringOrganization = property(__EnteringOrganization.value, __EnteringOrganization.set, None, '')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_LabOrder_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_LabOrder_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __ReceivingLocation.name() : __ReceivingLocation,
        __PlacerId.name() : __PlacerId,
        __FillerId.name() : __FillerId,
        __OrderedBy.name() : __OrderedBy,
        __OrderItem.name() : __OrderItem,
        __OrderCategory.name() : __OrderCategory,
        __SpecimenCollectedTime.name() : __SpecimenCollectedTime,
        __SpecimenReceivedTime.name() : __SpecimenReceivedTime,
        __Status.name() : __Status,
        __Priority.name() : __Priority,
        __SpecimenSource.name() : __SpecimenSource,
        __Duration.name() : __Duration,
        __ResultItems.name() : __ResultItems,
        __PatientClass.name() : __PatientClass,
        __EnteredOn.name() : __EnteredOn,
        __EnteredAt.name() : __EnteredAt,
        __EnteringOrganization.name() : __EnteringOrganization,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LabOrder = LabOrder
Namespace.addCategoryObject('typeBinding', 'LabOrder', LabOrder)


# Complex type {http://www.rixg.org.uk/}ResultItem with content type ELEMENT_ONLY
class ResultItem (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResultItem')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 166, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ResultType uses Python identifier ResultType
    __ResultType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResultType'), 'ResultType', '__httpwww_rixg_org_uk_ResultItem_ResultType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 174, 12), )

    
    ResultType = property(__ResultType.value, __ResultType.set, None, 'AT')

    
    # Element EnteredOn uses Python identifier EnteredOn
    __EnteredOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredOn'), 'EnteredOn', '__httpwww_rixg_org_uk_ResultItem_EnteredOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 185, 12), )

    
    EnteredOn = property(__EnteredOn.value, __EnteredOn.set, None, '')

    
    # Element PrePost uses Python identifier PrePost
    __PrePost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PrePost'), 'PrePost', '__httpwww_rixg_org_uk_ResultItem_PrePost', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 191, 12), )

    
    PrePost = property(__PrePost.value, __PrePost.set, None, 'Was the sample taken PRE or POST dialysis')

    
    # Element ServiceId uses Python identifier ServiceId
    __ServiceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ServiceId'), 'ServiceId', '__httpwww_rixg_org_uk_ResultItem_ServiceId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 224, 12), )

    
    ServiceId = property(__ServiceId.value, __ServiceId.set, None, 'Test Code (OBX:3)')

    
    # Element SubId uses Python identifier SubId
    __SubId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SubId'), 'SubId', '__httpwww_rixg_org_uk_ResultItem_SubId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 232, 12), )

    
    SubId = property(__SubId.value, __SubId.set, None, 'Sub-Test Id (OBX:4)')

    
    # Element ResultValue uses Python identifier ResultValue
    __ResultValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResultValue'), 'ResultValue', '__httpwww_rixg_org_uk_ResultItem_ResultValue', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 243, 12), )

    
    ResultValue = property(__ResultValue.value, __ResultValue.set, None, 'OBX:5')

    
    # Element ResultValueUnits uses Python identifier ResultValueUnits
    __ResultValueUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResultValueUnits'), 'ResultValueUnits', '__httpwww_rixg_org_uk_ResultItem_ResultValueUnits', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 257, 12), )

    
    ResultValueUnits = property(__ResultValueUnits.value, __ResultValueUnits.set, None, 'OBX:6')

    
    # Element ReferenceRange uses Python identifier ReferenceRange
    __ReferenceRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceRange'), 'ReferenceRange', '__httpwww_rixg_org_uk_ResultItem_ReferenceRange', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 271, 12), )

    
    ReferenceRange = property(__ReferenceRange.value, __ReferenceRange.set, None, 'OBX:7')

    
    # Element InterpretationCodes uses Python identifier InterpretationCodes
    __InterpretationCodes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InterpretationCodes'), 'InterpretationCodes', '__httpwww_rixg_org_uk_ResultItem_InterpretationCodes', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 284, 12), )

    
    InterpretationCodes = property(__InterpretationCodes.value, __InterpretationCodes.set, None, 'Interpretation Codes (OBX:8)')

    
    # Element Status uses Python identifier Status
    __Status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Status'), 'Status', '__httpwww_rixg_org_uk_ResultItem_Status', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 312, 12), )

    
    Status = property(__Status.value, __Status.set, None, 'OBX:11')

    
    # Element ObservationTime uses Python identifier ObservationTime
    __ObservationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ObservationTime'), 'ObservationTime', '__httpwww_rixg_org_uk_ResultItem_ObservationTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 337, 12), )

    
    ObservationTime = property(__ObservationTime.value, __ObservationTime.set, None, 'OBX:14')

    
    # Element Comments uses Python identifier Comments
    __Comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Comments'), 'Comments', '__httpwww_rixg_org_uk_ResultItem_Comments', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 343, 12), )

    
    Comments = property(__Comments.value, __Comments.set, None, 'From NTE:3')

    
    # Element ReferenceComment uses Python identifier ReferenceComment
    __ReferenceComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceComment'), 'ReferenceComment', '__httpwww_rixg_org_uk_ResultItem_ReferenceComment', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 354, 12), )

    
    ReferenceComment = property(__ReferenceComment.value, __ReferenceComment.set, None, '')

    _ElementMap.update({
        __ResultType.name() : __ResultType,
        __EnteredOn.name() : __EnteredOn,
        __PrePost.name() : __PrePost,
        __ServiceId.name() : __ServiceId,
        __SubId.name() : __SubId,
        __ResultValue.name() : __ResultValue,
        __ResultValueUnits.name() : __ResultValueUnits,
        __ReferenceRange.name() : __ReferenceRange,
        __InterpretationCodes.name() : __InterpretationCodes,
        __Status.name() : __Status,
        __ObservationTime.name() : __ObservationTime,
        __Comments.name() : __Comments,
        __ReferenceComment.name() : __ReferenceComment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ResultItem = ResultItem
Namespace.addCategoryObject('typeBinding', 'ResultItem', ResultItem)


# Complex type {http://www.rixg.org.uk/}Medication with content type ELEMENT_ONLY
class Medication (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Medication')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 9, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PrescriptionNumber uses Python identifier PrescriptionNumber
    __PrescriptionNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PrescriptionNumber'), 'PrescriptionNumber', '__httpwww_rixg_org_uk_Medication_PrescriptionNumber', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 15, 12), )

    
    PrescriptionNumber = property(__PrescriptionNumber.value, __PrescriptionNumber.set, None, 'Prescription ID')

    
    # Element FromTime uses Python identifier FromTime
    __FromTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FromTime'), 'FromTime', '__httpwww_rixg_org_uk_Medication_FromTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 27, 12), )

    
    FromTime = property(__FromTime.value, __FromTime.set, None, 'Start Time of the prescription')

    
    # Element ToTime uses Python identifier ToTime
    __ToTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ToTime'), 'ToTime', '__httpwww_rixg_org_uk_Medication_ToTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 34, 12), )

    
    ToTime = property(__ToTime.value, __ToTime.set, None, 'End Time of the prescription')

    
    # Element EnteringOrganization uses Python identifier EnteringOrganization
    __EnteringOrganization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteringOrganization'), 'EnteringOrganization', '__httpwww_rixg_org_uk_Medication_EnteringOrganization', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 41, 12), )

    
    EnteringOrganization = property(__EnteringOrganization.value, __EnteringOrganization.set, None, 'Where the Medicine was Prescribed')

    
    # Element Route uses Python identifier Route
    __Route = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Route'), 'Route', '__httpwww_rixg_org_uk_Medication_Route', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 47, 12), )

    
    Route = property(__Route.value, __Route.set, None, 'Medication Route')

    
    # Element DrugProduct uses Python identifier DrugProduct
    __DrugProduct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrugProduct'), 'DrugProduct', '__httpwww_rixg_org_uk_Medication_DrugProduct', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 79, 12), )

    
    DrugProduct = property(__DrugProduct.value, __DrugProduct.set, None, None)

    
    # Element Frequency uses Python identifier Frequency
    __Frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Frequency'), 'Frequency', '__httpwww_rixg_org_uk_Medication_Frequency', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 80, 12), )

    
    Frequency = property(__Frequency.value, __Frequency.set, None, 'Frequency')

    
    # Element Comments uses Python identifier Comments
    __Comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Comments'), 'Comments', '__httpwww_rixg_org_uk_Medication_Comments', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 92, 12), )

    
    Comments = property(__Comments.value, __Comments.set, None, 'Other instructions')

    
    # Element DoseQuantity uses Python identifier DoseQuantity
    __DoseQuantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DoseQuantity'), 'DoseQuantity', '__httpwww_rixg_org_uk_Medication_DoseQuantity', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 104, 12), )

    
    DoseQuantity = property(__DoseQuantity.value, __DoseQuantity.set, None, 'Dose')

    
    # Element DoseUoM uses Python identifier DoseUoM
    __DoseUoM = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DoseUoM'), 'DoseUoM', '__httpwww_rixg_org_uk_Medication_DoseUoM', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 111, 12), )

    
    DoseUoM = property(__DoseUoM.value, __DoseUoM.set, None, None)

    
    # Element Indication uses Python identifier Indication
    __Indication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Indication'), 'Indication', '__httpwww_rixg_org_uk_Medication_Indication', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 112, 12), )

    
    Indication = property(__Indication.value, __Indication.set, None, 'The condition or problem for which the drug is being prescribed')

    
    # Element EncounterNumber uses Python identifier EncounterNumber
    __EncounterNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EncounterNumber'), 'EncounterNumber', '__httpwww_rixg_org_uk_Medication_EncounterNumber', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 124, 12), )

    
    EncounterNumber = property(__EncounterNumber.value, __EncounterNumber.set, None, 'This is used to associate the prescribing of a Medication with the activity in a particular Encounter record. This element should not be submitted without prior discussion with the UKRR.\n                    ')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_Medication_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_Medication_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __PrescriptionNumber.name() : __PrescriptionNumber,
        __FromTime.name() : __FromTime,
        __ToTime.name() : __ToTime,
        __EnteringOrganization.name() : __EnteringOrganization,
        __Route.name() : __Route,
        __DrugProduct.name() : __DrugProduct,
        __Frequency.name() : __Frequency,
        __Comments.name() : __Comments,
        __DoseQuantity.name() : __DoseQuantity,
        __DoseUoM.name() : __DoseUoM,
        __Indication.name() : __Indication,
        __EncounterNumber.name() : __EncounterNumber,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Medication = Medication
Namespace.addCategoryObject('typeBinding', 'Medication', Medication)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Medication Route"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 52, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CTD_ANON_18_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 54, 24), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CTD_ANON_18_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 62, 24), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CTD_ANON_18_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 69, 24), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_18 = CTD_ANON_18


# Complex type {http://www.rixg.org.uk/}Observations with content type ELEMENT_ONLY
class Observations (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}Observations with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Observations')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Observation uses Python identifier Observation
    __Observation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Observation'), 'Observation', '__httpwww_rixg_org_uk_Observations_Observation', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 8, 12), )

    
    Observation = property(__Observation.value, __Observation.set, None, None)

    
    # Attribute start uses Python identifier start
    __start = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'start'), 'start', '__httpwww_rixg_org_uk_Observations_start', pyxb.binding.datatypes.date)
    __start._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 10, 8)
    __start._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 10, 8)
    
    start = property(__start.value, __start.set, None, None)

    
    # Attribute stop uses Python identifier stop
    __stop = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'stop'), 'stop', '__httpwww_rixg_org_uk_Observations_stop', pyxb.binding.datatypes.date)
    __stop._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 11, 8)
    __stop._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 11, 8)
    
    stop = property(__stop.value, __stop.set, None, None)

    _ElementMap.update({
        __Observation.name() : __Observation
    })
    _AttributeMap.update({
        __start.name() : __start,
        __stop.name() : __stop
    })
_module_typeBindings.Observations = Observations
Namespace.addCategoryObject('typeBinding', 'Observations', Observations)


# Complex type {http://www.rixg.org.uk/}Observation with content type ELEMENT_ONLY
class Observation (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Observation')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 14, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ObservationTime uses Python identifier ObservationTime
    __ObservationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ObservationTime'), 'ObservationTime', '__httpwww_rixg_org_uk_Observation_ObservationTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 20, 12), )

    
    ObservationTime = property(__ObservationTime.value, __ObservationTime.set, None, 'When the Observation was made')

    
    # Element ObservationCode uses Python identifier ObservationCode
    __ObservationCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ObservationCode'), 'ObservationCode', '__httpwww_rixg_org_uk_Observation_ObservationCode', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 27, 12), )

    
    ObservationCode = property(__ObservationCode.value, __ObservationCode.set, None, 'Code for the Observation - UKRR, PV or SNOMED Coding Standards.')

    
    # Element ObservationValue uses Python identifier ObservationValue
    __ObservationValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ObservationValue'), 'ObservationValue', '__httpwww_rixg_org_uk_Observation_ObservationValue', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 72, 12), )

    
    ObservationValue = property(__ObservationValue.value, __ObservationValue.set, None, '')

    
    # Element ObservationUnits uses Python identifier ObservationUnits
    __ObservationUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ObservationUnits'), 'ObservationUnits', '__httpwww_rixg_org_uk_Observation_ObservationUnits', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 84, 12), )

    
    ObservationUnits = property(__ObservationUnits.value, __ObservationUnits.set, None, '')

    
    # Element PrePost uses Python identifier PrePost
    __PrePost = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PrePost'), 'PrePost', '__httpwww_rixg_org_uk_Observation_PrePost', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 96, 12), )

    
    PrePost = property(__PrePost.value, __PrePost.set, None, 'Was the Observation made PRE or POST dialysis')

    
    # Element Comments uses Python identifier Comments
    __Comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Comments'), 'Comments', '__httpwww_rixg_org_uk_Observation_Comments', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 127, 12), )

    
    Comments = property(__Comments.value, __Comments.set, None, '')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_Observation_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 139, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, '')

    
    # Element EnteringOrganization uses Python identifier EnteringOrganization
    __EnteringOrganization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteringOrganization'), 'EnteringOrganization', '__httpwww_rixg_org_uk_Observation_EnteringOrganization', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 144, 12), )

    
    EnteringOrganization = property(__EnteringOrganization.value, __EnteringOrganization.set, None, '')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_Observation_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_Observation_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __ObservationTime.name() : __ObservationTime,
        __ObservationCode.name() : __ObservationCode,
        __ObservationValue.name() : __ObservationValue,
        __ObservationUnits.name() : __ObservationUnits,
        __PrePost.name() : __PrePost,
        __Comments.name() : __Comments,
        __EnteredAt.name() : __EnteredAt,
        __EnteringOrganization.name() : __EnteringOrganization,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Observation = Observation
Namespace.addCategoryObject('typeBinding', 'Observation', Observation)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Code for the Observation - UKRR, PV or SNOMED Coding Standards."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 31, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CTD_ANON_19_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 33, 24), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, '')

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CTD_ANON_19_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 45, 24), )

    
    Code = property(__Code.value, __Code.set, None, '')

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CTD_ANON_19_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 57, 24), )

    
    Description = property(__Description.value, __Description.set, None, '')

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_19 = CTD_ANON_19


# Complex type {http://www.rixg.org.uk/}OptOut with content type ELEMENT_ONLY
class OptOut (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OptOut')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EnteredBy uses Python identifier EnteredBy
    __EnteredBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredBy'), 'EnteredBy', '__httpwww_rixg_org_uk_OptOut_EnteredBy', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 11, 12), )

    
    EnteredBy = property(__EnteredBy.value, __EnteredBy.set, None, 'Person entering the consent as a National Clinicial code where possible or other local code if not.')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_OptOut_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 17, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, 'National code for the trust recording the opt-out - e.g. RXF01')

    
    # Element ProgramName uses Python identifier ProgramName
    __ProgramName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProgramName'), 'ProgramName', '__httpwww_rixg_org_uk_OptOut_ProgramName', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 23, 12), )

    
    ProgramName = property(__ProgramName.value, __ProgramName.set, None, 'Name of RDG or study')

    
    # Element ProgramDescription uses Python identifier ProgramDescription
    __ProgramDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProgramDescription'), 'ProgramDescription', '__httpwww_rixg_org_uk_OptOut_ProgramDescription', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 29, 12), )

    
    ProgramDescription = property(__ProgramDescription.value, __ProgramDescription.set, None, 'Free text')

    
    # Element FromTime uses Python identifier FromTime
    __FromTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FromTime'), 'FromTime', '__httpwww_rixg_org_uk_OptOut_FromTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 40, 12), )

    
    FromTime = property(__FromTime.value, __FromTime.set, None, 'Date of Withdrawal')

    
    # Element ToTime uses Python identifier ToTime
    __ToTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ToTime'), 'ToTime', '__httpwww_rixg_org_uk_OptOut_ToTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 46, 12), )

    
    ToTime = property(__ToTime.value, __ToTime.set, None, 'Date Withdrawal Ended')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_OptOut_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_OptOut_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __EnteredBy.name() : __EnteredBy,
        __EnteredAt.name() : __EnteredAt,
        __ProgramName.name() : __ProgramName,
        __ProgramDescription.name() : __ProgramDescription,
        __FromTime.name() : __FromTime,
        __ToTime.name() : __ToTime,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.OptOut = OptOut
Namespace.addCategoryObject('typeBinding', 'OptOut', OptOut)


# Complex type {http://www.rixg.org.uk/}Patient with content type ELEMENT_ONLY
class Patient (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}Patient with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Patient')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 16, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PatientNumbers uses Python identifier PatientNumbers
    __PatientNumbers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PatientNumbers'), 'PatientNumbers', '__httpwww_rixg_org_uk_Patient_PatientNumbers', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 18, 12), )

    
    PatientNumbers = property(__PatientNumbers.value, __PatientNumbers.set, None, 'Patient Numbers')

    
    # Element Names uses Python identifier Names
    __Names = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Names'), 'Names', '__httpwww_rixg_org_uk_Patient_Names', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 26, 12), )

    
    Names = property(__Names.value, __Names.set, None, 'Names')

    
    # Element BirthTime uses Python identifier BirthTime
    __BirthTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BirthTime'), 'BirthTime', '__httpwww_rixg_org_uk_Patient_BirthTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 36, 12), )

    
    BirthTime = property(__BirthTime.value, __BirthTime.set, None, None)

    
    # Element DeathTime uses Python identifier DeathTime
    __DeathTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DeathTime'), 'DeathTime', '__httpwww_rixg_org_uk_Patient_DeathTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 37, 12), )

    
    DeathTime = property(__DeathTime.value, __DeathTime.set, None, None)

    
    # Element Gender uses Python identifier Gender
    __Gender = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Gender'), 'Gender', '__httpwww_rixg_org_uk_Patient_Gender', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 38, 12), )

    
    Gender = property(__Gender.value, __Gender.set, None, None)

    
    # Element Addresses uses Python identifier Addresses
    __Addresses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Addresses'), 'Addresses', '__httpwww_rixg_org_uk_Patient_Addresses', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 39, 12), )

    
    Addresses = property(__Addresses.value, __Addresses.set, None, 'Addresses')

    
    # Element ContactDetails uses Python identifier ContactDetails
    __ContactDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContactDetails'), 'ContactDetails', '__httpwww_rixg_org_uk_Patient_ContactDetails', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 49, 12), )

    
    ContactDetails = property(__ContactDetails.value, __ContactDetails.set, None, None)

    
    # Element CountryOfBirth uses Python identifier CountryOfBirth
    __CountryOfBirth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CountryOfBirth'), 'CountryOfBirth', '__httpwww_rixg_org_uk_Patient_CountryOfBirth', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 60, 12), )

    
    CountryOfBirth = property(__CountryOfBirth.value, __CountryOfBirth.set, None, 'From NHS Data Dictionary ISO 3166-1 Use the 3-char alphabetic code.')

    
    # Element FamilyDoctor uses Python identifier FamilyDoctor
    __FamilyDoctor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FamilyDoctor'), 'FamilyDoctor', '__httpwww_rixg_org_uk_Patient_FamilyDoctor', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 65, 12), )

    
    FamilyDoctor = property(__FamilyDoctor.value, __FamilyDoctor.set, None, 'Current GP / GP Practice')

    
    # Element PersonToContact uses Python identifier PersonToContact
    __PersonToContact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PersonToContact'), 'PersonToContact', '__httpwww_rixg_org_uk_Patient_PersonToContact', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 70, 12), )

    
    PersonToContact = property(__PersonToContact.value, __PersonToContact.set, None, "Person to Contact about the Patient's Care. This element should not be submitted without prior discussion with the UKRR.")

    
    # Element EthnicGroup uses Python identifier EthnicGroup
    __EthnicGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EthnicGroup'), 'EthnicGroup', '__httpwww_rixg_org_uk_Patient_EthnicGroup', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 75, 12), )

    
    EthnicGroup = property(__EthnicGroup.value, __EthnicGroup.set, None, 'Ethnic Group')

    
    # Element Occupation uses Python identifier Occupation
    __Occupation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Occupation'), 'Occupation', '__httpwww_rixg_org_uk_Patient_Occupation', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 80, 12), )

    
    Occupation = property(__Occupation.value, __Occupation.set, None, 'Occuptation')

    
    # Element PrimaryLanguage uses Python identifier PrimaryLanguage
    __PrimaryLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PrimaryLanguage'), 'PrimaryLanguage', '__httpwww_rixg_org_uk_Patient_PrimaryLanguage', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 85, 12), )

    
    PrimaryLanguage = property(__PrimaryLanguage.value, __PrimaryLanguage.set, None, 'Primary Language')

    
    # Element BloodGroup uses Python identifier BloodGroup
    __BloodGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BloodGroup'), 'BloodGroup', '__httpwww_rixg_org_uk_Patient_BloodGroup', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 90, 12), )

    
    BloodGroup = property(__BloodGroup.value, __BloodGroup.set, None, 'Blood Type (Current)')

    
    # Element BloodRhesus uses Python identifier BloodRhesus
    __BloodRhesus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BloodRhesus'), 'BloodRhesus', '__httpwww_rixg_org_uk_Patient_BloodRhesus', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 95, 12), )

    
    BloodRhesus = property(__BloodRhesus.value, __BloodRhesus.set, None, 'Blood Rhesus (Current)')

    
    # Element Death uses Python identifier Death
    __Death = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Death'), 'Death', '__httpwww_rixg_org_uk_Patient_Death', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 100, 12), )

    
    Death = property(__Death.value, __Death.set, None, None)

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_Patient_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_Patient_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __PatientNumbers.name() : __PatientNumbers,
        __Names.name() : __Names,
        __BirthTime.name() : __BirthTime,
        __DeathTime.name() : __DeathTime,
        __Gender.name() : __Gender,
        __Addresses.name() : __Addresses,
        __ContactDetails.name() : __ContactDetails,
        __CountryOfBirth.name() : __CountryOfBirth,
        __FamilyDoctor.name() : __FamilyDoctor,
        __PersonToContact.name() : __PersonToContact,
        __EthnicGroup.name() : __EthnicGroup,
        __Occupation.name() : __Occupation,
        __PrimaryLanguage.name() : __PrimaryLanguage,
        __BloodGroup.name() : __BloodGroup,
        __BloodRhesus.name() : __BloodRhesus,
        __Death.name() : __Death,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Patient = Patient
Namespace.addCategoryObject('typeBinding', 'Patient', Patient)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Names"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 30, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Name'), 'Name', '__httpwww_rixg_org_uk_CTD_ANON_20_Name', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 32, 24), )

    
    Name = property(__Name.value, __Name.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_20 = CTD_ANON_20


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Addresses"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 43, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Address uses Python identifier Address
    __Address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Address'), 'Address', '__httpwww_rixg_org_uk_CTD_ANON_21_Address', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 45, 24), )

    
    Address = property(__Address.value, __Address.set, None, None)

    _ElementMap.update({
        __Address.name() : __Address
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_21 = CTD_ANON_21


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 50, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ContactDetail uses Python identifier ContactDetail
    __ContactDetail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContactDetail'), 'ContactDetail', '__httpwww_rixg_org_uk_CTD_ANON_22_ContactDetail', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 52, 24), )

    
    ContactDetail = property(__ContactDetail.value, __ContactDetail.set, None, "Only 1 of each type should be sent. This must only be used for the Patient's own Contact Details and not those of third parties. This should not be submitted for patients who are only being sent as part of the UKRR data collection.")

    _ElementMap.update({
        __ContactDetail.name() : __ContactDetail
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_22 = CTD_ANON_22


# Complex type {http://www.rixg.org.uk/}Procedure with content type ELEMENT_ONLY
class Procedure (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Procedure')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ProcedureType uses Python identifier ProcedureType
    __ProcedureType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProcedureType'), 'ProcedureType', '__httpwww_rixg_org_uk_Procedure_ProcedureType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 12, 12), )

    
    ProcedureType = property(__ProcedureType.value, __ProcedureType.set, None, 'At least code must be entered')

    
    # Element ProcedureTime uses Python identifier ProcedureTime
    __ProcedureTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProcedureTime'), 'ProcedureTime', '__httpwww_rixg_org_uk_Procedure_ProcedureTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 18, 12), )

    
    ProcedureTime = property(__ProcedureTime.value, __ProcedureTime.set, None, 'The time the Procedure started.')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_Procedure_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 24, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, 'Location the procedure was performed at. Use National coding e.g. RXF01')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_Procedure_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_Procedure_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __ProcedureType.name() : __ProcedureType,
        __ProcedureTime.name() : __ProcedureTime,
        __EnteredAt.name() : __EnteredAt,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Procedure = Procedure
Namespace.addCategoryObject('typeBinding', 'Procedure', Procedure)


# Complex type {http://www.rixg.org.uk/}ProgramMembership with content type ELEMENT_ONLY
class ProgramMembership (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProgramMembership')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 5, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EnteredBy uses Python identifier EnteredBy
    __EnteredBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredBy'), 'EnteredBy', '__httpwww_rixg_org_uk_ProgramMembership_EnteredBy', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 11, 12), )

    
    EnteredBy = property(__EnteredBy.value, __EnteredBy.set, None, 'Person entering the consent as a National Clinicial code where possible or other local code if not.')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_ProgramMembership_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 17, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, 'National code for the trust recording the consent - e.g. RXF01')

    
    # Element ProgramName uses Python identifier ProgramName
    __ProgramName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProgramName'), 'ProgramName', '__httpwww_rixg_org_uk_ProgramMembership_ProgramName', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 23, 12), )

    
    ProgramName = property(__ProgramName.value, __ProgramName.set, None, 'Name of RDG or study')

    
    # Element ProgramDescription uses Python identifier ProgramDescription
    __ProgramDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProgramDescription'), 'ProgramDescription', '__httpwww_rixg_org_uk_ProgramMembership_ProgramDescription', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 34, 12), )

    
    ProgramDescription = property(__ProgramDescription.value, __ProgramDescription.set, None, 'Free text')

    
    # Element FromTime uses Python identifier FromTime
    __FromTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FromTime'), 'FromTime', '__httpwww_rixg_org_uk_ProgramMembership_FromTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 45, 12), )

    
    FromTime = property(__FromTime.value, __FromTime.set, None, 'Date Consent Given')

    
    # Element ToTime uses Python identifier ToTime
    __ToTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ToTime'), 'ToTime', '__httpwww_rixg_org_uk_ProgramMembership_ToTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 51, 12), )

    
    ToTime = property(__ToTime.value, __ToTime.set, None, 'Date Consent Withdrawn')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_ProgramMembership_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_ProgramMembership_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __EnteredBy.name() : __EnteredBy,
        __EnteredAt.name() : __EnteredAt,
        __ProgramName.name() : __ProgramName,
        __ProgramDescription.name() : __ProgramDescription,
        __FromTime.name() : __FromTime,
        __ToTime.name() : __ToTime,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProgramMembership = ProgramMembership
Namespace.addCategoryObject('typeBinding', 'ProgramMembership', ProgramMembership)


# Complex type {http://www.rixg.org.uk/}SocialHistory with content type ELEMENT_ONLY
class SocialHistory (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SocialHistory')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/SocialHistories/SocialHistory.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SocialHabit uses Python identifier SocialHabit
    __SocialHabit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SocialHabit'), 'SocialHabit', '__httpwww_rixg_org_uk_SocialHistory_SocialHabit', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/SocialHistories/SocialHistory.xsd', 10, 12), )

    
    SocialHabit = property(__SocialHabit.value, __SocialHabit.set, None, 'Social Habits')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_SocialHistory_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_SocialHistory_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __SocialHabit.name() : __SocialHabit,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SocialHistory = SocialHistory
Namespace.addCategoryObject('typeBinding', 'SocialHistory', SocialHistory)


# Complex type {http://www.rixg.org.uk/}Question with content type ELEMENT_ONLY
class Question (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Question')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 6, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element QuestionType uses Python identifier QuestionType
    __QuestionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'QuestionType'), 'QuestionType', '__httpwww_rixg_org_uk_Question_QuestionType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 12, 12), )

    
    QuestionType = property(__QuestionType.value, __QuestionType.set, None, 'Question Type')

    
    # Element Response uses Python identifier Response
    __Response = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Response'), 'Response', '__httpwww_rixg_org_uk_Question_Response', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 17, 12), )

    
    Response = property(__Response.value, __Response.set, None, None)

    
    # Element QuestionText uses Python identifier QuestionText
    __QuestionText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'QuestionText'), 'QuestionText', '__httpwww_rixg_org_uk_Question_QuestionText', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 18, 12), )

    
    QuestionText = property(__QuestionText.value, __QuestionText.set, None, None)

    _ElementMap.update({
        __QuestionType.name() : __QuestionType,
        __Response.name() : __Response,
        __QuestionText.name() : __QuestionText
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Question = Question
Namespace.addCategoryObject('typeBinding', 'Question', Question)


# Complex type {http://www.rixg.org.uk/}Score with content type ELEMENT_ONLY
class Score (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Score')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 22, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ScoreType uses Python identifier ScoreType
    __ScoreType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ScoreType'), 'ScoreType', '__httpwww_rixg_org_uk_Score_ScoreType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 28, 12), )

    
    ScoreType = property(__ScoreType.value, __ScoreType.set, None, 'Score Type')

    
    # Element Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Value'), 'Value', '__httpwww_rixg_org_uk_Score_Value', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 33, 12), )

    
    Value = property(__Value.value, __Value.set, None, None)

    _ElementMap.update({
        __ScoreType.name() : __ScoreType,
        __Value.name() : __Value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Score = Score
Namespace.addCategoryObject('typeBinding', 'Score', Score)


# Complex type {http://www.rixg.org.uk/}Level with content type ELEMENT_ONLY
class Level (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Level')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 37, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LevelType uses Python identifier LevelType
    __LevelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LevelType'), 'LevelType', '__httpwww_rixg_org_uk_Level_LevelType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 43, 12), )

    
    LevelType = property(__LevelType.value, __LevelType.set, None, 'Score Type')

    
    # Element Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Value'), 'Value', '__httpwww_rixg_org_uk_Level_Value', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 48, 12), )

    
    Value = property(__Value.value, __Value.set, None, None)

    _ElementMap.update({
        __LevelType.name() : __LevelType,
        __Value.name() : __Value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Level = Level
Namespace.addCategoryObject('typeBinding', 'Level', Level)


# Complex type {http://www.rixg.org.uk/}Survey with content type ELEMENT_ONLY
class Survey (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Survey')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 52, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SurveyTime uses Python identifier SurveyTime
    __SurveyTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SurveyTime'), 'SurveyTime', '__httpwww_rixg_org_uk_Survey_SurveyTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 58, 12), )

    
    SurveyTime = property(__SurveyTime.value, __SurveyTime.set, None, 'When the survey was completed.')

    
    # Element SurveyType uses Python identifier SurveyType
    __SurveyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SurveyType'), 'SurveyType', '__httpwww_rixg_org_uk_Survey_SurveyType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 63, 12), )

    
    SurveyType = property(__SurveyType.value, __SurveyType.set, None, 'Survey Type')

    
    # Element Questions uses Python identifier Questions
    __Questions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Questions'), 'Questions', '__httpwww_rixg_org_uk_Survey_Questions', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 68, 12), )

    
    Questions = property(__Questions.value, __Questions.set, None, None)

    
    # Element Scores uses Python identifier Scores
    __Scores = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Scores'), 'Scores', '__httpwww_rixg_org_uk_Survey_Scores', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 75, 12), )

    
    Scores = property(__Scores.value, __Scores.set, None, None)

    
    # Element Levels uses Python identifier Levels
    __Levels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Levels'), 'Levels', '__httpwww_rixg_org_uk_Survey_Levels', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 82, 12), )

    
    Levels = property(__Levels.value, __Levels.set, None, None)

    
    # Element EnteredBy uses Python identifier EnteredBy
    __EnteredBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredBy'), 'EnteredBy', '__httpwww_rixg_org_uk_Survey_EnteredBy', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 89, 12), )

    
    EnteredBy = property(__EnteredBy.value, __EnteredBy.set, None, 'Who completed the survey')

    
    # Element EnteredAt uses Python identifier EnteredAt
    __EnteredAt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EnteredAt'), 'EnteredAt', '__httpwww_rixg_org_uk_Survey_EnteredAt', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 94, 12), )

    
    EnteredAt = property(__EnteredAt.value, __EnteredAt.set, None, 'Where the Survey was completed')

    
    # Element TypeOfTreatment uses Python identifier TypeOfTreatment
    __TypeOfTreatment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TypeOfTreatment'), 'TypeOfTreatment', '__httpwww_rixg_org_uk_Survey_TypeOfTreatment', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 100, 12), )

    
    TypeOfTreatment = property(__TypeOfTreatment.value, __TypeOfTreatment.set, None, 'Current Modality')

    
    # Element HDLocation uses Python identifier HDLocation
    __HDLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HDLocation'), 'HDLocation', '__httpwww_rixg_org_uk_Survey_HDLocation', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 105, 12), )

    
    HDLocation = property(__HDLocation.value, __HDLocation.set, None, 'If Current Modality = HD, where is it performed?')

    
    # Element Template uses Python identifier Template
    __Template = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Template'), 'Template', '__httpwww_rixg_org_uk_Survey_Template', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 110, 12), )

    
    Template = property(__Template.value, __Template.set, None, 'This is currently only used to flag surveys which were submitted via the SharedHD project. Another field may be more appropriate.')

    
    # Element UpdatedOn uses Python identifier UpdatedOn
    __UpdatedOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), 'UpdatedOn', '__httpwww_rixg_org_uk_Survey_UpdatedOn', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12), )

    
    UpdatedOn = property(__UpdatedOn.value, __UpdatedOn.set, None, 'Last Modified Date')

    
    # Element ExternalId uses Python identifier ExternalId
    __ExternalId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalId'), 'ExternalId', '__httpwww_rixg_org_uk_Survey_ExternalId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12), )

    
    ExternalId = property(__ExternalId.value, __ExternalId.set, None, 'Unique Identifier')

    _ElementMap.update({
        __SurveyTime.name() : __SurveyTime,
        __SurveyType.name() : __SurveyType,
        __Questions.name() : __Questions,
        __Scores.name() : __Scores,
        __Levels.name() : __Levels,
        __EnteredBy.name() : __EnteredBy,
        __EnteredAt.name() : __EnteredAt,
        __TypeOfTreatment.name() : __TypeOfTreatment,
        __HDLocation.name() : __HDLocation,
        __Template.name() : __Template,
        __UpdatedOn.name() : __UpdatedOn,
        __ExternalId.name() : __ExternalId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Survey = Survey
Namespace.addCategoryObject('typeBinding', 'Survey', Survey)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 69, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Question uses Python identifier Question
    __Question = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Question'), 'Question', '__httpwww_rixg_org_uk_CTD_ANON_23_Question', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 71, 24), )

    
    Question = property(__Question.value, __Question.set, None, None)

    _ElementMap.update({
        __Question.name() : __Question
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_23 = CTD_ANON_23


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 76, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Score uses Python identifier Score
    __Score = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Score'), 'Score', '__httpwww_rixg_org_uk_CTD_ANON_24_Score', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 78, 24), )

    
    Score = property(__Score.value, __Score.set, None, None)

    _ElementMap.update({
        __Score.name() : __Score
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_24 = CTD_ANON_24


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 83, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Level uses Python identifier Level
    __Level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Level'), 'Level', '__httpwww_rixg_org_uk_CTD_ANON_25_Level', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 85, 24), )

    
    Level = property(__Level.value, __Level.set, None, None)

    _ElementMap.update({
        __Level.name() : __Level
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_25 = CTD_ANON_25


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 39, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CTD_ANON_26_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 41, 24), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CTD_ANON_26_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 52, 24), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CTD_ANON_26_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 59, 24), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_26 = CTD_ANON_26


# Complex type {http://www.rixg.org.uk/}CF_DMD with content type ELEMENT_ONLY
class CF_DMD (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CF_DMD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CF_DMD')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 2, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CF_DMD_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 4, 3), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CF_DMD_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 11, 3), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CF_DMD_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 18, 3), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CF_DMD = CF_DMD
Namespace.addCategoryObject('typeBinding', 'CF_DMD', CF_DMD)


# Complex type {http://www.rixg.org.uk/}CF_EDTA_COD with content type ELEMENT_ONLY
class CF_EDTA_COD (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CF_EDTA_COD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CF_EDTA_COD')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CF_EDTA_COD_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 5, 12), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CF_EDTA_COD_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 12, 12), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CF_EDTA_COD_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 344, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CF_EDTA_COD = CF_EDTA_COD
Namespace.addCategoryObject('typeBinding', 'CF_EDTA_COD', CF_EDTA_COD)


# Complex type {http://www.rixg.org.uk/}CF_EDTA_PRD with content type ELEMENT_ONLY
class CF_EDTA_PRD (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CF_EDTA_PRD with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CF_EDTA_PRD')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CF_EDTA_PRD_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 5, 12), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CF_EDTA_PRD_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 14, 12), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CF_EDTA_PRD_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 2946, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CF_EDTA_PRD = CF_EDTA_PRD
Namespace.addCategoryObject('typeBinding', 'CF_EDTA_PRD', CF_EDTA_PRD)


# Complex type {http://www.rixg.org.uk/}CF_HL7_0004 with content type ELEMENT_ONLY
class CF_HL7_0004 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CF_HL7_0004 with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CF_HL7_0004')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 2, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CF_HL7_0004_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 4, 3), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CF_HL7_0004_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 11, 3), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CF_HL7_0004_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 67, 3), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CF_HL7_0004 = CF_HL7_0004
Namespace.addCategoryObject('typeBinding', 'CF_HL7_0004', CF_HL7_0004)


# Complex type {http://www.rixg.org.uk/}CF_HL7_00204 with content type ELEMENT_ONLY
class CF_HL7_00204 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CF_HL7_00204 with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CF_HL7_00204')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 2, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CF_HL7_00204_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 4, 3), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CF_HL7_00204_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 11, 3), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CF_HL7_00204_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 37, 3), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CF_HL7_00204 = CF_HL7_00204
Namespace.addCategoryObject('typeBinding', 'CF_HL7_00204', CF_HL7_00204)


# Complex type {http://www.rixg.org.uk/}CF_HL7_00206 with content type ELEMENT_ONLY
class CF_HL7_00206 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CF_HL7_00206 with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CF_HL7_00206')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 2, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CF_HL7_00206_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 4, 3), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CF_HL7_00206_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 11, 3), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CF_HL7_00206_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 32, 3), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CF_HL7_00206 = CF_HL7_00206
Namespace.addCategoryObject('typeBinding', 'CF_HL7_00206', CF_HL7_00206)


# Complex type {http://www.rixg.org.uk/}CF_RR23 with content type ELEMENT_ONLY
class CF_RR23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CF_RR23 with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CF_RR23')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CF_RR23_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 4, 12), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CF_RR23_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 11, 12), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CF_RR23_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 78, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CF_RR23 = CF_RR23
Namespace.addCategoryObject('typeBinding', 'CF_RR23', CF_RR23)


# Complex type {http://www.rixg.org.uk/}CF_RR7_DISCHARGE with content type ELEMENT_ONLY
class CF_RR7_DISCHARGE (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CF_RR7_DISCHARGE with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CF_RR7_DISCHARGE')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CF_RR7_DISCHARGE_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 4, 12), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CF_RR7_DISCHARGE_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 11, 12), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CF_RR7_DISCHARGE_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 63, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CF_RR7_DISCHARGE = CF_RR7_DISCHARGE
Namespace.addCategoryObject('typeBinding', 'CF_RR7_DISCHARGE', CF_RR7_DISCHARGE)


# Complex type {http://www.rixg.org.uk/}CF_RR7_TREATMENT with content type ELEMENT_ONLY
class CF_RR7_TREATMENT (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CF_RR7_TREATMENT with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CF_RR7_TREATMENT')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CF_RR7_TREATMENT_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 4, 12), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CF_RR7_TREATMENT_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 11, 12), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CF_RR7_TREATMENT_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 273, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CF_RR7_TREATMENT = CF_RR7_TREATMENT
Namespace.addCategoryObject('typeBinding', 'CF_RR7_TREATMENT', CF_RR7_TREATMENT)


# Complex type {http://www.rixg.org.uk/}CF_SNOMED with content type ELEMENT_ONLY
class CF_SNOMED (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CF_SNOMED with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CF_SNOMED')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 2, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CF_SNOMED_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 4, 3), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CF_SNOMED_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 11, 3), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CF_SNOMED_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 18, 3), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CF_SNOMED = CF_SNOMED
Namespace.addCategoryObject('typeBinding', 'CF_SNOMED', CF_SNOMED)


# Complex type {http://www.rixg.org.uk/}Clinician with content type ELEMENT_ONLY
class Clinician (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}Clinician with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Clinician')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_Clinician_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 4, 12), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_Clinician_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 13, 12), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_Clinician_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 20, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Clinician = Clinician
Namespace.addCategoryObject('typeBinding', 'Clinician', Clinician)


# Complex type {http://www.rixg.org.uk/}CodedField with content type ELEMENT_ONLY
class CodedField (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}CodedField with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CodedField')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 2, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_CodedField_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 4, 3), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_CodedField_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 11, 3), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_CodedField_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 18, 3), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CodedField = CodedField
Namespace.addCategoryObject('typeBinding', 'CodedField', CodedField)


# Complex type {http://www.rixg.org.uk/}DiagnosisCodeType with content type ELEMENT_ONLY
class DiagnosisCodeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}DiagnosisCodeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DiagnosisCodeType')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 2, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_DiagnosisCodeType_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 4, 3), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_DiagnosisCodeType_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 13, 3), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_DiagnosisCodeType_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 20, 3), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DiagnosisCodeType = DiagnosisCodeType
Namespace.addCategoryObject('typeBinding', 'DiagnosisCodeType', DiagnosisCodeType)


# Complex type {http://www.rixg.org.uk/}DrugProduct with content type ELEMENT_ONLY
class DrugProduct (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}DrugProduct with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrugProduct')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 7, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Id uses Python identifier Id
    __Id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Id'), 'Id', '__httpwww_rixg_org_uk_DrugProduct_Id', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 9, 3), )

    
    Id = property(__Id.value, __Id.set, None, 'DM+D code for the drug')

    
    # Element Generic uses Python identifier Generic
    __Generic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Generic'), 'Generic', '__httpwww_rixg_org_uk_DrugProduct_Generic', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 14, 3), )

    
    Generic = property(__Generic.value, __Generic.set, None, 'Generic name')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpwww_rixg_org_uk_DrugProduct_LabelName', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 25, 3), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'Brand Name')

    
    # Element Form uses Python identifier Form
    __Form = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Form'), 'Form', '__httpwww_rixg_org_uk_DrugProduct_Form', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 36, 3), )

    
    Form = property(__Form.value, __Form.set, None, 'SNOMED Code and description')

    
    # Element StrengthUnits uses Python identifier StrengthUnits
    __StrengthUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StrengthUnits'), 'StrengthUnits', '__httpwww_rixg_org_uk_DrugProduct_StrengthUnits', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 41, 3), )

    
    StrengthUnits = property(__StrengthUnits.value, __StrengthUnits.set, None, 'Units')

    _ElementMap.update({
        __Id.name() : __Id,
        __Generic.name() : __Generic,
        __LabelName.name() : __LabelName,
        __Form.name() : __Form,
        __StrengthUnits.name() : __StrengthUnits
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DrugProduct = DrugProduct
Namespace.addCategoryObject('typeBinding', 'DrugProduct', DrugProduct)


# Complex type {http://www.rixg.org.uk/}EthnicGroup with content type ELEMENT_ONLY
class EthnicGroup (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}EthnicGroup with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EthnicGroup')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_EthnicGroup_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 4, 12), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_EthnicGroup_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 16, 12), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_EthnicGroup_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 108, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EthnicGroup = EthnicGroup
Namespace.addCategoryObject('typeBinding', 'EthnicGroup', EthnicGroup)


# Complex type {http://www.rixg.org.uk/}FamilyDoctor with content type ELEMENT_ONLY
class FamilyDoctor (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}FamilyDoctor with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FamilyDoctor')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 4, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element GPName uses Python identifier GPName
    __GPName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GPName'), 'GPName', '__httpwww_rixg_org_uk_FamilyDoctor_GPName', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 6, 12), )

    
    GPName = property(__GPName.value, __GPName.set, None, None)

    
    # Element GPPracticeId uses Python identifier GPPracticeId
    __GPPracticeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GPPracticeId'), 'GPPracticeId', '__httpwww_rixg_org_uk_FamilyDoctor_GPPracticeId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 7, 12), )

    
    GPPracticeId = property(__GPPracticeId.value, __GPPracticeId.set, None, 'National GP Practice Code')

    
    # Element GPId uses Python identifier GPId
    __GPId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GPId'), 'GPId', '__httpwww_rixg_org_uk_FamilyDoctor_GPId', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 19, 12), )

    
    GPId = property(__GPId.value, __GPId.set, None, 'National GP Code')

    
    # Element Address uses Python identifier Address
    __Address = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Address'), 'Address', '__httpwww_rixg_org_uk_FamilyDoctor_Address', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 31, 12), )

    
    Address = property(__Address.value, __Address.set, None, 'Practice Address')

    
    # Element ContactDetail uses Python identifier ContactDetail
    __ContactDetail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContactDetail'), 'ContactDetail', '__httpwww_rixg_org_uk_FamilyDoctor_ContactDetail', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 36, 12), )

    
    ContactDetail = property(__ContactDetail.value, __ContactDetail.set, None, 'Practice Contact Information')

    
    # Element Email uses Python identifier Email
    __Email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Email'), 'Email', '__httpwww_rixg_org_uk_FamilyDoctor_Email', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 41, 12), )

    
    Email = property(__Email.value, __Email.set, None, 'GP E-mail Address')

    _ElementMap.update({
        __GPName.name() : __GPName,
        __GPPracticeId.name() : __GPPracticeId,
        __GPId.name() : __GPId,
        __Address.name() : __Address,
        __ContactDetail.name() : __ContactDetail,
        __Email.name() : __Email
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.FamilyDoctor = FamilyDoctor
Namespace.addCategoryObject('typeBinding', 'FamilyDoctor', FamilyDoctor)


# Complex type {http://www.rixg.org.uk/}Language with content type ELEMENT_ONLY
class Language (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}Language with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Language')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 2, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_Language_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 4, 3), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_Language_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 15, 3), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_Language_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 970, 3), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Language = Language
Namespace.addCategoryObject('typeBinding', 'Language', Language)


# Complex type {http://www.rixg.org.uk/}Location with content type ELEMENT_ONLY
class Location (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}Location with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Location')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_Location_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 4, 12), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_Location_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 14, 12), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_Location_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 21, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Location = Location
Namespace.addCategoryObject('typeBinding', 'Location', Location)


# Complex type {http://www.rixg.org.uk/}Occupation with content type ELEMENT_ONLY
class Occupation (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}Occupation with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Occupation')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_Occupation_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 4, 12), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_Occupation_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 15, 12), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_Occupation_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 66, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Occupation = Occupation
Namespace.addCategoryObject('typeBinding', 'Occupation', Occupation)


# Complex type {http://www.rixg.org.uk/}PVData with content type ELEMENT_ONLY
class PVData (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}PVData with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PVData')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 3, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element rrtstatus uses Python identifier rrtstatus
    __rrtstatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rrtstatus'), 'rrtstatus', '__httpwww_rixg_org_uk_PVData_rrtstatus', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 5, 12), )

    
    rrtstatus = property(__rrtstatus.value, __rrtstatus.set, None, '')

    
    # Element tpstatus uses Python identifier tpstatus
    __tpstatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'tpstatus'), 'tpstatus', '__httpwww_rixg_org_uk_PVData_tpstatus', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 16, 12), )

    
    tpstatus = property(__tpstatus.value, __tpstatus.set, None, '')

    
    # Element diagnosisdate uses Python identifier diagnosisdate
    __diagnosisdate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'diagnosisdate'), 'diagnosisdate', '__httpwww_rixg_org_uk_PVData_diagnosisdate', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 27, 12), )

    
    diagnosisdate = property(__diagnosisdate.value, __diagnosisdate.set, None, '')

    
    # Element bloodgroup uses Python identifier bloodgroup
    __bloodgroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'bloodgroup'), 'bloodgroup', '__httpwww_rixg_org_uk_PVData_bloodgroup', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 33, 12), )

    
    bloodgroup = property(__bloodgroup.value, __bloodgroup.set, None, '')

    _ElementMap.update({
        __rrtstatus.name() : __rrtstatus,
        __tpstatus.name() : __tpstatus,
        __diagnosisdate.name() : __diagnosisdate,
        __bloodgroup.name() : __bloodgroup
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PVData = PVData
Namespace.addCategoryObject('typeBinding', 'PVData', PVData)


# Complex type {http://www.rixg.org.uk/}PatientNumbers with content type ELEMENT_ONLY
class PatientNumbers (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}PatientNumbers with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PatientNumbers')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 3, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PatientNumber uses Python identifier PatientNumber
    __PatientNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PatientNumber'), 'PatientNumber', '__httpwww_rixg_org_uk_PatientNumbers_PatientNumber', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 5, 12), )

    
    PatientNumber = property(__PatientNumber.value, __PatientNumber.set, None, None)

    _ElementMap.update({
        __PatientNumber.name() : __PatientNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PatientNumbers = PatientNumbers
Namespace.addCategoryObject('typeBinding', 'PatientNumbers', PatientNumbers)


# Complex type {http://www.rixg.org.uk/}PatientNumber with content type ELEMENT_ONLY
class PatientNumber (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}PatientNumber with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PatientNumber')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 9, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Number uses Python identifier Number
    __Number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Number'), 'Number', '__httpwww_rixg_org_uk_PatientNumber_Number', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 11, 12), )

    
    Number = property(__Number.value, __Number.set, None, 'Patient Identification Number')

    
    # Element Organization uses Python identifier Organization
    __Organization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Organization'), 'Organization', '__httpwww_rixg_org_uk_PatientNumber_Organization', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 23, 12), )

    
    Organization = property(__Organization.value, __Organization.set, None, 'Organisation that issued the number')

    
    # Element NumberType uses Python identifier NumberType
    __NumberType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberType'), 'NumberType', '__httpwww_rixg_org_uk_PatientNumber_NumberType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 88, 12), )

    
    NumberType = property(__NumberType.value, __NumberType.set, None, None)

    _ElementMap.update({
        __Number.name() : __Number,
        __Organization.name() : __Organization,
        __NumberType.name() : __NumberType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PatientNumber = PatientNumber
Namespace.addCategoryObject('typeBinding', 'PatientNumber', PatientNumber)


# Complex type {http://www.rixg.org.uk/}PersonalContactType with content type ELEMENT_ONLY
class PersonalContactType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}PersonalContactType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PersonalContactType')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 3, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Name uses Python identifier Name
    __Name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Name'), 'Name', '__httpwww_rixg_org_uk_PersonalContactType_Name', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 5, 12), )

    
    Name = property(__Name.value, __Name.set, None, None)

    
    # Element ContactDetails uses Python identifier ContactDetails
    __ContactDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContactDetails'), 'ContactDetails', '__httpwww_rixg_org_uk_PersonalContactType_ContactDetails', True, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 6, 12), )

    
    ContactDetails = property(__ContactDetails.value, __ContactDetails.set, None, None)

    
    # Element Relationship uses Python identifier Relationship
    __Relationship = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Relationship'), 'Relationship', '__httpwww_rixg_org_uk_PersonalContactType_Relationship', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 7, 12), )

    
    Relationship = property(__Relationship.value, __Relationship.set, None, None)

    _ElementMap.update({
        __Name.name() : __Name,
        __ContactDetails.name() : __ContactDetails,
        __Relationship.name() : __Relationship
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PersonalContactType = PersonalContactType
Namespace.addCategoryObject('typeBinding', 'PersonalContactType', PersonalContactType)


# Complex type {http://www.rixg.org.uk/}ServiceId with content type ELEMENT_ONLY
class ServiceId (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}ServiceId with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ServiceId')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CodingStandard uses Python identifier CodingStandard
    __CodingStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingStandard'), 'CodingStandard', '__httpwww_rixg_org_uk_ServiceId_CodingStandard', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 4, 12), )

    
    CodingStandard = property(__CodingStandard.value, __CodingStandard.set, None, None)

    
    # Element Code uses Python identifier Code
    __Code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Code'), 'Code', '__httpwww_rixg_org_uk_ServiceId_Code', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 35, 12), )

    
    Code = property(__Code.value, __Code.set, None, None)

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpwww_rixg_org_uk_ServiceId_Description', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 42, 12), )

    
    Description = property(__Description.value, __Description.set, None, None)

    _ElementMap.update({
        __CodingStandard.name() : __CodingStandard,
        __Code.name() : __Code,
        __Description.name() : __Description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ServiceId = ServiceId
Namespace.addCategoryObject('typeBinding', 'ServiceId', ServiceId)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 12, 24)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ACC19 uses Python identifier ACC19
    __ACC19 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ACC19'), 'ACC19', '__httpwww_rixg_org_uk_CTD_ANON_27_ACC19', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 14, 32), )

    
    ACC19 = property(__ACC19.value, __ACC19.set, None, 'Date Access first used for Dialysis')

    
    # Element ACC20 uses Python identifier ACC20
    __ACC20 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ACC20'), 'ACC20', '__httpwww_rixg_org_uk_CTD_ANON_27_ACC20', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 20, 32), )

    
    ACC20 = property(__ACC20.value, __ACC20.set, None, 'Date of Access Failure')

    
    # Element ACC21 uses Python identifier ACC21
    __ACC21 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ACC21'), 'ACC21', '__httpwww_rixg_org_uk_CTD_ANON_27_ACC21', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 26, 32), )

    
    ACC21 = property(__ACC21.value, __ACC21.set, None, 'Date of Removal')

    
    # Element ACC22 uses Python identifier ACC22
    __ACC22 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ACC22'), 'ACC22', '__httpwww_rixg_org_uk_CTD_ANON_27_ACC22', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 32, 32), )

    
    ACC22 = property(__ACC22.value, __ACC22.set, None, 'Reason for Removal of Haemodialysis Access (HD Only) (RR49)')

    
    # Element ACC30 uses Python identifier ACC30
    __ACC30 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ACC30'), 'ACC30', '__httpwww_rixg_org_uk_CTD_ANON_27_ACC30', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 38, 32), )

    
    ACC30 = property(__ACC30.value, __ACC30.set, None, 'PD Catheter Insertion Technique (PD Only) (RR143)')

    
    # Element ACC40 uses Python identifier ACC40
    __ACC40 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ACC40'), 'ACC40', '__httpwww_rixg_org_uk_CTD_ANON_27_ACC40', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 68, 32), )

    
    ACC40 = property(__ACC40.value, __ACC40.set, None, 'Reason for Removal of PD Catheter (PD Only) (RR29)')

    _ElementMap.update({
        __ACC19.name() : __ACC19,
        __ACC20.name() : __ACC20,
        __ACC21.name() : __ACC21,
        __ACC22.name() : __ACC22,
        __ACC30.name() : __ACC30,
        __ACC40.name() : __ACC40
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_27 = CTD_ANON_27


# Complex type {http://www.rixg.org.uk/}DialysisSession with content type ELEMENT_ONLY
class DialysisSession (Procedure):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DialysisSession')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 13, 4)
    _ElementMap = Procedure._ElementMap.copy()
    _AttributeMap = Procedure._AttributeMap.copy()
    # Base type is Procedure
    
    # Element SymtomaticHypotension uses Python identifier SymtomaticHypotension
    __SymtomaticHypotension = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SymtomaticHypotension'), 'SymtomaticHypotension', '__httpwww_rixg_org_uk_DialysisSession_SymtomaticHypotension', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 21, 20), )

    
    SymtomaticHypotension = property(__SymtomaticHypotension.value, __SymtomaticHypotension.set, None, 'Symptomatic hypotension (QHD19)')

    
    # Element VascularAccess uses Python identifier VascularAccess
    __VascularAccess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VascularAccess'), 'VascularAccess', '__httpwww_rixg_org_uk_DialysisSession_VascularAccess', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 27, 20), )

    
    VascularAccess = property(__VascularAccess.value, __VascularAccess.set, None, 'Vascular Access Used (QHD20)')

    
    # Element VascularAccessSite uses Python identifier VascularAccessSite
    __VascularAccessSite = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VascularAccessSite'), 'VascularAccessSite', '__httpwww_rixg_org_uk_DialysisSession_VascularAccessSite', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 33, 20), )

    
    VascularAccessSite = property(__VascularAccessSite.value, __VascularAccessSite.set, None, 'Vascular Access Site (QHD21)')

    
    # Element TimeDialysed uses Python identifier TimeDialysed
    __TimeDialysed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TimeDialysed'), 'TimeDialysed', '__httpwww_rixg_org_uk_DialysisSession_TimeDialysed', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 39, 20), )

    
    TimeDialysed = property(__TimeDialysed.value, __TimeDialysed.set, None, 'Time Dialysed in Minutes (QHD31)')

    
    # Element ProcedureType (ProcedureType) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element ProcedureTime (ProcedureTime) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element EnteredAt (EnteredAt) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element UpdatedOn (UpdatedOn) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element ExternalId (ExternalId) inherited from {http://www.rixg.org.uk/}Procedure
    _ElementMap.update({
        __SymtomaticHypotension.name() : __SymtomaticHypotension,
        __VascularAccess.name() : __VascularAccess,
        __VascularAccessSite.name() : __VascularAccessSite,
        __TimeDialysed.name() : __TimeDialysed
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DialysisSession = DialysisSession
Namespace.addCategoryObject('typeBinding', 'DialysisSession', DialysisSession)


# Complex type {http://www.rixg.org.uk/}TransplantProcedure with content type ELEMENT_ONLY
class TransplantProcedure (Procedure):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TransplantProcedure')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 6, 4)
    _ElementMap = Procedure._ElementMap.copy()
    _AttributeMap = Procedure._AttributeMap.copy()
    # Base type is Procedure
    
    # Element ProcedureType (ProcedureType) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element ProcedureTime (ProcedureTime) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element EnteredAt (EnteredAt) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element DonorType uses Python identifier DonorType
    __DonorType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DonorType'), 'DonorType', '__httpwww_rixg_org_uk_TransplantProcedure_DonorType', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 14, 20), )

    
    DonorType = property(__DonorType.value, __DonorType.set, None, 'NHSBT Type')

    
    # Element DateRegistered uses Python identifier DateRegistered
    __DateRegistered = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DateRegistered'), 'DateRegistered', '__httpwww_rixg_org_uk_TransplantProcedure_DateRegistered', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 28, 20), )

    
    DateRegistered = property(__DateRegistered.value, __DateRegistered.set, None, 'Date Registered for Transplantation')

    
    # Element FailureDate uses Python identifier FailureDate
    __FailureDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FailureDate'), 'FailureDate', '__httpwww_rixg_org_uk_TransplantProcedure_FailureDate', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 35, 20), )

    
    FailureDate = property(__FailureDate.value, __FailureDate.set, None, 'Failure Date')

    
    # Element ColdIschaemicTime uses Python identifier ColdIschaemicTime
    __ColdIschaemicTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ColdIschaemicTime'), 'ColdIschaemicTime', '__httpwww_rixg_org_uk_TransplantProcedure_ColdIschaemicTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 42, 20), )

    
    ColdIschaemicTime = property(__ColdIschaemicTime.value, __ColdIschaemicTime.set, None, 'Cold ischaemic time in Minutes')

    
    # Element HLAMismatchA uses Python identifier HLAMismatchA
    __HLAMismatchA = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HLAMismatchA'), 'HLAMismatchA', '__httpwww_rixg_org_uk_TransplantProcedure_HLAMismatchA', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 49, 20), )

    
    HLAMismatchA = property(__HLAMismatchA.value, __HLAMismatchA.set, None, 'Mismatch A')

    
    # Element HLAMismatchB uses Python identifier HLAMismatchB
    __HLAMismatchB = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HLAMismatchB'), 'HLAMismatchB', '__httpwww_rixg_org_uk_TransplantProcedure_HLAMismatchB', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 56, 20), )

    
    HLAMismatchB = property(__HLAMismatchB.value, __HLAMismatchB.set, None, 'Mismatch B')

    
    # Element HLAMismatchC uses Python identifier HLAMismatchC
    __HLAMismatchC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HLAMismatchC'), 'HLAMismatchC', '__httpwww_rixg_org_uk_TransplantProcedure_HLAMismatchC', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 63, 20), )

    
    HLAMismatchC = property(__HLAMismatchC.value, __HLAMismatchC.set, None, 'Mismatch DR')

    
    # Element UpdatedOn (UpdatedOn) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element ExternalId (ExternalId) inherited from {http://www.rixg.org.uk/}Procedure
    _ElementMap.update({
        __DonorType.name() : __DonorType,
        __DateRegistered.name() : __DateRegistered,
        __FailureDate.name() : __FailureDate,
        __ColdIschaemicTime.name() : __ColdIschaemicTime,
        __HLAMismatchA.name() : __HLAMismatchA,
        __HLAMismatchB.name() : __HLAMismatchB,
        __HLAMismatchC.name() : __HLAMismatchC
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TransplantProcedure = TransplantProcedure
Namespace.addCategoryObject('typeBinding', 'TransplantProcedure', TransplantProcedure)


# Complex type {http://www.rixg.org.uk/}Address with content type ELEMENT_ONLY
class Address (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}Address with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Address')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 21, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FromTime uses Python identifier FromTime
    __FromTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FromTime'), 'FromTime', '__httpwww_rixg_org_uk_Address_FromTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 23, 12), )

    
    FromTime = property(__FromTime.value, __FromTime.set, None, None)

    
    # Element ToTime uses Python identifier ToTime
    __ToTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ToTime'), 'ToTime', '__httpwww_rixg_org_uk_Address_ToTime', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 24, 12), )

    
    ToTime = property(__ToTime.value, __ToTime.set, None, None)

    
    # Element Street uses Python identifier Street
    __Street = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Street'), 'Street', '__httpwww_rixg_org_uk_Address_Street', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 25, 12), )

    
    Street = property(__Street.value, __Street.set, None, 'Everything prior to the Town in the Address')

    
    # Element Town uses Python identifier Town
    __Town = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Town'), 'Town', '__httpwww_rixg_org_uk_Address_Town', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 35, 12), )

    
    Town = property(__Town.value, __Town.set, None, None)

    
    # Element County uses Python identifier County
    __County = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'County'), 'County', '__httpwww_rixg_org_uk_Address_County', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 36, 12), )

    
    County = property(__County.value, __County.set, None, None)

    
    # Element Postcode uses Python identifier Postcode
    __Postcode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Postcode'), 'Postcode', '__httpwww_rixg_org_uk_Address_Postcode', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 37, 12), )

    
    Postcode = property(__Postcode.value, __Postcode.set, None, None)

    
    # Element Country uses Python identifier Country
    __Country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Country'), 'Country', '__httpwww_rixg_org_uk_Address_Country', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 38, 12), )

    
    Country = property(__Country.value, __Country.set, None, None)

    
    # Attribute use uses Python identifier use
    __use = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'use'), 'use', '__httpwww_rixg_org_uk_Address_use', _module_typeBindings.STD_ANON_55)
    __use._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 70, 8)
    __use._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 70, 8)
    
    use = property(__use.value, __use.set, None, 'From National MIM')

    _ElementMap.update({
        __FromTime.name() : __FromTime,
        __ToTime.name() : __ToTime,
        __Street.name() : __Street,
        __Town.name() : __Town,
        __County.name() : __County,
        __Postcode.name() : __Postcode,
        __Country.name() : __Country
    })
    _AttributeMap.update({
        __use.name() : __use
    })
_module_typeBindings.Address = Address
Namespace.addCategoryObject('typeBinding', 'Address', Address)


# Complex type {http://www.rixg.org.uk/}ContactDetail with content type ELEMENT_ONLY
class ContactDetail (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}ContactDetail with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContactDetail')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 2, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Value'), 'Value', '__httpwww_rixg_org_uk_ContactDetail_Value', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 4, 3), )

    
    Value = property(__Value.value, __Value.set, None, 'The contact detail = phone number or email id')

    
    # Element Comments uses Python identifier Comments
    __Comments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Comments'), 'Comments', '__httpwww_rixg_org_uk_ContactDetail_Comments', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 14, 3), )

    
    Comments = property(__Comments.value, __Comments.set, None, '')

    
    # Attribute use uses Python identifier use
    __use = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'use'), 'use', '__httpwww_rixg_org_uk_ContactDetail_use', _module_typeBindings.STD_ANON_95)
    __use._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 25, 2)
    __use._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 25, 2)
    
    use = property(__use.value, __use.set, None, 'Based on HL7 table 201')

    _ElementMap.update({
        __Value.name() : __Value,
        __Comments.name() : __Comments
    })
    _AttributeMap.update({
        __use.name() : __use
    })
_module_typeBindings.ContactDetail = ContactDetail
Namespace.addCategoryObject('typeBinding', 'ContactDetail', ContactDetail)


# Complex type {http://www.rixg.org.uk/}Name with content type ELEMENT_ONLY
class Name (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}Name with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Name')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 2, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Prefix uses Python identifier Prefix
    __Prefix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Prefix'), 'Prefix', '__httpwww_rixg_org_uk_Name_Prefix', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 4, 12), )

    
    Prefix = property(__Prefix.value, __Prefix.set, None, 'Prefix or title e.g. Mr, Mrs etc')

    
    # Element Family uses Python identifier Family
    __Family = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Family'), 'Family', '__httpwww_rixg_org_uk_Name_Family', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 14, 12), )

    
    Family = property(__Family.value, __Family.set, None, 'Surname or family name. Mandatory on Usual name')

    
    # Element Given uses Python identifier Given
    __Given = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Given'), 'Given', '__httpwww_rixg_org_uk_Name_Given', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 25, 12), )

    
    Given = property(__Given.value, __Given.set, None, 'Given name. Mandatory for a Usual name.')

    
    # Element OtherGivenNames uses Python identifier OtherGivenNames
    __OtherGivenNames = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OtherGivenNames'), 'OtherGivenNames', '__httpwww_rixg_org_uk_Name_OtherGivenNames', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 36, 12), )

    
    OtherGivenNames = property(__OtherGivenNames.value, __OtherGivenNames.set, None, '2nd and other given name')

    
    # Element Suffix uses Python identifier Suffix
    __Suffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Suffix'), 'Suffix', '__httpwww_rixg_org_uk_Name_Suffix', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 46, 12), )

    
    Suffix = property(__Suffix.value, __Suffix.set, None, 'Suffix e.g. Jnr, Snr etc.')

    
    # Attribute use uses Python identifier use
    __use = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'use'), 'use', '__httpwww_rixg_org_uk_Name_use', _module_typeBindings.STD_ANON_117, required=True)
    __use._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 57, 8)
    __use._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 57, 8)
    
    use = property(__use.value, __use.set, None, 'https://www.hl7.org/fhir/v2/0200/index.html')

    _ElementMap.update({
        __Prefix.name() : __Prefix,
        __Family.name() : __Family,
        __Given.name() : __Given,
        __OtherGivenNames.name() : __OtherGivenNames,
        __Suffix.name() : __Suffix
    })
    _AttributeMap.update({
        __use.name() : __use
    })
_module_typeBindings.Name = Name
Namespace.addCategoryObject('typeBinding', 'Name', Name)


# Complex type {http://www.rixg.org.uk/}SendingFacility with content type SIMPLE
class SendingFacility (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.rixg.org.uk/}SendingFacility with content type SIMPLE"""
    _TypeDefinition = SendingFacilityType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SendingFacility')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingFacility.xsd', 11, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is SendingFacilityType
    
    # Attribute channelName uses Python identifier channelName
    __channelName = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'channelName'), 'channelName', '__httpwww_rixg_org_uk_SendingFacility_channelName', pyxb.binding.datatypes.string, required=True)
    __channelName._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingFacility.xsd', 14, 16)
    __channelName._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingFacility.xsd', 14, 16)
    
    channelName = property(__channelName.value, __channelName.set, None, 'This should be a reference for the System / Version which generated the file. The intended purpose is to allow us to identify, or temporarily rectify, issues with what a particular extract is generating.')

    
    # Attribute time uses Python identifier time
    __time = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'time'), 'time', '__httpwww_rixg_org_uk_SendingFacility_time', pyxb.binding.datatypes.dateTime, required=True)
    __time._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingFacility.xsd', 19, 16)
    __time._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingFacility.xsd', 19, 16)
    
    time = property(__time.value, __time.set, None, 'This should be the time that the extract was generated.')

    
    # Attribute schemaVersion uses Python identifier schemaVersion
    __schemaVersion = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'schemaVersion'), 'schemaVersion', '__httpwww_rixg_org_uk_SendingFacility_schemaVersion', _module_typeBindings.UKRDCSchemaVersion, required=True)
    __schemaVersion._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingFacility.xsd', 24, 16)
    __schemaVersion._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingFacility.xsd', 24, 16)
    
    schemaVersion = property(__schemaVersion.value, __schemaVersion.set, None, 'This should be the version (from the XSD Schema) that the extract has been written against. This is to allow us to process incoming files accordingly as well as track which Units are submitting which version. Note that the RDA Schema version is unrelated to the UKRR Dataset version.')

    
    # Attribute batchNo uses Python identifier batchNo
    __batchNo = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'batchNo'), 'batchNo', '__httpwww_rixg_org_uk_SendingFacility_batchNo', pyxb.binding.datatypes.integer)
    __batchNo._DeclarationLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingFacility.xsd', 29, 16)
    __batchNo._UseLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/SendingFacility.xsd', 29, 16)
    
    batchNo = property(__batchNo.value, __batchNo.set, None, 'The batch number as used in the filenames. This should be incremented each time the extract is run, not per-patient')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __channelName.name() : __channelName,
        __time.name() : __time,
        __schemaVersion.name() : __schemaVersion,
        __batchNo.name() : __batchNo
    })
_module_typeBindings.SendingFacility = SendingFacility
Namespace.addCategoryObject('typeBinding', 'SendingFacility', SendingFacility)


# Complex type {http://www.rixg.org.uk/}VascularAccess with content type ELEMENT_ONLY
class VascularAccess (Procedure):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VascularAccess')
    _XSDLocation = pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 3, 4)
    _ElementMap = Procedure._ElementMap.copy()
    _AttributeMap = Procedure._AttributeMap.copy()
    # Base type is Procedure
    
    # Element ProcedureType (ProcedureType) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element ProcedureTime (ProcedureTime) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element EnteredAt (EnteredAt) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element UpdatedOn (UpdatedOn) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element ExternalId (ExternalId) inherited from {http://www.rixg.org.uk/}Procedure
    
    # Element Attributes uses Python identifier Attributes
    __Attributes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Attributes'), 'Attributes', '__httpwww_rixg_org_uk_VascularAccess_Attributes', False, pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 11, 20), )

    
    Attributes = property(__Attributes.value, __Attributes.set, None, None)

    _ElementMap.update({
        __Attributes.name() : __Attributes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.VascularAccess = VascularAccess
Namespace.addCategoryObject('typeBinding', 'VascularAccess', VascularAccess)


PatientRecord = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PatientRecord'), CTD_ANON, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 32, 4))
Namespace.addCategoryObject('elementBinding', PatientRecord.name().localName(), PatientRecord)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SendingFacility'), SendingFacility, scope=CTD_ANON, documentation='\n                        The value of this element is the Site or System responsible for the data being sent.\n                        ', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 35, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SendingExtract'), SendingExtract, scope=CTD_ANON, documentation='\n                        The type of data feed. This is used to enable different behaviour when the original source of data was something other than a UKRDC feed (i.e. when "PV XML" is converted to "RDA XML" it is given a SendingExtract of "PV"). Unless told otherwise the value should be set to "UKRDC".\n                        ', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 45, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Patient'), Patient, scope=CTD_ANON, documentation='Patient Demographics', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 55, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabOrders'), LabOrders, scope=CTD_ANON, documentation='Lab Orders', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 63, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SocialHistories'), CTD_ANON_, scope=CTD_ANON, documentation='Other Health Related Behaviours', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 72, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FamilyHistories'), CTD_ANON_2, scope=CTD_ANON, documentation='Family Histories', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 85, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Observations'), Observations, scope=CTD_ANON, documentation='\n                        Observations. These are measurements taken about a patient that do not involve a Laboratory.\n                        ', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 98, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Allergies'), CTD_ANON_3, scope=CTD_ANON, documentation='\n                        Allergies.\n                        ', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 108, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Diagnoses'), CTD_ANON_4, scope=CTD_ANON, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 123, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Medications'), CTD_ANON_5, scope=CTD_ANON, documentation='Medications', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 153, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DialysisPrescriptions'), CTD_ANON_6, scope=CTD_ANON, documentation='Dialysis Prescriptions', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 166, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Procedures'), CTD_ANON_7, scope=CTD_ANON, documentation='Procedures', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 181, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Documents'), CTD_ANON_8, scope=CTD_ANON, documentation='Documents', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 222, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Encounters'), CTD_ANON_9, scope=CTD_ANON, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 235, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProgramMemberships'), CTD_ANON_10, scope=CTD_ANON, documentation='\n                        Program Memberships. These are used to record whether or not a patient wishes to participate in one of the UKRDC’s member projects. In the case of projects such as RADAR the Program Membership record should only be closed if the patient actively wishes to withdraw. It should not be end dated when they leave the unit or die. If a patient decides to leave a project and then re-joins a new Program Membership record should be created (with a different ExternalID) rather than re-opening the original one.\n                        ', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 265, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OptOuts'), CTD_ANON_11, scope=CTD_ANON, documentation='Opt-Outs', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 280, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ClinicalRelationships'), CTD_ANON_12, scope=CTD_ANON, documentation='This is used to record the relationship between a Patient and a Clinician or Care Facility. This element should not be submitted without prior discussion with the UKRR.', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 293, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Surveys'), CTD_ANON_13, scope=CTD_ANON, documentation='Surveys', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 306, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Assessments'), CTD_ANON_14, scope=CTD_ANON, documentation='Assessments', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 319, 16)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PVData'), PVData, scope=CTD_ANON, documentation='\n                        This is used internally to hold data items sent in PV XML files and should not be sent by external parties.', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 332, 16)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 63, 16))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 72, 16))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 85, 16))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 98, 16))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 108, 16))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 123, 16))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 153, 16))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 166, 16))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 181, 16))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 222, 16))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 235, 16))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 265, 16))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 280, 16))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 293, 16))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 306, 16))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 319, 16))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 332, 16))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'SendingFacility')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 35, 16))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'SendingExtract')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 45, 16))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'Patient')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 55, 16))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'LabOrders')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 63, 16))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'SocialHistories')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 72, 16))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'FamilyHistories')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 85, 16))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'Observations')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 98, 16))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'Allergies')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 108, 16))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'Diagnoses')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 123, 16))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'Medications')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 153, 16))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'DialysisPrescriptions')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 166, 16))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'Procedures')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 181, 16))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'Documents')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 222, 16))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'Encounters')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 235, 16))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'ProgramMemberships')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 265, 16))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'OptOuts')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 280, 16))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'ClinicalRelationships')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 293, 16))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'Surveys')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 306, 16))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'Assessments')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 319, 16))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'PVData')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 332, 16))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SocialHistory'), SocialHistory, scope=CTD_ANON_, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 81, 28)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 81, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'SocialHistory')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 81, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FamilyHistory'), FamilyHistory, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 94, 28)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 94, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, 'FamilyHistory')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 94, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_2()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Allergy'), Allergy, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 119, 28)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 119, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, 'Allergy')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 119, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_3()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Diagnosis'), Diagnosis, scope=CTD_ANON_4, documentation='Co-Morbidities', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 126, 28)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CauseOfDeath'), CauseOfDeath, scope=CTD_ANON_4, documentation='Cause of Death', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 134, 28)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RenalDiagnosis'), RenalDiagnosis, scope=CTD_ANON_4, documentation='Renal Diagnoses', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 142, 28)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 126, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 134, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 142, 28))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'Diagnosis')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 126, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'CauseOfDeath')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 134, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'RenalDiagnosis')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 142, 28))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_4()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Medication'), Medication, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 162, 28)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 162, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'Medication')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 162, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_5()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DialysisPrescription'), DialysisPrescription, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 175, 28)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 175, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(None, 'DialysisPrescription')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 175, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_6()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Procedure'), Procedure, scope=CTD_ANON_7, documentation='Procedures (not otherwise Specified)', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 187, 28)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DialysisSessions'), DialysisSessions, scope=CTD_ANON_7, documentation='Dialysis Sessions', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 195, 28)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Transplant'), TransplantProcedure, scope=CTD_ANON_7, documentation='Transplant Procedures', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 203, 28)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VascularAccess'), VascularAccess, scope=CTD_ANON_7, documentation='Vascular Access Constructions', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 211, 28)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 187, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 195, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 203, 28))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 211, 28))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, 'Procedure')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 187, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, 'DialysisSessions')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 195, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, 'Transplant')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 203, 28))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(None, 'VascularAccess')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 211, 28))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_7()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Document'), Document, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 231, 28)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 231, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(None, 'Document')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 231, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_8()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Encounter'), Encounter, scope=CTD_ANON_9, documentation='This is used to record the duration of something other than a Treatment. This element should not be submitted without prior discussion with the UKRR.', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 238, 28)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Treatment'), Treatment, scope=CTD_ANON_9, documentation='This is used to record the duration a Patient received a particular type of Care/Treatment at a particular Treatment Facility. It is similar in concept to the UKRR TXT records however at the end of the period it should be end-dated rather than an additional record being sent. It is possible for treatment records to overlap if a patient has multiple treatments (such as post-transplant dialysis). A treatment record should exist for any period of time where they would be considered a patient (so for example code 900 record for pre-RRT CKD and a code 94 record for post-RRT Conservative care). Details of Transplants themselves should be recorded as Procedures but Treatment records should be used to record periods of Transplant related Inpatient/Outpatient care.', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 246, 28)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TransplantList'), TransplantList, scope=CTD_ANON_9, documentation='This is only for NHSBT supplied Transplant Waiting List data.', location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 254, 28)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 238, 28))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 246, 28))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 254, 28))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, 'Encounter')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 238, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, 'Treatment')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 246, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(None, 'TransplantList')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 254, 28))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_9()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProgramMembership'), ProgramMembership, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 276, 28)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 276, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(None, 'ProgramMembership')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 276, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_10()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OptOut'), OptOut, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 289, 28)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 289, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(None, 'OptOut')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 289, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_11()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ClinicalRelationship'), ClinicalRelationship, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 302, 28)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 302, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(None, 'ClinicalRelationship')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 302, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_12()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Survey'), Survey, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 315, 28)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 315, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(None, 'Survey')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 315, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_13()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Assessment'), Assessment, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 328, 28)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 328, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(None, 'Assessment')), pyxb.utils.utility.Location('file://///home/runner/work/resources/resources/schema/ukrdc/UKRDC.xsd', 328, 28))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_14()




Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Allergy'), CF_SNOMED, scope=Allergy, documentation='Substance to which the patient is allergic. (SNOMED)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 15, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AllergyCategory'), CF_HL7_00204, scope=Allergy, documentation='Type of Allergy (HL7 00204)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 23, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Severity'), CF_HL7_00206, scope=Allergy, documentation='Severity (HL7 00206)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 31, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Clinician'), Clinician, scope=Allergy, documentation='Diagnosing Clinician', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 39, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DiscoveryTime'), pyxb.binding.datatypes.dateTime, scope=Allergy, documentation='Reported Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 47, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConfirmedTime'), pyxb.binding.datatypes.dateTime, scope=Allergy, documentation='Confirmed Time', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 56, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Comments'), STD_ANON, scope=Allergy, documentation='Advice given to the patient', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 65, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InactiveTime'), pyxb.binding.datatypes.dateTime, scope=Allergy, documentation='Resolved Time', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 80, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FreeTextAllergy'), STD_ANON_, scope=Allergy, documentation='AL1-5 Free text definition of what happened', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 89, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'QualifyingDetails'), STD_ANON_2, scope=Allergy, documentation='Details if patient or family reported', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 103, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=Allergy, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

Allergy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=Allergy, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 23, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 31, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 39, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 47, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 56, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 65, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 80, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 89, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 103, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_10)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'Allergy')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 15, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'AllergyCategory')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 23, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'Severity')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 31, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'Clinician')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 39, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'DiscoveryTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 47, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'ConfirmedTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 56, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'Comments')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 65, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'InactiveTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 80, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'FreeTextAllergy')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 89, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'QualifyingDetails')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Allergies/Allergy.xsd', 103, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Allergy._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Allergy._Automaton = _BuildAutomaton_15()




Assessment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AssessmentStart'), pyxb.binding.datatypes.dateTime, scope=Assessment, documentation='The Date the Assessment Started', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 10, 12)))

Assessment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AssessmentEnd'), pyxb.binding.datatypes.dateTime, scope=Assessment, documentation='The Date the Assessment Ended', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 18, 12)))

Assessment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AssessmentType'), CTD_ANON_15, scope=Assessment, documentation='Assessment Type', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 26, 12)))

Assessment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AssessmentOutcome'), CTD_ANON_16, scope=Assessment, documentation='Assessment Outcome', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 59, 12)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 10, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 18, 12))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Assessment._UseForTag(pyxb.namespace.ExpandedName(None, 'AssessmentStart')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Assessment._UseForTag(pyxb.namespace.ExpandedName(None, 'AssessmentEnd')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 18, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Assessment._UseForTag(pyxb.namespace.ExpandedName(None, 'AssessmentType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 26, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Assessment._UseForTag(pyxb.namespace.ExpandedName(None, 'AssessmentOutcome')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 59, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Assessment._Automaton = _BuildAutomaton_16()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_3, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 35, 24)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_4, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 42, 24)))

CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_5, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 49, 24)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 35, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 42, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 49, 24))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 35, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 42, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 49, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_17()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_6, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 68, 24)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_7, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 75, 24)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_8, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 82, 24)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 68, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 75, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 82, 24))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 68, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 75, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Assessments/Assessment.xsd', 82, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_18()




ClinicalRelationship._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FromTime'), pyxb.binding.datatypes.dateTime, scope=ClinicalRelationship, documentation='Start of the relationship', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 11, 12)))

ClinicalRelationship._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ToTime'), pyxb.binding.datatypes.dateTime, scope=ClinicalRelationship, documentation='End of the relationship', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 18, 12)))

ClinicalRelationship._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Clinician'), Clinician, scope=ClinicalRelationship, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 25, 12)))

ClinicalRelationship._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FacilityCode'), Location, scope=ClinicalRelationship, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 31, 12)))

ClinicalRelationship._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=ClinicalRelationship, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

ClinicalRelationship._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=ClinicalRelationship, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 18, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 25, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 31, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ClinicalRelationship._UseForTag(pyxb.namespace.ExpandedName(None, 'FromTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 11, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ClinicalRelationship._UseForTag(pyxb.namespace.ExpandedName(None, 'ToTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 18, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ClinicalRelationship._UseForTag(pyxb.namespace.ExpandedName(None, 'Clinician')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 25, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ClinicalRelationship._UseForTag(pyxb.namespace.ExpandedName(None, 'FacilityCode')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ClinicalRelationships/ClinicalRelationship.xsd', 31, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ClinicalRelationship._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ClinicalRelationship._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ClinicalRelationship._Automaton = _BuildAutomaton_19()




CauseOfDeath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DiagnosisType'), STD_ANON_9, scope=CauseOfDeath, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 11, 12)))

CauseOfDeath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Diagnosis'), CF_EDTA_COD, scope=CauseOfDeath, documentation='Coded Caused of Death (EDTA)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 37, 12)))

CauseOfDeath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Comments'), pyxb.binding.datatypes.string, scope=CauseOfDeath, documentation='Free text about the Diagnosis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 43, 12)))

CauseOfDeath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VerificationStatus'), STD_ANON_10, scope=CauseOfDeath, documentation='The verification status to support or decline the clinical status of the condition or diagnosis.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 50, 12)))

CauseOfDeath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredOn'), pyxb.binding.datatypes.dateTime, scope=CauseOfDeath, documentation='The date the COD was recorded in the medical record.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 90, 12)))

CauseOfDeath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=CauseOfDeath, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

CauseOfDeath._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=CauseOfDeath, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 43, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 50, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 90, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CauseOfDeath._UseForTag(pyxb.namespace.ExpandedName(None, 'DiagnosisType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 11, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CauseOfDeath._UseForTag(pyxb.namespace.ExpandedName(None, 'Diagnosis')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 37, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CauseOfDeath._UseForTag(pyxb.namespace.ExpandedName(None, 'Comments')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 43, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CauseOfDeath._UseForTag(pyxb.namespace.ExpandedName(None, 'VerificationStatus')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 50, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CauseOfDeath._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/CauseOfDeath.xsd', 90, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CauseOfDeath._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CauseOfDeath._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CauseOfDeath._Automaton = _BuildAutomaton_20()




Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DiagnosisType'), pyxb.binding.datatypes.string, scope=Diagnosis, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 12, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DiagnosingClinician'), Clinician, scope=Diagnosis, documentation='National Clinicial code where possible or other local code if not.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 18, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Diagnosis'), DiagnosisCodeType, scope=Diagnosis, documentation='SNOMED CT coded diagnoses. This should also include any diagnosis that has been submitted elsewhere as a Primary Renal Diagnosis.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 24, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BiopsyPerformed'), RRYesNo, scope=Diagnosis, documentation='Was a biopsy performed to arrive at this Diagnosis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 30, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Comments'), pyxb.binding.datatypes.string, scope=Diagnosis, documentation='Free text about the Diagnosis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 36, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IdentificationTime'), pyxb.binding.datatypes.dateTime, scope=Diagnosis, documentation='Date of initial diagnosis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 42, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OnsetTime'), pyxb.binding.datatypes.dateTime, scope=Diagnosis, documentation='Date condition began.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 48, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VerificationStatus'), STD_ANON_11, scope=Diagnosis, documentation='The verification status to support or decline the clinical status of the condition or diagnosis.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 54, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredOn'), pyxb.binding.datatypes.dateTime, scope=Diagnosis, documentation='The date the diagnosis was recorded in the medical record.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 94, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EncounterNumber'), pyxb.binding.datatypes.string, scope=Diagnosis, documentation='This is used to associate a Diagnosis with the activity in a particular Encounter record. This element should not be submitted without prior discussion with the UKRR.\n                    ', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 100, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=Diagnosis, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

Diagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=Diagnosis, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 12, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 18, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 30, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 36, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 42, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 48, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 54, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 94, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 100, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'DiagnosisType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 12, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'DiagnosingClinician')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 18, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'Diagnosis')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 24, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'BiopsyPerformed')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 30, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'Comments')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 36, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'IdentificationTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 42, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'OnsetTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 48, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'VerificationStatus')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 54, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 94, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'EncounterNumber')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/Diagnosis.xsd', 100, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Diagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Diagnosis._Automaton = _BuildAutomaton_21()




RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DiagnosisType'), STD_ANON_12, scope=RenalDiagnosis, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 12, 12)))

RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DiagnosingClinician'), Clinician, scope=RenalDiagnosis, documentation='Clinician Coding Diagnosis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 38, 12)))

RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Diagnosis'), CF_EDTA_PRD, scope=RenalDiagnosis, documentation='Coded Primary Renal Diagnosis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 43, 12)))

RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BiopsyPerformed'), RRYesNo, scope=RenalDiagnosis, documentation='Was a biopsy performed to arrive at this Diagnosis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 49, 12)))

RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Comments'), pyxb.binding.datatypes.string, scope=RenalDiagnosis, documentation='Free text about the Diagnosis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 55, 12)))

RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IdentificationTime'), pyxb.binding.datatypes.dateTime, scope=RenalDiagnosis, documentation='Date of initial diagnosis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 61, 12)))

RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OnsetTime'), pyxb.binding.datatypes.dateTime, scope=RenalDiagnosis, documentation='Date condition began.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 68, 12)))

RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VerificationStatus'), STD_ANON_13, scope=RenalDiagnosis, documentation='The verification status to support or decline the clinical status of the condition or diagnosis.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 75, 12)))

RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredOn'), pyxb.binding.datatypes.dateTime, scope=RenalDiagnosis, documentation='The date the diagnosis was recorded in the medical record.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 115, 12)))

RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=RenalDiagnosis, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

RenalDiagnosis._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=RenalDiagnosis, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 38, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 49, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 55, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 61, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 68, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 75, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 115, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'DiagnosisType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 12, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'DiagnosingClinician')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 38, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'Diagnosis')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 43, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'BiopsyPerformed')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 49, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'Comments')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 55, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'IdentificationTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 61, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'OnsetTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 68, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'VerificationStatus')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 75, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Diagnoses/RenalDiagnosis.xsd', 115, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(RenalDiagnosis._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RenalDiagnosis._Automaton = _BuildAutomaton_22()




DialysisPrescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredOn'), pyxb.binding.datatypes.dateTime, scope=DialysisPrescription, documentation='The date the Dialysis Prescription was created.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 10, 12)))

DialysisPrescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FromTime'), pyxb.binding.datatypes.dateTime, scope=DialysisPrescription, documentation='Time the Period the Dialysis Prescription Applies To Starts', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 16, 12)))

DialysisPrescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ToTime'), pyxb.binding.datatypes.dateTime, scope=DialysisPrescription, documentation='Time the Period the Dialysis Prescription Applies To Ends', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 22, 12)))

DialysisPrescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SessionType'), pyxb.binding.datatypes.string, scope=DialysisPrescription, documentation='Session Type (Same as QHD41)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 28, 12)))

DialysisPrescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SessionsPerWeek'), pyxb.binding.datatypes.integer, scope=DialysisPrescription, documentation='Number of Dialysis Sessions per Week', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 34, 12)))

DialysisPrescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TimeDialysed'), pyxb.binding.datatypes.integer, scope=DialysisPrescription, documentation='Time Dialysed (Minutes)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 40, 12)))

DialysisPrescription._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VascularAccess'), pyxb.binding.datatypes.string, scope=DialysisPrescription, documentation='Vascular Access to Use (QHD20)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 46, 12)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 10, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 22, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 34, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 40, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 46, 12))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DialysisPrescription._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DialysisPrescription._UseForTag(pyxb.namespace.ExpandedName(None, 'FromTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 16, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DialysisPrescription._UseForTag(pyxb.namespace.ExpandedName(None, 'ToTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 22, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DialysisPrescription._UseForTag(pyxb.namespace.ExpandedName(None, 'SessionType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 28, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DialysisPrescription._UseForTag(pyxb.namespace.ExpandedName(None, 'SessionsPerWeek')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 34, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DialysisPrescription._UseForTag(pyxb.namespace.ExpandedName(None, 'TimeDialysed')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 40, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DialysisPrescription._UseForTag(pyxb.namespace.ExpandedName(None, 'VascularAccess')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisPrescriptions/DialysisPrescription.xsd', 46, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DialysisPrescription._Automaton = _BuildAutomaton_23()




DialysisSessions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DialysisSession'), DialysisSession, scope=DialysisSessions, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 7, 12)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 7, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DialysisSessions._UseForTag(pyxb.namespace.ExpandedName(None, 'DialysisSession')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 7, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DialysisSessions._Automaton = _BuildAutomaton_24()




Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DocumentTime'), pyxb.binding.datatypes.dateTime, scope=Document, documentation='Document Creation', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 12, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoteText'), pyxb.binding.datatypes.string, scope=Document, documentation='The body of the document as plain text', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 18, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DocumentType'), CodedField, scope=Document, documentation='For future use.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 24, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Clinician'), Clinician, scope=Document, documentation='The person responsibile for the content of the document', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 30, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DocumentName'), STD_ANON_14, scope=Document, documentation='Document title', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 37, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Status'), CodedField, scope=Document, documentation='ACTIVE or INACTIVE', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 47, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredBy'), Clinician, scope=Document, documentation='Person entering the document as a National Clinicial code where possible or other local code if not.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 53, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=Document, documentation='Location the document was created at. Use National coding e.g. RXF01', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 59, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileType'), pyxb.binding.datatypes.string, scope=Document, documentation='The MIME type of the data if supplied as a stream.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 65, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileName'), pyxb.binding.datatypes.string, scope=Document, documentation='The filename of the document', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 71, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Stream'), pyxb.binding.datatypes.base64Binary, scope=Document, documentation='This property is used when the Document is binary data, e.g DOC, PDF, JPG', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 77, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DocumentURL'), pyxb.binding.datatypes.string, scope=Document, documentation='URL to the document if notetext/stream is not supplied.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 83, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=Document, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

Document._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=Document, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 18, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 24, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 30, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 37, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 47, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 53, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 59, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 65, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 71, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 77, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 83, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_12)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'DocumentTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 12, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'NoteText')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 18, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'DocumentType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 24, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'Clinician')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 30, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'DocumentName')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 37, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'Status')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 47, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredBy')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 53, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 59, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'FileType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 65, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'FileName')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 71, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'Stream')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 77, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'DocumentURL')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Documents/Document.xsd', 83, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Document._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Document._Automaton = _BuildAutomaton_25()




Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EncounterNumber'), pyxb.binding.datatypes.string, scope=Encounter, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 12, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EncounterType'), STD_ANON_15, scope=Encounter, documentation='General Encounter Type (PV1-2)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 13, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FromTime'), pyxb.binding.datatypes.dateTime, scope=Encounter, documentation='Time that encounter starts', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 73, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ToTime'), pyxb.binding.datatypes.dateTime, scope=Encounter, documentation='Time that encounter ends', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 79, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdmittingClinician'), Clinician, scope=Encounter, documentation='Responsible Clinician as a National Clinicial code where possible or other local code if not.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 85, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HealthCareFacility'), Location, scope=Encounter, documentation='Parent renal unit as national ODS code (e.g. RXF01)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 91, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdmitReason'), CodedField, scope=Encounter, documentation='Reason for change of care', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 97, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdmissionSource'), Location, scope=Encounter, documentation='Parent renal unit as national ODS code (e.g. RXF01)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 103, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DischargeReason'), CodedField, scope=Encounter, documentation='Reason for Discharge (Transplant, Removed from List etc.)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 109, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DischargeLocation'), Location, scope=Encounter, documentation='Parent renal unit as national ODS code (e.g. RXF01)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 115, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=Encounter, documentation='National code for the hospital providing care - e.g. RXF01', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 121, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VisitDescription'), pyxb.binding.datatypes.string, scope=Encounter, documentation='Details of validation e.g. Date Done, by whom, who provided the info', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 127, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=Encounter, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

Encounter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=Encounter, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 12, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 79, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 85, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 91, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 97, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 103, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 109, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 115, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 121, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 127, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'EncounterNumber')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 12, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'EncounterType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 13, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'FromTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 73, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'ToTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 79, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'AdmittingClinician')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 85, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'HealthCareFacility')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 91, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'AdmitReason')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 97, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'AdmissionSource')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 103, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'DischargeReason')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 109, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'DischargeLocation')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 115, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 121, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'VisitDescription')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Encounter.xsd', 127, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Encounter._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Encounter._Automaton = _BuildAutomaton_26()




TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EncounterNumber'), pyxb.binding.datatypes.string, scope=TransplantList, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 13, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EncounterType'), STD_ANON_16, scope=TransplantList, documentation='General Encounter Type (PV1-2)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 14, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FromTime'), pyxb.binding.datatypes.dateTime, scope=TransplantList, documentation='Start of Registration', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 59, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ToTime'), pyxb.binding.datatypes.dateTime, scope=TransplantList, documentation='End of Registration', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 65, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdmittingClinician'), Clinician, scope=TransplantList, documentation='Responsible Clinician as a National Clinicial code where possible or other local code if not.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 71, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HealthCareFacility'), Location, scope=TransplantList, documentation='Transplant Unit', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 77, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdmitReason'), CodedField, scope=TransplantList, documentation='Type of Organ', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 83, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdmissionSource'), Location, scope=TransplantList, documentation='Referring Unit', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 89, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DischargeReason'), CodedField, scope=TransplantList, documentation='Registration End Status', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 95, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DischargeLocation'), Location, scope=TransplantList, documentation='Parent renal unit as national ODS code (e.g. RXF01)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 101, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=TransplantList, documentation='National code for the hospital providing care - e.g. RXF01', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 107, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VisitDescription'), pyxb.binding.datatypes.string, scope=TransplantList, documentation='Details of validation e.g. Date Done, by whom, who provided the info', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 113, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=TransplantList, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

TransplantList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=TransplantList, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 14, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 65, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 71, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 77, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 83, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 89, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 95, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 101, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 107, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 113, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'EncounterNumber')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 13, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'EncounterType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 14, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'FromTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 59, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'ToTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 65, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'AdmittingClinician')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 71, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'HealthCareFacility')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 77, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'AdmitReason')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 83, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'AdmissionSource')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 89, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'DischargeReason')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 95, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'DischargeLocation')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 101, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 107, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'VisitDescription')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/TransplantList.xsd', 113, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(TransplantList._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TransplantList._Automaton = _BuildAutomaton_27()




Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EncounterNumber'), pyxb.binding.datatypes.string, scope=Treatment, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 15, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FromTime'), pyxb.binding.datatypes.date, scope=Treatment, documentation='Start of Treatment (TXT00)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 22, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ToTime'), pyxb.binding.datatypes.date, scope=Treatment, documentation='End of Treatment (TXT01)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 29, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdmittingClinician'), Clinician, scope=Treatment, documentation='Responsible Clinician as a National Clinicial code where possible or other local code if not.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 36, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HealthCareFacility'), Location, scope=Treatment, documentation='Treatment Centre (TXT20)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 42, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdmitReason'), CF_RR7_TREATMENT, scope=Treatment, documentation='Modality', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 48, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdmissionSource'), Location, scope=Treatment, documentation='Prior Main Renal Unit', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 54, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DischargeReason'), CF_RR7_DISCHARGE, scope=Treatment, documentation='Reason for Discharge', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 60, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DischargeLocation'), Location, scope=Treatment, documentation='Destination Main Renal Unit', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 66, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=Treatment, documentation='National code for the hospital providing care - e.g. RXF01', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 72, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VisitDescription'), STD_ANON_17, scope=Treatment, documentation='Free text about the Treatment record.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 78, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Attributes'), CTD_ANON_17, scope=Treatment, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 90, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=Treatment, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

Treatment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=Treatment, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 15, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 29, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 36, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 42, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 48, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 54, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 60, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 66, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 72, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 78, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 90, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_12)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'EncounterNumber')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 15, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'FromTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 22, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'ToTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 29, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'AdmittingClinician')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 36, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'HealthCareFacility')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 42, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'AdmitReason')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 48, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'AdmissionSource')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 54, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'DischargeReason')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 60, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'DischargeLocation')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 66, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 72, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'VisitDescription')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 78, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'Attributes')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 90, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Treatment._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Treatment._Automaton = _BuildAutomaton_28()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'QBL05'), STD_ANON_18, scope=CTD_ANON_17, documentation='HD Treatment Location (RR8) AKA TXT21', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 93, 24)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 93, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(None, 'QBL05')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Encounters/Treatment.xsd', 93, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_29()




FamilyHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FamilyMember'), CodedField, scope=FamilyHistory, documentation='Family member', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 13, 12)))

FamilyHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Diagnosis'), CF_SNOMED, scope=FamilyHistory, documentation='Diagnosis on family member', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 19, 12)))

FamilyHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoteText'), pyxb.binding.datatypes.string, scope=FamilyHistory, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 25, 12)))

FamilyHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=FamilyHistory, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 31, 12)))

FamilyHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FromTime'), pyxb.binding.datatypes.dateTime, scope=FamilyHistory, documentation='Beginning of period covered', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 37, 12)))

FamilyHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ToTime'), pyxb.binding.datatypes.dateTime, scope=FamilyHistory, documentation='End of period covered', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 43, 12)))

FamilyHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=FamilyHistory, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

FamilyHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=FamilyHistory, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 13, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 19, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 25, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 31, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 37, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 43, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FamilyHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'FamilyMember')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 13, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FamilyHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'Diagnosis')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 19, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FamilyHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'NoteText')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 25, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FamilyHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 31, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FamilyHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'FromTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 37, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FamilyHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'ToTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/FamilyHistories/FamilyHistory.xsd', 43, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(FamilyHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(FamilyHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FamilyHistory._Automaton = _BuildAutomaton_30()




LabOrders._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabOrder'), LabOrder, scope=LabOrders, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 11, 12)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 11, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LabOrders._UseForTag(pyxb.namespace.ExpandedName(None, 'LabOrder')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 11, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
LabOrders._Automaton = _BuildAutomaton_31()




ResultItems._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResultItem'), ResultItem, scope=ResultItems, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 21, 12)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 21, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResultItems._UseForTag(pyxb.namespace.ExpandedName(None, 'ResultItem')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 21, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ResultItems._Automaton = _BuildAutomaton_32()




LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReceivingLocation'), Location, scope=LabOrder, documentation='Location or Facility receiving/performing the order.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 33, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PlacerId'), STD_ANON_19, scope=LabOrder, documentation="ORC:2 Placer (Hospital)'s Order Id", location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 41, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FillerId'), STD_ANON_20, scope=LabOrder, documentation="ORC:3 Filler (Lab)'s Order Id", location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 55, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OrderedBy'), Location, scope=LabOrder, documentation='Requesting Location (as in Hospital, GP, etc.)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 69, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OrderItem'), CodedField, scope=LabOrder, documentation='OBR:4 Service Id - the identity of the test ordered.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 77, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OrderCategory'), CodedField, scope=LabOrder, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 85, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SpecimenCollectedTime'), pyxb.binding.datatypes.dateTime, scope=LabOrder, documentation='OBR:22', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 86, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SpecimenReceivedTime'), pyxb.binding.datatypes.dateTime, scope=LabOrder, documentation='OBR:14', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 95, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Status'), STD_ANON_21, scope=LabOrder, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 104, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Priority'), CodedField, scope=LabOrder, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 116, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SpecimenSource'), STD_ANON_22, scope=LabOrder, documentation='OBR:15.1 e.g. serum, blood', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 117, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.string, scope=LabOrder, documentation='OBR:27.3', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 129, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResultItems'), ResultItems, scope=LabOrder, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 136, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PatientClass'), CF_HL7_0004, scope=LabOrder, documentation='In patient / out patient - equivalent to PV1:2 Patient Class', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 137, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredOn'), pyxb.binding.datatypes.dateTime, scope=LabOrder, documentation='Date Order entered', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 143, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=LabOrder, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 150, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteringOrganization'), Location, scope=LabOrder, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 156, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=LabOrder, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

LabOrder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=LabOrder, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 33, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 55, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 69, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 77, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 85, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 86, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 95, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 104, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 116, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 117, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 129, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 137, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 143, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 150, 12))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 156, 12))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_16)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'ReceivingLocation')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 33, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'PlacerId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 41, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'FillerId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 55, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'OrderedBy')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 69, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'OrderItem')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 77, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'OrderCategory')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 85, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'SpecimenCollectedTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 86, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'SpecimenReceivedTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 95, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'Status')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 104, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'Priority')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 116, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'SpecimenSource')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 117, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 129, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'ResultItems')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 136, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'PatientClass')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 137, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 143, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 150, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteringOrganization')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 156, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(LabOrder._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LabOrder._Automaton = _BuildAutomaton_33()




ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResultType'), STD_ANON_23, scope=ResultItem, documentation='AT', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 174, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredOn'), pyxb.binding.datatypes.dateTime, scope=ResultItem, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 185, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PrePost'), STD_ANON_24, scope=ResultItem, documentation='Was the sample taken PRE or POST dialysis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 191, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ServiceId'), ServiceId, scope=ResultItem, documentation='Test Code (OBX:3)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 224, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SubId'), STD_ANON_25, scope=ResultItem, documentation='Sub-Test Id (OBX:4)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 232, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResultValue'), STD_ANON_26, scope=ResultItem, documentation='OBX:5', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 243, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResultValueUnits'), STD_ANON_27, scope=ResultItem, documentation='OBX:6', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 257, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceRange'), STD_ANON_28, scope=ResultItem, documentation='OBX:7', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 271, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InterpretationCodes'), STD_ANON_29, scope=ResultItem, documentation='Interpretation Codes (OBX:8)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 284, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Status'), STD_ANON_30, scope=ResultItem, documentation='OBX:11', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 312, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ObservationTime'), pyxb.binding.datatypes.dateTime, scope=ResultItem, documentation='OBX:14', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 337, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Comments'), STD_ANON_31, scope=ResultItem, documentation='From NTE:3', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 343, 12)))

ResultItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceComment'), STD_ANON_32, scope=ResultItem, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 354, 12)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 174, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 185, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 191, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 232, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 243, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 257, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 271, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 284, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 312, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 343, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 354, 12))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ResultType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 174, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 185, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'PrePost')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 191, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ServiceId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 224, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'SubId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 232, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ResultValue')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 243, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ResultValueUnits')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 257, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceRange')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 271, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'InterpretationCodes')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 284, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'Status')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 312, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ObservationTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 337, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'Comments')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 343, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ResultItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceComment')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/LabOrders/LabOrder.xsd', 354, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResultItem._Automaton = _BuildAutomaton_34()




Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PrescriptionNumber'), STD_ANON_33, scope=Medication, documentation='Prescription ID', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 15, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FromTime'), pyxb.binding.datatypes.dateTime, scope=Medication, documentation='Start Time of the prescription', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 27, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ToTime'), pyxb.binding.datatypes.dateTime, scope=Medication, documentation='End Time of the prescription', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 34, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteringOrganization'), Location, scope=Medication, documentation='Where the Medicine was Prescribed', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 41, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Route'), CTD_ANON_18, scope=Medication, documentation='Medication Route', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 47, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrugProduct'), DrugProduct, scope=Medication, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 79, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Frequency'), STD_ANON_37, scope=Medication, documentation='Frequency', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 80, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Comments'), STD_ANON_38, scope=Medication, documentation='Other instructions', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 92, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DoseQuantity'), pyxb.binding.datatypes.decimal, scope=Medication, documentation='Dose', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 104, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DoseUoM'), CF_RR23, scope=Medication, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 111, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Indication'), STD_ANON_39, scope=Medication, documentation='The condition or problem for which the drug is being prescribed', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 112, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EncounterNumber'), pyxb.binding.datatypes.string, scope=Medication, documentation='This is used to associate the prescribing of a Medication with the activity in a particular Encounter record. This element should not be submitted without prior discussion with the UKRR.\n                    ', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 124, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=Medication, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

Medication._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=Medication, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 15, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 34, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 41, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 47, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 80, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 92, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 104, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 111, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 112, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 124, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'PrescriptionNumber')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 15, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'FromTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 27, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'ToTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 34, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteringOrganization')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 41, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'Route')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 47, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'DrugProduct')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 79, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'Frequency')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 80, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'Comments')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 92, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'DoseQuantity')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 104, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'DoseUoM')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 111, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'Indication')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 112, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'EncounterNumber')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 124, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Medication._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Medication._Automaton = _BuildAutomaton_35()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_34, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 54, 24)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_35, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 62, 24)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_36, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 69, 24)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 54, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 62, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 69, 24))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 54, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 62, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Medications/Medication.xsd', 69, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_36()




Observations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Observation'), Observation, scope=Observations, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 8, 12)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 8, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Observations._UseForTag(pyxb.namespace.ExpandedName(None, 'Observation')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 8, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Observations._Automaton = _BuildAutomaton_37()




Observation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ObservationTime'), pyxb.binding.datatypes.dateTime, scope=Observation, documentation='When the Observation was made', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 20, 12)))

Observation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ObservationCode'), CTD_ANON_19, scope=Observation, documentation='Code for the Observation - UKRR, PV or SNOMED Coding Standards.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 27, 12)))

Observation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ObservationValue'), STD_ANON_43, scope=Observation, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 72, 12)))

Observation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ObservationUnits'), STD_ANON_44, scope=Observation, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 84, 12)))

Observation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PrePost'), STD_ANON_45, scope=Observation, documentation='Was the Observation made PRE or POST dialysis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 96, 12)))

Observation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Comments'), STD_ANON_46, scope=Observation, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 127, 12)))

Observation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=Observation, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 139, 12)))

Observation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteringOrganization'), Location, scope=Observation, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 144, 12)))

Observation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=Observation, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

Observation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=Observation, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 72, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 84, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 96, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 127, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 139, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 144, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Observation._UseForTag(pyxb.namespace.ExpandedName(None, 'ObservationTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 20, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Observation._UseForTag(pyxb.namespace.ExpandedName(None, 'ObservationCode')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 27, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Observation._UseForTag(pyxb.namespace.ExpandedName(None, 'ObservationValue')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 72, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Observation._UseForTag(pyxb.namespace.ExpandedName(None, 'ObservationUnits')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 84, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Observation._UseForTag(pyxb.namespace.ExpandedName(None, 'PrePost')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 96, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Observation._UseForTag(pyxb.namespace.ExpandedName(None, 'Comments')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 127, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Observation._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 139, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Observation._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteringOrganization')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 144, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Observation._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Observation._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Observation._Automaton = _BuildAutomaton_38()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_40, scope=CTD_ANON_19, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 33, 24)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_41, scope=CTD_ANON_19, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 45, 24)))

CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_42, scope=CTD_ANON_19, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 57, 24)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 33, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 45, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 57, 24))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 33, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 45, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Observations/Observation.xsd', 57, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_39()




OptOut._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredBy'), Clinician, scope=OptOut, documentation='Person entering the consent as a National Clinicial code where possible or other local code if not.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 11, 12)))

OptOut._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=OptOut, documentation='National code for the trust recording the opt-out - e.g. RXF01', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 17, 12)))

OptOut._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProgramName'), pyxb.binding.datatypes.string, scope=OptOut, documentation='Name of RDG or study', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 23, 12)))

OptOut._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProgramDescription'), STD_ANON_47, scope=OptOut, documentation='Free text', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 29, 12)))

OptOut._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FromTime'), pyxb.binding.datatypes.date, scope=OptOut, documentation='Date of Withdrawal', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 40, 12)))

OptOut._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ToTime'), pyxb.binding.datatypes.date, scope=OptOut, documentation='Date Withdrawal Ended', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 46, 12)))

OptOut._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=OptOut, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

OptOut._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=OptOut, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 11, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 17, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 29, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 46, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OptOut._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredBy')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 11, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OptOut._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 17, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OptOut._UseForTag(pyxb.namespace.ExpandedName(None, 'ProgramName')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 23, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OptOut._UseForTag(pyxb.namespace.ExpandedName(None, 'ProgramDescription')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 29, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OptOut._UseForTag(pyxb.namespace.ExpandedName(None, 'FromTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 40, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(OptOut._UseForTag(pyxb.namespace.ExpandedName(None, 'ToTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/OptOuts/OptOut.xsd', 46, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(OptOut._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(OptOut._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OptOut._Automaton = _BuildAutomaton_40()




Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PatientNumbers'), PatientNumbers, scope=Patient, documentation='Patient Numbers', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 18, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Names'), CTD_ANON_20, scope=Patient, documentation='Names', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 26, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BirthTime'), pyxb.binding.datatypes.dateTime, scope=Patient, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 36, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DeathTime'), pyxb.binding.datatypes.dateTime, scope=Patient, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 37, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Gender'), Gender, scope=Patient, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 38, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Addresses'), CTD_ANON_21, scope=Patient, documentation='Addresses', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 39, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContactDetails'), CTD_ANON_22, scope=Patient, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 49, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CountryOfBirth'), pyxb.binding.datatypes.string, scope=Patient, documentation='From NHS Data Dictionary ISO 3166-1 Use the 3-char alphabetic code.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 60, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FamilyDoctor'), FamilyDoctor, scope=Patient, documentation='Current GP / GP Practice', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 65, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PersonToContact'), PersonalContactType, scope=Patient, documentation="Person to Contact about the Patient's Care. This element should not be submitted without prior discussion with the UKRR.", location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 70, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EthnicGroup'), EthnicGroup, scope=Patient, documentation='Ethnic Group', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 75, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Occupation'), Occupation, scope=Patient, documentation='Occuptation', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 80, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PrimaryLanguage'), Language, scope=Patient, documentation='Primary Language', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 85, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BloodGroup'), BloodGroup, scope=Patient, documentation='Blood Type (Current)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 90, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BloodRhesus'), BloodRhesus, scope=Patient, documentation='Blood Rhesus (Current)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 95, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Death'), pyxb.binding.datatypes.boolean, scope=Patient, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 100, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=Patient, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

Patient._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=Patient, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 37, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 39, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 49, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 60, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 65, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 70, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 75, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 80, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 85, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 90, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 95, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 100, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_13)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'PatientNumbers')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 18, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'Names')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 26, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'BirthTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 36, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'DeathTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 37, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'Gender')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 38, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'Addresses')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 39, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'ContactDetails')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 49, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'CountryOfBirth')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 60, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'FamilyDoctor')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 65, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'PersonToContact')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 70, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'EthnicGroup')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 75, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'Occupation')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 80, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'PrimaryLanguage')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 85, 12))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'BloodGroup')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 90, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'BloodRhesus')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 95, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'Death')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 100, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Patient._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Patient._Automaton = _BuildAutomaton_41()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Name'), Name, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 32, 24)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(None, 'Name')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 32, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_42()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Address'), Address, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 45, 24)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(None, 'Address')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 45, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_43()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContactDetail'), ContactDetail, scope=CTD_ANON_22, documentation="Only 1 of each type should be sent. This must only be used for the Patient's own Contact Details and not those of third parties. This should not be submitted for patients who are only being sent as part of the UKRR data collection.", location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 52, 24)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=1, max=4, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 52, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(None, 'ContactDetail')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Patient.xsd', 52, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_44()




Procedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProcedureType'), CF_SNOMED, scope=Procedure, documentation='At least code must be entered', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 12, 12)))

Procedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProcedureTime'), pyxb.binding.datatypes.dateTime, scope=Procedure, documentation='The time the Procedure started.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 18, 12)))

Procedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=Procedure, documentation='Location the procedure was performed at. Use National coding e.g. RXF01', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 24, 12)))

Procedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=Procedure, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

Procedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=Procedure, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 24, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Procedure._UseForTag(pyxb.namespace.ExpandedName(None, 'ProcedureType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 12, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Procedure._UseForTag(pyxb.namespace.ExpandedName(None, 'ProcedureTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 18, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Procedure._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 24, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Procedure._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Procedure._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Procedure._Automaton = _BuildAutomaton_45()




ProgramMembership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredBy'), Clinician, scope=ProgramMembership, documentation='Person entering the consent as a National Clinicial code where possible or other local code if not.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 11, 12)))

ProgramMembership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=ProgramMembership, documentation='National code for the trust recording the consent - e.g. RXF01', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 17, 12)))

ProgramMembership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProgramName'), STD_ANON_48, scope=ProgramMembership, documentation='Name of RDG or study', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 23, 12)))

ProgramMembership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProgramDescription'), STD_ANON_49, scope=ProgramMembership, documentation='Free text', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 34, 12)))

ProgramMembership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FromTime'), pyxb.binding.datatypes.date, scope=ProgramMembership, documentation='Date Consent Given', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 45, 12)))

ProgramMembership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ToTime'), pyxb.binding.datatypes.date, scope=ProgramMembership, documentation='Date Consent Withdrawn', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 51, 12)))

ProgramMembership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=ProgramMembership, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

ProgramMembership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=ProgramMembership, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 11, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 17, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 23, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 34, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 51, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProgramMembership._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredBy')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 11, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProgramMembership._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 17, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProgramMembership._UseForTag(pyxb.namespace.ExpandedName(None, 'ProgramName')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 23, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ProgramMembership._UseForTag(pyxb.namespace.ExpandedName(None, 'ProgramDescription')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 34, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ProgramMembership._UseForTag(pyxb.namespace.ExpandedName(None, 'FromTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 45, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProgramMembership._UseForTag(pyxb.namespace.ExpandedName(None, 'ToTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/ProgramMemberships/ProgramMembership.xsd', 51, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProgramMembership._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ProgramMembership._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ProgramMembership._Automaton = _BuildAutomaton_46()




SocialHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SocialHabit'), CodedField, scope=SocialHistory, documentation='Social Habits', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/SocialHistories/SocialHistory.xsd', 10, 12)))

SocialHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=SocialHistory, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

SocialHistory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=SocialHistory, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SocialHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'SocialHabit')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/SocialHistories/SocialHistory.xsd', 10, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SocialHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SocialHistory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SocialHistory._Automaton = _BuildAutomaton_47()




Question._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'QuestionType'), CodedField, scope=Question, documentation='Question Type', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 12, 12)))

Question._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Response'), pyxb.binding.datatypes.string, scope=Question, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 17, 12)))

Question._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'QuestionText'), pyxb.binding.datatypes.string, scope=Question, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 18, 12)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 18, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Question._UseForTag(pyxb.namespace.ExpandedName(None, 'QuestionType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 12, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Question._UseForTag(pyxb.namespace.ExpandedName(None, 'Response')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 17, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Question._UseForTag(pyxb.namespace.ExpandedName(None, 'QuestionText')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 18, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Question._Automaton = _BuildAutomaton_48()




Score._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ScoreType'), CodedField, scope=Score, documentation='Score Type', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 28, 12)))

Score._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Value'), pyxb.binding.datatypes.string, scope=Score, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 33, 12)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Score._UseForTag(pyxb.namespace.ExpandedName(None, 'ScoreType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 28, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Score._UseForTag(pyxb.namespace.ExpandedName(None, 'Value')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 33, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Score._Automaton = _BuildAutomaton_49()




Level._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LevelType'), CodedField, scope=Level, documentation='Score Type', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 43, 12)))

Level._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Value'), pyxb.binding.datatypes.string, scope=Level, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 48, 12)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Level._UseForTag(pyxb.namespace.ExpandedName(None, 'LevelType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 43, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Level._UseForTag(pyxb.namespace.ExpandedName(None, 'Value')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 48, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Level._Automaton = _BuildAutomaton_50()




Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SurveyTime'), pyxb.binding.datatypes.dateTime, scope=Survey, documentation='When the survey was completed.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 58, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SurveyType'), CodedField, scope=Survey, documentation='Survey Type', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 63, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Questions'), CTD_ANON_23, scope=Survey, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 68, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Scores'), CTD_ANON_24, scope=Survey, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 75, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Levels'), CTD_ANON_25, scope=Survey, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 82, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredBy'), CodedField, scope=Survey, documentation='Who completed the survey', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 89, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EnteredAt'), Location, scope=Survey, documentation='Where the Survey was completed', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 94, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TypeOfTreatment'), pyxb.binding.datatypes.string, scope=Survey, documentation='Current Modality', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 100, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HDLocation'), pyxb.binding.datatypes.string, scope=Survey, documentation='If Current Modality = HD, where is it performed?', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 105, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Template'), pyxb.binding.datatypes.string, scope=Survey, documentation='This is currently only used to flag surveys which were submitted via the SharedHD project. Another field may be more appropriate.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 110, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdatedOn'), pyxb.binding.datatypes.dateTime, scope=Survey, documentation='Last Modified Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12)))

Survey._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalId'), STD_ANON_92, scope=Survey, documentation='Unique Identifier', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 68, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 75, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 82, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 89, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 94, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 100, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 105, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 110, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'SurveyTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 58, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'SurveyType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 63, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'Questions')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 68, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'Scores')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 75, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'Levels')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 82, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredBy')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 89, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 94, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'TypeOfTreatment')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 100, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'HDLocation')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 105, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'Template')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 110, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Survey._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Survey._Automaton = _BuildAutomaton_51()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Question'), Question, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 71, 24)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 71, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(None, 'Question')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 71, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_52()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Score'), Score, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 78, 24)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 78, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(None, 'Score')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 78, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_53()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Level'), Level, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 85, 24)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 85, 24))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(None, 'Level')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Surveys/Survey.xsd', 85, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_54()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_52, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 41, 24)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_53, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 52, 24)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_54, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 59, 24)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 41, 24))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 52, 24))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 59, 24))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 41, 24))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 52, 24))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 59, 24))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_55()




CF_DMD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_56, scope=CF_DMD, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 4, 3)))

CF_DMD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_57, scope=CF_DMD, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 11, 3)))

CF_DMD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_58, scope=CF_DMD, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 18, 3)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 4, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 11, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 18, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CF_DMD._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 4, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CF_DMD._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 11, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CF_DMD._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_DMD.xsd', 18, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CF_DMD._Automaton = _BuildAutomaton_56()




CF_EDTA_COD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_59, scope=CF_EDTA_COD, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 5, 12)))

CF_EDTA_COD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_60, scope=CF_EDTA_COD, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 12, 12)))

CF_EDTA_COD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_61, scope=CF_EDTA_COD, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 344, 12)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 5, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 12, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 344, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CF_EDTA_COD._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 5, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CF_EDTA_COD._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 12, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CF_EDTA_COD._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_COD.xsd', 344, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CF_EDTA_COD._Automaton = _BuildAutomaton_57()




CF_EDTA_PRD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_62, scope=CF_EDTA_PRD, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 5, 12)))

CF_EDTA_PRD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_63, scope=CF_EDTA_PRD, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 14, 12)))

CF_EDTA_PRD._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_64, scope=CF_EDTA_PRD, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 2946, 12)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 5, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 14, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 2946, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CF_EDTA_PRD._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 5, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CF_EDTA_PRD._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 14, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CF_EDTA_PRD._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_EDTA_PRD.xsd', 2946, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CF_EDTA_PRD._Automaton = _BuildAutomaton_58()




CF_HL7_0004._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_65, scope=CF_HL7_0004, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 4, 3)))

CF_HL7_0004._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_66, scope=CF_HL7_0004, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 11, 3)))

CF_HL7_0004._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_67, scope=CF_HL7_0004, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 67, 3)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 4, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 11, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 67, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CF_HL7_0004._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 4, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CF_HL7_0004._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 11, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CF_HL7_0004._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_0004.xsd', 67, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CF_HL7_0004._Automaton = _BuildAutomaton_59()




CF_HL7_00204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_68, scope=CF_HL7_00204, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 4, 3)))

CF_HL7_00204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_69, scope=CF_HL7_00204, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 11, 3)))

CF_HL7_00204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_70, scope=CF_HL7_00204, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 37, 3)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 4, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 11, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 37, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CF_HL7_00204._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 4, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CF_HL7_00204._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 11, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CF_HL7_00204._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00204.xsd', 37, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CF_HL7_00204._Automaton = _BuildAutomaton_60()




CF_HL7_00206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_71, scope=CF_HL7_00206, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 4, 3)))

CF_HL7_00206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_72, scope=CF_HL7_00206, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 11, 3)))

CF_HL7_00206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_73, scope=CF_HL7_00206, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 32, 3)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 4, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 11, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 32, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CF_HL7_00206._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 4, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CF_HL7_00206._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 11, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CF_HL7_00206._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_HL7_00206.xsd', 32, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CF_HL7_00206._Automaton = _BuildAutomaton_61()




CF_RR23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_74, scope=CF_RR23, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 4, 12)))

CF_RR23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_75, scope=CF_RR23, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 11, 12)))

CF_RR23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_76, scope=CF_RR23, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 78, 12)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 4, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 11, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 78, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CF_RR23._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 4, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CF_RR23._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 11, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CF_RR23._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR23.xsd', 78, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CF_RR23._Automaton = _BuildAutomaton_62()




CF_RR7_DISCHARGE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_77, scope=CF_RR7_DISCHARGE, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 4, 12)))

CF_RR7_DISCHARGE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_78, scope=CF_RR7_DISCHARGE, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 11, 12)))

CF_RR7_DISCHARGE._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_79, scope=CF_RR7_DISCHARGE, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 63, 12)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 4, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 11, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 63, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CF_RR7_DISCHARGE._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 4, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CF_RR7_DISCHARGE._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 11, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CF_RR7_DISCHARGE._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Discharge.xsd', 63, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CF_RR7_DISCHARGE._Automaton = _BuildAutomaton_63()




CF_RR7_TREATMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_80, scope=CF_RR7_TREATMENT, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 4, 12)))

CF_RR7_TREATMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_81, scope=CF_RR7_TREATMENT, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 11, 12)))

CF_RR7_TREATMENT._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_82, scope=CF_RR7_TREATMENT, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 273, 12)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 4, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 11, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 273, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CF_RR7_TREATMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 4, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CF_RR7_TREATMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 11, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CF_RR7_TREATMENT._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_RR7_Treatment.xsd', 273, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CF_RR7_TREATMENT._Automaton = _BuildAutomaton_64()




CF_SNOMED._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_83, scope=CF_SNOMED, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 4, 3)))

CF_SNOMED._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_84, scope=CF_SNOMED, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 11, 3)))

CF_SNOMED._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_85, scope=CF_SNOMED, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 18, 3)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 4, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 11, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 18, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CF_SNOMED._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 4, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CF_SNOMED._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 11, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CF_SNOMED._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CF_SNOMED.xsd', 18, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CF_SNOMED._Automaton = _BuildAutomaton_65()




Clinician._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_86, scope=Clinician, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 4, 12)))

Clinician._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_87, scope=Clinician, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 13, 12)))

Clinician._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_88, scope=Clinician, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 20, 12)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 4, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 13, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 20, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Clinician._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 4, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Clinician._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 13, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Clinician._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Clinician.xsd', 20, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Clinician._Automaton = _BuildAutomaton_66()




CodedField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_89, scope=CodedField, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 4, 3)))

CodedField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_90, scope=CodedField, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 11, 3)))

CodedField._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_91, scope=CodedField, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 18, 3)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 4, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 11, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 18, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CodedField._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 4, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CodedField._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 11, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CodedField._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CodedField.xsd', 18, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CodedField._Automaton = _BuildAutomaton_67()




DiagnosisCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_96, scope=DiagnosisCodeType, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 4, 3)))

DiagnosisCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_97, scope=DiagnosisCodeType, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 13, 3)))

DiagnosisCodeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_98, scope=DiagnosisCodeType, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 20, 3)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 4, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 13, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 20, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DiagnosisCodeType._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 4, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DiagnosisCodeType._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 13, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DiagnosisCodeType._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DiagnosisCodeType.xsd', 20, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DiagnosisCodeType._Automaton = _BuildAutomaton_68()




DrugProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Id'), CF_DMD, scope=DrugProduct, documentation='DM+D code for the drug', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 9, 3)))

DrugProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Generic'), STD_ANON_99, scope=DrugProduct, documentation='Generic name', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 14, 3)))

DrugProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), STD_ANON_100, scope=DrugProduct, documentation='Brand Name', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 25, 3)))

DrugProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Form'), CF_SNOMED, scope=DrugProduct, documentation='SNOMED Code and description', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 36, 3)))

DrugProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StrengthUnits'), CF_RR23, scope=DrugProduct, documentation='Units', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 41, 3)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 9, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 25, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 36, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 41, 3))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DrugProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'Id')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 9, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DrugProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'Generic')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 14, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DrugProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 25, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DrugProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'Form')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 36, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DrugProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'StrengthUnits')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/DrugProduct.xsd', 41, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DrugProduct._Automaton = _BuildAutomaton_69()




EthnicGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_101, scope=EthnicGroup, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 4, 12)))

EthnicGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_102, scope=EthnicGroup, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 16, 12)))

EthnicGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_103, scope=EthnicGroup, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 108, 12)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 4, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 16, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 108, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(EthnicGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 4, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(EthnicGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 16, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(EthnicGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/EthnicGroup.xsd', 108, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
EthnicGroup._Automaton = _BuildAutomaton_70()




FamilyDoctor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GPName'), pyxb.binding.datatypes.string, scope=FamilyDoctor, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 6, 12)))

FamilyDoctor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GPPracticeId'), STD_ANON_104, scope=FamilyDoctor, documentation='National GP Practice Code', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 7, 12)))

FamilyDoctor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GPId'), STD_ANON_105, scope=FamilyDoctor, documentation='National GP Code', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 19, 12)))

FamilyDoctor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Address'), Address, scope=FamilyDoctor, documentation='Practice Address', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 31, 12)))

FamilyDoctor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContactDetail'), ContactDetail, scope=FamilyDoctor, documentation='Practice Contact Information', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 36, 12)))

FamilyDoctor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Email'), pyxb.binding.datatypes.string, scope=FamilyDoctor, documentation='GP E-mail Address', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 41, 12)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 6, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 7, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 19, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 31, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 36, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 41, 12))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FamilyDoctor._UseForTag(pyxb.namespace.ExpandedName(None, 'GPName')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 6, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(FamilyDoctor._UseForTag(pyxb.namespace.ExpandedName(None, 'GPPracticeId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 7, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(FamilyDoctor._UseForTag(pyxb.namespace.ExpandedName(None, 'GPId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 19, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(FamilyDoctor._UseForTag(pyxb.namespace.ExpandedName(None, 'Address')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 31, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(FamilyDoctor._UseForTag(pyxb.namespace.ExpandedName(None, 'ContactDetail')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 36, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(FamilyDoctor._UseForTag(pyxb.namespace.ExpandedName(None, 'Email')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/FamilyDoctor.xsd', 41, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
FamilyDoctor._Automaton = _BuildAutomaton_71()




Language._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_106, scope=Language, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 4, 3)))

Language._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_107, scope=Language, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 15, 3)))

Language._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_108, scope=Language, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 970, 3)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 4, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 15, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 970, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Language._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 4, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Language._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 15, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Language._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Language.xsd', 970, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Language._Automaton = _BuildAutomaton_72()




Location._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_109, scope=Location, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 4, 12)))

Location._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_110, scope=Location, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 14, 12)))

Location._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_111, scope=Location, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 21, 12)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 4, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 14, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 21, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Location._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 4, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Location._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 14, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Location._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Location.xsd', 21, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Location._Automaton = _BuildAutomaton_73()




Occupation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_118, scope=Occupation, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 4, 12)))

Occupation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_119, scope=Occupation, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 15, 12)))

Occupation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_120, scope=Occupation, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 66, 12)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 4, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 15, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 66, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Occupation._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 4, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Occupation._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 15, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Occupation._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Occupation.xsd', 66, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Occupation._Automaton = _BuildAutomaton_74()




PVData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rrtstatus'), STD_ANON_121, scope=PVData, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 5, 12)))

PVData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'tpstatus'), STD_ANON_122, scope=PVData, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 16, 12)))

PVData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'diagnosisdate'), pyxb.binding.datatypes.date, scope=PVData, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 27, 12)))

PVData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'bloodgroup'), STD_ANON_123, scope=PVData, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 33, 12)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 5, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 16, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 27, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 33, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PVData._UseForTag(pyxb.namespace.ExpandedName(None, 'rrtstatus')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 5, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PVData._UseForTag(pyxb.namespace.ExpandedName(None, 'tpstatus')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 16, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PVData._UseForTag(pyxb.namespace.ExpandedName(None, 'diagnosisdate')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 27, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PVData._UseForTag(pyxb.namespace.ExpandedName(None, 'bloodgroup')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PVData.xsd', 33, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PVData._Automaton = _BuildAutomaton_75()




PatientNumbers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PatientNumber'), PatientNumber, scope=PatientNumbers, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 5, 12)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PatientNumbers._UseForTag(pyxb.namespace.ExpandedName(None, 'PatientNumber')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 5, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PatientNumbers._Automaton = _BuildAutomaton_76()




PatientNumber._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Number'), STD_ANON_124, scope=PatientNumber, documentation='Patient Identification Number', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 11, 12)))

PatientNumber._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Organization'), STD_ANON_125, scope=PatientNumber, documentation='Organisation that issued the number', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 23, 12)))

PatientNumber._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberType'), STD_ANON_126, scope=PatientNumber, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 88, 12)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PatientNumber._UseForTag(pyxb.namespace.ExpandedName(None, 'Number')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 11, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PatientNumber._UseForTag(pyxb.namespace.ExpandedName(None, 'Organization')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 23, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PatientNumber._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PatientNumber.xsd', 88, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PatientNumber._Automaton = _BuildAutomaton_77()




PersonalContactType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Name'), pyxb.binding.datatypes.string, scope=PersonalContactType, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 5, 12)))

PersonalContactType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContactDetails'), ContactDetail, scope=PersonalContactType, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 6, 12)))

PersonalContactType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Relationship'), pyxb.binding.datatypes.string, scope=PersonalContactType, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 7, 12)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 6, 12))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PersonalContactType._UseForTag(pyxb.namespace.ExpandedName(None, 'Name')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 5, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PersonalContactType._UseForTag(pyxb.namespace.ExpandedName(None, 'ContactDetails')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 6, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PersonalContactType._UseForTag(pyxb.namespace.ExpandedName(None, 'Relationship')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/PersonalContactType.xsd', 7, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PersonalContactType._Automaton = _BuildAutomaton_78()




ServiceId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingStandard'), STD_ANON_127, scope=ServiceId, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 4, 12)))

ServiceId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Code'), STD_ANON_128, scope=ServiceId, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 35, 12)))

ServiceId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), STD_ANON_129, scope=ServiceId, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 42, 12)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 4, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 35, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 42, 12))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ServiceId._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingStandard')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 4, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ServiceId._UseForTag(pyxb.namespace.ExpandedName(None, 'Code')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 35, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ServiceId._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ServiceId.xsd', 42, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ServiceId._Automaton = _BuildAutomaton_79()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ACC19'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_27, documentation='Date Access first used for Dialysis', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 14, 32)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ACC20'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_27, documentation='Date of Access Failure', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 20, 32)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ACC21'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_27, documentation='Date of Removal', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 26, 32)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ACC22'), pyxb.binding.datatypes.string, scope=CTD_ANON_27, documentation='Reason for Removal of Haemodialysis Access (HD Only) (RR49)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 32, 32)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ACC30'), STD_ANON_130, scope=CTD_ANON_27, documentation='PD Catheter Insertion Technique (PD Only) (RR143)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 38, 32)))

CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ACC40'), pyxb.binding.datatypes.string, scope=CTD_ANON_27, documentation='Reason for Removal of PD Catheter (PD Only) (RR29)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 68, 32)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 14, 32))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 20, 32))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 26, 32))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 32, 32))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 38, 32))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 68, 32))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'ACC19')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 14, 32))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'ACC20')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 20, 32))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'ACC21')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 26, 32))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'ACC22')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 32, 32))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'ACC30')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 38, 32))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(None, 'ACC40')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 68, 32))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_80()




DialysisSession._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SymtomaticHypotension'), RRYesNo, scope=DialysisSession, documentation='Symptomatic hypotension (QHD19)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 21, 20)))

DialysisSession._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VascularAccess'), CodedField, scope=DialysisSession, documentation='Vascular Access Used (QHD20)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 27, 20)))

DialysisSession._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VascularAccessSite'), CodedField, scope=DialysisSession, documentation='Vascular Access Site (QHD21)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 33, 20)))

DialysisSession._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TimeDialysed'), pyxb.binding.datatypes.integer, scope=DialysisSession, documentation='Time Dialysed in Minutes (QHD31)', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 39, 20)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 24, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 21, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 27, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 33, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 39, 20))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DialysisSession._UseForTag(pyxb.namespace.ExpandedName(None, 'ProcedureType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 12, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DialysisSession._UseForTag(pyxb.namespace.ExpandedName(None, 'ProcedureTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 18, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DialysisSession._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 24, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DialysisSession._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DialysisSession._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DialysisSession._UseForTag(pyxb.namespace.ExpandedName(None, 'SymtomaticHypotension')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 21, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DialysisSession._UseForTag(pyxb.namespace.ExpandedName(None, 'VascularAccess')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 27, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DialysisSession._UseForTag(pyxb.namespace.ExpandedName(None, 'VascularAccessSite')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 33, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DialysisSession._UseForTag(pyxb.namespace.ExpandedName(None, 'TimeDialysed')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/DialysisSessions/DialysisSession.xsd', 39, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DialysisSession._Automaton = _BuildAutomaton_81()




TransplantProcedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DonorType'), STD_ANON_50, scope=TransplantProcedure, documentation='NHSBT Type', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 14, 20)))

TransplantProcedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DateRegistered'), pyxb.binding.datatypes.date, scope=TransplantProcedure, documentation='Date Registered for Transplantation', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 28, 20)))

TransplantProcedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FailureDate'), pyxb.binding.datatypes.date, scope=TransplantProcedure, documentation='Failure Date', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 35, 20)))

TransplantProcedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ColdIschaemicTime'), pyxb.binding.datatypes.string, scope=TransplantProcedure, documentation='Cold ischaemic time in Minutes', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 42, 20)))

TransplantProcedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HLAMismatchA'), pyxb.binding.datatypes.string, scope=TransplantProcedure, documentation='Mismatch A', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 49, 20)))

TransplantProcedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HLAMismatchB'), pyxb.binding.datatypes.string, scope=TransplantProcedure, documentation='Mismatch B', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 56, 20)))

TransplantProcedure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HLAMismatchC'), pyxb.binding.datatypes.string, scope=TransplantProcedure, documentation='Mismatch DR', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 63, 20)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 24, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 14, 20))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 28, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 35, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 42, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 49, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 56, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 63, 20))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'ProcedureType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 12, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'ProcedureTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 18, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 24, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'DonorType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 14, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'DateRegistered')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 28, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'FailureDate')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 35, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'ColdIschaemicTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 42, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'HLAMismatchA')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 49, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'HLAMismatchB')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 56, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TransplantProcedure._UseForTag(pyxb.namespace.ExpandedName(None, 'HLAMismatchC')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Transplants/Transplant.xsd', 63, 20))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TransplantProcedure._Automaton = _BuildAutomaton_82()




Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FromTime'), pyxb.binding.datatypes.date, scope=Address, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 23, 12)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ToTime'), pyxb.binding.datatypes.date, scope=Address, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 24, 12)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Street'), STD_ANON_51, scope=Address, documentation='Everything prior to the Town in the Address', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 25, 12)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Town'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 35, 12)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'County'), pyxb.binding.datatypes.string, scope=Address, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 36, 12)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Postcode'), PostCode, scope=Address, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 37, 12)))

Address._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Country'), CTD_ANON_26, scope=Address, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 38, 12)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 23, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 24, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 25, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 35, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 36, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 37, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 38, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'FromTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 23, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'ToTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 24, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'Street')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 25, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'Town')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 35, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'County')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 36, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'Postcode')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 37, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Address._UseForTag(pyxb.namespace.ExpandedName(None, 'Country')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Address.xsd', 38, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Address._Automaton = _BuildAutomaton_83()




ContactDetail._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Value'), STD_ANON_93, scope=ContactDetail, documentation='The contact detail = phone number or email id', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 4, 3)))

ContactDetail._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Comments'), STD_ANON_94, scope=ContactDetail, documentation='', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 14, 3)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 4, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 14, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ContactDetail._UseForTag(pyxb.namespace.ExpandedName(None, 'Value')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 4, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ContactDetail._UseForTag(pyxb.namespace.ExpandedName(None, 'Comments')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/ContactDetail.xsd', 14, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ContactDetail._Automaton = _BuildAutomaton_84()




Name._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Prefix'), STD_ANON_112, scope=Name, documentation='Prefix or title e.g. Mr, Mrs etc', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 4, 12)))

Name._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Family'), STD_ANON_113, scope=Name, documentation='Surname or family name. Mandatory on Usual name', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 14, 12)))

Name._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Given'), STD_ANON_114, scope=Name, documentation='Given name. Mandatory for a Usual name.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 25, 12)))

Name._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OtherGivenNames'), STD_ANON_115, scope=Name, documentation='2nd and other given name', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 36, 12)))

Name._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Suffix'), STD_ANON_116, scope=Name, documentation='Suffix e.g. Jnr, Snr etc.', location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 46, 12)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 4, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 14, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 25, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 36, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 46, 12))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Name._UseForTag(pyxb.namespace.ExpandedName(None, 'Prefix')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 4, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Name._UseForTag(pyxb.namespace.ExpandedName(None, 'Family')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 14, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Name._UseForTag(pyxb.namespace.ExpandedName(None, 'Given')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 25, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Name._UseForTag(pyxb.namespace.ExpandedName(None, 'OtherGivenNames')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 36, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Name._UseForTag(pyxb.namespace.ExpandedName(None, 'Suffix')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/Name.xsd', 46, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Name._Automaton = _BuildAutomaton_85()




VascularAccess._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Attributes'), CTD_ANON_27, scope=VascularAccess, location=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 11, 20)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 24, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 11, 20))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(VascularAccess._UseForTag(pyxb.namespace.ExpandedName(None, 'ProcedureType')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 12, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VascularAccess._UseForTag(pyxb.namespace.ExpandedName(None, 'ProcedureTime')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 18, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VascularAccess._UseForTag(pyxb.namespace.ExpandedName(None, 'EnteredAt')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Procedures/Procedure.xsd', 24, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VascularAccess._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdatedOn')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 4, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VascularAccess._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalId')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/Types/CommonMetadata.xsd', 9, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VascularAccess._UseForTag(pyxb.namespace.ExpandedName(None, 'Attributes')), pyxb.utils.utility.Location('file:///home/runner/work/resources/resources/schema/ukrdc/VascularAccesses/VascularAccess.xsd', 11, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VascularAccess._Automaton = _BuildAutomaton_86()

