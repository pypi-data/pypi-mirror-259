# Copyright Â© 2023 pkeorley
#
# This source code is licensed under the MIT license found in the LICENSE
# file in the root directory of this source tree.
from typing import Literal

from lastfmxpy.exeptions import LFPPanic
from lastfmxpy.literals import Autocorrect
from lastfmxpy.params.base_classes import BaseTrackParams
from lastfmxpy.utils import Utils


class AddTags(BaseTrackParams):
    def __init__(
            self,
            artist: str,
            track: str,
            tags: list[str],
            api_key: str = None,
            api_sig: str = None,
            sk: str = None
    ):
        """
        Tag an album using a list of user supplied tags.
        :param artist: The artist name
        :param track: The track name
        :param tags: List of user supplied tags to apply to this track. Accepts a maximum of 10 tags.
        :param api_key: A Last.fm API key.
        :param api_sig:  A Last.fm method signature. See authentication (https://www.last.fm/api/authentication) for more information.
        :param sk: A session key generated by authenticating a user via the authentication protocol.
        """
        super().__init__()

        self.artist = artist
        self.track = track
        self.tags = tags
        self.api_key = api_key
        self.api_sig = api_sig
        self.sk = sk

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "artist": self.artist,
            "track": self.track,
            "tags": ",".join(self.tags),
            "api_key": self.api_key,
            "api_sig": self.api_sig,
            "sk": self.sk
        })


class GetCorrection(BaseTrackParams):
    def __init__(
            self,
            artist: str,
            track: str,
            api_key: str = None
    ):
        """
        Use the last.fm corrections data to check whether the supplied track has a correction to a canonical track
        :param artist: The artist name to correct.
        :param track: The track name to correct.
        :param api_key: A Last.fm API key.
        """
        super().__init__()

        self.artist = artist
        self.track = track
        self.api_key = api_key

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "artist": self.artist,
            "track": self.track,
            "api_key": self.api_key
        })


class GetInfo(BaseTrackParams):
    def __init__(
            self,
            artist: str = None,
            track: str = None,
            mbid: str = None,
            username: str = None,
            autocorrect: Autocorrect = None,
            api_key: str = None
    ):
        """
        Get the metadata for a track on Last.fm using the artist/track name or a musicbrainz id.
        :param artist: The artist name
        :param track: The track name
        :param mbid: The musicbrainz id for the track
        :param username:  The username for the context of the request. If supplied, the user's playcount for this track and whether they have loved the track is included in the response.
        :param autocorrect: Transform misspelled artist and track names into correct artist and track names, returning the correct version instead. The corrected artist and track name will be returned in the response.
        :param api_key: A Last.fm API key.
        """
        super().__init__()

        if not any((
            all((artist, track)),
            mbid
        )):
            raise LFPPanic("You must meet one of these conditions: fill in 'artist' and 'track' OR specify 'mbid'")

        self.artist = artist
        self.track = track
        self.mbid = mbid
        self.username = username
        self.autocorrect = autocorrect
        self.api_key = api_key

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "artist": self.artist,
            "track": self.track,
            "mbid": self.mbid,
            "username": self.username,
            "autocorrect": self.autocorrect,
            "api_key": self.api_key
        })


class GetSimilar(BaseTrackParams):
    def __init__(
            self,
            artist: str = None,
            track: str = None,
            mbid: str = None,
            autocorrect: Autocorrect = None,
            limit: str | int = None,
            api_key: str = None
    ):
        """
        Get the similar tracks for this track on Last.fm, based on listening data.
        :param artist: The artist name
        :param track: The track name
        :param mbid: The musicbrainz id for the track
        :param autocorrect: Transform misspelled artist and track names into correct artist and track names, returning the correct version instead. The corrected artist and track name will be returned in the response.
        :param limit: Maximum number of similar tracks to return
        :param api_key: A Last.fm API key.
        """
        super().__init__()

        if not any((
                all((artist, track)),
                mbid
        )):
            raise LFPPanic("You must meet one of these conditions: fill in 'artist' and 'track' OR specify 'mbid'")

        self.artist = artist
        self.track = track
        self.mbid = mbid
        self.limit = limit
        self.autocorrect = autocorrect
        self.api_key = api_key

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "artist": self.artist,
            "track": self.track,
            "mbid": self.mbid,
            "limit": self.limit,
            "autocorrect": self.autocorrect,
            "api_key": self.api_key
        })


class GetTags(BaseTrackParams):
    def __init__(
            self,
            artist: str = None,
            track: str = None,
            mbid: str = None,
            autocorrect: Autocorrect = None,
            user: str = None,
            api_key: str = None
    ):
        """
        Get the tags applied by an individual user to a track on Last.fm. To retrieve the list of top tags applied to a track by all users use track.getTopTags.
        :param artist: The artist name
        :param track: The track name
        :param mbid: The musicbrainz id for the track
        :param user: If called in non-authenticated mode you must specify the user to look up
        :param autocorrect: Transform misspelled artist and track names into correct artist and track names, returning the correct version instead. The corrected artist and track name will be returned in the response.
        :param api_key: A Last.fm API key.
        """
        super().__init__()

        if not any((
                all((artist, track)),
                mbid
        )):
            raise LFPPanic("You must meet one of these conditions: fill in 'artist' and 'track' OR specify 'mbid'")

        self.artist = artist
        self.track = track
        self.mbid = mbid
        self.user = user
        self.autocorrect = autocorrect
        self.api_key = api_key

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "artist": self.artist,
            "track": self.track,
            "mbid": self.mbid,
            "username": self.user,
            "autocorrect": self.autocorrect,
            "api_key": self.api_key
        })


class GetTopTags(BaseTrackParams):
    def __init__(
            self,
            artist: str = None,
            track: str = None,
            mbid: str = None,
            autocorrect: Autocorrect = None,
            api_key: str = None
    ):
        """
        Get the top tags for this track on Last.fm, ordered by tag count. Supply either track & artist name or mbid.
        :param artist: The artist name
        :param track: The track name
        :param mbid: The musicbrainz id for the track
        :param autocorrect: Transform misspelled artist and track names into correct artist and track names, returning the correct version instead. The corrected artist and track name will be returned in the response.
        :param api_key: A Last.fm API key.
        """
        super().__init__()

        if not any((
                all((artist, track)),
                mbid
        )):
            raise LFPPanic("You must meet one of these conditions: fill in 'artist' and 'track' OR specify 'mbid'")

        self.artist = artist
        self.track = track
        self.mbid = mbid
        self.autocorrect = autocorrect
        self.api_key = api_key

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "artist": self.artist,
            "track": self.track,
            "mbid": self.mbid,
            "autocorrect": self.autocorrect,
            "api_key": self.api_key
        })


class Love(BaseTrackParams):
    def __init__(
            self,
            artist: str,
            track: str,
            api_key: str = None,
            api_sig: str = None,
            sk: str = None
    ):
        """
        Love a track for a user profile.
        :param artist: An artist name (utf8 encoded)
        :param track: A track name (utf8 encoded)
        :param api_key: A Last.fm API key.
        :param api_sig: A Last.fm method signature. See authentication (https://www.last.fm/api/authentication) for more information.
        :param sk: A session key generated by authenticating a user via the authentication protocol.
        """
        super().__init__()

        self.artist = artist
        self.track = track
        self.api_key = api_key
        self.api_sig = api_sig
        self.sk = sk

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "artist": self.artist,
            "track": self.track,
            "api_key": self.api_key,
            "api_sig": self.api_sig,
            "sk": self.sk
        })


class RemoveTag(BaseTrackParams):
    def __init__(
            self,
            artist: str,
            track: str,
            tag: str,
            api_key: str = None,
            api_sig: str = None,
            sk: str = None
    ):
        """
        Remove a user's tag from a track
        :param artist: An artist name (utf8 encoded)
        :param track: A track name (utf8 encoded)
        :param tag: A single user tag to remove from this track.
        :param api_key: A Last.fm API key.
        :param api_sig: A Last.fm method signature. See authentication (https://www.last.fm/api/authentication) for more information.
        :param sk: A session key generated by authenticating a user via the authentication protocol.
        """
        super().__init__()

        self.artist = artist
        self.track = track
        self.tag = tag
        self.api_key = api_key
        self.api_sig = api_sig
        self.sk = sk

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "artist": self.artist,
            "track": self.track,
            "tag": self.tag,
            "api_key": self.api_key,
            "api_sig": self.api_sig,
            "sk": self.sk
        })


class Search(BaseTrackParams):
    def __init__(
            self,
            track: str,
            artist: str = None,
            limit: str | int = None,
            page: str | int = None,
            api_key: str = None
    ):
        """
        Search for a track by track name. Returns track matches sorted by relevance.
        :param track: The track name
        :param artist: Narrow your search by specifying an artist.
        :param limit: The number of results to fetch per page. Defaults to 30
        :param page: The page number to fetch. Defaults to first page.
        :param api_key: A Last.fm API key.
        """

        super().__init__()

        self.track = track
        self.artist = artist
        self.limit = limit
        self.page = page
        self.api_key = api_key

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "track": self.track,
            "artist": self.artist,
            "limit": self.limit,
            "page": self.page,
            "api_key": self.api_key
        })


class Scrobble(BaseTrackParams):
    """
    Used to add a track-play to a user's profile. Scrobble a track, or a batch of tracks.

    :param artist: The artist name
    :param track: The track name
    :param timestamp: The time the track started playing, in UNIX timestamp format
    :param sk: A session key generated by authenticating a user via the authentication protocol
    :param album: The album name
    :param context: Sub-client version (not public, only enabled for certain API keys)
    :param stream_id: The stream id for this track received from the radio.getPlaylist service, if scrobbling Last.fm radio
    :param chosen_by_user: Set to 1 if the user chose this song, or 0 if the song was chosen by someone else
    :param track_number: The track number of the track on the album
    :param mbid: The MusicBrainz Track ID
    :param album_artist: The album artist - if this differs from the track artist
    :param duration: The length of the track in seconds
    :param api_key: A Last.fm API key
    :param api_sig: A Last.fm method signature. See authentication for more information
    """
    def __init__(
            self,
            artist: str,
            track: str,
            timestamp: int | float,
            sk: str,
            album: str = None,
            context: str = None,
            stream_id: str = None,
            chosen_by_user: Literal[0, 1] = 0,
            track_number: str | int = None,
            mbid: str = None,
            album_artist: str = None,
            duration: str | int = None,
            api_key: str = None,
            api_sig: str = None,
    ):
        self.artist = artist
        self.track = track
        self.timestamp = round(timestamp)
        self.sk = sk
        self.album = album
        self.context = context
        self.stream_id = stream_id
        self.chosen_by_user = chosen_by_user
        self.track_number = track_number
        self.mbid = mbid
        self.album_artist = album_artist
        self.duration = duration
        self.api_key = api_key
        self.api_sig = api_sig
        self._index = 0
        super().__init__()

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            f"artist[{self._index}]": self.artist,
            f"track[{self._index}]": self.track,
            f"timestamp[{self._index}]": self.timestamp,
            f"album[{self._index}]": self.album,
            f"context[{self._index}]": self.context,
            f"streamId[{self._index}]": self.stream_id,
            f"chosenByUser[{self._index}]": self.chosen_by_user,
            f"trackNumber[{self._index}]": self.track_number,
            f"albumArtist[{self._index}]": self.album_artist,
            f"duration[{self._index}]": self.duration,
            f"mbid[{self._index}]": self.mbid,
            "api_key": self.api_key,
            "api_sig": self.api_sig,
            "sk": self.sk
        })


class Unlove(BaseTrackParams):
    def __init__(
            self,
            artist: str,
            track: str,
            api_key: str = None,
            api_sig: str = None,
            sk: str = None
    ):
        """
        UnLove a track for a user profile.
        :param artist: An artist name (utf8 encoded)
        :param track: A track name (utf8 encoded)
        :param api_key: A Last.fm API key.
        :param api_sig: A Last.fm method signature. See authentication (https://www.last.fm/api/authentication) for more information.
        :param sk: A session key generated by authenticating a user via the authentication protocol.
        """
        super().__init__()

        self.artist = artist
        self.track = track
        self.api_key = api_key
        self.api_sig = api_sig
        self.sk = sk

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "artist": self.artist,
            "track": self.track,
            "api_key": self.api_key,
            "api_sig": self.api_sig,
            "sk": self.sk
        })


class UpdateNowPlaying(BaseTrackParams):
    def __init__(
            self,
            artist: str,
            track: str,
            album: str = None,
            track_number: str | int = None,
            context: str = None,
            mbid: str = None,
            duration: str | int = None,
            album_artist: str = None,
            api_key: str = None,
            api_sig: str = None,
            sk: str = None,
    ):
        """
        Used to notify Last.fm that a user has started listening to a track. Parameter names are case sensitive.
        :param artist: The artist name.
        :param track: The track name.
        :param album: The album name
        :param track_number: The track number of the track on the album.
        :param context: Sub-client version (not public, only enabled for certain API keys)
        :param mbid: The MusicBrainz Track ID.
        :param duration: The length of the track in seconds.
        :param album_artist: The album artist - if this differs from the track artist.
        :param api_key: A Last.fm API key.
        :param api_sig: A Last.fm method signature. See authentication (https://www.last.fm/api/authentication) for more information.
        :param sk:  A session key generated by authenticating a user via the authentication protocol.
        """
        super().__init__()

        self.artist = artist
        self.track = track
        self.album = album
        self.track_number = track_number
        self.context = context
        self.mbid = mbid
        self.duration = duration
        self.album_artist = album_artist
        self.api_key = api_key
        self.api_sig = api_sig
        self.sk = sk

    def to_json(self) -> dict:
        return Utils.remove_none_values({
            "artist": self.artist,
            "track": self.track,
            "album": self.album,
            "trackNumber": self.track_number,
            "context": self.context,
            "mbid": self.mbid,
            "duration": self.duration,
            "albumArtist": self.album_artist,
            "api_key": self.api_key,
            "api_sig": self.api_sig,
            "sk": self.sk
        })
