# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .spf import Spf

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Envelope(pydantic.BaseModel):
    to: typing.Optional[str] = None
    from_: typing.Optional[str] = pydantic.Field(alias="from", default=None)
    helo_domain: typing.Optional[str] = None
    remote_ip: typing.Optional[str] = None
    recipients: typing.Optional[typing.List[str]] = None
    tls: typing.Optional[bool] = None
    tls_cipher: typing.Optional[str] = None
    md_5: typing.Optional[str] = pydantic.Field(alias="md5", default=None)
    spf: typing.Optional[Spf] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
