# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...core.request_options import RequestOptions
from .types.message import Message

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MessageClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(
        self, message_id: typing.Optional[str], *, request_options: typing.Optional[RequestOptions] = None
    ) -> Message:
        """
        Get an Athena message by ID.
        Returns an Athena message final output.

        Parameters:
            - message_id: typing.Optional[str].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v0/athena/agent/{jsonable_encoder(message_id)}"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Message, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def send(
        self,
        *,
        content: str,
        conversation_id: typing.Optional[str] = OMIT,
        user_id: typing.Optional[str] = OMIT,
        workspace_id: typing.Optional[str] = OMIT,
        sdataset_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        tools: typing.Optional[typing.Sequence[str]] = OMIT,
        model: typing.Optional[str] = OMIT,
        documents: typing.Optional[typing.Sequence[str]] = OMIT,
        config: typing.Dict[str, typing.Any],
        additional_context: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Message:
        """
        Send a message to Athena.
        Returns an Athena message with ID, content and final output.

        Parameters:
            - content: str.

            - conversation_id: typing.Optional[str].

            - user_id: typing.Optional[str].

            - workspace_id: typing.Optional[str].

            - sdataset_ids: typing.Optional[typing.Sequence[str]].

            - tools: typing.Optional[typing.Sequence[str]].

            - model: typing.Optional[str].

            - documents: typing.Optional[typing.Sequence[str]].

            - config: typing.Dict[str, typing.Any].

            - additional_context: typing.Optional[str].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        """
        _request: typing.Dict[str, typing.Any] = {"content": content, "config": config}
        if conversation_id is not OMIT:
            _request["conversation_id"] = conversation_id
        if user_id is not OMIT:
            _request["user_id"] = user_id
        if workspace_id is not OMIT:
            _request["workspace_id"] = workspace_id
        if sdataset_ids is not OMIT:
            _request["sdataset_ids"] = sdataset_ids
        if tools is not OMIT:
            _request["tools"] = tools
        if model is not OMIT:
            _request["model"] = model
        if documents is not OMIT:
            _request["documents"] = documents
        if additional_context is not OMIT:
            _request["additional_context"] = additional_context
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v0/athena/agent"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Message, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMessageClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(
        self, message_id: typing.Optional[str], *, request_options: typing.Optional[RequestOptions] = None
    ) -> Message:
        """
        Get an Athena message by ID.
        Returns an Athena message final output.

        Parameters:
            - message_id: typing.Optional[str].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/v0/athena/agent/{jsonable_encoder(message_id)}"
            ),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Message, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def send(
        self,
        *,
        content: str,
        conversation_id: typing.Optional[str] = OMIT,
        user_id: typing.Optional[str] = OMIT,
        workspace_id: typing.Optional[str] = OMIT,
        sdataset_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        tools: typing.Optional[typing.Sequence[str]] = OMIT,
        model: typing.Optional[str] = OMIT,
        documents: typing.Optional[typing.Sequence[str]] = OMIT,
        config: typing.Dict[str, typing.Any],
        additional_context: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Message:
        """
        Send a message to Athena.
        Returns an Athena message with ID, content and final output.

        Parameters:
            - content: str.

            - conversation_id: typing.Optional[str].

            - user_id: typing.Optional[str].

            - workspace_id: typing.Optional[str].

            - sdataset_ids: typing.Optional[typing.Sequence[str]].

            - tools: typing.Optional[typing.Sequence[str]].

            - model: typing.Optional[str].

            - documents: typing.Optional[typing.Sequence[str]].

            - config: typing.Dict[str, typing.Any].

            - additional_context: typing.Optional[str].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        """
        _request: typing.Dict[str, typing.Any] = {"content": content, "config": config}
        if conversation_id is not OMIT:
            _request["conversation_id"] = conversation_id
        if user_id is not OMIT:
            _request["user_id"] = user_id
        if workspace_id is not OMIT:
            _request["workspace_id"] = workspace_id
        if sdataset_ids is not OMIT:
            _request["sdataset_ids"] = sdataset_ids
        if tools is not OMIT:
            _request["tools"] = tools
        if model is not OMIT:
            _request["model"] = model
        if documents is not OMIT:
            _request["documents"] = documents
        if additional_context is not OMIT:
            _request["additional_context"] = additional_context
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/v0/athena/agent"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Message, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
