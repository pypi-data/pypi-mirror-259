# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class AutoInvestApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_lending_auto_invest_all_asset_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query all source asset and target asset (USER_DATA)  # noqa: E501

        Query all source assets and target assets  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_all_asset_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200242
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_all_asset_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_all_asset_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_all_asset_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query all source asset and target asset (USER_DATA)  # noqa: E501

        Query all source assets and target assets  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_all_asset_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200242
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_all_asset_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_all_asset_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_all_asset_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/all/asset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200242',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_history_list_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query subscription transaction history  # noqa: E501

        Query subscription transaction history of a plan  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_history_list_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int plan_id:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param float target_asset:
        :param str plan_type:
        :param int size: Default:10 Max:100
        :param int current: Current querying page. Start from 1. Default:1
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200248]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_history_list_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_history_list_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_history_list_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query subscription transaction history  # noqa: E501

        Query subscription transaction history of a plan  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_history_list_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int plan_id:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param float target_asset:
        :param str plan_type:
        :param int size: Default:10 Max:100
        :param int current: Current querying page. Start from 1. Default:1
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200248]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'plan_id', 'start_time', 'end_time', 'target_asset', 'plan_type', 'size', 'current', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_history_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_history_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_history_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'plan_id' in params:
            query_params.append(('planId', params['plan_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'target_asset' in params:
            query_params.append(('targetAsset', params['target_asset']))  # noqa: E501
        if 'plan_type' in params:
            query_params.append(('planType', params['plan_type']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/history/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200248]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_index_info_get(self, index_id, timestamp, signature, **kwargs):  # noqa: E501
        """Query Index Details(USER_DATA)  # noqa: E501

        Query index details  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_index_info_get(index_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200249
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_index_info_get_with_http_info(index_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_index_info_get_with_http_info(index_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_index_info_get_with_http_info(self, index_id, timestamp, signature, **kwargs):  # noqa: E501
        """Query Index Details(USER_DATA)  # noqa: E501

        Query index details  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_index_info_get_with_http_info(index_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200249
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_id', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_index_info_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_id' is set
        if ('index_id' not in params or
                params['index_id'] is None):
            raise ValueError("Missing the required parameter `index_id` when calling `sapi_v1_lending_auto_invest_index_info_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_index_info_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_index_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'index_id' in params:
            query_params.append(('indexId', params['index_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/index/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200249',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_index_user_summary_get(self, index_id, timestamp, signature, **kwargs):  # noqa: E501
        """Query Index Linked Plan Position Details(USER_DATA)  # noqa: E501

        Details on users Index-Linked plan position details  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_index_user_summary_get(index_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200250
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_index_user_summary_get_with_http_info(index_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_index_user_summary_get_with_http_info(index_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_index_user_summary_get_with_http_info(self, index_id, timestamp, signature, **kwargs):  # noqa: E501
        """Query Index Linked Plan Position Details(USER_DATA)  # noqa: E501

        Details on users Index-Linked plan position details  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_index_user_summary_get_with_http_info(index_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200250
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_id', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_index_user_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_id' is set
        if ('index_id' not in params or
                params['index_id'] is None):
            raise ValueError("Missing the required parameter `index_id` when calling `sapi_v1_lending_auto_invest_index_user_summary_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_index_user_summary_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_index_user_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'index_id' in params:
            query_params.append(('indexId', params['index_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/index/user-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200250',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_one_off_post(self, source_type, subscription_amount, source_asset, timestamp, signature, **kwargs):  # noqa: E501
        """One Time Transaction(TRADE)  # noqa: E501

        One time transaction  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_one_off_post(source_type, subscription_amount, source_asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_type: (required)
        :param float subscription_amount: (required)
        :param str source_asset: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str request_id:
        :param bool flexible_allowed_to_use:
        :param int plan_id:
        :param int index_id:
        :param list[Details2] details:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200251
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_one_off_post_with_http_info(source_type, subscription_amount, source_asset, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_one_off_post_with_http_info(source_type, subscription_amount, source_asset, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_one_off_post_with_http_info(self, source_type, subscription_amount, source_asset, timestamp, signature, **kwargs):  # noqa: E501
        """One Time Transaction(TRADE)  # noqa: E501

        One time transaction  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_one_off_post_with_http_info(source_type, subscription_amount, source_asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_type: (required)
        :param float subscription_amount: (required)
        :param str source_asset: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str request_id:
        :param bool flexible_allowed_to_use:
        :param int plan_id:
        :param int index_id:
        :param list[Details2] details:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200251
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_type', 'subscription_amount', 'source_asset', 'timestamp', 'signature', 'request_id', 'flexible_allowed_to_use', 'plan_id', 'index_id', 'details', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_one_off_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_type' is set
        if ('source_type' not in params or
                params['source_type'] is None):
            raise ValueError("Missing the required parameter `source_type` when calling `sapi_v1_lending_auto_invest_one_off_post`")  # noqa: E501
        # verify the required parameter 'subscription_amount' is set
        if ('subscription_amount' not in params or
                params['subscription_amount'] is None):
            raise ValueError("Missing the required parameter `subscription_amount` when calling `sapi_v1_lending_auto_invest_one_off_post`")  # noqa: E501
        # verify the required parameter 'source_asset' is set
        if ('source_asset' not in params or
                params['source_asset'] is None):
            raise ValueError("Missing the required parameter `source_asset` when calling `sapi_v1_lending_auto_invest_one_off_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_one_off_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_one_off_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'source_type' in params:
            query_params.append(('sourceType', params['source_type']))  # noqa: E501
        if 'request_id' in params:
            query_params.append(('requestId', params['request_id']))  # noqa: E501
        if 'subscription_amount' in params:
            query_params.append(('subscriptionAmount', params['subscription_amount']))  # noqa: E501
        if 'source_asset' in params:
            query_params.append(('sourceAsset', params['source_asset']))  # noqa: E501
        if 'flexible_allowed_to_use' in params:
            query_params.append(('flexibleAllowedToUse', params['flexible_allowed_to_use']))  # noqa: E501
        if 'plan_id' in params:
            query_params.append(('planId', params['plan_id']))  # noqa: E501
        if 'index_id' in params:
            query_params.append(('indexId', params['index_id']))  # noqa: E501
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
            collection_formats['details'] = 'multi'  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/one-off', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200251',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_one_off_status_get(self, transaction_id, timestamp, signature, **kwargs):  # noqa: E501
        """Query One-Time Transaction Status (USER_DATA)  # noqa: E501

        Transaction status for one-time transaction  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_one_off_status_get(transaction_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int transaction_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str request_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200252
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_one_off_status_get_with_http_info(transaction_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_one_off_status_get_with_http_info(transaction_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_one_off_status_get_with_http_info(self, transaction_id, timestamp, signature, **kwargs):  # noqa: E501
        """Query One-Time Transaction Status (USER_DATA)  # noqa: E501

        Transaction status for one-time transaction  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_one_off_status_get_with_http_info(transaction_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int transaction_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str request_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200252
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transaction_id', 'timestamp', 'signature', 'request_id', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_one_off_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transaction_id' is set
        if ('transaction_id' not in params or
                params['transaction_id'] is None):
            raise ValueError("Missing the required parameter `transaction_id` when calling `sapi_v1_lending_auto_invest_one_off_status_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_one_off_status_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_one_off_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'transaction_id' in params:
            query_params.append(('transactionId', params['transaction_id']))  # noqa: E501
        if 'request_id' in params:
            query_params.append(('requestId', params['request_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/one-off/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200252',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_plan_add_post(self, source_type, plan_type, subscription_amount, subscription_cycle, subscription_start_time, source_asset, details, timestamp, signature, **kwargs):  # noqa: E501
        """Investment plan creation (USER_DATA)  # noqa: E501

        Post an investment plan creation  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_plan_add_post(source_type, plan_type, subscription_amount, subscription_cycle, subscription_start_time, source_asset, details, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_type: (required)
        :param str plan_type: (required)
        :param float subscription_amount: (required)
        :param str subscription_cycle: (required)
        :param int subscription_start_time: (required)
        :param str source_asset: (required)
        :param list[Details] details: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str request_id:
        :param int index_id:
        :param int subscription_start_day:
        :param str subscription_start_weekday:
        :param bool flexible_allowed_to_use:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200244
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_plan_add_post_with_http_info(source_type, plan_type, subscription_amount, subscription_cycle, subscription_start_time, source_asset, details, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_plan_add_post_with_http_info(source_type, plan_type, subscription_amount, subscription_cycle, subscription_start_time, source_asset, details, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_plan_add_post_with_http_info(self, source_type, plan_type, subscription_amount, subscription_cycle, subscription_start_time, source_asset, details, timestamp, signature, **kwargs):  # noqa: E501
        """Investment plan creation (USER_DATA)  # noqa: E501

        Post an investment plan creation  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_plan_add_post_with_http_info(source_type, plan_type, subscription_amount, subscription_cycle, subscription_start_time, source_asset, details, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_type: (required)
        :param str plan_type: (required)
        :param float subscription_amount: (required)
        :param str subscription_cycle: (required)
        :param int subscription_start_time: (required)
        :param str source_asset: (required)
        :param list[Details] details: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str request_id:
        :param int index_id:
        :param int subscription_start_day:
        :param str subscription_start_weekday:
        :param bool flexible_allowed_to_use:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200244
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_type', 'plan_type', 'subscription_amount', 'subscription_cycle', 'subscription_start_time', 'source_asset', 'details', 'timestamp', 'signature', 'request_id', 'index_id', 'subscription_start_day', 'subscription_start_weekday', 'flexible_allowed_to_use', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_plan_add_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_type' is set
        if ('source_type' not in params or
                params['source_type'] is None):
            raise ValueError("Missing the required parameter `source_type` when calling `sapi_v1_lending_auto_invest_plan_add_post`")  # noqa: E501
        # verify the required parameter 'plan_type' is set
        if ('plan_type' not in params or
                params['plan_type'] is None):
            raise ValueError("Missing the required parameter `plan_type` when calling `sapi_v1_lending_auto_invest_plan_add_post`")  # noqa: E501
        # verify the required parameter 'subscription_amount' is set
        if ('subscription_amount' not in params or
                params['subscription_amount'] is None):
            raise ValueError("Missing the required parameter `subscription_amount` when calling `sapi_v1_lending_auto_invest_plan_add_post`")  # noqa: E501
        # verify the required parameter 'subscription_cycle' is set
        if ('subscription_cycle' not in params or
                params['subscription_cycle'] is None):
            raise ValueError("Missing the required parameter `subscription_cycle` when calling `sapi_v1_lending_auto_invest_plan_add_post`")  # noqa: E501
        # verify the required parameter 'subscription_start_time' is set
        if ('subscription_start_time' not in params or
                params['subscription_start_time'] is None):
            raise ValueError("Missing the required parameter `subscription_start_time` when calling `sapi_v1_lending_auto_invest_plan_add_post`")  # noqa: E501
        # verify the required parameter 'source_asset' is set
        if ('source_asset' not in params or
                params['source_asset'] is None):
            raise ValueError("Missing the required parameter `source_asset` when calling `sapi_v1_lending_auto_invest_plan_add_post`")  # noqa: E501
        # verify the required parameter 'details' is set
        if ('details' not in params or
                params['details'] is None):
            raise ValueError("Missing the required parameter `details` when calling `sapi_v1_lending_auto_invest_plan_add_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_plan_add_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_plan_add_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'source_type' in params:
            query_params.append(('sourceType', params['source_type']))  # noqa: E501
        if 'request_id' in params:
            query_params.append(('requestId', params['request_id']))  # noqa: E501
        if 'plan_type' in params:
            query_params.append(('planType', params['plan_type']))  # noqa: E501
        if 'index_id' in params:
            query_params.append(('IndexId', params['index_id']))  # noqa: E501
        if 'subscription_amount' in params:
            query_params.append(('subscriptionAmount', params['subscription_amount']))  # noqa: E501
        if 'subscription_cycle' in params:
            query_params.append(('subscriptionCycle', params['subscription_cycle']))  # noqa: E501
        if 'subscription_start_day' in params:
            query_params.append(('subscriptionStartDay', params['subscription_start_day']))  # noqa: E501
        if 'subscription_start_weekday' in params:
            query_params.append(('subscriptionStartWeekday', params['subscription_start_weekday']))  # noqa: E501
        if 'subscription_start_time' in params:
            query_params.append(('subscriptionStartTime', params['subscription_start_time']))  # noqa: E501
        if 'source_asset' in params:
            query_params.append(('sourceAsset', params['source_asset']))  # noqa: E501
        if 'flexible_allowed_to_use' in params:
            query_params.append(('flexibleAllowedToUse', params['flexible_allowed_to_use']))  # noqa: E501
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
            collection_formats['details'] = 'multi'  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/plan/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200244',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_plan_edit_post(self, plan_id, subscription_amount, subscription_cycle, subscription_start_time, source_asset, timestamp, signature, **kwargs):  # noqa: E501
        """Investment plan adjustment  # noqa: E501

        Query Source Asset to be used for investment  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_plan_edit_post(plan_id, subscription_amount, subscription_cycle, subscription_start_time, source_asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: (required)
        :param float subscription_amount: (required)
        :param str subscription_cycle: (required)
        :param int subscription_start_time: (required)
        :param str source_asset: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int subscription_start_day:
        :param str subscription_start_weekday:
        :param bool flexible_allowed_to_use:
        :param list[Details1] details:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200244
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_plan_edit_post_with_http_info(plan_id, subscription_amount, subscription_cycle, subscription_start_time, source_asset, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_plan_edit_post_with_http_info(plan_id, subscription_amount, subscription_cycle, subscription_start_time, source_asset, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_plan_edit_post_with_http_info(self, plan_id, subscription_amount, subscription_cycle, subscription_start_time, source_asset, timestamp, signature, **kwargs):  # noqa: E501
        """Investment plan adjustment  # noqa: E501

        Query Source Asset to be used for investment  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_plan_edit_post_with_http_info(plan_id, subscription_amount, subscription_cycle, subscription_start_time, source_asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: (required)
        :param float subscription_amount: (required)
        :param str subscription_cycle: (required)
        :param int subscription_start_time: (required)
        :param str source_asset: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int subscription_start_day:
        :param str subscription_start_weekday:
        :param bool flexible_allowed_to_use:
        :param list[Details1] details:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200244
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'subscription_amount', 'subscription_cycle', 'subscription_start_time', 'source_asset', 'timestamp', 'signature', 'subscription_start_day', 'subscription_start_weekday', 'flexible_allowed_to_use', 'details', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_plan_edit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `sapi_v1_lending_auto_invest_plan_edit_post`")  # noqa: E501
        # verify the required parameter 'subscription_amount' is set
        if ('subscription_amount' not in params or
                params['subscription_amount'] is None):
            raise ValueError("Missing the required parameter `subscription_amount` when calling `sapi_v1_lending_auto_invest_plan_edit_post`")  # noqa: E501
        # verify the required parameter 'subscription_cycle' is set
        if ('subscription_cycle' not in params or
                params['subscription_cycle'] is None):
            raise ValueError("Missing the required parameter `subscription_cycle` when calling `sapi_v1_lending_auto_invest_plan_edit_post`")  # noqa: E501
        # verify the required parameter 'subscription_start_time' is set
        if ('subscription_start_time' not in params or
                params['subscription_start_time'] is None):
            raise ValueError("Missing the required parameter `subscription_start_time` when calling `sapi_v1_lending_auto_invest_plan_edit_post`")  # noqa: E501
        # verify the required parameter 'source_asset' is set
        if ('source_asset' not in params or
                params['source_asset'] is None):
            raise ValueError("Missing the required parameter `source_asset` when calling `sapi_v1_lending_auto_invest_plan_edit_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_plan_edit_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_plan_edit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'plan_id' in params:
            query_params.append(('planId', params['plan_id']))  # noqa: E501
        if 'subscription_amount' in params:
            query_params.append(('subscriptionAmount', params['subscription_amount']))  # noqa: E501
        if 'subscription_cycle' in params:
            query_params.append(('subscriptionCycle', params['subscription_cycle']))  # noqa: E501
        if 'subscription_start_day' in params:
            query_params.append(('subscriptionStartDay', params['subscription_start_day']))  # noqa: E501
        if 'subscription_start_weekday' in params:
            query_params.append(('subscriptionStartWeekday', params['subscription_start_weekday']))  # noqa: E501
        if 'subscription_start_time' in params:
            query_params.append(('subscriptionStartTime', params['subscription_start_time']))  # noqa: E501
        if 'source_asset' in params:
            query_params.append(('sourceAsset', params['source_asset']))  # noqa: E501
        if 'flexible_allowed_to_use' in params:
            query_params.append(('flexibleAllowedToUse', params['flexible_allowed_to_use']))  # noqa: E501
        if 'details' in params:
            query_params.append(('details', params['details']))  # noqa: E501
            collection_formats['details'] = 'multi'  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/plan/edit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200244',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_plan_edit_status_post(self, plan_id, status, timestamp, signature, **kwargs):  # noqa: E501
        """Change Plan Status  # noqa: E501

        Change Plan Status  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_plan_edit_status_post(plan_id, status, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: (required)
        :param str status: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200245
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_plan_edit_status_post_with_http_info(plan_id, status, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_plan_edit_status_post_with_http_info(plan_id, status, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_plan_edit_status_post_with_http_info(self, plan_id, status, timestamp, signature, **kwargs):  # noqa: E501
        """Change Plan Status  # noqa: E501

        Change Plan Status  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_plan_edit_status_post_with_http_info(plan_id, status, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int plan_id: (required)
        :param str status: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200245
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'status', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_plan_edit_status_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `sapi_v1_lending_auto_invest_plan_edit_status_post`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `sapi_v1_lending_auto_invest_plan_edit_status_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_plan_edit_status_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_plan_edit_status_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'plan_id' in params:
            query_params.append(('planId', params['plan_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/plan/edit-status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200245',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_plan_id_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query holding details of the plan  # noqa: E501

        Query holding details of the plan  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_plan_id_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int plan_id:
        :param str request_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200247
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_plan_id_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_plan_id_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_plan_id_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query holding details of the plan  # noqa: E501

        Query holding details of the plan  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_plan_id_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int plan_id:
        :param str request_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200247
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'plan_id', 'request_id', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_plan_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_plan_id_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_plan_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'plan_id' in params:
            query_params.append(('planId', params['plan_id']))  # noqa: E501
        if 'request_id' in params:
            query_params.append(('requestId', params['request_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/plan/id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200247',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_plan_list_get(self, plan_type, timestamp, signature, **kwargs):  # noqa: E501
        """Get list of plans  # noqa: E501

        Query plan lists  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_plan_list_get(plan_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str plan_type: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200246
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_plan_list_get_with_http_info(plan_type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_plan_list_get_with_http_info(plan_type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_plan_list_get_with_http_info(self, plan_type, timestamp, signature, **kwargs):  # noqa: E501
        """Get list of plans  # noqa: E501

        Query plan lists  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_plan_list_get_with_http_info(plan_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str plan_type: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200246
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_type', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_plan_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_type' is set
        if ('plan_type' not in params or
                params['plan_type'] is None):
            raise ValueError("Missing the required parameter `plan_type` when calling `sapi_v1_lending_auto_invest_plan_list_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_plan_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_plan_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'plan_type' in params:
            query_params.append(('planType', params['plan_type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/plan/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200246',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_rebalance_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Index Linked Plan Rebalance Details (USER_DATA)  # noqa: E501

        Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_rebalance_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200255]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_rebalance_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_rebalance_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_rebalance_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Index Linked Plan Rebalance Details (USER_DATA)  # noqa: E501

        Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_rebalance_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200255]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'start_time', 'end_time', 'current', 'size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_rebalance_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_rebalance_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_rebalance_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/rebalance/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200255]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_redeem_history_get(self, request_id, timestamp, signature, **kwargs):  # noqa: E501
        """Index Linked Plan Redemption History (USER_DATA)  # noqa: E501

        Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_redeem_history_get(request_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int request_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param str asset:
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200254]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_redeem_history_get_with_http_info(request_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_redeem_history_get_with_http_info(request_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_redeem_history_get_with_http_info(self, request_id, timestamp, signature, **kwargs):  # noqa: E501
        """Index Linked Plan Redemption History (USER_DATA)  # noqa: E501

        Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_redeem_history_get_with_http_info(request_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int request_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param str asset:
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200254]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_id', 'timestamp', 'signature', 'start_time', 'end_time', 'current', 'asset', 'size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_redeem_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_id' is set
        if ('request_id' not in params or
                params['request_id'] is None):
            raise ValueError("Missing the required parameter `request_id` when calling `sapi_v1_lending_auto_invest_redeem_history_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_redeem_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_redeem_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request_id' in params:
            query_params.append(('requestId', params['request_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/redeem/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200254]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_redeem_post(self, index_id, redemption_percentage, timestamp, signature, **kwargs):  # noqa: E501
        """Index Linked Plan Redemption (TRADE)  # noqa: E501

        To redeem index-Linked plan holdings  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_redeem_post(index_id, redemption_percentage, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index_id: PORTFOLIO plan's Id (required)
        :param int redemption_percentage: user redeem percentage,10/20/100. (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str request_id: sourceType + unique, transactionId and requestId cannot be empty at the same time
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200253
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_redeem_post_with_http_info(index_id, redemption_percentage, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_redeem_post_with_http_info(index_id, redemption_percentage, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_redeem_post_with_http_info(self, index_id, redemption_percentage, timestamp, signature, **kwargs):  # noqa: E501
        """Index Linked Plan Redemption (TRADE)  # noqa: E501

        To redeem index-Linked plan holdings  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_redeem_post_with_http_info(index_id, redemption_percentage, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int index_id: PORTFOLIO plan's Id (required)
        :param int redemption_percentage: user redeem percentage,10/20/100. (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str request_id: sourceType + unique, transactionId and requestId cannot be empty at the same time
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200253
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index_id', 'redemption_percentage', 'timestamp', 'signature', 'request_id', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_redeem_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'index_id' is set
        if ('index_id' not in params or
                params['index_id'] is None):
            raise ValueError("Missing the required parameter `index_id` when calling `sapi_v1_lending_auto_invest_redeem_post`")  # noqa: E501
        # verify the required parameter 'redemption_percentage' is set
        if ('redemption_percentage' not in params or
                params['redemption_percentage'] is None):
            raise ValueError("Missing the required parameter `redemption_percentage` when calling `sapi_v1_lending_auto_invest_redeem_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_redeem_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_redeem_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'index_id' in params:
            query_params.append(('indexId', params['index_id']))  # noqa: E501
        if 'request_id' in params:
            query_params.append(('requestId', params['request_id']))  # noqa: E501
        if 'redemption_percentage' in params:
            query_params.append(('redemptionPercentage', params['redemption_percentage']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/redeem', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200253',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_source_asset_list_get(self, usage_type, timestamp, signature, **kwargs):  # noqa: E501
        """Query source asset list (USER_DATA)  # noqa: E501

        Query Source Asset to be used for investment  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_source_asset_list_get(usage_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str usage_type: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str target_asset:
        :param int index_id:
        :param bool flexible_allowed_to_use:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200243
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_source_asset_list_get_with_http_info(usage_type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_source_asset_list_get_with_http_info(usage_type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_source_asset_list_get_with_http_info(self, usage_type, timestamp, signature, **kwargs):  # noqa: E501
        """Query source asset list (USER_DATA)  # noqa: E501

        Query Source Asset to be used for investment  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_source_asset_list_get_with_http_info(usage_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str usage_type: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str target_asset:
        :param int index_id:
        :param bool flexible_allowed_to_use:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200243
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['usage_type', 'timestamp', 'signature', 'target_asset', 'index_id', 'flexible_allowed_to_use', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_source_asset_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'usage_type' is set
        if ('usage_type' not in params or
                params['usage_type'] is None):
            raise ValueError("Missing the required parameter `usage_type` when calling `sapi_v1_lending_auto_invest_source_asset_list_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_source_asset_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_source_asset_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'target_asset' in params:
            query_params.append(('targetAsset', params['target_asset']))  # noqa: E501
        if 'index_id' in params:
            query_params.append(('indexId', params['index_id']))  # noqa: E501
        if 'usage_type' in params:
            query_params.append(('usageType', params['usage_type']))  # noqa: E501
        if 'flexible_allowed_to_use' in params:
            query_params.append(('flexibleAllowedToUse', params['flexible_allowed_to_use']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/source-asset/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200243',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_target_asset_list_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get target asset list (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_target_asset_list_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str target_asset:
        :param int size: Default:10 Max:100
        :param int current: Current querying page. Start from 1. Default:1
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200240
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_target_asset_list_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_target_asset_list_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_target_asset_list_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get target asset list (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_target_asset_list_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str target_asset:
        :param int size: Default:10 Max:100
        :param int current: Current querying page. Start from 1. Default:1
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200240
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'target_asset', 'size', 'current', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_target_asset_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_target_asset_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_target_asset_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'target_asset' in params:
            query_params.append(('targetAsset', params['target_asset']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/target-asset/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200240',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_lending_auto_invest_target_asset_roi_list_get(self, target_asset, his_roi_type, timestamp, signature, **kwargs):  # noqa: E501
        """Get target asset ROI data (USER_DATA)  # noqa: E501

        ROI return list for target asset  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_target_asset_roi_list_get(target_asset, his_roi_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_asset: (required)
        :param str his_roi_type: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200241]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_lending_auto_invest_target_asset_roi_list_get_with_http_info(target_asset, his_roi_type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_lending_auto_invest_target_asset_roi_list_get_with_http_info(target_asset, his_roi_type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_lending_auto_invest_target_asset_roi_list_get_with_http_info(self, target_asset, his_roi_type, timestamp, signature, **kwargs):  # noqa: E501
        """Get target asset ROI data (USER_DATA)  # noqa: E501

        ROI return list for target asset  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_lending_auto_invest_target_asset_roi_list_get_with_http_info(target_asset, his_roi_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_asset: (required)
        :param str his_roi_type: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200241]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_asset', 'his_roi_type', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_lending_auto_invest_target_asset_roi_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_asset' is set
        if ('target_asset' not in params or
                params['target_asset'] is None):
            raise ValueError("Missing the required parameter `target_asset` when calling `sapi_v1_lending_auto_invest_target_asset_roi_list_get`")  # noqa: E501
        # verify the required parameter 'his_roi_type' is set
        if ('his_roi_type' not in params or
                params['his_roi_type'] is None):
            raise ValueError("Missing the required parameter `his_roi_type` when calling `sapi_v1_lending_auto_invest_target_asset_roi_list_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_lending_auto_invest_target_asset_roi_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_lending_auto_invest_target_asset_roi_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'target_asset' in params:
            query_params.append(('targetAsset', params['target_asset']))  # noqa: E501
        if 'his_roi_type' in params:
            query_params.append(('hisRoiType', params['his_roi_type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/lending/auto-invest/target-asset/roi/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200241]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
