# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class FuturesAlgoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_algo_futures_historical_orders_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query Historical Algo Orders (USER_DATA)  # noqa: E501

        - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_historical_orders_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str symbol: Trading symbol, e.g. BNBUSDT
        :param str side:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param str page_size: Page size, minimum 1, maximum 100, default 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200156
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_futures_historical_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_futures_historical_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_futures_historical_orders_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query Historical Algo Orders (USER_DATA)  # noqa: E501

        - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_historical_orders_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str symbol: Trading symbol, e.g. BNBUSDT
        :param str side:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param str page_size: Page size, minimum 1, maximum 100, default 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200156
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'symbol', 'side', 'start_time', 'end_time', 'page', 'page_size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_futures_historical_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_futures_historical_orders_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_futures_historical_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'side' in params:
            query_params.append(('side', params['side']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/futures/historicalOrders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200156',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_algo_futures_new_order_twap_post(self, symbol, side, quantity, duration, timestamp, signature, **kwargs):  # noqa: E501
        """Time-Weighted Average Price(Twap) New Order (TRADE)  # noqa: E501

        Send in a Twap new order. Only support on USDⓈ-M Contracts.  You need to enable Futures Trading Permission for the api key which requests this endpoint. Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it. - quantity * 60 / duration should be larger than minQty - duration cannot be less than 5 mins or more than 24 hours. - For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_new_order_twap_post(symbol, side, quantity, duration, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading symbol, e.g. BNBUSDT (required)
        :param str side: (required)
        :param float quantity: Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
        :param int duration: Duration for TWAP orders in seconds. [300, 86400];Less than 5min => defaults to 5 min; Greater than 24h => defaults to 24h (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str position_side: Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
        :param str client_algo_id: A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
        :param bool reduce_only: 'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
        :param float limit_price: Limit price of the order; If it is not sent, will place order by market price by default
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200153
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_futures_new_order_twap_post_with_http_info(symbol, side, quantity, duration, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_futures_new_order_twap_post_with_http_info(symbol, side, quantity, duration, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_futures_new_order_twap_post_with_http_info(self, symbol, side, quantity, duration, timestamp, signature, **kwargs):  # noqa: E501
        """Time-Weighted Average Price(Twap) New Order (TRADE)  # noqa: E501

        Send in a Twap new order. Only support on USDⓈ-M Contracts.  You need to enable Futures Trading Permission for the api key which requests this endpoint. Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it. - quantity * 60 / duration should be larger than minQty - duration cannot be less than 5 mins or more than 24 hours. - For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_new_order_twap_post_with_http_info(symbol, side, quantity, duration, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading symbol, e.g. BNBUSDT (required)
        :param str side: (required)
        :param float quantity: Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
        :param int duration: Duration for TWAP orders in seconds. [300, 86400];Less than 5min => defaults to 5 min; Greater than 24h => defaults to 24h (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str position_side: Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
        :param str client_algo_id: A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
        :param bool reduce_only: 'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
        :param float limit_price: Limit price of the order; If it is not sent, will place order by market price by default
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200153
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'side', 'quantity', 'duration', 'timestamp', 'signature', 'position_side', 'client_algo_id', 'reduce_only', 'limit_price', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_futures_new_order_twap_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `sapi_v1_algo_futures_new_order_twap_post`")  # noqa: E501
        # verify the required parameter 'side' is set
        if ('side' not in params or
                params['side'] is None):
            raise ValueError("Missing the required parameter `side` when calling `sapi_v1_algo_futures_new_order_twap_post`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if ('quantity' not in params or
                params['quantity'] is None):
            raise ValueError("Missing the required parameter `quantity` when calling `sapi_v1_algo_futures_new_order_twap_post`")  # noqa: E501
        # verify the required parameter 'duration' is set
        if ('duration' not in params or
                params['duration'] is None):
            raise ValueError("Missing the required parameter `duration` when calling `sapi_v1_algo_futures_new_order_twap_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_futures_new_order_twap_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_futures_new_order_twap_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'side' in params:
            query_params.append(('side', params['side']))  # noqa: E501
        if 'position_side' in params:
            query_params.append(('positionSide', params['position_side']))  # noqa: E501
        if 'quantity' in params:
            query_params.append(('quantity', params['quantity']))  # noqa: E501
        if 'duration' in params:
            query_params.append(('duration', params['duration']))  # noqa: E501
        if 'client_algo_id' in params:
            query_params.append(('clientAlgoId', params['client_algo_id']))  # noqa: E501
        if 'reduce_only' in params:
            query_params.append(('reduceOnly', params['reduce_only']))  # noqa: E501
        if 'limit_price' in params:
            query_params.append(('limitPrice', params['limit_price']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/futures/newOrderTwap', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200153',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_algo_futures_new_order_vp_post(self, symbol, side, quantity, urgency, timestamp, signature, **kwargs):  # noqa: E501
        """Volume Participation(VP) New Order (TRADE)  # noqa: E501

        Send in a VP new order. Only support on USDⓈ-M Contracts.  - You need to enable `Futures Trading Permission` for the api key which requests this endpoint. - Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_new_order_vp_post(symbol, side, quantity, urgency, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading symbol, e.g. BNBUSDT (required)
        :param str side: (required)
        :param float quantity: Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
        :param str urgency: Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str position_side: Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
        :param str client_algo_id: A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
        :param bool reduce_only: 'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
        :param float limit_price: Limit price of the order; If it is not sent, will place order by market price by default
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200153
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_futures_new_order_vp_post_with_http_info(symbol, side, quantity, urgency, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_futures_new_order_vp_post_with_http_info(symbol, side, quantity, urgency, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_futures_new_order_vp_post_with_http_info(self, symbol, side, quantity, urgency, timestamp, signature, **kwargs):  # noqa: E501
        """Volume Participation(VP) New Order (TRADE)  # noqa: E501

        Send in a VP new order. Only support on USDⓈ-M Contracts.  - You need to enable `Futures Trading Permission` for the api key which requests this endpoint. - Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_new_order_vp_post_with_http_info(symbol, side, quantity, urgency, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading symbol, e.g. BNBUSDT (required)
        :param str side: (required)
        :param float quantity: Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT (required)
        :param str urgency: Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str position_side: Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
        :param str client_algo_id: A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
        :param bool reduce_only: 'true' or 'false'. Default 'false'; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
        :param float limit_price: Limit price of the order; If it is not sent, will place order by market price by default
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200153
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'side', 'quantity', 'urgency', 'timestamp', 'signature', 'position_side', 'client_algo_id', 'reduce_only', 'limit_price', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_futures_new_order_vp_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `sapi_v1_algo_futures_new_order_vp_post`")  # noqa: E501
        # verify the required parameter 'side' is set
        if ('side' not in params or
                params['side'] is None):
            raise ValueError("Missing the required parameter `side` when calling `sapi_v1_algo_futures_new_order_vp_post`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if ('quantity' not in params or
                params['quantity'] is None):
            raise ValueError("Missing the required parameter `quantity` when calling `sapi_v1_algo_futures_new_order_vp_post`")  # noqa: E501
        # verify the required parameter 'urgency' is set
        if ('urgency' not in params or
                params['urgency'] is None):
            raise ValueError("Missing the required parameter `urgency` when calling `sapi_v1_algo_futures_new_order_vp_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_futures_new_order_vp_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_futures_new_order_vp_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'side' in params:
            query_params.append(('side', params['side']))  # noqa: E501
        if 'position_side' in params:
            query_params.append(('positionSide', params['position_side']))  # noqa: E501
        if 'quantity' in params:
            query_params.append(('quantity', params['quantity']))  # noqa: E501
        if 'urgency' in params:
            query_params.append(('urgency', params['urgency']))  # noqa: E501
        if 'client_algo_id' in params:
            query_params.append(('clientAlgoId', params['client_algo_id']))  # noqa: E501
        if 'reduce_only' in params:
            query_params.append(('reduceOnly', params['reduce_only']))  # noqa: E501
        if 'limit_price' in params:
            query_params.append(('limitPrice', params['limit_price']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/futures/newOrderVp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200153',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_algo_futures_open_orders_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query Current Algo Open Orders (USER_DATA)  # noqa: E501

        - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_open_orders_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200155
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_futures_open_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_futures_open_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_futures_open_orders_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query Current Algo Open Orders (USER_DATA)  # noqa: E501

        - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_open_orders_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200155
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_futures_open_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_futures_open_orders_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_futures_open_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/futures/openOrders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200155',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_algo_futures_order_delete(self, algo_id, timestamp, signature, **kwargs):  # noqa: E501
        """Cancel Algo Order(TRADE)  # noqa: E501

        Cancel an active order. - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_order_delete(algo_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int algo_id: Eg. 14511 (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200154
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_futures_order_delete_with_http_info(algo_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_futures_order_delete_with_http_info(algo_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_futures_order_delete_with_http_info(self, algo_id, timestamp, signature, **kwargs):  # noqa: E501
        """Cancel Algo Order(TRADE)  # noqa: E501

        Cancel an active order. - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_order_delete_with_http_info(algo_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int algo_id: Eg. 14511 (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200154
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo_id', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_futures_order_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo_id' is set
        if ('algo_id' not in params or
                params['algo_id'] is None):
            raise ValueError("Missing the required parameter `algo_id` when calling `sapi_v1_algo_futures_order_delete`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_futures_order_delete`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_futures_order_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo_id' in params:
            query_params.append(('algoId', params['algo_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/futures/order', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200154',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_algo_futures_sub_orders_get(self, algo_id, timestamp, signature, **kwargs):  # noqa: E501
        """Query Sub Orders (USER_DATA)  # noqa: E501

        - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_sub_orders_get(algo_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int algo_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page: Default 1
        :param str page_size: Page size, minimum 1, maximum 100, default 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200157
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_futures_sub_orders_get_with_http_info(algo_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_futures_sub_orders_get_with_http_info(algo_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_futures_sub_orders_get_with_http_info(self, algo_id, timestamp, signature, **kwargs):  # noqa: E501
        """Query Sub Orders (USER_DATA)  # noqa: E501

        - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_futures_sub_orders_get_with_http_info(algo_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int algo_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page: Default 1
        :param str page_size: Page size, minimum 1, maximum 100, default 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200157
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo_id', 'timestamp', 'signature', 'page', 'page_size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_futures_sub_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo_id' is set
        if ('algo_id' not in params or
                params['algo_id'] is None):
            raise ValueError("Missing the required parameter `algo_id` when calling `sapi_v1_algo_futures_sub_orders_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_futures_sub_orders_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_futures_sub_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo_id' in params:
            query_params.append(('algoId', params['algo_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/futures/subOrders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200157',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
