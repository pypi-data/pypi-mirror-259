# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class CryptoLoansApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_loan_adjust_ltv_post(self, order_id, amount, direction, timestamp, signature, **kwargs):  # noqa: E501
        """Crypto Loan Adjust LTV (TRADE)  # noqa: E501

        Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_adjust_ltv_post(order_id, amount, direction, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param float amount: Amount (required)
        :param str direction: 'ADDITIONAL', 'REDUCED' (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200208
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_adjust_ltv_post_with_http_info(order_id, amount, direction, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_adjust_ltv_post_with_http_info(order_id, amount, direction, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_adjust_ltv_post_with_http_info(self, order_id, amount, direction, timestamp, signature, **kwargs):  # noqa: E501
        """Crypto Loan Adjust LTV (TRADE)  # noqa: E501

        Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_adjust_ltv_post_with_http_info(order_id, amount, direction, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param float amount: Amount (required)
        :param str direction: 'ADDITIONAL', 'REDUCED' (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200208
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'amount', 'direction', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_adjust_ltv_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `sapi_v1_loan_adjust_ltv_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_loan_adjust_ltv_post`")  # noqa: E501
        # verify the required parameter 'direction' is set
        if ('direction' not in params or
                params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `sapi_v1_loan_adjust_ltv_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_adjust_ltv_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_adjust_ltv_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/adjust/ltv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200208',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_borrow_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Crypto Loans Borrow History (USER_DATA)  # noqa: E501

        - If startTime and endTime are not sent, the recent 90-day data will be returned. - The max interval between startTime and endTime is 180 days.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_borrow_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: orderId in POST /sapi/v1/loan/borrow
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: default 10, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_borrow_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_borrow_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_borrow_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Crypto Loans Borrow History (USER_DATA)  # noqa: E501

        - If startTime and endTime are not sent, the recent 90-day data will be returned. - The max interval between startTime and endTime is 180 days.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_borrow_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: orderId in POST /sapi/v1/loan/borrow
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: default 10, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'order_id', 'loan_coin', 'collateral_coin', 'start_time', 'end_time', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_borrow_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_borrow_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_borrow_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/borrow/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_borrow_post(self, loan_coin, collateral_coin, loan_term, timestamp, signature, **kwargs):  # noqa: E501
        """Crypto Loan Borrow (TRADE)  # noqa: E501

        Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_borrow_post(loan_coin, collateral_coin, loan_term, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_coin: Coin loaned (required)
        :param str collateral_coin: Coin used as collateral (required)
        :param int loan_term: 7/14/30/90/180 days (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param float loan_amount: Loan amount
        :param float collateral_amount:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200203
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_borrow_post_with_http_info(loan_coin, collateral_coin, loan_term, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_borrow_post_with_http_info(loan_coin, collateral_coin, loan_term, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_borrow_post_with_http_info(self, loan_coin, collateral_coin, loan_term, timestamp, signature, **kwargs):  # noqa: E501
        """Crypto Loan Borrow (TRADE)  # noqa: E501

        Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_borrow_post_with_http_info(loan_coin, collateral_coin, loan_term, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_coin: Coin loaned (required)
        :param str collateral_coin: Coin used as collateral (required)
        :param int loan_term: 7/14/30/90/180 days (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param float loan_amount: Loan amount
        :param float collateral_amount:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200203
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_coin', 'collateral_coin', 'loan_term', 'timestamp', 'signature', 'loan_amount', 'collateral_amount', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_borrow_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_coin' is set
        if ('loan_coin' not in params or
                params['loan_coin'] is None):
            raise ValueError("Missing the required parameter `loan_coin` when calling `sapi_v1_loan_borrow_post`")  # noqa: E501
        # verify the required parameter 'collateral_coin' is set
        if ('collateral_coin' not in params or
                params['collateral_coin'] is None):
            raise ValueError("Missing the required parameter `collateral_coin` when calling `sapi_v1_loan_borrow_post`")  # noqa: E501
        # verify the required parameter 'loan_term' is set
        if ('loan_term' not in params or
                params['loan_term'] is None):
            raise ValueError("Missing the required parameter `loan_term` when calling `sapi_v1_loan_borrow_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_borrow_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_borrow_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'loan_amount' in params:
            query_params.append(('loanAmount', params['loan_amount']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'collateral_amount' in params:
            query_params.append(('collateralAmount', params['collateral_amount']))  # noqa: E501
        if 'loan_term' in params:
            query_params.append(('loanTerm', params['loan_term']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/borrow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200203',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_collateral_data_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Collateral Assets Data (USER_DATA)  # noqa: E501

        Get LTV information and collateral limit of collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_collateral_data_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str collateral_coin: Coin used as collateral
        :param int vip_level: Defaults to user's vip level
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200211
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_collateral_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_collateral_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_collateral_data_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Collateral Assets Data (USER_DATA)  # noqa: E501

        Get LTV information and collateral limit of collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_collateral_data_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str collateral_coin: Coin used as collateral
        :param int vip_level: Defaults to user's vip level
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200211
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'collateral_coin', 'vip_level', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_collateral_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_collateral_data_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_collateral_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'vip_level' in params:
            query_params.append(('vipLevel', params['vip_level']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/collateral/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200211',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_customize_margin_call_post(self, margin_call, timestamp, signature, **kwargs):  # noqa: E501
        """Crypto Loan Customize Margin Call (TRADE)  # noqa: E501

        Customize margin call for ongoing orders only.  Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_customize_margin_call_post(margin_call, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float margin_call: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.
        :param str collateral_coin: Coin used as collateral
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200213
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_customize_margin_call_post_with_http_info(margin_call, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_customize_margin_call_post_with_http_info(margin_call, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_customize_margin_call_post_with_http_info(self, margin_call, timestamp, signature, **kwargs):  # noqa: E501
        """Crypto Loan Customize Margin Call (TRADE)  # noqa: E501

        Customize margin call for ongoing orders only.  Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_customize_margin_call_post_with_http_info(margin_call, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float margin_call: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.
        :param str collateral_coin: Coin used as collateral
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200213
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['margin_call', 'timestamp', 'signature', 'order_id', 'collateral_coin', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_customize_margin_call_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'margin_call' is set
        if ('margin_call' not in params or
                params['margin_call'] is None):
            raise ValueError("Missing the required parameter `margin_call` when calling `sapi_v1_loan_customize_margin_call_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_customize_margin_call_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_customize_margin_call_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'margin_call' in params:
            query_params.append(('marginCall', params['margin_call']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/customize/margin_call', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200213',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_flexible_adjust_ltv_post(self, adjustment_amount, direction, timestamp, signature, **kwargs):  # noqa: E501
        """Adjust LTV - Flexible Loan Adjust LTV (TRADE)  # noqa: E501

         Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_adjust_ltv_post(adjustment_amount, direction, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float adjustment_amount: (required)
        :param str direction: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200219
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_flexible_adjust_ltv_post_with_http_info(adjustment_amount, direction, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_flexible_adjust_ltv_post_with_http_info(adjustment_amount, direction, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_flexible_adjust_ltv_post_with_http_info(self, adjustment_amount, direction, timestamp, signature, **kwargs):  # noqa: E501
        """Adjust LTV - Flexible Loan Adjust LTV (TRADE)  # noqa: E501

         Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_adjust_ltv_post_with_http_info(adjustment_amount, direction, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float adjustment_amount: (required)
        :param str direction: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200219
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['adjustment_amount', 'direction', 'timestamp', 'signature', 'loan_coin', 'collateral_coin', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_flexible_adjust_ltv_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'adjustment_amount' is set
        if ('adjustment_amount' not in params or
                params['adjustment_amount'] is None):
            raise ValueError("Missing the required parameter `adjustment_amount` when calling `sapi_v1_loan_flexible_adjust_ltv_post`")  # noqa: E501
        # verify the required parameter 'direction' is set
        if ('direction' not in params or
                params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `sapi_v1_loan_flexible_adjust_ltv_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_flexible_adjust_ltv_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_flexible_adjust_ltv_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'adjustment_amount' in params:
            query_params.append(('adjustmentAmount', params['adjustment_amount']))  # noqa: E501
        if 'direction' in params:
            query_params.append(('direction', params['direction']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/flexible/adjust/ltv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200219',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_flexible_borrow_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Borrow - Get Flexible Loan Borrow History (USER_DATA)  # noqa: E501

         Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_borrow_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200216
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_flexible_borrow_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_flexible_borrow_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_flexible_borrow_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Borrow - Get Flexible Loan Borrow History (USER_DATA)  # noqa: E501

         Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_borrow_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200216
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'loan_coin', 'collateral_coin', 'start_time', 'end_time', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_flexible_borrow_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_flexible_borrow_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_flexible_borrow_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/flexible/borrow/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200216',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_flexible_borrow_post(self, timestamp, signature, **kwargs):  # noqa: E501
        """Borrow - Flexible Loan Borrow (TRADE)  # noqa: E501

         Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_borrow_post(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param float loan_amount: Loan amount
        :param str collateral_coin: Coin used as collateral
        :param float collateral_amount:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200214
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_flexible_borrow_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_flexible_borrow_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_flexible_borrow_post_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Borrow - Flexible Loan Borrow (TRADE)  # noqa: E501

         Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_borrow_post_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param float loan_amount: Loan amount
        :param str collateral_coin: Coin used as collateral
        :param float collateral_amount:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200214
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'loan_coin', 'loan_amount', 'collateral_coin', 'collateral_amount', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_flexible_borrow_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_flexible_borrow_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_flexible_borrow_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'loan_amount' in params:
            query_params.append(('loanAmount', params['loan_amount']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'collateral_amount' in params:
            query_params.append(('collateralAmount', params['collateral_amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/flexible/borrow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200214',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_flexible_collateral_data_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Flexible Loan Collateral Assets Data (USER_DATA)  # noqa: E501

        Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_collateral_data_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str collateral_coin: Coin used as collateral
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200222
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_flexible_collateral_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_flexible_collateral_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_flexible_collateral_data_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Flexible Loan Collateral Assets Data (USER_DATA)  # noqa: E501

        Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_collateral_data_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str collateral_coin: Coin used as collateral
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200222
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'collateral_coin', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_flexible_collateral_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_flexible_collateral_data_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_flexible_collateral_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/flexible/collateral/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200222',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_flexible_loanable_data_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Flexible Loan Assets Data (USER_DATA)  # noqa: E501

        Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_loanable_data_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200221
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_flexible_loanable_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_flexible_loanable_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_flexible_loanable_data_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Flexible Loan Assets Data (USER_DATA)  # noqa: E501

        Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_loanable_data_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200221
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'loan_coin', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_flexible_loanable_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_flexible_loanable_data_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_flexible_loanable_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/flexible/loanable/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200221',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_flexible_ltv_adjustment_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Adjust LTV - Get Flexible Loan LTV Adjustment History (USER_DATA)  # noqa: E501

         Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_ltv_adjustment_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200220
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_flexible_ltv_adjustment_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_flexible_ltv_adjustment_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_flexible_ltv_adjustment_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Adjust LTV - Get Flexible Loan LTV Adjustment History (USER_DATA)  # noqa: E501

         Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_ltv_adjustment_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200220
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'loan_coin', 'collateral_coin', 'start_time', 'end_time', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_flexible_ltv_adjustment_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_flexible_ltv_adjustment_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_flexible_ltv_adjustment_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/flexible/ltv/adjustment/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200220',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_flexible_ongoing_orders_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Borrow - Get Flexible Loan Ongoing Orders (USER_DATA)  # noqa: E501

         Weight(IP): 300  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_ongoing_orders_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200215
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_flexible_ongoing_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_flexible_ongoing_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_flexible_ongoing_orders_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Borrow - Get Flexible Loan Ongoing Orders (USER_DATA)  # noqa: E501

         Weight(IP): 300  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_ongoing_orders_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200215
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'loan_coin', 'collateral_coin', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_flexible_ongoing_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_flexible_ongoing_orders_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_flexible_ongoing_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/flexible/ongoing/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200215',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_flexible_repay_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Repay - Get Flexible Loan Repayment History (USER_DATA)  # noqa: E501

         Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_repay_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200218
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_flexible_repay_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_flexible_repay_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_flexible_repay_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Repay - Get Flexible Loan Repayment History (USER_DATA)  # noqa: E501

         Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_repay_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200218
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'loan_coin', 'collateral_coin', 'start_time', 'end_time', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_flexible_repay_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_flexible_repay_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_flexible_repay_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/flexible/repay/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200218',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_flexible_repay_post(self, repay_amount, timestamp, signature, **kwargs):  # noqa: E501
        """Repay - Flexible Loan Repay (TRADE)  # noqa: E501

         Weight(IP): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_repay_post(repay_amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float repay_amount: repay amount of loanCoin (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param bool collateral_return:
        :param bool full_repayment:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200217
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_flexible_repay_post_with_http_info(repay_amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_flexible_repay_post_with_http_info(repay_amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_flexible_repay_post_with_http_info(self, repay_amount, timestamp, signature, **kwargs):  # noqa: E501
        """Repay - Flexible Loan Repay (TRADE)  # noqa: E501

         Weight(IP): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_flexible_repay_post_with_http_info(repay_amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float repay_amount: repay amount of loanCoin (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param bool collateral_return:
        :param bool full_repayment:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200217
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repay_amount', 'timestamp', 'signature', 'loan_coin', 'collateral_coin', 'collateral_return', 'full_repayment', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_flexible_repay_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repay_amount' is set
        if ('repay_amount' not in params or
                params['repay_amount'] is None):
            raise ValueError("Missing the required parameter `repay_amount` when calling `sapi_v1_loan_flexible_repay_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_flexible_repay_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_flexible_repay_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'repay_amount' in params:
            query_params.append(('repayAmount', params['repay_amount']))  # noqa: E501
        if 'collateral_return' in params:
            query_params.append(('collateralReturn', params['collateral_return']))  # noqa: E501
        if 'full_repayment' in params:
            query_params.append(('fullRepayment', params['full_repayment']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/flexible/repay', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200217',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_income_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Crypto Loans Income History (USER_DATA)  # noqa: E501

        - If startTime and endTime are not sent, the recent 7-day data will be returned. - The max interval between startTime and endTime is 30 days.  Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_income_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param str type: All types will be returned by default.   * `borrowIn`   * `collateralSpent`   * `repayAmount`   * `collateralReturn` - Collateral return after repayment   * `addCollateral`   * `removeCollateral`   * `collateralReturnAfterLiquidation`
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: default 20, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200202]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_income_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_income_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_income_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Crypto Loans Income History (USER_DATA)  # noqa: E501

        - If startTime and endTime are not sent, the recent 7-day data will be returned. - The max interval between startTime and endTime is 30 days.  Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_income_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param str type: All types will be returned by default.   * `borrowIn`   * `collateralSpent`   * `repayAmount`   * `collateralReturn` - Collateral return after repayment   * `addCollateral`   * `removeCollateral`   * `collateralReturnAfterLiquidation`
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: default 20, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200202]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'asset', 'type', 'start_time', 'end_time', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_income_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_income_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_income_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/income', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200202]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_loanable_data_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Loanable Assets Data (USER_DATA)  # noqa: E501

        Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_loanable_data_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param int vip_level: Defaults to user's vip level
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200210
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_loanable_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_loanable_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_loanable_data_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Loanable Assets Data (USER_DATA)  # noqa: E501

        Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_loanable_data_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param int vip_level: Defaults to user's vip level
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200210
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'loan_coin', 'vip_level', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_loanable_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_loanable_data_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_loanable_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'vip_level' in params:
            query_params.append(('vipLevel', params['vip_level']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/loanable/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200210',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_ltv_adjustment_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Loan LTV Adjustment History (USER_DATA)  # noqa: E501

        If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_ltv_adjustment_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order ID
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: default 10, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200209
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_ltv_adjustment_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_ltv_adjustment_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_ltv_adjustment_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Loan LTV Adjustment History (USER_DATA)  # noqa: E501

        If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_ltv_adjustment_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order ID
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: default 10, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200209
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'order_id', 'loan_coin', 'collateral_coin', 'start_time', 'end_time', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_ltv_adjustment_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_ltv_adjustment_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_ltv_adjustment_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/ltv/adjustment/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200209',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_ongoing_orders_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Loan Ongoing Orders (USER_DATA)  # noqa: E501

        Weight(IP): 300  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_ongoing_orders_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: orderId in POST /sapi/v1/loan/borrow
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int current: Current querying page. Start from 1; default:1, max:1000
        :param int limit: default 10, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200205
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_ongoing_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_ongoing_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_ongoing_orders_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Loan Ongoing Orders (USER_DATA)  # noqa: E501

        Weight(IP): 300  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_ongoing_orders_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: orderId in POST /sapi/v1/loan/borrow
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int current: Current querying page. Start from 1; default:1, max:1000
        :param int limit: default 10, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200205
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'order_id', 'loan_coin', 'collateral_coin', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_ongoing_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_ongoing_orders_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_ongoing_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/ongoing/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200205',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_repay_collateral_rate_get(self, loan_coin, collateral_coin, repay_amount, timestamp, signature, **kwargs):  # noqa: E501
        """Check Collateral Repay Rate (USER_DATA)  # noqa: E501

        Get the the rate of collateral coin / loan coin when using collateral repay, the rate will be valid within 8 second.  Weight(IP): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_repay_collateral_rate_get(loan_coin, collateral_coin, repay_amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_coin: Coin loaned (required)
        :param str collateral_coin: Coin used as collateral (required)
        :param float repay_amount: repay amount of loanCoin (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200212
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_repay_collateral_rate_get_with_http_info(loan_coin, collateral_coin, repay_amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_repay_collateral_rate_get_with_http_info(loan_coin, collateral_coin, repay_amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_repay_collateral_rate_get_with_http_info(self, loan_coin, collateral_coin, repay_amount, timestamp, signature, **kwargs):  # noqa: E501
        """Check Collateral Repay Rate (USER_DATA)  # noqa: E501

        Get the the rate of collateral coin / loan coin when using collateral repay, the rate will be valid within 8 second.  Weight(IP): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_repay_collateral_rate_get_with_http_info(loan_coin, collateral_coin, repay_amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str loan_coin: Coin loaned (required)
        :param str collateral_coin: Coin used as collateral (required)
        :param float repay_amount: repay amount of loanCoin (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200212
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_coin', 'collateral_coin', 'repay_amount', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_repay_collateral_rate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_coin' is set
        if ('loan_coin' not in params or
                params['loan_coin'] is None):
            raise ValueError("Missing the required parameter `loan_coin` when calling `sapi_v1_loan_repay_collateral_rate_get`")  # noqa: E501
        # verify the required parameter 'collateral_coin' is set
        if ('collateral_coin' not in params or
                params['collateral_coin'] is None):
            raise ValueError("Missing the required parameter `collateral_coin` when calling `sapi_v1_loan_repay_collateral_rate_get`")  # noqa: E501
        # verify the required parameter 'repay_amount' is set
        if ('repay_amount' not in params or
                params['repay_amount'] is None):
            raise ValueError("Missing the required parameter `repay_amount` when calling `sapi_v1_loan_repay_collateral_rate_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_repay_collateral_rate_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_repay_collateral_rate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'repay_amount' in params:
            query_params.append(('repayAmount', params['repay_amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/repay/collateral/rate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200212',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_repay_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Loan Repayment History (USER_DATA)  # noqa: E501

        If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_repay_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order ID
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: default 10, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200207
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_repay_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_repay_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_repay_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Loan Repayment History (USER_DATA)  # noqa: E501

        If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_repay_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order ID
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: default 10, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200207
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'order_id', 'loan_coin', 'collateral_coin', 'start_time', 'end_time', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_repay_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_repay_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_repay_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/repay/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200207',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_repay_post(self, order_id, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Crypto Loan Repay (TRADE)  # noqa: E501

        Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_repay_post(order_id, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param float amount: Repayment Amount (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int type: Default: 1. 1 for 'repay with borrowed coin'; 2 for 'repay with collateral'.
        :param bool collateral_return: Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200206
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_repay_post_with_http_info(order_id, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_repay_post_with_http_info(order_id, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_repay_post_with_http_info(self, order_id, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Crypto Loan Repay (TRADE)  # noqa: E501

        Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_repay_post_with_http_info(order_id, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_id: Order ID (required)
        :param float amount: Repayment Amount (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int type: Default: 1. 1 for 'repay with borrowed coin'; 2 for 'repay with collateral'.
        :param bool collateral_return: Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200206
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'amount', 'timestamp', 'signature', 'type', 'collateral_return', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_repay_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `sapi_v1_loan_repay_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_loan_repay_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_repay_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_repay_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'collateral_return' in params:
            query_params.append(('collateralReturn', params['collateral_return']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/repay', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200206',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
