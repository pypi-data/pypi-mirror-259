# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class BSwapApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_bswap_add_liquidity_preview_get(self, pool_id, type, quote_asset, quote_qty, timestamp, signature, **kwargs):  # noqa: E501
        """Add Liquidity Preview (USER_DATA)  # noqa: E501

        Calculate expected share amount for adding liquidity in single or dual token.  Weight(IP): 150  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_add_liquidity_preview_get(pool_id, type, quote_asset, quote_qty, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pool_id: (required)
        :param str type: * `SINGLE` - for adding a single token * `COMBINATION` - for adding dual tokens (required)
        :param str quote_asset: (required)
        :param float quote_qty: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200186
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_add_liquidity_preview_get_with_http_info(pool_id, type, quote_asset, quote_qty, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_add_liquidity_preview_get_with_http_info(pool_id, type, quote_asset, quote_qty, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_add_liquidity_preview_get_with_http_info(self, pool_id, type, quote_asset, quote_qty, timestamp, signature, **kwargs):  # noqa: E501
        """Add Liquidity Preview (USER_DATA)  # noqa: E501

        Calculate expected share amount for adding liquidity in single or dual token.  Weight(IP): 150  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_add_liquidity_preview_get_with_http_info(pool_id, type, quote_asset, quote_qty, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pool_id: (required)
        :param str type: * `SINGLE` - for adding a single token * `COMBINATION` - for adding dual tokens (required)
        :param str quote_asset: (required)
        :param float quote_qty: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200186
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_id', 'type', 'quote_asset', 'quote_qty', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_add_liquidity_preview_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_id' is set
        if ('pool_id' not in params or
                params['pool_id'] is None):
            raise ValueError("Missing the required parameter `pool_id` when calling `sapi_v1_bswap_add_liquidity_preview_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `sapi_v1_bswap_add_liquidity_preview_get`")  # noqa: E501
        # verify the required parameter 'quote_asset' is set
        if ('quote_asset' not in params or
                params['quote_asset'] is None):
            raise ValueError("Missing the required parameter `quote_asset` when calling `sapi_v1_bswap_add_liquidity_preview_get`")  # noqa: E501
        # verify the required parameter 'quote_qty' is set
        if ('quote_qty' not in params or
                params['quote_qty'] is None):
            raise ValueError("Missing the required parameter `quote_qty` when calling `sapi_v1_bswap_add_liquidity_preview_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_add_liquidity_preview_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_add_liquidity_preview_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pool_id' in params:
            query_params.append(('poolId', params['pool_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'quote_asset' in params:
            query_params.append(('quoteAsset', params['quote_asset']))  # noqa: E501
        if 'quote_qty' in params:
            query_params.append(('quoteQty', params['quote_qty']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/addLiquidityPreview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200186',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_claim_rewards_post(self, timestamp, signature, **kwargs):  # noqa: E501
        """Claim rewards (TRADE)  # noqa: E501

        Claim swap rewards or liquidity rewards  Weight(UID): 1000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_claim_rewards_post(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int type: 0: Swap rewards, 1: Liquidity rewards, default to 0
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200189
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_claim_rewards_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_claim_rewards_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_claim_rewards_post_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Claim rewards (TRADE)  # noqa: E501

        Claim swap rewards or liquidity rewards  Weight(UID): 1000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_claim_rewards_post_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int type: 0: Swap rewards, 1: Liquidity rewards, default to 0
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200189
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'type', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_claim_rewards_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_claim_rewards_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_claim_rewards_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/claimRewards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200189',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_claimed_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Claimed History (USER_DATA)  # noqa: E501

        Get history of claimed rewards.  Weight(UID): 1000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_claimed_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int pool_id:
        :param str asset_rewards:
        :param int type: 0: Swap rewards, 1: Liquidity rewards, default to 0
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 3, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200190]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_claimed_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_claimed_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_claimed_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Claimed History (USER_DATA)  # noqa: E501

        Get history of claimed rewards.  Weight(UID): 1000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_claimed_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int pool_id:
        :param str asset_rewards:
        :param int type: 0: Swap rewards, 1: Liquidity rewards, default to 0
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 3, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200190]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'pool_id', 'asset_rewards', 'type', 'start_time', 'end_time', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_claimed_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_claimed_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_claimed_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pool_id' in params:
            query_params.append(('poolId', params['pool_id']))  # noqa: E501
        if 'asset_rewards' in params:
            query_params.append(('assetRewards', params['asset_rewards']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/claimedHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200190]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_liquidity_add_post(self, pool_id, asset, quantity, timestamp, signature, **kwargs):  # noqa: E501
        """Add Liquidity (TRADE)  # noqa: E501

        Add liquidity to a pool.  Weight(UID): 1000 (Additional: 3 times one second)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_liquidity_add_post(pool_id, asset, quantity, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pool_id: (required)
        :param str asset: (required)
        :param float quantity: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str type: * `Single` - to add a single token * `Combination` - to add dual tokens
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200180
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_liquidity_add_post_with_http_info(pool_id, asset, quantity, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_liquidity_add_post_with_http_info(pool_id, asset, quantity, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_liquidity_add_post_with_http_info(self, pool_id, asset, quantity, timestamp, signature, **kwargs):  # noqa: E501
        """Add Liquidity (TRADE)  # noqa: E501

        Add liquidity to a pool.  Weight(UID): 1000 (Additional: 3 times one second)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_liquidity_add_post_with_http_info(pool_id, asset, quantity, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pool_id: (required)
        :param str asset: (required)
        :param float quantity: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str type: * `Single` - to add a single token * `Combination` - to add dual tokens
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200180
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_id', 'asset', 'quantity', 'timestamp', 'signature', 'type', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_liquidity_add_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_id' is set
        if ('pool_id' not in params or
                params['pool_id'] is None):
            raise ValueError("Missing the required parameter `pool_id` when calling `sapi_v1_bswap_liquidity_add_post`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_bswap_liquidity_add_post`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if ('quantity' not in params or
                params['quantity'] is None):
            raise ValueError("Missing the required parameter `quantity` when calling `sapi_v1_bswap_liquidity_add_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_liquidity_add_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_liquidity_add_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pool_id' in params:
            query_params.append(('poolId', params['pool_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'quantity' in params:
            query_params.append(('quantity', params['quantity']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/liquidityAdd', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200180',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_liquidity_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Liquidity information of a pool (USER_DATA)  # noqa: E501

        Get liquidity information and user share of a pool.  Weight(IP): - `1` for one pool; - `10` when the poolId parameter is omitted;  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_liquidity_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int pool_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200179]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_liquidity_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_liquidity_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_liquidity_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Liquidity information of a pool (USER_DATA)  # noqa: E501

        Get liquidity information and user share of a pool.  Weight(IP): - `1` for one pool; - `10` when the poolId parameter is omitted;  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_liquidity_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int pool_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200179]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'pool_id', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_liquidity_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_liquidity_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_liquidity_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pool_id' in params:
            query_params.append(('poolId', params['pool_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/liquidity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200179]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_liquidity_ops_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Liquidity Operation Record (USER_DATA)  # noqa: E501

        Get liquidity operation (add/remove) records.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_liquidity_ops_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int operation_id:
        :param int pool_id:
        :param str operation:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200181]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_liquidity_ops_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_liquidity_ops_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_liquidity_ops_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Liquidity Operation Record (USER_DATA)  # noqa: E501

        Get liquidity operation (add/remove) records.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_liquidity_ops_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int operation_id:
        :param int pool_id:
        :param str operation:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200181]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'operation_id', 'pool_id', 'operation', 'start_time', 'end_time', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_liquidity_ops_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_liquidity_ops_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_liquidity_ops_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'operation_id' in params:
            query_params.append(('operationId', params['operation_id']))  # noqa: E501
        if 'pool_id' in params:
            query_params.append(('poolId', params['pool_id']))  # noqa: E501
        if 'operation' in params:
            query_params.append(('operation', params['operation']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/liquidityOps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200181]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_liquidity_remove_post(self, pool_id, type, share_amount, timestamp, signature, **kwargs):  # noqa: E501
        """Remove Liquidity (TRADE)  # noqa: E501

        Remove liquidity from a pool, `type` include `SINGLE` and `COMBINATION`, asset is mandatory for single asset removal  Weight(UID): 1000 (Additional: 3 times one second)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_liquidity_remove_post(pool_id, type, share_amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pool_id: (required)
        :param str type: * `SINGLE` - for single asset removal * `COMBINATION` - for combination of all coins removal (required)
        :param float share_amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset: Mandatory for single asset removal
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200180
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_liquidity_remove_post_with_http_info(pool_id, type, share_amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_liquidity_remove_post_with_http_info(pool_id, type, share_amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_liquidity_remove_post_with_http_info(self, pool_id, type, share_amount, timestamp, signature, **kwargs):  # noqa: E501
        """Remove Liquidity (TRADE)  # noqa: E501

        Remove liquidity from a pool, `type` include `SINGLE` and `COMBINATION`, asset is mandatory for single asset removal  Weight(UID): 1000 (Additional: 3 times one second)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_liquidity_remove_post_with_http_info(pool_id, type, share_amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pool_id: (required)
        :param str type: * `SINGLE` - for single asset removal * `COMBINATION` - for combination of all coins removal (required)
        :param float share_amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset: Mandatory for single asset removal
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200180
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_id', 'type', 'share_amount', 'timestamp', 'signature', 'asset', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_liquidity_remove_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_id' is set
        if ('pool_id' not in params or
                params['pool_id'] is None):
            raise ValueError("Missing the required parameter `pool_id` when calling `sapi_v1_bswap_liquidity_remove_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `sapi_v1_bswap_liquidity_remove_post`")  # noqa: E501
        # verify the required parameter 'share_amount' is set
        if ('share_amount' not in params or
                params['share_amount'] is None):
            raise ValueError("Missing the required parameter `share_amount` when calling `sapi_v1_bswap_liquidity_remove_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_liquidity_remove_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_liquidity_remove_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pool_id' in params:
            query_params.append(('poolId', params['pool_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'share_amount' in params:
            query_params.append(('shareAmount', params['share_amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/liquidityRemove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200180',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_pool_configure_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Pool Configure (USER_DATA)  # noqa: E501

        Weight(IP): 150  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_pool_configure_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int pool_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200185]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_pool_configure_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_pool_configure_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_pool_configure_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Pool Configure (USER_DATA)  # noqa: E501

        Weight(IP): 150  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_pool_configure_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int pool_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200185]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'pool_id', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_pool_configure_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_pool_configure_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_pool_configure_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pool_id' in params:
            query_params.append(('poolId', params['pool_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/poolConfigure', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200185]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_pools_get(self, **kwargs):  # noqa: E501
        """List All Swap Pools (MARKET_DATA)  # noqa: E501

        Get metadata about all swap pools.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_pools_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[InlineResponse200178]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_pools_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_pools_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_pools_get_with_http_info(self, **kwargs):  # noqa: E501
        """List All Swap Pools (MARKET_DATA)  # noqa: E501

        Get metadata about all swap pools.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_pools_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[InlineResponse200178]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_pools_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/pools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200178]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_quote_get(self, quote_asset, base_asset, quote_qty, timestamp, signature, **kwargs):  # noqa: E501
        """Request Quote (USER_DATA)  # noqa: E501

        Request a quote for swap quote asset (selling asset) for base asset (buying asset), essentially price/exchange rates.  quoteQty is quantity of quote asset (to sell).  Please be noted the quote is for reference only, the actual price will change as the liquidity changes, it's recommended to swap immediate after request a quote for slippage prevention.  Weight(UID): 150  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_quote_get(quote_asset, base_asset, quote_qty, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quote_asset: (required)
        :param str base_asset: (required)
        :param float quote_qty: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200182
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_quote_get_with_http_info(quote_asset, base_asset, quote_qty, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_quote_get_with_http_info(quote_asset, base_asset, quote_qty, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_quote_get_with_http_info(self, quote_asset, base_asset, quote_qty, timestamp, signature, **kwargs):  # noqa: E501
        """Request Quote (USER_DATA)  # noqa: E501

        Request a quote for swap quote asset (selling asset) for base asset (buying asset), essentially price/exchange rates.  quoteQty is quantity of quote asset (to sell).  Please be noted the quote is for reference only, the actual price will change as the liquidity changes, it's recommended to swap immediate after request a quote for slippage prevention.  Weight(UID): 150  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_quote_get_with_http_info(quote_asset, base_asset, quote_qty, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quote_asset: (required)
        :param str base_asset: (required)
        :param float quote_qty: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200182
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quote_asset', 'base_asset', 'quote_qty', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_quote_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quote_asset' is set
        if ('quote_asset' not in params or
                params['quote_asset'] is None):
            raise ValueError("Missing the required parameter `quote_asset` when calling `sapi_v1_bswap_quote_get`")  # noqa: E501
        # verify the required parameter 'base_asset' is set
        if ('base_asset' not in params or
                params['base_asset'] is None):
            raise ValueError("Missing the required parameter `base_asset` when calling `sapi_v1_bswap_quote_get`")  # noqa: E501
        # verify the required parameter 'quote_qty' is set
        if ('quote_qty' not in params or
                params['quote_qty'] is None):
            raise ValueError("Missing the required parameter `quote_qty` when calling `sapi_v1_bswap_quote_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_quote_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_quote_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'quote_asset' in params:
            query_params.append(('quoteAsset', params['quote_asset']))  # noqa: E501
        if 'base_asset' in params:
            query_params.append(('baseAsset', params['base_asset']))  # noqa: E501
        if 'quote_qty' in params:
            query_params.append(('quoteQty', params['quote_qty']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/quote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200182',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_remove_liquidity_preview_get(self, pool_id, type, quote_asset, share_amount, timestamp, signature, **kwargs):  # noqa: E501
        """Remove Liquidity Preview (USER_DATA)  # noqa: E501

        Calculate the expected asset amount of single token redemption or dual token redemption.  Weight(IP): 150  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_remove_liquidity_preview_get(pool_id, type, quote_asset, share_amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pool_id: (required)
        :param str type: * `SINGLE` - remove and obtain a single token * `COMBINATION` - remove and obtain dual token (required)
        :param str quote_asset: (required)
        :param float share_amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200187
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_remove_liquidity_preview_get_with_http_info(pool_id, type, quote_asset, share_amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_remove_liquidity_preview_get_with_http_info(pool_id, type, quote_asset, share_amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_remove_liquidity_preview_get_with_http_info(self, pool_id, type, quote_asset, share_amount, timestamp, signature, **kwargs):  # noqa: E501
        """Remove Liquidity Preview (USER_DATA)  # noqa: E501

        Calculate the expected asset amount of single token redemption or dual token redemption.  Weight(IP): 150  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_remove_liquidity_preview_get_with_http_info(pool_id, type, quote_asset, share_amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pool_id: (required)
        :param str type: * `SINGLE` - remove and obtain a single token * `COMBINATION` - remove and obtain dual token (required)
        :param str quote_asset: (required)
        :param float share_amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200187
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_id', 'type', 'quote_asset', 'share_amount', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_remove_liquidity_preview_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_id' is set
        if ('pool_id' not in params or
                params['pool_id'] is None):
            raise ValueError("Missing the required parameter `pool_id` when calling `sapi_v1_bswap_remove_liquidity_preview_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `sapi_v1_bswap_remove_liquidity_preview_get`")  # noqa: E501
        # verify the required parameter 'quote_asset' is set
        if ('quote_asset' not in params or
                params['quote_asset'] is None):
            raise ValueError("Missing the required parameter `quote_asset` when calling `sapi_v1_bswap_remove_liquidity_preview_get`")  # noqa: E501
        # verify the required parameter 'share_amount' is set
        if ('share_amount' not in params or
                params['share_amount'] is None):
            raise ValueError("Missing the required parameter `share_amount` when calling `sapi_v1_bswap_remove_liquidity_preview_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_remove_liquidity_preview_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_remove_liquidity_preview_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pool_id' in params:
            query_params.append(('poolId', params['pool_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'quote_asset' in params:
            query_params.append(('quoteAsset', params['quote_asset']))  # noqa: E501
        if 'share_amount' in params:
            query_params.append(('shareAmount', params['share_amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/removeLiquidityPreview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200187',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_swap_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Swap History (USER_DATA)  # noqa: E501

        Get swap history.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_swap_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int swap_id:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int status: * `0` - pending for swap * `1` - success * `2` - failed
        :param str quote_asset:
        :param str base_asset:
        :param int limit: default 3, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200183]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_swap_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_swap_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_swap_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Swap History (USER_DATA)  # noqa: E501

        Get swap history.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_swap_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int swap_id:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int status: * `0` - pending for swap * `1` - success * `2` - failed
        :param str quote_asset:
        :param str base_asset:
        :param int limit: default 3, max 100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200183]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'swap_id', 'start_time', 'end_time', 'status', 'quote_asset', 'base_asset', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_swap_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_swap_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_swap_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'swap_id' in params:
            query_params.append(('swapId', params['swap_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'quote_asset' in params:
            query_params.append(('quoteAsset', params['quote_asset']))  # noqa: E501
        if 'base_asset' in params:
            query_params.append(('baseAsset', params['base_asset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/swap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200183]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_swap_post(self, quote_asset, base_asset, quote_qty, timestamp, signature, **kwargs):  # noqa: E501
        """Swap (TRADE)  # noqa: E501

        Swap `quoteAsset` for `baseAsset`.  Weight(UID): 1000 (Additional: 3 times one second)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_swap_post(quote_asset, base_asset, quote_qty, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quote_asset: (required)
        :param str base_asset: (required)
        :param float quote_qty: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200184
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_swap_post_with_http_info(quote_asset, base_asset, quote_qty, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_swap_post_with_http_info(quote_asset, base_asset, quote_qty, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_swap_post_with_http_info(self, quote_asset, base_asset, quote_qty, timestamp, signature, **kwargs):  # noqa: E501
        """Swap (TRADE)  # noqa: E501

        Swap `quoteAsset` for `baseAsset`.  Weight(UID): 1000 (Additional: 3 times one second)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_swap_post_with_http_info(quote_asset, base_asset, quote_qty, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quote_asset: (required)
        :param str base_asset: (required)
        :param float quote_qty: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200184
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quote_asset', 'base_asset', 'quote_qty', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_swap_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quote_asset' is set
        if ('quote_asset' not in params or
                params['quote_asset'] is None):
            raise ValueError("Missing the required parameter `quote_asset` when calling `sapi_v1_bswap_swap_post`")  # noqa: E501
        # verify the required parameter 'base_asset' is set
        if ('base_asset' not in params or
                params['base_asset'] is None):
            raise ValueError("Missing the required parameter `base_asset` when calling `sapi_v1_bswap_swap_post`")  # noqa: E501
        # verify the required parameter 'quote_qty' is set
        if ('quote_qty' not in params or
                params['quote_qty'] is None):
            raise ValueError("Missing the required parameter `quote_qty` when calling `sapi_v1_bswap_swap_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_swap_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_swap_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'quote_asset' in params:
            query_params.append(('quoteAsset', params['quote_asset']))  # noqa: E501
        if 'base_asset' in params:
            query_params.append(('baseAsset', params['base_asset']))  # noqa: E501
        if 'quote_qty' in params:
            query_params.append(('quoteQty', params['quote_qty']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/swap', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200184',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_bswap_unclaimed_rewards_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Unclaimed Rewards Record (USER_DATA)  # noqa: E501

        Get unclaimed rewards record.  Weight(UID): 1000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_unclaimed_rewards_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int type: 0: Swap rewards, 1: Liquidity rewards, default to 0
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200188
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_bswap_unclaimed_rewards_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_bswap_unclaimed_rewards_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_bswap_unclaimed_rewards_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Unclaimed Rewards Record (USER_DATA)  # noqa: E501

        Get unclaimed rewards record.  Weight(UID): 1000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_bswap_unclaimed_rewards_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int type: 0: Swap rewards, 1: Liquidity rewards, default to 0
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200188
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'type', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_bswap_unclaimed_rewards_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_bswap_unclaimed_rewards_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_bswap_unclaimed_rewards_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/bswap/unclaimedRewards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200188',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
