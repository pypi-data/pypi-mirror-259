# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class GiftCardApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_giftcard_buy_code_post(self, base_token, face_token, base_token_amount, timestamp, signature, **kwargs):  # noqa: E501
        """Buy a Binance Code (TRADE)  # noqa: E501

        This API is for buying a fixed-value Binance Code, which means your Binance Code will be redeemable to a token that is different to the token that you are paying in. If the token youâ€™re paying and the redeemable token are the same, please use the Create Binance Code endpoint. You can use supported crypto currency or fiat token as baseToken to buy Binance Code that is redeemable to your chosen faceToken. Once successfully purchased, the amount of baseToken would be deducted from your funding wallet.  To get started with, please make sure: - You have a Binance account - You have passed kyc - You have a sufficient balance in your Binance funding wallet - You need Enable Withdrawals for the API Key which requests this endpoint.  Daily creation volume: 2 BTC / 24H Daily creation times: 200 Codes / 24H  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_buy_code_post(base_token, face_token, base_token_amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str base_token: The token you want to pay, example BUSD (required)
        :param str face_token: The token you want to buy, example BNB. If faceToken = baseToken, it's the same as createCode endpoint. (required)
        :param float base_token_amount: The base token asset quantity, example  1.002 (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200235
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_giftcard_buy_code_post_with_http_info(base_token, face_token, base_token_amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_giftcard_buy_code_post_with_http_info(base_token, face_token, base_token_amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_giftcard_buy_code_post_with_http_info(self, base_token, face_token, base_token_amount, timestamp, signature, **kwargs):  # noqa: E501
        """Buy a Binance Code (TRADE)  # noqa: E501

        This API is for buying a fixed-value Binance Code, which means your Binance Code will be redeemable to a token that is different to the token that you are paying in. If the token youâ€™re paying and the redeemable token are the same, please use the Create Binance Code endpoint. You can use supported crypto currency or fiat token as baseToken to buy Binance Code that is redeemable to your chosen faceToken. Once successfully purchased, the amount of baseToken would be deducted from your funding wallet.  To get started with, please make sure: - You have a Binance account - You have passed kyc - You have a sufficient balance in your Binance funding wallet - You need Enable Withdrawals for the API Key which requests this endpoint.  Daily creation volume: 2 BTC / 24H Daily creation times: 200 Codes / 24H  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_buy_code_post_with_http_info(base_token, face_token, base_token_amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str base_token: The token you want to pay, example BUSD (required)
        :param str face_token: The token you want to buy, example BNB. If faceToken = baseToken, it's the same as createCode endpoint. (required)
        :param float base_token_amount: The base token asset quantity, example  1.002 (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200235
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['base_token', 'face_token', 'base_token_amount', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_giftcard_buy_code_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'base_token' is set
        if ('base_token' not in params or
                params['base_token'] is None):
            raise ValueError("Missing the required parameter `base_token` when calling `sapi_v1_giftcard_buy_code_post`")  # noqa: E501
        # verify the required parameter 'face_token' is set
        if ('face_token' not in params or
                params['face_token'] is None):
            raise ValueError("Missing the required parameter `face_token` when calling `sapi_v1_giftcard_buy_code_post`")  # noqa: E501
        # verify the required parameter 'base_token_amount' is set
        if ('base_token_amount' not in params or
                params['base_token_amount'] is None):
            raise ValueError("Missing the required parameter `base_token_amount` when calling `sapi_v1_giftcard_buy_code_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_giftcard_buy_code_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_giftcard_buy_code_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'base_token' in params:
            query_params.append(('baseToken', params['base_token']))  # noqa: E501
        if 'face_token' in params:
            query_params.append(('faceToken', params['face_token']))  # noqa: E501
        if 'base_token_amount' in params:
            query_params.append(('baseTokenAmount', params['base_token_amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/giftcard/buyCode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200235',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_giftcard_buy_code_token_limit_get(self, base_token, timestamp, signature, **kwargs):  # noqa: E501
        """Fetch Token Limit (USER_DATA)  # noqa: E501

        This API is to help you verify which tokens are available for you to purchase fixed-value gift cards as mentioned in section 2 and it's limitation.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_buy_code_token_limit_get(base_token, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str base_token: The token you want to pay, example BUSD (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200239
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_giftcard_buy_code_token_limit_get_with_http_info(base_token, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_giftcard_buy_code_token_limit_get_with_http_info(base_token, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_giftcard_buy_code_token_limit_get_with_http_info(self, base_token, timestamp, signature, **kwargs):  # noqa: E501
        """Fetch Token Limit (USER_DATA)  # noqa: E501

        This API is to help you verify which tokens are available for you to purchase fixed-value gift cards as mentioned in section 2 and it's limitation.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_buy_code_token_limit_get_with_http_info(base_token, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str base_token: The token you want to pay, example BUSD (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200239
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['base_token', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_giftcard_buy_code_token_limit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'base_token' is set
        if ('base_token' not in params or
                params['base_token'] is None):
            raise ValueError("Missing the required parameter `base_token` when calling `sapi_v1_giftcard_buy_code_token_limit_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_giftcard_buy_code_token_limit_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_giftcard_buy_code_token_limit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'base_token' in params:
            query_params.append(('baseToken', params['base_token']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/giftcard/buyCode/token-limit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200239',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_giftcard_create_code_post(self, token, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Create a Binance Code (USER_DATA)  # noqa: E501

        This API is for creating a Binance Code. To get started with, please make sure:  - You have a Binance account - You have passed kyc - You have a sufficient balance in your Binance funding wallet - You need Enable Withdrawals for the API Key which requests this endpoint.  Daily creation volume: 2 BTC / 24H Daily creation times: 200 Codes / 24H  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_create_code_post(token, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: The coin type contained in the Binance Code (required)
        :param float amount: The amount of the coin (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200235
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_giftcard_create_code_post_with_http_info(token, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_giftcard_create_code_post_with_http_info(token, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_giftcard_create_code_post_with_http_info(self, token, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Create a Binance Code (USER_DATA)  # noqa: E501

        This API is for creating a Binance Code. To get started with, please make sure:  - You have a Binance account - You have passed kyc - You have a sufficient balance in your Binance funding wallet - You need Enable Withdrawals for the API Key which requests this endpoint.  Daily creation volume: 2 BTC / 24H Daily creation times: 200 Codes / 24H  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_create_code_post_with_http_info(token, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: The coin type contained in the Binance Code (required)
        :param float amount: The amount of the coin (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200235
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'amount', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_giftcard_create_code_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `sapi_v1_giftcard_create_code_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_giftcard_create_code_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_giftcard_create_code_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_giftcard_create_code_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/giftcard/createCode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200235',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_giftcard_cryptography_rsa_public_key_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Fetch RSA Public Key (USER_DATA)  # noqa: E501

        This API is for fetching the RSA Public Key. This RSA Public key will be used to encrypt the card code. Please note that the RSA Public key fetched is valid only for the current day.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_cryptography_rsa_public_key_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200238
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_giftcard_cryptography_rsa_public_key_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_giftcard_cryptography_rsa_public_key_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_giftcard_cryptography_rsa_public_key_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Fetch RSA Public Key (USER_DATA)  # noqa: E501

        This API is for fetching the RSA Public Key. This RSA Public key will be used to encrypt the card code. Please note that the RSA Public key fetched is valid only for the current day.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_cryptography_rsa_public_key_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200238
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_giftcard_cryptography_rsa_public_key_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_giftcard_cryptography_rsa_public_key_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_giftcard_cryptography_rsa_public_key_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/giftcard/cryptography/rsa-public-key', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200238',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_giftcard_redeem_code_post(self, code, timestamp, signature, **kwargs):  # noqa: E501
        """Redeem a Binance Code (USER_DATA)  # noqa: E501

        This API is for redeeming the Binance Code. Once redeemed, the coins will be deposited in your funding wallet.  Please note that if you enter the wrong code 5 times within 24 hours, you will no longer be able to redeem any Binance Code that day.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_redeem_code_post(code, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Binance Code (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str external_uid: Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters).
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200236
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_giftcard_redeem_code_post_with_http_info(code, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_giftcard_redeem_code_post_with_http_info(code, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_giftcard_redeem_code_post_with_http_info(self, code, timestamp, signature, **kwargs):  # noqa: E501
        """Redeem a Binance Code (USER_DATA)  # noqa: E501

        This API is for redeeming the Binance Code. Once redeemed, the coins will be deposited in your funding wallet.  Please note that if you enter the wrong code 5 times within 24 hours, you will no longer be able to redeem any Binance Code that day.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_redeem_code_post_with_http_info(code, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str code: Binance Code (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str external_uid: Each external unique ID represents a unique user on the partner platform. The function helps you to identify the redemption behavior of different users, such as redemption frequency and amount. It also helps risk and limit control of a single account, such as daily limit on redemption volume, frequency, and incorrect number of entries. This will also prevent a single user account reach the partner's daily redemption limits. We strongly recommend you to use this feature and transfer us the User ID of your users if you have different users redeeming Binance codes on your platform. To protect user data privacy, you may choose to transfer the user id in any desired format (max. 400 characters).
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200236
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['code', 'timestamp', 'signature', 'external_uid', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_giftcard_redeem_code_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'code' is set
        if ('code' not in params or
                params['code'] is None):
            raise ValueError("Missing the required parameter `code` when calling `sapi_v1_giftcard_redeem_code_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_giftcard_redeem_code_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_giftcard_redeem_code_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'external_uid' in params:
            query_params.append(('externalUid', params['external_uid']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/giftcard/redeemCode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200236',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_giftcard_verify_get(self, reference_no, timestamp, signature, **kwargs):  # noqa: E501
        """Verify a Binance Code (USER_DATA)  # noqa: E501

        This API is for verifying whether the Binance Code is valid or not by entering Binance Code or reference number.  Please note that if you enter the wrong binance code 5 times within an hour, you will no longer be able to verify any binance code for that hour.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_verify_get(reference_no, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_no: reference number (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200237
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_giftcard_verify_get_with_http_info(reference_no, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_giftcard_verify_get_with_http_info(reference_no, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_giftcard_verify_get_with_http_info(self, reference_no, timestamp, signature, **kwargs):  # noqa: E501
        """Verify a Binance Code (USER_DATA)  # noqa: E501

        This API is for verifying whether the Binance Code is valid or not by entering Binance Code or reference number.  Please note that if you enter the wrong binance code 5 times within an hour, you will no longer be able to verify any binance code for that hour.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_giftcard_verify_get_with_http_info(reference_no, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str reference_no: reference number (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200237
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['reference_no', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_giftcard_verify_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'reference_no' is set
        if ('reference_no' not in params or
                params['reference_no'] is None):
            raise ValueError("Missing the required parameter `reference_no` when calling `sapi_v1_giftcard_verify_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_giftcard_verify_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_giftcard_verify_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'reference_no' in params:
            query_params.append(('referenceNo', params['reference_no']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/giftcard/verify', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200237',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
