# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200141DataAccountProfits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'int',
        'type': 'int',
        'hash_transfer': 'int',
        'transfer_amount': 'float',
        'day_hash_rate': 'int',
        'profit_amount': 'float',
        'coin_name': 'str',
        'status': 'int'
    }

    attribute_map = {
        'time': 'time',
        'type': 'type',
        'hash_transfer': 'hashTransfer',
        'transfer_amount': 'transferAmount',
        'day_hash_rate': 'dayHashRate',
        'profit_amount': 'profitAmount',
        'coin_name': 'coinName',
        'status': 'status'
    }

    def __init__(self, time=None, type=None, hash_transfer=None, transfer_amount=None, day_hash_rate=None, profit_amount=None, coin_name=None, status=None):  # noqa: E501
        """InlineResponse200141DataAccountProfits - a model defined in Swagger"""  # noqa: E501
        self._time = None
        self._type = None
        self._hash_transfer = None
        self._transfer_amount = None
        self._day_hash_rate = None
        self._profit_amount = None
        self._coin_name = None
        self._status = None
        self.discriminator = None
        self.time = time
        self.type = type
        self.hash_transfer = hash_transfer
        self.transfer_amount = transfer_amount
        self.day_hash_rate = day_hash_rate
        self.profit_amount = profit_amount
        self.coin_name = coin_name
        self.status = status

    @property
    def time(self):
        """Gets the time of this InlineResponse200141DataAccountProfits.  # noqa: E501

        Mining date  # noqa: E501

        :return: The time of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this InlineResponse200141DataAccountProfits.

        Mining date  # noqa: E501

        :param time: The time of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def type(self):
        """Gets the type of this InlineResponse200141DataAccountProfits.  # noqa: E501

        0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings  # noqa: E501

        :return: The type of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200141DataAccountProfits.

        0:Mining Wallet,5:Mining Address,7:Pool Savings,8:Transferred,31:Income Transfer ,32:Hashrate Resale-Mining Wallet 33:Hashrate Resale-Pool Savings  # noqa: E501

        :param type: The type of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def hash_transfer(self):
        """Gets the hash_transfer of this InlineResponse200141DataAccountProfits.  # noqa: E501

        Transferred Hashrate  # noqa: E501

        :return: The hash_transfer of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :rtype: int
        """
        return self._hash_transfer

    @hash_transfer.setter
    def hash_transfer(self, hash_transfer):
        """Sets the hash_transfer of this InlineResponse200141DataAccountProfits.

        Transferred Hashrate  # noqa: E501

        :param hash_transfer: The hash_transfer of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :type: int
        """
        if hash_transfer is None:
            raise ValueError("Invalid value for `hash_transfer`, must not be `None`")  # noqa: E501

        self._hash_transfer = hash_transfer

    @property
    def transfer_amount(self):
        """Gets the transfer_amount of this InlineResponse200141DataAccountProfits.  # noqa: E501

        Transferred Income  # noqa: E501

        :return: The transfer_amount of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :rtype: float
        """
        return self._transfer_amount

    @transfer_amount.setter
    def transfer_amount(self, transfer_amount):
        """Sets the transfer_amount of this InlineResponse200141DataAccountProfits.

        Transferred Income  # noqa: E501

        :param transfer_amount: The transfer_amount of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :type: float
        """
        if transfer_amount is None:
            raise ValueError("Invalid value for `transfer_amount`, must not be `None`")  # noqa: E501

        self._transfer_amount = transfer_amount

    @property
    def day_hash_rate(self):
        """Gets the day_hash_rate of this InlineResponse200141DataAccountProfits.  # noqa: E501

        Daily Hashrate  # noqa: E501

        :return: The day_hash_rate of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :rtype: int
        """
        return self._day_hash_rate

    @day_hash_rate.setter
    def day_hash_rate(self, day_hash_rate):
        """Sets the day_hash_rate of this InlineResponse200141DataAccountProfits.

        Daily Hashrate  # noqa: E501

        :param day_hash_rate: The day_hash_rate of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :type: int
        """
        if day_hash_rate is None:
            raise ValueError("Invalid value for `day_hash_rate`, must not be `None`")  # noqa: E501

        self._day_hash_rate = day_hash_rate

    @property
    def profit_amount(self):
        """Gets the profit_amount of this InlineResponse200141DataAccountProfits.  # noqa: E501

        Earnings Amount  # noqa: E501

        :return: The profit_amount of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :rtype: float
        """
        return self._profit_amount

    @profit_amount.setter
    def profit_amount(self, profit_amount):
        """Sets the profit_amount of this InlineResponse200141DataAccountProfits.

        Earnings Amount  # noqa: E501

        :param profit_amount: The profit_amount of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :type: float
        """
        if profit_amount is None:
            raise ValueError("Invalid value for `profit_amount`, must not be `None`")  # noqa: E501

        self._profit_amount = profit_amount

    @property
    def coin_name(self):
        """Gets the coin_name of this InlineResponse200141DataAccountProfits.  # noqa: E501

        Coin Type  # noqa: E501

        :return: The coin_name of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :rtype: str
        """
        return self._coin_name

    @coin_name.setter
    def coin_name(self, coin_name):
        """Sets the coin_name of this InlineResponse200141DataAccountProfits.

        Coin Type  # noqa: E501

        :param coin_name: The coin_name of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :type: str
        """
        if coin_name is None:
            raise ValueError("Invalid value for `coin_name`, must not be `None`")  # noqa: E501

        self._coin_name = coin_name

    @property
    def status(self):
        """Gets the status of this InlineResponse200141DataAccountProfits.  # noqa: E501

        Status：0:Unpaid, 1:Paying  2：Paid  # noqa: E501

        :return: The status of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200141DataAccountProfits.

        Status：0:Unpaid, 1:Paying  2：Paid  # noqa: E501

        :param status: The status of this InlineResponse200141DataAccountProfits.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200141DataAccountProfits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200141DataAccountProfits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
