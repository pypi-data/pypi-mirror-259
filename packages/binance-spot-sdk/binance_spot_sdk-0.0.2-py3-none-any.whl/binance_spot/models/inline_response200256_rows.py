# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200256Rows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'latest_annual_percentage_rate': 'str',
        'tier_annual_percentage_rate': 'InlineResponse200256TierAnnualPercentageRate',
        'air_drop_percentage_rate': 'str',
        'can_purchase': 'bool',
        'can_redeem': 'bool',
        'is_sold_out': 'bool',
        'hot': 'bool',
        'min_purchase_amount': 'str',
        'product_id': 'str',
        'subscription_start_time': 'str',
        'status': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'latest_annual_percentage_rate': 'latestAnnualPercentageRate',
        'tier_annual_percentage_rate': 'tierAnnualPercentageRate',
        'air_drop_percentage_rate': 'airDropPercentageRate',
        'can_purchase': 'canPurchase',
        'can_redeem': 'canRedeem',
        'is_sold_out': 'isSoldOut',
        'hot': 'hot',
        'min_purchase_amount': 'minPurchaseAmount',
        'product_id': 'productId',
        'subscription_start_time': 'subscriptionStartTime',
        'status': 'status'
    }

    def __init__(self, asset=None, latest_annual_percentage_rate=None, tier_annual_percentage_rate=None, air_drop_percentage_rate=None, can_purchase=None, can_redeem=None, is_sold_out=None, hot=None, min_purchase_amount=None, product_id=None, subscription_start_time=None, status=None):  # noqa: E501
        """InlineResponse200256Rows - a model defined in Swagger"""  # noqa: E501
        self._asset = None
        self._latest_annual_percentage_rate = None
        self._tier_annual_percentage_rate = None
        self._air_drop_percentage_rate = None
        self._can_purchase = None
        self._can_redeem = None
        self._is_sold_out = None
        self._hot = None
        self._min_purchase_amount = None
        self._product_id = None
        self._subscription_start_time = None
        self._status = None
        self.discriminator = None
        self.asset = asset
        self.latest_annual_percentage_rate = latest_annual_percentage_rate
        self.tier_annual_percentage_rate = tier_annual_percentage_rate
        self.air_drop_percentage_rate = air_drop_percentage_rate
        self.can_purchase = can_purchase
        self.can_redeem = can_redeem
        self.is_sold_out = is_sold_out
        self.hot = hot
        self.min_purchase_amount = min_purchase_amount
        self.product_id = product_id
        self.subscription_start_time = subscription_start_time
        self.status = status

    @property
    def asset(self):
        """Gets the asset of this InlineResponse200256Rows.  # noqa: E501


        :return: The asset of this InlineResponse200256Rows.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse200256Rows.


        :param asset: The asset of this InlineResponse200256Rows.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def latest_annual_percentage_rate(self):
        """Gets the latest_annual_percentage_rate of this InlineResponse200256Rows.  # noqa: E501


        :return: The latest_annual_percentage_rate of this InlineResponse200256Rows.  # noqa: E501
        :rtype: str
        """
        return self._latest_annual_percentage_rate

    @latest_annual_percentage_rate.setter
    def latest_annual_percentage_rate(self, latest_annual_percentage_rate):
        """Sets the latest_annual_percentage_rate of this InlineResponse200256Rows.


        :param latest_annual_percentage_rate: The latest_annual_percentage_rate of this InlineResponse200256Rows.  # noqa: E501
        :type: str
        """
        if latest_annual_percentage_rate is None:
            raise ValueError("Invalid value for `latest_annual_percentage_rate`, must not be `None`")  # noqa: E501

        self._latest_annual_percentage_rate = latest_annual_percentage_rate

    @property
    def tier_annual_percentage_rate(self):
        """Gets the tier_annual_percentage_rate of this InlineResponse200256Rows.  # noqa: E501


        :return: The tier_annual_percentage_rate of this InlineResponse200256Rows.  # noqa: E501
        :rtype: InlineResponse200256TierAnnualPercentageRate
        """
        return self._tier_annual_percentage_rate

    @tier_annual_percentage_rate.setter
    def tier_annual_percentage_rate(self, tier_annual_percentage_rate):
        """Sets the tier_annual_percentage_rate of this InlineResponse200256Rows.


        :param tier_annual_percentage_rate: The tier_annual_percentage_rate of this InlineResponse200256Rows.  # noqa: E501
        :type: InlineResponse200256TierAnnualPercentageRate
        """
        if tier_annual_percentage_rate is None:
            raise ValueError("Invalid value for `tier_annual_percentage_rate`, must not be `None`")  # noqa: E501

        self._tier_annual_percentage_rate = tier_annual_percentage_rate

    @property
    def air_drop_percentage_rate(self):
        """Gets the air_drop_percentage_rate of this InlineResponse200256Rows.  # noqa: E501


        :return: The air_drop_percentage_rate of this InlineResponse200256Rows.  # noqa: E501
        :rtype: str
        """
        return self._air_drop_percentage_rate

    @air_drop_percentage_rate.setter
    def air_drop_percentage_rate(self, air_drop_percentage_rate):
        """Sets the air_drop_percentage_rate of this InlineResponse200256Rows.


        :param air_drop_percentage_rate: The air_drop_percentage_rate of this InlineResponse200256Rows.  # noqa: E501
        :type: str
        """
        if air_drop_percentage_rate is None:
            raise ValueError("Invalid value for `air_drop_percentage_rate`, must not be `None`")  # noqa: E501

        self._air_drop_percentage_rate = air_drop_percentage_rate

    @property
    def can_purchase(self):
        """Gets the can_purchase of this InlineResponse200256Rows.  # noqa: E501


        :return: The can_purchase of this InlineResponse200256Rows.  # noqa: E501
        :rtype: bool
        """
        return self._can_purchase

    @can_purchase.setter
    def can_purchase(self, can_purchase):
        """Sets the can_purchase of this InlineResponse200256Rows.


        :param can_purchase: The can_purchase of this InlineResponse200256Rows.  # noqa: E501
        :type: bool
        """
        if can_purchase is None:
            raise ValueError("Invalid value for `can_purchase`, must not be `None`")  # noqa: E501

        self._can_purchase = can_purchase

    @property
    def can_redeem(self):
        """Gets the can_redeem of this InlineResponse200256Rows.  # noqa: E501


        :return: The can_redeem of this InlineResponse200256Rows.  # noqa: E501
        :rtype: bool
        """
        return self._can_redeem

    @can_redeem.setter
    def can_redeem(self, can_redeem):
        """Sets the can_redeem of this InlineResponse200256Rows.


        :param can_redeem: The can_redeem of this InlineResponse200256Rows.  # noqa: E501
        :type: bool
        """
        if can_redeem is None:
            raise ValueError("Invalid value for `can_redeem`, must not be `None`")  # noqa: E501

        self._can_redeem = can_redeem

    @property
    def is_sold_out(self):
        """Gets the is_sold_out of this InlineResponse200256Rows.  # noqa: E501


        :return: The is_sold_out of this InlineResponse200256Rows.  # noqa: E501
        :rtype: bool
        """
        return self._is_sold_out

    @is_sold_out.setter
    def is_sold_out(self, is_sold_out):
        """Sets the is_sold_out of this InlineResponse200256Rows.


        :param is_sold_out: The is_sold_out of this InlineResponse200256Rows.  # noqa: E501
        :type: bool
        """
        if is_sold_out is None:
            raise ValueError("Invalid value for `is_sold_out`, must not be `None`")  # noqa: E501

        self._is_sold_out = is_sold_out

    @property
    def hot(self):
        """Gets the hot of this InlineResponse200256Rows.  # noqa: E501


        :return: The hot of this InlineResponse200256Rows.  # noqa: E501
        :rtype: bool
        """
        return self._hot

    @hot.setter
    def hot(self, hot):
        """Sets the hot of this InlineResponse200256Rows.


        :param hot: The hot of this InlineResponse200256Rows.  # noqa: E501
        :type: bool
        """
        if hot is None:
            raise ValueError("Invalid value for `hot`, must not be `None`")  # noqa: E501

        self._hot = hot

    @property
    def min_purchase_amount(self):
        """Gets the min_purchase_amount of this InlineResponse200256Rows.  # noqa: E501


        :return: The min_purchase_amount of this InlineResponse200256Rows.  # noqa: E501
        :rtype: str
        """
        return self._min_purchase_amount

    @min_purchase_amount.setter
    def min_purchase_amount(self, min_purchase_amount):
        """Sets the min_purchase_amount of this InlineResponse200256Rows.


        :param min_purchase_amount: The min_purchase_amount of this InlineResponse200256Rows.  # noqa: E501
        :type: str
        """
        if min_purchase_amount is None:
            raise ValueError("Invalid value for `min_purchase_amount`, must not be `None`")  # noqa: E501

        self._min_purchase_amount = min_purchase_amount

    @property
    def product_id(self):
        """Gets the product_id of this InlineResponse200256Rows.  # noqa: E501


        :return: The product_id of this InlineResponse200256Rows.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this InlineResponse200256Rows.


        :param product_id: The product_id of this InlineResponse200256Rows.  # noqa: E501
        :type: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def subscription_start_time(self):
        """Gets the subscription_start_time of this InlineResponse200256Rows.  # noqa: E501


        :return: The subscription_start_time of this InlineResponse200256Rows.  # noqa: E501
        :rtype: str
        """
        return self._subscription_start_time

    @subscription_start_time.setter
    def subscription_start_time(self, subscription_start_time):
        """Sets the subscription_start_time of this InlineResponse200256Rows.


        :param subscription_start_time: The subscription_start_time of this InlineResponse200256Rows.  # noqa: E501
        :type: str
        """
        if subscription_start_time is None:
            raise ValueError("Invalid value for `subscription_start_time`, must not be `None`")  # noqa: E501

        self._subscription_start_time = subscription_start_time

    @property
    def status(self):
        """Gets the status of this InlineResponse200256Rows.  # noqa: E501


        :return: The status of this InlineResponse200256Rows.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200256Rows.


        :param status: The status of this InlineResponse200256Rows.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200256Rows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200256Rows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
