# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200191Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_number': 'str',
        'adv_no': 'str',
        'trade_type': 'str',
        'asset': 'str',
        'fiat': 'str',
        'fiat_symbol': 'str',
        'amount': 'str',
        'total_price': 'str',
        'unit_price': 'str',
        'order_status': 'str',
        'create_time': 'int',
        'commission': 'str',
        'counter_part_nick_name': 'str',
        'advertisement_role': 'str'
    }

    attribute_map = {
        'order_number': 'orderNumber',
        'adv_no': 'advNo',
        'trade_type': 'tradeType',
        'asset': 'asset',
        'fiat': 'fiat',
        'fiat_symbol': 'fiatSymbol',
        'amount': 'amount',
        'total_price': 'totalPrice',
        'unit_price': 'unitPrice',
        'order_status': 'orderStatus',
        'create_time': 'createTime',
        'commission': 'commission',
        'counter_part_nick_name': 'counterPartNickName',
        'advertisement_role': 'advertisementRole'
    }

    def __init__(self, order_number=None, adv_no=None, trade_type=None, asset=None, fiat=None, fiat_symbol=None, amount=None, total_price=None, unit_price=None, order_status=None, create_time=None, commission=None, counter_part_nick_name=None, advertisement_role=None):  # noqa: E501
        """InlineResponse200191Data - a model defined in Swagger"""  # noqa: E501
        self._order_number = None
        self._adv_no = None
        self._trade_type = None
        self._asset = None
        self._fiat = None
        self._fiat_symbol = None
        self._amount = None
        self._total_price = None
        self._unit_price = None
        self._order_status = None
        self._create_time = None
        self._commission = None
        self._counter_part_nick_name = None
        self._advertisement_role = None
        self.discriminator = None
        self.order_number = order_number
        self.adv_no = adv_no
        self.trade_type = trade_type
        self.asset = asset
        self.fiat = fiat
        self.fiat_symbol = fiat_symbol
        self.amount = amount
        self.total_price = total_price
        self.unit_price = unit_price
        self.order_status = order_status
        self.create_time = create_time
        self.commission = commission
        self.counter_part_nick_name = counter_part_nick_name
        self.advertisement_role = advertisement_role

    @property
    def order_number(self):
        """Gets the order_number of this InlineResponse200191Data.  # noqa: E501


        :return: The order_number of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this InlineResponse200191Data.


        :param order_number: The order_number of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if order_number is None:
            raise ValueError("Invalid value for `order_number`, must not be `None`")  # noqa: E501

        self._order_number = order_number

    @property
    def adv_no(self):
        """Gets the adv_no of this InlineResponse200191Data.  # noqa: E501


        :return: The adv_no of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._adv_no

    @adv_no.setter
    def adv_no(self, adv_no):
        """Sets the adv_no of this InlineResponse200191Data.


        :param adv_no: The adv_no of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if adv_no is None:
            raise ValueError("Invalid value for `adv_no`, must not be `None`")  # noqa: E501

        self._adv_no = adv_no

    @property
    def trade_type(self):
        """Gets the trade_type of this InlineResponse200191Data.  # noqa: E501


        :return: The trade_type of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._trade_type

    @trade_type.setter
    def trade_type(self, trade_type):
        """Sets the trade_type of this InlineResponse200191Data.


        :param trade_type: The trade_type of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if trade_type is None:
            raise ValueError("Invalid value for `trade_type`, must not be `None`")  # noqa: E501

        self._trade_type = trade_type

    @property
    def asset(self):
        """Gets the asset of this InlineResponse200191Data.  # noqa: E501


        :return: The asset of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse200191Data.


        :param asset: The asset of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def fiat(self):
        """Gets the fiat of this InlineResponse200191Data.  # noqa: E501


        :return: The fiat of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._fiat

    @fiat.setter
    def fiat(self, fiat):
        """Sets the fiat of this InlineResponse200191Data.


        :param fiat: The fiat of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if fiat is None:
            raise ValueError("Invalid value for `fiat`, must not be `None`")  # noqa: E501

        self._fiat = fiat

    @property
    def fiat_symbol(self):
        """Gets the fiat_symbol of this InlineResponse200191Data.  # noqa: E501


        :return: The fiat_symbol of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._fiat_symbol

    @fiat_symbol.setter
    def fiat_symbol(self, fiat_symbol):
        """Sets the fiat_symbol of this InlineResponse200191Data.


        :param fiat_symbol: The fiat_symbol of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if fiat_symbol is None:
            raise ValueError("Invalid value for `fiat_symbol`, must not be `None`")  # noqa: E501

        self._fiat_symbol = fiat_symbol

    @property
    def amount(self):
        """Gets the amount of this InlineResponse200191Data.  # noqa: E501

        Quantity (in Crypto)  # noqa: E501

        :return: The amount of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse200191Data.

        Quantity (in Crypto)  # noqa: E501

        :param amount: The amount of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def total_price(self):
        """Gets the total_price of this InlineResponse200191Data.  # noqa: E501


        :return: The total_price of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this InlineResponse200191Data.


        :param total_price: The total_price of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")  # noqa: E501

        self._total_price = total_price

    @property
    def unit_price(self):
        """Gets the unit_price of this InlineResponse200191Data.  # noqa: E501

        Unit Price (in Fiat)  # noqa: E501

        :return: The unit_price of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InlineResponse200191Data.

        Unit Price (in Fiat)  # noqa: E501

        :param unit_price: The unit_price of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")  # noqa: E501

        self._unit_price = unit_price

    @property
    def order_status(self):
        """Gets the order_status of this InlineResponse200191Data.  # noqa: E501

        PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM  # noqa: E501

        :return: The order_status of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this InlineResponse200191Data.

        PENDING, TRADING, BUYER_PAYED, DISTRIBUTING, COMPLETED, IN_APPEAL, CANCELLED, CANCELLED_BY_SYSTEM  # noqa: E501

        :param order_status: The order_status of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if order_status is None:
            raise ValueError("Invalid value for `order_status`, must not be `None`")  # noqa: E501

        self._order_status = order_status

    @property
    def create_time(self):
        """Gets the create_time of this InlineResponse200191Data.  # noqa: E501


        :return: The create_time of this InlineResponse200191Data.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InlineResponse200191Data.


        :param create_time: The create_time of this InlineResponse200191Data.  # noqa: E501
        :type: int
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def commission(self):
        """Gets the commission of this InlineResponse200191Data.  # noqa: E501

        Transaction Fee (in Crypto)  # noqa: E501

        :return: The commission of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this InlineResponse200191Data.

        Transaction Fee (in Crypto)  # noqa: E501

        :param commission: The commission of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if commission is None:
            raise ValueError("Invalid value for `commission`, must not be `None`")  # noqa: E501

        self._commission = commission

    @property
    def counter_part_nick_name(self):
        """Gets the counter_part_nick_name of this InlineResponse200191Data.  # noqa: E501


        :return: The counter_part_nick_name of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._counter_part_nick_name

    @counter_part_nick_name.setter
    def counter_part_nick_name(self, counter_part_nick_name):
        """Sets the counter_part_nick_name of this InlineResponse200191Data.


        :param counter_part_nick_name: The counter_part_nick_name of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if counter_part_nick_name is None:
            raise ValueError("Invalid value for `counter_part_nick_name`, must not be `None`")  # noqa: E501

        self._counter_part_nick_name = counter_part_nick_name

    @property
    def advertisement_role(self):
        """Gets the advertisement_role of this InlineResponse200191Data.  # noqa: E501


        :return: The advertisement_role of this InlineResponse200191Data.  # noqa: E501
        :rtype: str
        """
        return self._advertisement_role

    @advertisement_role.setter
    def advertisement_role(self, advertisement_role):
        """Sets the advertisement_role of this InlineResponse200191Data.


        :param advertisement_role: The advertisement_role of this InlineResponse200191Data.  # noqa: E501
        :type: str
        """
        if advertisement_role is None:
            raise ValueError("Invalid value for `advertisement_role`, must not be `None`")  # noqa: E501

        self._advertisement_role = advertisement_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200191Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200191Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
