# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200210Rows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan_coin': 'str',
        '_7d_hourly_interest_rate': 'str',
        '_7d_daily_interest_rate': 'str',
        '_14d_hourly_interest_rate': 'str',
        '_14d_daily_interest_rate': 'str',
        '_30d_hourly_interest_rate': 'str',
        '_30d_daily_interest_rate': 'str',
        '_90d_hourly_interest_rate': 'str',
        '_90d_daily_interest_rate': 'str',
        '_180d_hourly_interest_rate': 'str',
        '_180d_daily_interest_rate': 'str',
        'min_limit': 'str',
        'max_limit': 'str',
        'vip_level': 'int'
    }

    attribute_map = {
        'loan_coin': 'loanCoin',
        '_7d_hourly_interest_rate': '_7dHourlyInterestRate',
        '_7d_daily_interest_rate': '_7dDailyInterestRate',
        '_14d_hourly_interest_rate': '_14dHourlyInterestRate',
        '_14d_daily_interest_rate': '_14dDailyInterestRate',
        '_30d_hourly_interest_rate': '_30dHourlyInterestRate',
        '_30d_daily_interest_rate': '_30dDailyInterestRate',
        '_90d_hourly_interest_rate': '_90dHourlyInterestRate',
        '_90d_daily_interest_rate': '_90dDailyInterestRate',
        '_180d_hourly_interest_rate': '_180dHourlyInterestRate',
        '_180d_daily_interest_rate': '_180dDailyInterestRate',
        'min_limit': 'minLimit',
        'max_limit': 'maxLimit',
        'vip_level': 'vipLevel'
    }

    def __init__(self, loan_coin=None, _7d_hourly_interest_rate=None, _7d_daily_interest_rate=None, _14d_hourly_interest_rate=None, _14d_daily_interest_rate=None, _30d_hourly_interest_rate=None, _30d_daily_interest_rate=None, _90d_hourly_interest_rate=None, _90d_daily_interest_rate=None, _180d_hourly_interest_rate=None, _180d_daily_interest_rate=None, min_limit=None, max_limit=None, vip_level=None):  # noqa: E501
        """InlineResponse200210Rows - a model defined in Swagger"""  # noqa: E501
        self._loan_coin = None
        self.__7d_hourly_interest_rate = None
        self.__7d_daily_interest_rate = None
        self.__14d_hourly_interest_rate = None
        self.__14d_daily_interest_rate = None
        self.__30d_hourly_interest_rate = None
        self.__30d_daily_interest_rate = None
        self.__90d_hourly_interest_rate = None
        self.__90d_daily_interest_rate = None
        self.__180d_hourly_interest_rate = None
        self.__180d_daily_interest_rate = None
        self._min_limit = None
        self._max_limit = None
        self._vip_level = None
        self.discriminator = None
        self.loan_coin = loan_coin
        self._7d_hourly_interest_rate = _7d_hourly_interest_rate
        self._7d_daily_interest_rate = _7d_daily_interest_rate
        self._14d_hourly_interest_rate = _14d_hourly_interest_rate
        self._14d_daily_interest_rate = _14d_daily_interest_rate
        self._30d_hourly_interest_rate = _30d_hourly_interest_rate
        self._30d_daily_interest_rate = _30d_daily_interest_rate
        self._90d_hourly_interest_rate = _90d_hourly_interest_rate
        self._90d_daily_interest_rate = _90d_daily_interest_rate
        self._180d_hourly_interest_rate = _180d_hourly_interest_rate
        self._180d_daily_interest_rate = _180d_daily_interest_rate
        self.min_limit = min_limit
        self.max_limit = max_limit
        self.vip_level = vip_level

    @property
    def loan_coin(self):
        """Gets the loan_coin of this InlineResponse200210Rows.  # noqa: E501


        :return: The loan_coin of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self._loan_coin

    @loan_coin.setter
    def loan_coin(self, loan_coin):
        """Sets the loan_coin of this InlineResponse200210Rows.


        :param loan_coin: The loan_coin of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if loan_coin is None:
            raise ValueError("Invalid value for `loan_coin`, must not be `None`")  # noqa: E501

        self._loan_coin = loan_coin

    @property
    def _7d_hourly_interest_rate(self):
        """Gets the _7d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501


        :return: The _7d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self.__7d_hourly_interest_rate

    @_7d_hourly_interest_rate.setter
    def _7d_hourly_interest_rate(self, _7d_hourly_interest_rate):
        """Sets the _7d_hourly_interest_rate of this InlineResponse200210Rows.


        :param _7d_hourly_interest_rate: The _7d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if _7d_hourly_interest_rate is None:
            raise ValueError("Invalid value for `_7d_hourly_interest_rate`, must not be `None`")  # noqa: E501

        self.__7d_hourly_interest_rate = _7d_hourly_interest_rate

    @property
    def _7d_daily_interest_rate(self):
        """Gets the _7d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501


        :return: The _7d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self.__7d_daily_interest_rate

    @_7d_daily_interest_rate.setter
    def _7d_daily_interest_rate(self, _7d_daily_interest_rate):
        """Sets the _7d_daily_interest_rate of this InlineResponse200210Rows.


        :param _7d_daily_interest_rate: The _7d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if _7d_daily_interest_rate is None:
            raise ValueError("Invalid value for `_7d_daily_interest_rate`, must not be `None`")  # noqa: E501

        self.__7d_daily_interest_rate = _7d_daily_interest_rate

    @property
    def _14d_hourly_interest_rate(self):
        """Gets the _14d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501


        :return: The _14d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self.__14d_hourly_interest_rate

    @_14d_hourly_interest_rate.setter
    def _14d_hourly_interest_rate(self, _14d_hourly_interest_rate):
        """Sets the _14d_hourly_interest_rate of this InlineResponse200210Rows.


        :param _14d_hourly_interest_rate: The _14d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if _14d_hourly_interest_rate is None:
            raise ValueError("Invalid value for `_14d_hourly_interest_rate`, must not be `None`")  # noqa: E501

        self.__14d_hourly_interest_rate = _14d_hourly_interest_rate

    @property
    def _14d_daily_interest_rate(self):
        """Gets the _14d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501


        :return: The _14d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self.__14d_daily_interest_rate

    @_14d_daily_interest_rate.setter
    def _14d_daily_interest_rate(self, _14d_daily_interest_rate):
        """Sets the _14d_daily_interest_rate of this InlineResponse200210Rows.


        :param _14d_daily_interest_rate: The _14d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if _14d_daily_interest_rate is None:
            raise ValueError("Invalid value for `_14d_daily_interest_rate`, must not be `None`")  # noqa: E501

        self.__14d_daily_interest_rate = _14d_daily_interest_rate

    @property
    def _30d_hourly_interest_rate(self):
        """Gets the _30d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501


        :return: The _30d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self.__30d_hourly_interest_rate

    @_30d_hourly_interest_rate.setter
    def _30d_hourly_interest_rate(self, _30d_hourly_interest_rate):
        """Sets the _30d_hourly_interest_rate of this InlineResponse200210Rows.


        :param _30d_hourly_interest_rate: The _30d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if _30d_hourly_interest_rate is None:
            raise ValueError("Invalid value for `_30d_hourly_interest_rate`, must not be `None`")  # noqa: E501

        self.__30d_hourly_interest_rate = _30d_hourly_interest_rate

    @property
    def _30d_daily_interest_rate(self):
        """Gets the _30d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501


        :return: The _30d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self.__30d_daily_interest_rate

    @_30d_daily_interest_rate.setter
    def _30d_daily_interest_rate(self, _30d_daily_interest_rate):
        """Sets the _30d_daily_interest_rate of this InlineResponse200210Rows.


        :param _30d_daily_interest_rate: The _30d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if _30d_daily_interest_rate is None:
            raise ValueError("Invalid value for `_30d_daily_interest_rate`, must not be `None`")  # noqa: E501

        self.__30d_daily_interest_rate = _30d_daily_interest_rate

    @property
    def _90d_hourly_interest_rate(self):
        """Gets the _90d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501


        :return: The _90d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self.__90d_hourly_interest_rate

    @_90d_hourly_interest_rate.setter
    def _90d_hourly_interest_rate(self, _90d_hourly_interest_rate):
        """Sets the _90d_hourly_interest_rate of this InlineResponse200210Rows.


        :param _90d_hourly_interest_rate: The _90d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if _90d_hourly_interest_rate is None:
            raise ValueError("Invalid value for `_90d_hourly_interest_rate`, must not be `None`")  # noqa: E501

        self.__90d_hourly_interest_rate = _90d_hourly_interest_rate

    @property
    def _90d_daily_interest_rate(self):
        """Gets the _90d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501


        :return: The _90d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self.__90d_daily_interest_rate

    @_90d_daily_interest_rate.setter
    def _90d_daily_interest_rate(self, _90d_daily_interest_rate):
        """Sets the _90d_daily_interest_rate of this InlineResponse200210Rows.


        :param _90d_daily_interest_rate: The _90d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if _90d_daily_interest_rate is None:
            raise ValueError("Invalid value for `_90d_daily_interest_rate`, must not be `None`")  # noqa: E501

        self.__90d_daily_interest_rate = _90d_daily_interest_rate

    @property
    def _180d_hourly_interest_rate(self):
        """Gets the _180d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501


        :return: The _180d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self.__180d_hourly_interest_rate

    @_180d_hourly_interest_rate.setter
    def _180d_hourly_interest_rate(self, _180d_hourly_interest_rate):
        """Sets the _180d_hourly_interest_rate of this InlineResponse200210Rows.


        :param _180d_hourly_interest_rate: The _180d_hourly_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if _180d_hourly_interest_rate is None:
            raise ValueError("Invalid value for `_180d_hourly_interest_rate`, must not be `None`")  # noqa: E501

        self.__180d_hourly_interest_rate = _180d_hourly_interest_rate

    @property
    def _180d_daily_interest_rate(self):
        """Gets the _180d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501


        :return: The _180d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self.__180d_daily_interest_rate

    @_180d_daily_interest_rate.setter
    def _180d_daily_interest_rate(self, _180d_daily_interest_rate):
        """Sets the _180d_daily_interest_rate of this InlineResponse200210Rows.


        :param _180d_daily_interest_rate: The _180d_daily_interest_rate of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if _180d_daily_interest_rate is None:
            raise ValueError("Invalid value for `_180d_daily_interest_rate`, must not be `None`")  # noqa: E501

        self.__180d_daily_interest_rate = _180d_daily_interest_rate

    @property
    def min_limit(self):
        """Gets the min_limit of this InlineResponse200210Rows.  # noqa: E501


        :return: The min_limit of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self._min_limit

    @min_limit.setter
    def min_limit(self, min_limit):
        """Sets the min_limit of this InlineResponse200210Rows.


        :param min_limit: The min_limit of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if min_limit is None:
            raise ValueError("Invalid value for `min_limit`, must not be `None`")  # noqa: E501

        self._min_limit = min_limit

    @property
    def max_limit(self):
        """Gets the max_limit of this InlineResponse200210Rows.  # noqa: E501


        :return: The max_limit of this InlineResponse200210Rows.  # noqa: E501
        :rtype: str
        """
        return self._max_limit

    @max_limit.setter
    def max_limit(self, max_limit):
        """Sets the max_limit of this InlineResponse200210Rows.


        :param max_limit: The max_limit of this InlineResponse200210Rows.  # noqa: E501
        :type: str
        """
        if max_limit is None:
            raise ValueError("Invalid value for `max_limit`, must not be `None`")  # noqa: E501

        self._max_limit = max_limit

    @property
    def vip_level(self):
        """Gets the vip_level of this InlineResponse200210Rows.  # noqa: E501


        :return: The vip_level of this InlineResponse200210Rows.  # noqa: E501
        :rtype: int
        """
        return self._vip_level

    @vip_level.setter
    def vip_level(self, vip_level):
        """Sets the vip_level of this InlineResponse200210Rows.


        :param vip_level: The vip_level of this InlineResponse200210Rows.  # noqa: E501
        :type: int
        """
        if vip_level is None:
            raise ValueError("Invalid value for `vip_level`, must not be `None`")  # noqa: E501

        self._vip_level = vip_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200210Rows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200210Rows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
