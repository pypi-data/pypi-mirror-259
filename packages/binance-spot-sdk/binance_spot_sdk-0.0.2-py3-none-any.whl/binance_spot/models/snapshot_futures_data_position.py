# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SnapshotFuturesDataPosition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_price': 'str',
        'mark_price': 'str',
        'position_amt': 'str',
        'symbol': 'str',
        'un_realized_profit': 'str'
    }

    attribute_map = {
        'entry_price': 'entryPrice',
        'mark_price': 'markPrice',
        'position_amt': 'positionAmt',
        'symbol': 'symbol',
        'un_realized_profit': 'unRealizedProfit'
    }

    def __init__(self, entry_price=None, mark_price=None, position_amt=None, symbol=None, un_realized_profit=None):  # noqa: E501
        """SnapshotFuturesDataPosition - a model defined in Swagger"""  # noqa: E501
        self._entry_price = None
        self._mark_price = None
        self._position_amt = None
        self._symbol = None
        self._un_realized_profit = None
        self.discriminator = None
        self.entry_price = entry_price
        self.mark_price = mark_price
        self.position_amt = position_amt
        self.symbol = symbol
        self.un_realized_profit = un_realized_profit

    @property
    def entry_price(self):
        """Gets the entry_price of this SnapshotFuturesDataPosition.  # noqa: E501


        :return: The entry_price of this SnapshotFuturesDataPosition.  # noqa: E501
        :rtype: str
        """
        return self._entry_price

    @entry_price.setter
    def entry_price(self, entry_price):
        """Sets the entry_price of this SnapshotFuturesDataPosition.


        :param entry_price: The entry_price of this SnapshotFuturesDataPosition.  # noqa: E501
        :type: str
        """
        if entry_price is None:
            raise ValueError("Invalid value for `entry_price`, must not be `None`")  # noqa: E501

        self._entry_price = entry_price

    @property
    def mark_price(self):
        """Gets the mark_price of this SnapshotFuturesDataPosition.  # noqa: E501


        :return: The mark_price of this SnapshotFuturesDataPosition.  # noqa: E501
        :rtype: str
        """
        return self._mark_price

    @mark_price.setter
    def mark_price(self, mark_price):
        """Sets the mark_price of this SnapshotFuturesDataPosition.


        :param mark_price: The mark_price of this SnapshotFuturesDataPosition.  # noqa: E501
        :type: str
        """
        if mark_price is None:
            raise ValueError("Invalid value for `mark_price`, must not be `None`")  # noqa: E501

        self._mark_price = mark_price

    @property
    def position_amt(self):
        """Gets the position_amt of this SnapshotFuturesDataPosition.  # noqa: E501


        :return: The position_amt of this SnapshotFuturesDataPosition.  # noqa: E501
        :rtype: str
        """
        return self._position_amt

    @position_amt.setter
    def position_amt(self, position_amt):
        """Sets the position_amt of this SnapshotFuturesDataPosition.


        :param position_amt: The position_amt of this SnapshotFuturesDataPosition.  # noqa: E501
        :type: str
        """
        if position_amt is None:
            raise ValueError("Invalid value for `position_amt`, must not be `None`")  # noqa: E501

        self._position_amt = position_amt

    @property
    def symbol(self):
        """Gets the symbol of this SnapshotFuturesDataPosition.  # noqa: E501


        :return: The symbol of this SnapshotFuturesDataPosition.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this SnapshotFuturesDataPosition.


        :param symbol: The symbol of this SnapshotFuturesDataPosition.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def un_realized_profit(self):
        """Gets the un_realized_profit of this SnapshotFuturesDataPosition.  # noqa: E501


        :return: The un_realized_profit of this SnapshotFuturesDataPosition.  # noqa: E501
        :rtype: str
        """
        return self._un_realized_profit

    @un_realized_profit.setter
    def un_realized_profit(self, un_realized_profit):
        """Sets the un_realized_profit of this SnapshotFuturesDataPosition.


        :param un_realized_profit: The un_realized_profit of this SnapshotFuturesDataPosition.  # noqa: E501
        :type: str
        """
        if un_realized_profit is None:
            raise ValueError("Invalid value for `un_realized_profit`, must not be `None`")  # noqa: E501

        self._un_realized_profit = un_realized_profit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotFuturesDataPosition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotFuturesDataPosition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
