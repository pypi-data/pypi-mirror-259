# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20069CTR(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_withdraw_amount': 'str',
        'deposit_status': 'bool',
        'withdraw_fee': 'int',
        'withdraw_status': 'bool',
        'deposit_tip': 'str'
    }

    attribute_map = {
        'min_withdraw_amount': 'minWithdrawAmount',
        'deposit_status': 'depositStatus',
        'withdraw_fee': 'withdrawFee',
        'withdraw_status': 'withdrawStatus',
        'deposit_tip': 'depositTip'
    }

    def __init__(self, min_withdraw_amount=None, deposit_status=None, withdraw_fee=None, withdraw_status=None, deposit_tip=None):  # noqa: E501
        """InlineResponse20069CTR - a model defined in Swagger"""  # noqa: E501
        self._min_withdraw_amount = None
        self._deposit_status = None
        self._withdraw_fee = None
        self._withdraw_status = None
        self._deposit_tip = None
        self.discriminator = None
        self.min_withdraw_amount = min_withdraw_amount
        self.deposit_status = deposit_status
        self.withdraw_fee = withdraw_fee
        self.withdraw_status = withdraw_status
        self.deposit_tip = deposit_tip

    @property
    def min_withdraw_amount(self):
        """Gets the min_withdraw_amount of this InlineResponse20069CTR.  # noqa: E501


        :return: The min_withdraw_amount of this InlineResponse20069CTR.  # noqa: E501
        :rtype: str
        """
        return self._min_withdraw_amount

    @min_withdraw_amount.setter
    def min_withdraw_amount(self, min_withdraw_amount):
        """Sets the min_withdraw_amount of this InlineResponse20069CTR.


        :param min_withdraw_amount: The min_withdraw_amount of this InlineResponse20069CTR.  # noqa: E501
        :type: str
        """
        if min_withdraw_amount is None:
            raise ValueError("Invalid value for `min_withdraw_amount`, must not be `None`")  # noqa: E501

        self._min_withdraw_amount = min_withdraw_amount

    @property
    def deposit_status(self):
        """Gets the deposit_status of this InlineResponse20069CTR.  # noqa: E501

        deposit status (false if ALL of networks' are false)  # noqa: E501

        :return: The deposit_status of this InlineResponse20069CTR.  # noqa: E501
        :rtype: bool
        """
        return self._deposit_status

    @deposit_status.setter
    def deposit_status(self, deposit_status):
        """Sets the deposit_status of this InlineResponse20069CTR.

        deposit status (false if ALL of networks' are false)  # noqa: E501

        :param deposit_status: The deposit_status of this InlineResponse20069CTR.  # noqa: E501
        :type: bool
        """
        if deposit_status is None:
            raise ValueError("Invalid value for `deposit_status`, must not be `None`")  # noqa: E501

        self._deposit_status = deposit_status

    @property
    def withdraw_fee(self):
        """Gets the withdraw_fee of this InlineResponse20069CTR.  # noqa: E501


        :return: The withdraw_fee of this InlineResponse20069CTR.  # noqa: E501
        :rtype: int
        """
        return self._withdraw_fee

    @withdraw_fee.setter
    def withdraw_fee(self, withdraw_fee):
        """Sets the withdraw_fee of this InlineResponse20069CTR.


        :param withdraw_fee: The withdraw_fee of this InlineResponse20069CTR.  # noqa: E501
        :type: int
        """
        if withdraw_fee is None:
            raise ValueError("Invalid value for `withdraw_fee`, must not be `None`")  # noqa: E501

        self._withdraw_fee = withdraw_fee

    @property
    def withdraw_status(self):
        """Gets the withdraw_status of this InlineResponse20069CTR.  # noqa: E501

        withdrawStatus status (false if ALL of networks' are false)  # noqa: E501

        :return: The withdraw_status of this InlineResponse20069CTR.  # noqa: E501
        :rtype: bool
        """
        return self._withdraw_status

    @withdraw_status.setter
    def withdraw_status(self, withdraw_status):
        """Sets the withdraw_status of this InlineResponse20069CTR.

        withdrawStatus status (false if ALL of networks' are false)  # noqa: E501

        :param withdraw_status: The withdraw_status of this InlineResponse20069CTR.  # noqa: E501
        :type: bool
        """
        if withdraw_status is None:
            raise ValueError("Invalid value for `withdraw_status`, must not be `None`")  # noqa: E501

        self._withdraw_status = withdraw_status

    @property
    def deposit_tip(self):
        """Gets the deposit_tip of this InlineResponse20069CTR.  # noqa: E501


        :return: The deposit_tip of this InlineResponse20069CTR.  # noqa: E501
        :rtype: str
        """
        return self._deposit_tip

    @deposit_tip.setter
    def deposit_tip(self, deposit_tip):
        """Sets the deposit_tip of this InlineResponse20069CTR.


        :param deposit_tip: The deposit_tip of this InlineResponse20069CTR.  # noqa: E501
        :type: str
        """
        if deposit_tip is None:
            raise ValueError("Invalid value for `deposit_tip`, must not be `None`")  # noqa: E501

        self._deposit_tip = deposit_tip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20069CTR, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20069CTR):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
