# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200147Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fifteen_min_hash_rate': 'str',
        'day_hash_rate': 'str',
        'valid_num': 'int',
        'invalid_num': 'int',
        'profit_today': 'InlineResponse200147DataProfitToday',
        'profit_yesterday': 'InlineResponse200147DataProfitToday',
        'user_name': 'str',
        'unit': 'str',
        'algo': 'str'
    }

    attribute_map = {
        'fifteen_min_hash_rate': 'fifteenMinHashRate',
        'day_hash_rate': 'dayHashRate',
        'valid_num': 'validNum',
        'invalid_num': 'invalidNum',
        'profit_today': 'profitToday',
        'profit_yesterday': 'profitYesterday',
        'user_name': 'userName',
        'unit': 'unit',
        'algo': 'algo'
    }

    def __init__(self, fifteen_min_hash_rate=None, day_hash_rate=None, valid_num=None, invalid_num=None, profit_today=None, profit_yesterday=None, user_name=None, unit=None, algo=None):  # noqa: E501
        """InlineResponse200147Data - a model defined in Swagger"""  # noqa: E501
        self._fifteen_min_hash_rate = None
        self._day_hash_rate = None
        self._valid_num = None
        self._invalid_num = None
        self._profit_today = None
        self._profit_yesterday = None
        self._user_name = None
        self._unit = None
        self._algo = None
        self.discriminator = None
        self.fifteen_min_hash_rate = fifteen_min_hash_rate
        self.day_hash_rate = day_hash_rate
        self.valid_num = valid_num
        self.invalid_num = invalid_num
        self.profit_today = profit_today
        self.profit_yesterday = profit_yesterday
        self.user_name = user_name
        self.unit = unit
        self.algo = algo

    @property
    def fifteen_min_hash_rate(self):
        """Gets the fifteen_min_hash_rate of this InlineResponse200147Data.  # noqa: E501


        :return: The fifteen_min_hash_rate of this InlineResponse200147Data.  # noqa: E501
        :rtype: str
        """
        return self._fifteen_min_hash_rate

    @fifteen_min_hash_rate.setter
    def fifteen_min_hash_rate(self, fifteen_min_hash_rate):
        """Sets the fifteen_min_hash_rate of this InlineResponse200147Data.


        :param fifteen_min_hash_rate: The fifteen_min_hash_rate of this InlineResponse200147Data.  # noqa: E501
        :type: str
        """
        if fifteen_min_hash_rate is None:
            raise ValueError("Invalid value for `fifteen_min_hash_rate`, must not be `None`")  # noqa: E501

        self._fifteen_min_hash_rate = fifteen_min_hash_rate

    @property
    def day_hash_rate(self):
        """Gets the day_hash_rate of this InlineResponse200147Data.  # noqa: E501


        :return: The day_hash_rate of this InlineResponse200147Data.  # noqa: E501
        :rtype: str
        """
        return self._day_hash_rate

    @day_hash_rate.setter
    def day_hash_rate(self, day_hash_rate):
        """Sets the day_hash_rate of this InlineResponse200147Data.


        :param day_hash_rate: The day_hash_rate of this InlineResponse200147Data.  # noqa: E501
        :type: str
        """
        if day_hash_rate is None:
            raise ValueError("Invalid value for `day_hash_rate`, must not be `None`")  # noqa: E501

        self._day_hash_rate = day_hash_rate

    @property
    def valid_num(self):
        """Gets the valid_num of this InlineResponse200147Data.  # noqa: E501


        :return: The valid_num of this InlineResponse200147Data.  # noqa: E501
        :rtype: int
        """
        return self._valid_num

    @valid_num.setter
    def valid_num(self, valid_num):
        """Sets the valid_num of this InlineResponse200147Data.


        :param valid_num: The valid_num of this InlineResponse200147Data.  # noqa: E501
        :type: int
        """
        if valid_num is None:
            raise ValueError("Invalid value for `valid_num`, must not be `None`")  # noqa: E501

        self._valid_num = valid_num

    @property
    def invalid_num(self):
        """Gets the invalid_num of this InlineResponse200147Data.  # noqa: E501


        :return: The invalid_num of this InlineResponse200147Data.  # noqa: E501
        :rtype: int
        """
        return self._invalid_num

    @invalid_num.setter
    def invalid_num(self, invalid_num):
        """Sets the invalid_num of this InlineResponse200147Data.


        :param invalid_num: The invalid_num of this InlineResponse200147Data.  # noqa: E501
        :type: int
        """
        if invalid_num is None:
            raise ValueError("Invalid value for `invalid_num`, must not be `None`")  # noqa: E501

        self._invalid_num = invalid_num

    @property
    def profit_today(self):
        """Gets the profit_today of this InlineResponse200147Data.  # noqa: E501


        :return: The profit_today of this InlineResponse200147Data.  # noqa: E501
        :rtype: InlineResponse200147DataProfitToday
        """
        return self._profit_today

    @profit_today.setter
    def profit_today(self, profit_today):
        """Sets the profit_today of this InlineResponse200147Data.


        :param profit_today: The profit_today of this InlineResponse200147Data.  # noqa: E501
        :type: InlineResponse200147DataProfitToday
        """
        if profit_today is None:
            raise ValueError("Invalid value for `profit_today`, must not be `None`")  # noqa: E501

        self._profit_today = profit_today

    @property
    def profit_yesterday(self):
        """Gets the profit_yesterday of this InlineResponse200147Data.  # noqa: E501


        :return: The profit_yesterday of this InlineResponse200147Data.  # noqa: E501
        :rtype: InlineResponse200147DataProfitToday
        """
        return self._profit_yesterday

    @profit_yesterday.setter
    def profit_yesterday(self, profit_yesterday):
        """Sets the profit_yesterday of this InlineResponse200147Data.


        :param profit_yesterday: The profit_yesterday of this InlineResponse200147Data.  # noqa: E501
        :type: InlineResponse200147DataProfitToday
        """
        if profit_yesterday is None:
            raise ValueError("Invalid value for `profit_yesterday`, must not be `None`")  # noqa: E501

        self._profit_yesterday = profit_yesterday

    @property
    def user_name(self):
        """Gets the user_name of this InlineResponse200147Data.  # noqa: E501


        :return: The user_name of this InlineResponse200147Data.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InlineResponse200147Data.


        :param user_name: The user_name of this InlineResponse200147Data.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def unit(self):
        """Gets the unit of this InlineResponse200147Data.  # noqa: E501


        :return: The unit of this InlineResponse200147Data.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this InlineResponse200147Data.


        :param unit: The unit of this InlineResponse200147Data.  # noqa: E501
        :type: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")  # noqa: E501

        self._unit = unit

    @property
    def algo(self):
        """Gets the algo of this InlineResponse200147Data.  # noqa: E501


        :return: The algo of this InlineResponse200147Data.  # noqa: E501
        :rtype: str
        """
        return self._algo

    @algo.setter
    def algo(self, algo):
        """Sets the algo of this InlineResponse200147Data.


        :param algo: The algo of this InlineResponse200147Data.  # noqa: E501
        :type: str
        """
        if algo is None:
            raise ValueError("Invalid value for `algo`, must not be `None`")  # noqa: E501

        self._algo = algo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200147Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200147Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
