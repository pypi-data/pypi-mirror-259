# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200271(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reward_asset': 'str',
        'total_reward_amt': 'str',
        'extra_reward_asset': 'str',
        'est_total_extra_reward_amt': 'str',
        'next_pay': 'str',
        'next_pay_date': 'str',
        'value_date': 'str',
        'rewards_end_date': 'str',
        'deliver_date': 'str',
        'next_subscription_date': 'str'
    }

    attribute_map = {
        'reward_asset': 'rewardAsset',
        'total_reward_amt': 'totalRewardAmt',
        'extra_reward_asset': 'extraRewardAsset',
        'est_total_extra_reward_amt': 'estTotalExtraRewardAmt',
        'next_pay': 'nextPay',
        'next_pay_date': 'nextPayDate',
        'value_date': 'valueDate',
        'rewards_end_date': 'rewardsEndDate',
        'deliver_date': 'deliverDate',
        'next_subscription_date': 'nextSubscriptionDate'
    }

    def __init__(self, reward_asset=None, total_reward_amt=None, extra_reward_asset=None, est_total_extra_reward_amt=None, next_pay=None, next_pay_date=None, value_date=None, rewards_end_date=None, deliver_date=None, next_subscription_date=None):  # noqa: E501
        """InlineResponse200271 - a model defined in Swagger"""  # noqa: E501
        self._reward_asset = None
        self._total_reward_amt = None
        self._extra_reward_asset = None
        self._est_total_extra_reward_amt = None
        self._next_pay = None
        self._next_pay_date = None
        self._value_date = None
        self._rewards_end_date = None
        self._deliver_date = None
        self._next_subscription_date = None
        self.discriminator = None
        self.reward_asset = reward_asset
        self.total_reward_amt = total_reward_amt
        self.extra_reward_asset = extra_reward_asset
        self.est_total_extra_reward_amt = est_total_extra_reward_amt
        self.next_pay = next_pay
        self.next_pay_date = next_pay_date
        self.value_date = value_date
        self.rewards_end_date = rewards_end_date
        self.deliver_date = deliver_date
        self.next_subscription_date = next_subscription_date

    @property
    def reward_asset(self):
        """Gets the reward_asset of this InlineResponse200271.  # noqa: E501


        :return: The reward_asset of this InlineResponse200271.  # noqa: E501
        :rtype: str
        """
        return self._reward_asset

    @reward_asset.setter
    def reward_asset(self, reward_asset):
        """Sets the reward_asset of this InlineResponse200271.


        :param reward_asset: The reward_asset of this InlineResponse200271.  # noqa: E501
        :type: str
        """
        if reward_asset is None:
            raise ValueError("Invalid value for `reward_asset`, must not be `None`")  # noqa: E501

        self._reward_asset = reward_asset

    @property
    def total_reward_amt(self):
        """Gets the total_reward_amt of this InlineResponse200271.  # noqa: E501


        :return: The total_reward_amt of this InlineResponse200271.  # noqa: E501
        :rtype: str
        """
        return self._total_reward_amt

    @total_reward_amt.setter
    def total_reward_amt(self, total_reward_amt):
        """Sets the total_reward_amt of this InlineResponse200271.


        :param total_reward_amt: The total_reward_amt of this InlineResponse200271.  # noqa: E501
        :type: str
        """
        if total_reward_amt is None:
            raise ValueError("Invalid value for `total_reward_amt`, must not be `None`")  # noqa: E501

        self._total_reward_amt = total_reward_amt

    @property
    def extra_reward_asset(self):
        """Gets the extra_reward_asset of this InlineResponse200271.  # noqa: E501


        :return: The extra_reward_asset of this InlineResponse200271.  # noqa: E501
        :rtype: str
        """
        return self._extra_reward_asset

    @extra_reward_asset.setter
    def extra_reward_asset(self, extra_reward_asset):
        """Sets the extra_reward_asset of this InlineResponse200271.


        :param extra_reward_asset: The extra_reward_asset of this InlineResponse200271.  # noqa: E501
        :type: str
        """
        if extra_reward_asset is None:
            raise ValueError("Invalid value for `extra_reward_asset`, must not be `None`")  # noqa: E501

        self._extra_reward_asset = extra_reward_asset

    @property
    def est_total_extra_reward_amt(self):
        """Gets the est_total_extra_reward_amt of this InlineResponse200271.  # noqa: E501


        :return: The est_total_extra_reward_amt of this InlineResponse200271.  # noqa: E501
        :rtype: str
        """
        return self._est_total_extra_reward_amt

    @est_total_extra_reward_amt.setter
    def est_total_extra_reward_amt(self, est_total_extra_reward_amt):
        """Sets the est_total_extra_reward_amt of this InlineResponse200271.


        :param est_total_extra_reward_amt: The est_total_extra_reward_amt of this InlineResponse200271.  # noqa: E501
        :type: str
        """
        if est_total_extra_reward_amt is None:
            raise ValueError("Invalid value for `est_total_extra_reward_amt`, must not be `None`")  # noqa: E501

        self._est_total_extra_reward_amt = est_total_extra_reward_amt

    @property
    def next_pay(self):
        """Gets the next_pay of this InlineResponse200271.  # noqa: E501


        :return: The next_pay of this InlineResponse200271.  # noqa: E501
        :rtype: str
        """
        return self._next_pay

    @next_pay.setter
    def next_pay(self, next_pay):
        """Sets the next_pay of this InlineResponse200271.


        :param next_pay: The next_pay of this InlineResponse200271.  # noqa: E501
        :type: str
        """
        if next_pay is None:
            raise ValueError("Invalid value for `next_pay`, must not be `None`")  # noqa: E501

        self._next_pay = next_pay

    @property
    def next_pay_date(self):
        """Gets the next_pay_date of this InlineResponse200271.  # noqa: E501


        :return: The next_pay_date of this InlineResponse200271.  # noqa: E501
        :rtype: str
        """
        return self._next_pay_date

    @next_pay_date.setter
    def next_pay_date(self, next_pay_date):
        """Sets the next_pay_date of this InlineResponse200271.


        :param next_pay_date: The next_pay_date of this InlineResponse200271.  # noqa: E501
        :type: str
        """
        if next_pay_date is None:
            raise ValueError("Invalid value for `next_pay_date`, must not be `None`")  # noqa: E501

        self._next_pay_date = next_pay_date

    @property
    def value_date(self):
        """Gets the value_date of this InlineResponse200271.  # noqa: E501


        :return: The value_date of this InlineResponse200271.  # noqa: E501
        :rtype: str
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this InlineResponse200271.


        :param value_date: The value_date of this InlineResponse200271.  # noqa: E501
        :type: str
        """
        if value_date is None:
            raise ValueError("Invalid value for `value_date`, must not be `None`")  # noqa: E501

        self._value_date = value_date

    @property
    def rewards_end_date(self):
        """Gets the rewards_end_date of this InlineResponse200271.  # noqa: E501


        :return: The rewards_end_date of this InlineResponse200271.  # noqa: E501
        :rtype: str
        """
        return self._rewards_end_date

    @rewards_end_date.setter
    def rewards_end_date(self, rewards_end_date):
        """Sets the rewards_end_date of this InlineResponse200271.


        :param rewards_end_date: The rewards_end_date of this InlineResponse200271.  # noqa: E501
        :type: str
        """
        if rewards_end_date is None:
            raise ValueError("Invalid value for `rewards_end_date`, must not be `None`")  # noqa: E501

        self._rewards_end_date = rewards_end_date

    @property
    def deliver_date(self):
        """Gets the deliver_date of this InlineResponse200271.  # noqa: E501


        :return: The deliver_date of this InlineResponse200271.  # noqa: E501
        :rtype: str
        """
        return self._deliver_date

    @deliver_date.setter
    def deliver_date(self, deliver_date):
        """Sets the deliver_date of this InlineResponse200271.


        :param deliver_date: The deliver_date of this InlineResponse200271.  # noqa: E501
        :type: str
        """
        if deliver_date is None:
            raise ValueError("Invalid value for `deliver_date`, must not be `None`")  # noqa: E501

        self._deliver_date = deliver_date

    @property
    def next_subscription_date(self):
        """Gets the next_subscription_date of this InlineResponse200271.  # noqa: E501


        :return: The next_subscription_date of this InlineResponse200271.  # noqa: E501
        :rtype: str
        """
        return self._next_subscription_date

    @next_subscription_date.setter
    def next_subscription_date(self, next_subscription_date):
        """Sets the next_subscription_date of this InlineResponse200271.


        :param next_subscription_date: The next_subscription_date of this InlineResponse200271.  # noqa: E501
        :type: str
        """
        if next_subscription_date is None:
            raise ValueError("Invalid value for `next_subscription_date`, must not be `None`")  # noqa: E501

        self._next_subscription_date = next_subscription_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200271, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200271):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
