# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarginOrderDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_order_id': 'str',
        'cummulative_quote_qty': 'str',
        'executed_qty': 'str',
        'iceberg_qty': 'str',
        'is_working': 'bool',
        'order_id': 'int',
        'orig_qty': 'str',
        'price': 'str',
        'side': 'str',
        'status': 'str',
        'stop_price': 'str',
        'symbol': 'str',
        'is_isolated': 'bool',
        'time': 'int',
        'time_in_force': 'str',
        'type': 'str',
        'update_time': 'int',
        'self_trade_prevention_mode': 'str'
    }

    attribute_map = {
        'client_order_id': 'clientOrderId',
        'cummulative_quote_qty': 'cummulativeQuoteQty',
        'executed_qty': 'executedQty',
        'iceberg_qty': 'icebergQty',
        'is_working': 'isWorking',
        'order_id': 'orderId',
        'orig_qty': 'origQty',
        'price': 'price',
        'side': 'side',
        'status': 'status',
        'stop_price': 'stopPrice',
        'symbol': 'symbol',
        'is_isolated': 'isIsolated',
        'time': 'time',
        'time_in_force': 'timeInForce',
        'type': 'type',
        'update_time': 'updateTime',
        'self_trade_prevention_mode': 'selfTradePreventionMode'
    }

    def __init__(self, client_order_id=None, cummulative_quote_qty=None, executed_qty=None, iceberg_qty=None, is_working=None, order_id=None, orig_qty=None, price=None, side=None, status=None, stop_price=None, symbol=None, is_isolated=None, time=None, time_in_force=None, type=None, update_time=None, self_trade_prevention_mode=None):  # noqa: E501
        """MarginOrderDetail - a model defined in Swagger"""  # noqa: E501
        self._client_order_id = None
        self._cummulative_quote_qty = None
        self._executed_qty = None
        self._iceberg_qty = None
        self._is_working = None
        self._order_id = None
        self._orig_qty = None
        self._price = None
        self._side = None
        self._status = None
        self._stop_price = None
        self._symbol = None
        self._is_isolated = None
        self._time = None
        self._time_in_force = None
        self._type = None
        self._update_time = None
        self._self_trade_prevention_mode = None
        self.discriminator = None
        self.client_order_id = client_order_id
        self.cummulative_quote_qty = cummulative_quote_qty
        self.executed_qty = executed_qty
        self.iceberg_qty = iceberg_qty
        self.is_working = is_working
        self.order_id = order_id
        self.orig_qty = orig_qty
        self.price = price
        self.side = side
        self.status = status
        self.stop_price = stop_price
        self.symbol = symbol
        self.is_isolated = is_isolated
        self.time = time
        self.time_in_force = time_in_force
        self.type = type
        self.update_time = update_time
        self.self_trade_prevention_mode = self_trade_prevention_mode

    @property
    def client_order_id(self):
        """Gets the client_order_id of this MarginOrderDetail.  # noqa: E501


        :return: The client_order_id of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._client_order_id

    @client_order_id.setter
    def client_order_id(self, client_order_id):
        """Sets the client_order_id of this MarginOrderDetail.


        :param client_order_id: The client_order_id of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if client_order_id is None:
            raise ValueError("Invalid value for `client_order_id`, must not be `None`")  # noqa: E501

        self._client_order_id = client_order_id

    @property
    def cummulative_quote_qty(self):
        """Gets the cummulative_quote_qty of this MarginOrderDetail.  # noqa: E501


        :return: The cummulative_quote_qty of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._cummulative_quote_qty

    @cummulative_quote_qty.setter
    def cummulative_quote_qty(self, cummulative_quote_qty):
        """Sets the cummulative_quote_qty of this MarginOrderDetail.


        :param cummulative_quote_qty: The cummulative_quote_qty of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if cummulative_quote_qty is None:
            raise ValueError("Invalid value for `cummulative_quote_qty`, must not be `None`")  # noqa: E501

        self._cummulative_quote_qty = cummulative_quote_qty

    @property
    def executed_qty(self):
        """Gets the executed_qty of this MarginOrderDetail.  # noqa: E501


        :return: The executed_qty of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._executed_qty

    @executed_qty.setter
    def executed_qty(self, executed_qty):
        """Sets the executed_qty of this MarginOrderDetail.


        :param executed_qty: The executed_qty of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if executed_qty is None:
            raise ValueError("Invalid value for `executed_qty`, must not be `None`")  # noqa: E501

        self._executed_qty = executed_qty

    @property
    def iceberg_qty(self):
        """Gets the iceberg_qty of this MarginOrderDetail.  # noqa: E501


        :return: The iceberg_qty of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._iceberg_qty

    @iceberg_qty.setter
    def iceberg_qty(self, iceberg_qty):
        """Sets the iceberg_qty of this MarginOrderDetail.


        :param iceberg_qty: The iceberg_qty of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if iceberg_qty is None:
            raise ValueError("Invalid value for `iceberg_qty`, must not be `None`")  # noqa: E501

        self._iceberg_qty = iceberg_qty

    @property
    def is_working(self):
        """Gets the is_working of this MarginOrderDetail.  # noqa: E501


        :return: The is_working of this MarginOrderDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_working

    @is_working.setter
    def is_working(self, is_working):
        """Sets the is_working of this MarginOrderDetail.


        :param is_working: The is_working of this MarginOrderDetail.  # noqa: E501
        :type: bool
        """
        if is_working is None:
            raise ValueError("Invalid value for `is_working`, must not be `None`")  # noqa: E501

        self._is_working = is_working

    @property
    def order_id(self):
        """Gets the order_id of this MarginOrderDetail.  # noqa: E501


        :return: The order_id of this MarginOrderDetail.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this MarginOrderDetail.


        :param order_id: The order_id of this MarginOrderDetail.  # noqa: E501
        :type: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def orig_qty(self):
        """Gets the orig_qty of this MarginOrderDetail.  # noqa: E501


        :return: The orig_qty of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._orig_qty

    @orig_qty.setter
    def orig_qty(self, orig_qty):
        """Sets the orig_qty of this MarginOrderDetail.


        :param orig_qty: The orig_qty of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if orig_qty is None:
            raise ValueError("Invalid value for `orig_qty`, must not be `None`")  # noqa: E501

        self._orig_qty = orig_qty

    @property
    def price(self):
        """Gets the price of this MarginOrderDetail.  # noqa: E501


        :return: The price of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this MarginOrderDetail.


        :param price: The price of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def side(self):
        """Gets the side of this MarginOrderDetail.  # noqa: E501


        :return: The side of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this MarginOrderDetail.


        :param side: The side of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if side is None:
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501

        self._side = side

    @property
    def status(self):
        """Gets the status of this MarginOrderDetail.  # noqa: E501


        :return: The status of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MarginOrderDetail.


        :param status: The status of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def stop_price(self):
        """Gets the stop_price of this MarginOrderDetail.  # noqa: E501


        :return: The stop_price of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._stop_price

    @stop_price.setter
    def stop_price(self, stop_price):
        """Sets the stop_price of this MarginOrderDetail.


        :param stop_price: The stop_price of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if stop_price is None:
            raise ValueError("Invalid value for `stop_price`, must not be `None`")  # noqa: E501

        self._stop_price = stop_price

    @property
    def symbol(self):
        """Gets the symbol of this MarginOrderDetail.  # noqa: E501


        :return: The symbol of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this MarginOrderDetail.


        :param symbol: The symbol of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def is_isolated(self):
        """Gets the is_isolated of this MarginOrderDetail.  # noqa: E501


        :return: The is_isolated of this MarginOrderDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_isolated

    @is_isolated.setter
    def is_isolated(self, is_isolated):
        """Sets the is_isolated of this MarginOrderDetail.


        :param is_isolated: The is_isolated of this MarginOrderDetail.  # noqa: E501
        :type: bool
        """
        if is_isolated is None:
            raise ValueError("Invalid value for `is_isolated`, must not be `None`")  # noqa: E501

        self._is_isolated = is_isolated

    @property
    def time(self):
        """Gets the time of this MarginOrderDetail.  # noqa: E501


        :return: The time of this MarginOrderDetail.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MarginOrderDetail.


        :param time: The time of this MarginOrderDetail.  # noqa: E501
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def time_in_force(self):
        """Gets the time_in_force of this MarginOrderDetail.  # noqa: E501


        :return: The time_in_force of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this MarginOrderDetail.


        :param time_in_force: The time_in_force of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if time_in_force is None:
            raise ValueError("Invalid value for `time_in_force`, must not be `None`")  # noqa: E501

        self._time_in_force = time_in_force

    @property
    def type(self):
        """Gets the type of this MarginOrderDetail.  # noqa: E501


        :return: The type of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MarginOrderDetail.


        :param type: The type of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this MarginOrderDetail.  # noqa: E501


        :return: The update_time of this MarginOrderDetail.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this MarginOrderDetail.


        :param update_time: The update_time of this MarginOrderDetail.  # noqa: E501
        :type: int
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    @property
    def self_trade_prevention_mode(self):
        """Gets the self_trade_prevention_mode of this MarginOrderDetail.  # noqa: E501


        :return: The self_trade_prevention_mode of this MarginOrderDetail.  # noqa: E501
        :rtype: str
        """
        return self._self_trade_prevention_mode

    @self_trade_prevention_mode.setter
    def self_trade_prevention_mode(self, self_trade_prevention_mode):
        """Sets the self_trade_prevention_mode of this MarginOrderDetail.


        :param self_trade_prevention_mode: The self_trade_prevention_mode of this MarginOrderDetail.  # noqa: E501
        :type: str
        """
        if self_trade_prevention_mode is None:
            raise ValueError("Invalid value for `self_trade_prevention_mode`, must not be `None`")  # noqa: E501

        self._self_trade_prevention_mode = self_trade_prevention_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarginOrderDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarginOrderDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
