# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200249(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index_id': 'int',
        'index_name': 'str',
        'status': 'str',
        'asset_allocation': 'list[InlineResponse200249AssetAllocation]'
    }

    attribute_map = {
        'index_id': 'indexId',
        'index_name': 'indexName',
        'status': 'status',
        'asset_allocation': 'assetAllocation'
    }

    def __init__(self, index_id=None, index_name=None, status=None, asset_allocation=None):  # noqa: E501
        """InlineResponse200249 - a model defined in Swagger"""  # noqa: E501
        self._index_id = None
        self._index_name = None
        self._status = None
        self._asset_allocation = None
        self.discriminator = None
        self.index_id = index_id
        self.index_name = index_name
        self.status = status
        self.asset_allocation = asset_allocation

    @property
    def index_id(self):
        """Gets the index_id of this InlineResponse200249.  # noqa: E501


        :return: The index_id of this InlineResponse200249.  # noqa: E501
        :rtype: int
        """
        return self._index_id

    @index_id.setter
    def index_id(self, index_id):
        """Sets the index_id of this InlineResponse200249.


        :param index_id: The index_id of this InlineResponse200249.  # noqa: E501
        :type: int
        """
        if index_id is None:
            raise ValueError("Invalid value for `index_id`, must not be `None`")  # noqa: E501

        self._index_id = index_id

    @property
    def index_name(self):
        """Gets the index_name of this InlineResponse200249.  # noqa: E501


        :return: The index_name of this InlineResponse200249.  # noqa: E501
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """Sets the index_name of this InlineResponse200249.


        :param index_name: The index_name of this InlineResponse200249.  # noqa: E501
        :type: str
        """
        if index_name is None:
            raise ValueError("Invalid value for `index_name`, must not be `None`")  # noqa: E501

        self._index_name = index_name

    @property
    def status(self):
        """Gets the status of this InlineResponse200249.  # noqa: E501


        :return: The status of this InlineResponse200249.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200249.


        :param status: The status of this InlineResponse200249.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def asset_allocation(self):
        """Gets the asset_allocation of this InlineResponse200249.  # noqa: E501


        :return: The asset_allocation of this InlineResponse200249.  # noqa: E501
        :rtype: list[InlineResponse200249AssetAllocation]
        """
        return self._asset_allocation

    @asset_allocation.setter
    def asset_allocation(self, asset_allocation):
        """Sets the asset_allocation of this InlineResponse200249.


        :param asset_allocation: The asset_allocation of this InlineResponse200249.  # noqa: E501
        :type: list[InlineResponse200249AssetAllocation]
        """
        if asset_allocation is None:
            raise ValueError("Invalid value for `asset_allocation`, must not be `None`")  # noqa: E501

        self._asset_allocation = asset_allocation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200249, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200249):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
