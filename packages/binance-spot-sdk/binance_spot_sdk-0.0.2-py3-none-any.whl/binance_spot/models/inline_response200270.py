# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200270(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_amount': 'str',
        'reward_asset': 'str',
        'air_drop_asset': 'str',
        'est_daily_bonus_rewards': 'str',
        'est_daily_real_time_rewards': 'str',
        'est_daily_airdrop_rewards': 'str'
    }

    attribute_map = {
        'total_amount': 'totalAmount',
        'reward_asset': 'rewardAsset',
        'air_drop_asset': 'airDropAsset',
        'est_daily_bonus_rewards': 'estDailyBonusRewards',
        'est_daily_real_time_rewards': 'estDailyRealTimeRewards',
        'est_daily_airdrop_rewards': 'estDailyAirdropRewards'
    }

    def __init__(self, total_amount=None, reward_asset=None, air_drop_asset=None, est_daily_bonus_rewards=None, est_daily_real_time_rewards=None, est_daily_airdrop_rewards=None):  # noqa: E501
        """InlineResponse200270 - a model defined in Swagger"""  # noqa: E501
        self._total_amount = None
        self._reward_asset = None
        self._air_drop_asset = None
        self._est_daily_bonus_rewards = None
        self._est_daily_real_time_rewards = None
        self._est_daily_airdrop_rewards = None
        self.discriminator = None
        self.total_amount = total_amount
        self.reward_asset = reward_asset
        self.air_drop_asset = air_drop_asset
        self.est_daily_bonus_rewards = est_daily_bonus_rewards
        self.est_daily_real_time_rewards = est_daily_real_time_rewards
        self.est_daily_airdrop_rewards = est_daily_airdrop_rewards

    @property
    def total_amount(self):
        """Gets the total_amount of this InlineResponse200270.  # noqa: E501


        :return: The total_amount of this InlineResponse200270.  # noqa: E501
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this InlineResponse200270.


        :param total_amount: The total_amount of this InlineResponse200270.  # noqa: E501
        :type: str
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")  # noqa: E501

        self._total_amount = total_amount

    @property
    def reward_asset(self):
        """Gets the reward_asset of this InlineResponse200270.  # noqa: E501


        :return: The reward_asset of this InlineResponse200270.  # noqa: E501
        :rtype: str
        """
        return self._reward_asset

    @reward_asset.setter
    def reward_asset(self, reward_asset):
        """Sets the reward_asset of this InlineResponse200270.


        :param reward_asset: The reward_asset of this InlineResponse200270.  # noqa: E501
        :type: str
        """
        if reward_asset is None:
            raise ValueError("Invalid value for `reward_asset`, must not be `None`")  # noqa: E501

        self._reward_asset = reward_asset

    @property
    def air_drop_asset(self):
        """Gets the air_drop_asset of this InlineResponse200270.  # noqa: E501


        :return: The air_drop_asset of this InlineResponse200270.  # noqa: E501
        :rtype: str
        """
        return self._air_drop_asset

    @air_drop_asset.setter
    def air_drop_asset(self, air_drop_asset):
        """Sets the air_drop_asset of this InlineResponse200270.


        :param air_drop_asset: The air_drop_asset of this InlineResponse200270.  # noqa: E501
        :type: str
        """
        if air_drop_asset is None:
            raise ValueError("Invalid value for `air_drop_asset`, must not be `None`")  # noqa: E501

        self._air_drop_asset = air_drop_asset

    @property
    def est_daily_bonus_rewards(self):
        """Gets the est_daily_bonus_rewards of this InlineResponse200270.  # noqa: E501


        :return: The est_daily_bonus_rewards of this InlineResponse200270.  # noqa: E501
        :rtype: str
        """
        return self._est_daily_bonus_rewards

    @est_daily_bonus_rewards.setter
    def est_daily_bonus_rewards(self, est_daily_bonus_rewards):
        """Sets the est_daily_bonus_rewards of this InlineResponse200270.


        :param est_daily_bonus_rewards: The est_daily_bonus_rewards of this InlineResponse200270.  # noqa: E501
        :type: str
        """
        if est_daily_bonus_rewards is None:
            raise ValueError("Invalid value for `est_daily_bonus_rewards`, must not be `None`")  # noqa: E501

        self._est_daily_bonus_rewards = est_daily_bonus_rewards

    @property
    def est_daily_real_time_rewards(self):
        """Gets the est_daily_real_time_rewards of this InlineResponse200270.  # noqa: E501


        :return: The est_daily_real_time_rewards of this InlineResponse200270.  # noqa: E501
        :rtype: str
        """
        return self._est_daily_real_time_rewards

    @est_daily_real_time_rewards.setter
    def est_daily_real_time_rewards(self, est_daily_real_time_rewards):
        """Sets the est_daily_real_time_rewards of this InlineResponse200270.


        :param est_daily_real_time_rewards: The est_daily_real_time_rewards of this InlineResponse200270.  # noqa: E501
        :type: str
        """
        if est_daily_real_time_rewards is None:
            raise ValueError("Invalid value for `est_daily_real_time_rewards`, must not be `None`")  # noqa: E501

        self._est_daily_real_time_rewards = est_daily_real_time_rewards

    @property
    def est_daily_airdrop_rewards(self):
        """Gets the est_daily_airdrop_rewards of this InlineResponse200270.  # noqa: E501


        :return: The est_daily_airdrop_rewards of this InlineResponse200270.  # noqa: E501
        :rtype: str
        """
        return self._est_daily_airdrop_rewards

    @est_daily_airdrop_rewards.setter
    def est_daily_airdrop_rewards(self, est_daily_airdrop_rewards):
        """Sets the est_daily_airdrop_rewards of this InlineResponse200270.


        :param est_daily_airdrop_rewards: The est_daily_airdrop_rewards of this InlineResponse200270.  # noqa: E501
        :type: str
        """
        if est_daily_airdrop_rewards is None:
            raise ValueError("Invalid value for `est_daily_airdrop_rewards`, must not be `None`")  # noqa: E501

        self._est_daily_airdrop_rewards = est_daily_airdrop_rewards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200270, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200270):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
