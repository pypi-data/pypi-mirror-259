# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20061(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'amount': 'str',
        'apply_time': 'str',
        'coin': 'str',
        'id': 'str',
        'withdraw_order_id': 'str',
        'network': 'str',
        'transfer_type': 'int',
        'status': 'int',
        'transaction_fee': 'str',
        'confirm_no': 'int',
        'info': 'str',
        'tx_id': 'str'
    }

    attribute_map = {
        'address': 'address',
        'amount': 'amount',
        'apply_time': 'applyTime',
        'coin': 'coin',
        'id': 'id',
        'withdraw_order_id': 'withdrawOrderId',
        'network': 'network',
        'transfer_type': 'transferType',
        'status': 'status',
        'transaction_fee': 'transactionFee',
        'confirm_no': 'confirmNo',
        'info': 'info',
        'tx_id': 'txId'
    }

    def __init__(self, address=None, amount=None, apply_time=None, coin=None, id=None, withdraw_order_id=None, network=None, transfer_type=None, status=None, transaction_fee=None, confirm_no=None, info=None, tx_id=None):  # noqa: E501
        """InlineResponse20061 - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._amount = None
        self._apply_time = None
        self._coin = None
        self._id = None
        self._withdraw_order_id = None
        self._network = None
        self._transfer_type = None
        self._status = None
        self._transaction_fee = None
        self._confirm_no = None
        self._info = None
        self._tx_id = None
        self.discriminator = None
        self.address = address
        self.amount = amount
        self.apply_time = apply_time
        self.coin = coin
        self.id = id
        self.withdraw_order_id = withdraw_order_id
        self.network = network
        self.transfer_type = transfer_type
        self.status = status
        self.transaction_fee = transaction_fee
        if confirm_no is not None:
            self.confirm_no = confirm_no
        if info is not None:
            self.info = info
        self.tx_id = tx_id

    @property
    def address(self):
        """Gets the address of this InlineResponse20061.  # noqa: E501


        :return: The address of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineResponse20061.


        :param address: The address of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def amount(self):
        """Gets the amount of this InlineResponse20061.  # noqa: E501


        :return: The amount of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse20061.


        :param amount: The amount of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def apply_time(self):
        """Gets the apply_time of this InlineResponse20061.  # noqa: E501


        :return: The apply_time of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._apply_time

    @apply_time.setter
    def apply_time(self, apply_time):
        """Sets the apply_time of this InlineResponse20061.


        :param apply_time: The apply_time of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        if apply_time is None:
            raise ValueError("Invalid value for `apply_time`, must not be `None`")  # noqa: E501

        self._apply_time = apply_time

    @property
    def coin(self):
        """Gets the coin of this InlineResponse20061.  # noqa: E501


        :return: The coin of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._coin

    @coin.setter
    def coin(self, coin):
        """Sets the coin of this InlineResponse20061.


        :param coin: The coin of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        if coin is None:
            raise ValueError("Invalid value for `coin`, must not be `None`")  # noqa: E501

        self._coin = coin

    @property
    def id(self):
        """Gets the id of this InlineResponse20061.  # noqa: E501


        :return: The id of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20061.


        :param id: The id of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def withdraw_order_id(self):
        """Gets the withdraw_order_id of this InlineResponse20061.  # noqa: E501

        will not be returned if there's no withdrawOrderId for this withdraw.  # noqa: E501

        :return: The withdraw_order_id of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._withdraw_order_id

    @withdraw_order_id.setter
    def withdraw_order_id(self, withdraw_order_id):
        """Sets the withdraw_order_id of this InlineResponse20061.

        will not be returned if there's no withdrawOrderId for this withdraw.  # noqa: E501

        :param withdraw_order_id: The withdraw_order_id of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        if withdraw_order_id is None:
            raise ValueError("Invalid value for `withdraw_order_id`, must not be `None`")  # noqa: E501

        self._withdraw_order_id = withdraw_order_id

    @property
    def network(self):
        """Gets the network of this InlineResponse20061.  # noqa: E501


        :return: The network of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this InlineResponse20061.


        :param network: The network of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def transfer_type(self):
        """Gets the transfer_type of this InlineResponse20061.  # noqa: E501

        1 for internal transfer, 0 for external transfer  # noqa: E501

        :return: The transfer_type of this InlineResponse20061.  # noqa: E501
        :rtype: int
        """
        return self._transfer_type

    @transfer_type.setter
    def transfer_type(self, transfer_type):
        """Sets the transfer_type of this InlineResponse20061.

        1 for internal transfer, 0 for external transfer  # noqa: E501

        :param transfer_type: The transfer_type of this InlineResponse20061.  # noqa: E501
        :type: int
        """
        if transfer_type is None:
            raise ValueError("Invalid value for `transfer_type`, must not be `None`")  # noqa: E501

        self._transfer_type = transfer_type

    @property
    def status(self):
        """Gets the status of this InlineResponse20061.  # noqa: E501


        :return: The status of this InlineResponse20061.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20061.


        :param status: The status of this InlineResponse20061.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def transaction_fee(self):
        """Gets the transaction_fee of this InlineResponse20061.  # noqa: E501


        :return: The transaction_fee of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._transaction_fee

    @transaction_fee.setter
    def transaction_fee(self, transaction_fee):
        """Sets the transaction_fee of this InlineResponse20061.


        :param transaction_fee: The transaction_fee of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        if transaction_fee is None:
            raise ValueError("Invalid value for `transaction_fee`, must not be `None`")  # noqa: E501

        self._transaction_fee = transaction_fee

    @property
    def confirm_no(self):
        """Gets the confirm_no of this InlineResponse20061.  # noqa: E501


        :return: The confirm_no of this InlineResponse20061.  # noqa: E501
        :rtype: int
        """
        return self._confirm_no

    @confirm_no.setter
    def confirm_no(self, confirm_no):
        """Sets the confirm_no of this InlineResponse20061.


        :param confirm_no: The confirm_no of this InlineResponse20061.  # noqa: E501
        :type: int
        """

        self._confirm_no = confirm_no

    @property
    def info(self):
        """Gets the info of this InlineResponse20061.  # noqa: E501

        Reason for withdrawal failure  # noqa: E501

        :return: The info of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this InlineResponse20061.

        Reason for withdrawal failure  # noqa: E501

        :param info: The info of this InlineResponse20061.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def tx_id(self):
        """Gets the tx_id of this InlineResponse20061.  # noqa: E501


        :return: The tx_id of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._tx_id

    @tx_id.setter
    def tx_id(self, tx_id):
        """Sets the tx_id of this InlineResponse20061.


        :param tx_id: The tx_id of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        if tx_id is None:
            raise ValueError("Invalid value for `tx_id`, must not be `None`")  # noqa: E501

        self._tx_id = tx_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20061, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20061):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
