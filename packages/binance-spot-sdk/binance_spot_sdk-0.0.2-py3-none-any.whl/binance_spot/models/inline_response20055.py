# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20055(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_names': 'list[str]',
        'rank': 'int',
        'brackets': 'list[Sapiv1marginleverageBracketBrackets]'
    }

    attribute_map = {
        'asset_names': 'assetNames',
        'rank': 'rank',
        'brackets': 'brackets'
    }

    def __init__(self, asset_names=None, rank=None, brackets=None):  # noqa: E501
        """InlineResponse20055 - a model defined in Swagger"""  # noqa: E501
        self._asset_names = None
        self._rank = None
        self._brackets = None
        self.discriminator = None
        self.asset_names = asset_names
        self.rank = rank
        self.brackets = brackets

    @property
    def asset_names(self):
        """Gets the asset_names of this InlineResponse20055.  # noqa: E501


        :return: The asset_names of this InlineResponse20055.  # noqa: E501
        :rtype: list[str]
        """
        return self._asset_names

    @asset_names.setter
    def asset_names(self, asset_names):
        """Sets the asset_names of this InlineResponse20055.


        :param asset_names: The asset_names of this InlineResponse20055.  # noqa: E501
        :type: list[str]
        """
        if asset_names is None:
            raise ValueError("Invalid value for `asset_names`, must not be `None`")  # noqa: E501

        self._asset_names = asset_names

    @property
    def rank(self):
        """Gets the rank of this InlineResponse20055.  # noqa: E501


        :return: The rank of this InlineResponse20055.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this InlineResponse20055.


        :param rank: The rank of this InlineResponse20055.  # noqa: E501
        :type: int
        """
        if rank is None:
            raise ValueError("Invalid value for `rank`, must not be `None`")  # noqa: E501

        self._rank = rank

    @property
    def brackets(self):
        """Gets the brackets of this InlineResponse20055.  # noqa: E501


        :return: The brackets of this InlineResponse20055.  # noqa: E501
        :rtype: list[Sapiv1marginleverageBracketBrackets]
        """
        return self._brackets

    @brackets.setter
    def brackets(self, brackets):
        """Sets the brackets of this InlineResponse20055.


        :param brackets: The brackets of this InlineResponse20055.  # noqa: E501
        :type: list[Sapiv1marginleverageBracketBrackets]
        """
        if brackets is None:
            raise ValueError("Invalid value for `brackets`, must not be `None`")  # noqa: E501

        self._brackets = brackets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20055, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20055):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
