# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class StakingApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_staking_personal_left_quota_get(self, product, product_id, timestamp, signature, **kwargs):  # noqa: E501
        """Get Personal Left Quota of Staking Product (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_personal_left_quota_get(product, product_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param str product_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200136]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_staking_personal_left_quota_get_with_http_info(product, product_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_staking_personal_left_quota_get_with_http_info(product, product_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_staking_personal_left_quota_get_with_http_info(self, product, product_id, timestamp, signature, **kwargs):  # noqa: E501
        """Get Personal Left Quota of Staking Product (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_personal_left_quota_get_with_http_info(product, product_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param str product_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200136]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product', 'product_id', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_staking_personal_left_quota_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `sapi_v1_staking_personal_left_quota_get`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `sapi_v1_staking_personal_left_quota_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_staking_personal_left_quota_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_staking_personal_left_quota_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('productId', params['product_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/staking/personalLeftQuota', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200136]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_staking_position_get(self, product, timestamp, signature, **kwargs):  # noqa: E501
        """Get Staking Product Position (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_position_get(product, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str product_id:
        :param str asset:
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200134]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_staking_position_get_with_http_info(product, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_staking_position_get_with_http_info(product, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_staking_position_get_with_http_info(self, product, timestamp, signature, **kwargs):  # noqa: E501
        """Get Staking Product Position (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_position_get_with_http_info(product, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str product_id:
        :param str asset:
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200134]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product', 'timestamp', 'signature', 'product_id', 'asset', 'current', 'size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_staking_position_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `sapi_v1_staking_position_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_staking_position_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_staking_position_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('productId', params['product_id']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/staking/position', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200134]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_staking_product_list_get(self, product, timestamp, signature, **kwargs):  # noqa: E501
        """Get Staking Product List (USER_DATA)  # noqa: E501

        Get available Staking product list.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_product_list_get(product, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200132]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_staking_product_list_get_with_http_info(product, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_staking_product_list_get_with_http_info(product, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_staking_product_list_get_with_http_info(self, product, timestamp, signature, **kwargs):  # noqa: E501
        """Get Staking Product List (USER_DATA)  # noqa: E501

        Get available Staking product list.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_product_list_get_with_http_info(product, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200132]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product', 'timestamp', 'signature', 'asset', 'current', 'size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_staking_product_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `sapi_v1_staking_product_list_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_staking_product_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_staking_product_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/staking/productList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200132]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_staking_purchase_post(self, product, product_id, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Purchase Staking Product (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_purchase_post(product, product_id, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param str product_id: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str renewable: true or false, default false. Active if product is `STAKING` or `L_DEFI`
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200133
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_staking_purchase_post_with_http_info(product, product_id, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_staking_purchase_post_with_http_info(product, product_id, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_staking_purchase_post_with_http_info(self, product, product_id, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Purchase Staking Product (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_purchase_post_with_http_info(product, product_id, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param str product_id: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str renewable: true or false, default false. Active if product is `STAKING` or `L_DEFI`
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200133
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product', 'product_id', 'amount', 'timestamp', 'signature', 'renewable', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_staking_purchase_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `sapi_v1_staking_purchase_post`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `sapi_v1_staking_purchase_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_staking_purchase_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_staking_purchase_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_staking_purchase_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('productId', params['product_id']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'renewable' in params:
            query_params.append(('renewable', params['renewable']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/staking/purchase', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200133',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_staking_redeem_post(self, product, product_id, timestamp, signature, **kwargs):  # noqa: E501
        """Redeem Staking Product (USER_DATA)  # noqa: E501

        Redeem Staking product. Locked staking and Locked DeFI staking belong to early redemption, redeeming in advance will result in loss of interest that you have earned.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_redeem_post(product, product_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param str product_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str position_id: Mandatory if product is `STAKING` or `L_DEFI`
        :param float amount: Mandatory if product is `F_DEFI`
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_staking_redeem_post_with_http_info(product, product_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_staking_redeem_post_with_http_info(product, product_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_staking_redeem_post_with_http_info(self, product, product_id, timestamp, signature, **kwargs):  # noqa: E501
        """Redeem Staking Product (USER_DATA)  # noqa: E501

        Redeem Staking product. Locked staking and Locked DeFI staking belong to early redemption, redeeming in advance will result in loss of interest that you have earned.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_redeem_post_with_http_info(product, product_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param str product_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str position_id: Mandatory if product is `STAKING` or `L_DEFI`
        :param float amount: Mandatory if product is `F_DEFI`
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product', 'product_id', 'timestamp', 'signature', 'position_id', 'amount', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_staking_redeem_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `sapi_v1_staking_redeem_post`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `sapi_v1_staking_redeem_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_staking_redeem_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_staking_redeem_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501
        if 'position_id' in params:
            query_params.append(('positionId', params['position_id']))  # noqa: E501
        if 'product_id' in params:
            query_params.append(('productId', params['product_id']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/staking/redeem', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20054',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_staking_set_auto_staking_post(self, product, position_id, renewable, timestamp, signature, **kwargs):  # noqa: E501
        """Set Auto Staking (USER_DATA)  # noqa: E501

        Set auto staking on Locked Staking or Locked DeFi Staking  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_set_auto_staking_post(product, position_id, renewable, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param str position_id: (required)
        :param str renewable: true or false (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_staking_set_auto_staking_post_with_http_info(product, position_id, renewable, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_staking_set_auto_staking_post_with_http_info(product, position_id, renewable, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_staking_set_auto_staking_post_with_http_info(self, product, position_id, renewable, timestamp, signature, **kwargs):  # noqa: E501
        """Set Auto Staking (USER_DATA)  # noqa: E501

        Set auto staking on Locked Staking or Locked DeFi Staking  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_set_auto_staking_post_with_http_info(product, position_id, renewable, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param str position_id: (required)
        :param str renewable: true or false (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20054
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product', 'position_id', 'renewable', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_staking_set_auto_staking_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `sapi_v1_staking_set_auto_staking_post`")  # noqa: E501
        # verify the required parameter 'position_id' is set
        if ('position_id' not in params or
                params['position_id'] is None):
            raise ValueError("Missing the required parameter `position_id` when calling `sapi_v1_staking_set_auto_staking_post`")  # noqa: E501
        # verify the required parameter 'renewable' is set
        if ('renewable' not in params or
                params['renewable'] is None):
            raise ValueError("Missing the required parameter `renewable` when calling `sapi_v1_staking_set_auto_staking_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_staking_set_auto_staking_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_staking_set_auto_staking_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501
        if 'position_id' in params:
            query_params.append(('positionId', params['position_id']))  # noqa: E501
        if 'renewable' in params:
            query_params.append(('renewable', params['renewable']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/staking/setAutoStaking', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20054',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_staking_staking_record_get(self, product, txn_type, timestamp, signature, **kwargs):  # noqa: E501
        """Get Staking History (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_staking_record_get(product, txn_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param str txn_type: `SUBSCRIPTION`, `REDEMPTION`, `INTEREST` (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200135]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_staking_staking_record_get_with_http_info(product, txn_type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_staking_staking_record_get_with_http_info(product, txn_type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_staking_staking_record_get_with_http_info(self, product, txn_type, timestamp, signature, **kwargs):  # noqa: E501
        """Get Staking History (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_staking_staking_record_get_with_http_info(product, txn_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product: * `STAKING` - for Locked Staking * `F_DEFI` - for flexible DeFi Staking * `L_DEFI` - for locked DeFi Staking (required)
        :param str txn_type: `SUBSCRIPTION`, `REDEMPTION`, `INTEREST` (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200135]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product', 'txn_type', 'timestamp', 'signature', 'asset', 'start_time', 'end_time', 'current', 'size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_staking_staking_record_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `sapi_v1_staking_staking_record_get`")  # noqa: E501
        # verify the required parameter 'txn_type' is set
        if ('txn_type' not in params or
                params['txn_type'] is None):
            raise ValueError("Missing the required parameter `txn_type` when calling `sapi_v1_staking_staking_record_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_staking_staking_record_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_staking_staking_record_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'product' in params:
            query_params.append(('product', params['product']))  # noqa: E501
        if 'txn_type' in params:
            query_params.append(('txnType', params['txn_type']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/staking/stakingRecord', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200135]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
