# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class MiningApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_mining_hash_transfer_config_cancel_post(self, config_id, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Cancel Hashrate Resale configuration (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_hash_transfer_config_cancel_post(config_id, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_id: Mining ID (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200146
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_hash_transfer_config_cancel_post_with_http_info(config_id, user_name, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_hash_transfer_config_cancel_post_with_http_info(config_id, user_name, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_hash_transfer_config_cancel_post_with_http_info(self, config_id, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Cancel Hashrate Resale configuration (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_hash_transfer_config_cancel_post_with_http_info(config_id, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_id: Mining ID (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200146
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config_id', 'user_name', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_hash_transfer_config_cancel_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `sapi_v1_mining_hash_transfer_config_cancel_post`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `sapi_v1_mining_hash_transfer_config_cancel_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_hash_transfer_config_cancel_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_hash_transfer_config_cancel_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'config_id' in params:
            query_params.append(('configId', params['config_id']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/hash-transfer/config/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200146',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_hash_transfer_config_details_list_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Hashrate Resale List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_hash_transfer_config_details_list_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page_index: Page number, default is first page, start form 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200143
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_hash_transfer_config_details_list_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_hash_transfer_config_details_list_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_hash_transfer_config_details_list_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Hashrate Resale List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_hash_transfer_config_details_list_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page_index: Page number, default is first page, start form 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200143
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'page_index', 'page_size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_hash_transfer_config_details_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_hash_transfer_config_details_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_hash_transfer_config_details_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/hash-transfer/config/details/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200143',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_hash_transfer_config_post(self, user_name, algo, to_pool_user, hash_rate, timestamp, signature, **kwargs):  # noqa: E501
        """Hashrate Resale Request (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_hash_transfer_config_post(user_name, algo, to_pool_user, hash_rate, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: Mining Account (required)
        :param str algo: Algorithm(sha256) (required)
        :param str to_pool_user: Mining Account (required)
        :param str hash_rate: Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000) (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str start_date: Search date, millisecond timestamp, while empty query all
        :param str end_date: Search date, millisecond timestamp, while empty query all
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200145
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_hash_transfer_config_post_with_http_info(user_name, algo, to_pool_user, hash_rate, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_hash_transfer_config_post_with_http_info(user_name, algo, to_pool_user, hash_rate, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_hash_transfer_config_post_with_http_info(self, user_name, algo, to_pool_user, hash_rate, timestamp, signature, **kwargs):  # noqa: E501
        """Hashrate Resale Request (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_hash_transfer_config_post_with_http_info(user_name, algo, to_pool_user, hash_rate, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: Mining Account (required)
        :param str algo: Algorithm(sha256) (required)
        :param str to_pool_user: Mining Account (required)
        :param str hash_rate: Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000) (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str start_date: Search date, millisecond timestamp, while empty query all
        :param str end_date: Search date, millisecond timestamp, while empty query all
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200145
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_name', 'algo', 'to_pool_user', 'hash_rate', 'timestamp', 'signature', 'start_date', 'end_date', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_hash_transfer_config_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `sapi_v1_mining_hash_transfer_config_post`")  # noqa: E501
        # verify the required parameter 'algo' is set
        if ('algo' not in params or
                params['algo'] is None):
            raise ValueError("Missing the required parameter `algo` when calling `sapi_v1_mining_hash_transfer_config_post`")  # noqa: E501
        # verify the required parameter 'to_pool_user' is set
        if ('to_pool_user' not in params or
                params['to_pool_user'] is None):
            raise ValueError("Missing the required parameter `to_pool_user` when calling `sapi_v1_mining_hash_transfer_config_post`")  # noqa: E501
        # verify the required parameter 'hash_rate' is set
        if ('hash_rate' not in params or
                params['hash_rate'] is None):
            raise ValueError("Missing the required parameter `hash_rate` when calling `sapi_v1_mining_hash_transfer_config_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_hash_transfer_config_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_hash_transfer_config_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'algo' in params:
            query_params.append(('algo', params['algo']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'to_pool_user' in params:
            query_params.append(('toPoolUser', params['to_pool_user']))  # noqa: E501
        if 'hash_rate' in params:
            query_params.append(('hashRate', params['hash_rate']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/hash-transfer/config', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200145',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_hash_transfer_profit_details_get(self, config_id, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Hashrate Resale Details (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_hash_transfer_profit_details_get(config_id, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_id: Mining ID (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page_index: Page number, default is first page, start form 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200144
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_hash_transfer_profit_details_get_with_http_info(config_id, user_name, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_hash_transfer_profit_details_get_with_http_info(config_id, user_name, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_hash_transfer_profit_details_get_with_http_info(self, config_id, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Hashrate Resale Details (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_hash_transfer_profit_details_get_with_http_info(config_id, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str config_id: Mining ID (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page_index: Page number, default is first page, start form 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200144
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['config_id', 'user_name', 'timestamp', 'signature', 'page_index', 'page_size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_hash_transfer_profit_details_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'config_id' is set
        if ('config_id' not in params or
                params['config_id'] is None):
            raise ValueError("Missing the required parameter `config_id` when calling `sapi_v1_mining_hash_transfer_profit_details_get`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `sapi_v1_mining_hash_transfer_profit_details_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_hash_transfer_profit_details_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_hash_transfer_profit_details_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'config_id' in params:
            query_params.append(('configId', params['config_id']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/hash-transfer/profit/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200144',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_payment_list_get(self, algo, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Earnings List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_payment_list_get(algo, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str coin: Coin name
        :param str start_date: Search date, millisecond timestamp, while empty query all
        :param str end_date: Search date, millisecond timestamp, while empty query all
        :param int page_index: Page number, default is first page, start form 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200141
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_payment_list_get_with_http_info(algo, user_name, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_payment_list_get_with_http_info(algo, user_name, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_payment_list_get_with_http_info(self, algo, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Earnings List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_payment_list_get_with_http_info(algo, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str coin: Coin name
        :param str start_date: Search date, millisecond timestamp, while empty query all
        :param str end_date: Search date, millisecond timestamp, while empty query all
        :param int page_index: Page number, default is first page, start form 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200141
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo', 'user_name', 'timestamp', 'signature', 'coin', 'start_date', 'end_date', 'page_index', 'page_size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_payment_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo' is set
        if ('algo' not in params or
                params['algo'] is None):
            raise ValueError("Missing the required parameter `algo` when calling `sapi_v1_mining_payment_list_get`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `sapi_v1_mining_payment_list_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_payment_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_payment_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo' in params:
            query_params.append(('algo', params['algo']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/payment/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200141',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_payment_other_get(self, algo, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Extra Bonus List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_payment_other_get(algo, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str coin: Coin name
        :param str start_date: Search date, millisecond timestamp, while empty query all
        :param str end_date: Search date, millisecond timestamp, while empty query all
        :param int page_index: Page number, default is first page, start form 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200142
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_payment_other_get_with_http_info(algo, user_name, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_payment_other_get_with_http_info(algo, user_name, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_payment_other_get_with_http_info(self, algo, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Extra Bonus List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_payment_other_get_with_http_info(algo, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str coin: Coin name
        :param str start_date: Search date, millisecond timestamp, while empty query all
        :param str end_date: Search date, millisecond timestamp, while empty query all
        :param int page_index: Page number, default is first page, start form 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200142
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo', 'user_name', 'timestamp', 'signature', 'coin', 'start_date', 'end_date', 'page_index', 'page_size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_payment_other_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo' is set
        if ('algo' not in params or
                params['algo'] is None):
            raise ValueError("Missing the required parameter `algo` when calling `sapi_v1_mining_payment_other_get`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `sapi_v1_mining_payment_other_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_payment_other_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_payment_other_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo' in params:
            query_params.append(('algo', params['algo']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/payment/other', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200142',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_payment_uid_get(self, algo, timestamp, signature, **kwargs):  # noqa: E501
        """Mining Account Earning (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_payment_uid_get(algo, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str start_date: Search date, millisecond timestamp, while empty query all
        :param str end_date: Search date, millisecond timestamp, while empty query all
        :param int page_index: Page number, default is first page, start form 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200149
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_payment_uid_get_with_http_info(algo, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_payment_uid_get_with_http_info(algo, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_payment_uid_get_with_http_info(self, algo, timestamp, signature, **kwargs):  # noqa: E501
        """Mining Account Earning (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_payment_uid_get_with_http_info(algo, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str start_date: Search date, millisecond timestamp, while empty query all
        :param str end_date: Search date, millisecond timestamp, while empty query all
        :param int page_index: Page number, default is first page, start form 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200149
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo', 'timestamp', 'signature', 'start_date', 'end_date', 'page_index', 'page_size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_payment_uid_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo' is set
        if ('algo' not in params or
                params['algo'] is None):
            raise ValueError("Missing the required parameter `algo` when calling `sapi_v1_mining_payment_uid_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_payment_uid_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_payment_uid_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo' in params:
            query_params.append(('algo', params['algo']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/payment/uid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200149',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_pub_algo_list_get(self, **kwargs):  # noqa: E501
        """Acquiring Algorithm (MARKET_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_pub_algo_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200137
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_pub_algo_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_pub_algo_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_pub_algo_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Acquiring Algorithm (MARKET_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_pub_algo_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200137
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_pub_algo_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/pub/algoList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200137',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_pub_coin_list_get(self, **kwargs):  # noqa: E501
        """Acquiring CoinName (MARKET_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_pub_coin_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200138
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_pub_coin_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_pub_coin_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_pub_coin_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """Acquiring CoinName (MARKET_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_pub_coin_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200138
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_pub_coin_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/pub/coinList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200138',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_statistics_user_list_get(self, algo, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Account List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_statistics_user_list_get(algo, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200148
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_statistics_user_list_get_with_http_info(algo, user_name, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_statistics_user_list_get_with_http_info(algo, user_name, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_statistics_user_list_get_with_http_info(self, algo, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Account List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_statistics_user_list_get_with_http_info(algo, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200148
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo', 'user_name', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_statistics_user_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo' is set
        if ('algo' not in params or
                params['algo'] is None):
            raise ValueError("Missing the required parameter `algo` when calling `sapi_v1_mining_statistics_user_list_get`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `sapi_v1_mining_statistics_user_list_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_statistics_user_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_statistics_user_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo' in params:
            query_params.append(('algo', params['algo']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/statistics/user/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200148',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_statistics_user_status_get(self, algo, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Statistic List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_statistics_user_status_get(algo, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200147
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_statistics_user_status_get_with_http_info(algo, user_name, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_statistics_user_status_get_with_http_info(algo, user_name, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_statistics_user_status_get_with_http_info(self, algo, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Statistic List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_statistics_user_status_get_with_http_info(algo, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200147
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo', 'user_name', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_statistics_user_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo' is set
        if ('algo' not in params or
                params['algo'] is None):
            raise ValueError("Missing the required parameter `algo` when calling `sapi_v1_mining_statistics_user_status_get`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `sapi_v1_mining_statistics_user_status_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_statistics_user_status_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_statistics_user_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo' in params:
            query_params.append(('algo', params['algo']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/statistics/user/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200147',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_worker_detail_get(self, algo, user_name, worker_name, timestamp, signature, **kwargs):  # noqa: E501
        """Request for Detail Miner List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_worker_detail_get(algo, user_name, worker_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param str worker_name: Miner’s name (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200139
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_worker_detail_get_with_http_info(algo, user_name, worker_name, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_worker_detail_get_with_http_info(algo, user_name, worker_name, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_worker_detail_get_with_http_info(self, algo, user_name, worker_name, timestamp, signature, **kwargs):  # noqa: E501
        """Request for Detail Miner List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_worker_detail_get_with_http_info(algo, user_name, worker_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param str worker_name: Miner’s name (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200139
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo', 'user_name', 'worker_name', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_worker_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo' is set
        if ('algo' not in params or
                params['algo'] is None):
            raise ValueError("Missing the required parameter `algo` when calling `sapi_v1_mining_worker_detail_get`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `sapi_v1_mining_worker_detail_get`")  # noqa: E501
        # verify the required parameter 'worker_name' is set
        if ('worker_name' not in params or
                params['worker_name'] is None):
            raise ValueError("Missing the required parameter `worker_name` when calling `sapi_v1_mining_worker_detail_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_worker_detail_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_worker_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo' in params:
            query_params.append(('algo', params['algo']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'worker_name' in params:
            query_params.append(('workerName', params['worker_name']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/worker/detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200139',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_mining_worker_list_get(self, algo, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Request for Miner List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_worker_list_get(algo, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page_index: Page number, default is first page, start form 1
        :param int sort: sort sequence(default=0)0 positive sequence, 1 negative sequence
        :param int sort_column: Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time
        :param int worker_status: miners status(default=0)0 all, 1 valid, 2 invalid, 3 failure
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200140
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_mining_worker_list_get_with_http_info(algo, user_name, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_mining_worker_list_get_with_http_info(algo, user_name, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_mining_worker_list_get_with_http_info(self, algo, user_name, timestamp, signature, **kwargs):  # noqa: E501
        """Request for Miner List (USER_DATA)  # noqa: E501

        Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_mining_worker_list_get_with_http_info(algo, user_name, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str algo: Algorithm(sha256) (required)
        :param str user_name: Mining Account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page_index: Page number, default is first page, start form 1
        :param int sort: sort sequence(default=0)0 positive sequence, 1 negative sequence
        :param int sort_column: Sort by( default 1): 1: miner name, 2: real-time computing power, 3: daily average computing power, 4: real-time rejection rate, 5: last submission time
        :param int worker_status: miners status(default=0)0 all, 1 valid, 2 invalid, 3 failure
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200140
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo', 'user_name', 'timestamp', 'signature', 'page_index', 'sort', 'sort_column', 'worker_status', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_mining_worker_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo' is set
        if ('algo' not in params or
                params['algo'] is None):
            raise ValueError("Missing the required parameter `algo` when calling `sapi_v1_mining_worker_list_get`")  # noqa: E501
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `sapi_v1_mining_worker_list_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_mining_worker_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_mining_worker_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo' in params:
            query_params.append(('algo', params['algo']))  # noqa: E501
        if 'user_name' in params:
            query_params.append(('userName', params['user_name']))  # noqa: E501
        if 'page_index' in params:
            query_params.append(('pageIndex', params['page_index']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'sort_column' in params:
            query_params.append(('sortColumn', params['sort_column']))  # noqa: E501
        if 'worker_status' in params:
            query_params.append(('workerStatus', params['worker_status']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/mining/worker/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200140',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
