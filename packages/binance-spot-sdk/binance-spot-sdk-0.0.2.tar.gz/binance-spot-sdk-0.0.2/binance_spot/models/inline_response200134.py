# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200134(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position_id': 'str',
        'project_id': 'str',
        'asset': 'str',
        'amount': 'str',
        'purchase_time': 'str',
        'duration': 'str',
        'accrual_days': 'str',
        'reward_asset': 'str',
        'apy': 'str',
        'reward_amt': 'str',
        'extra_reward_asset': 'str',
        'extra_reward_apy': 'str',
        'est_extra_reward_amt': 'str',
        'next_interest_pay': 'str',
        'next_interest_pay_date': 'str',
        'pay_interest_period': 'str',
        'redeem_amount_early': 'str',
        'interest_end_date': 'str',
        'deliver_date': 'str',
        'redeem_period': 'str',
        'redeeming_amt': 'str',
        'partial_amt_deliver_date': 'str',
        'can_redeem_early': 'bool',
        'renewable': 'bool',
        'type': 'str',
        'status': 'str'
    }

    attribute_map = {
        'position_id': 'positionId',
        'project_id': 'projectId',
        'asset': 'asset',
        'amount': 'amount',
        'purchase_time': 'purchaseTime',
        'duration': 'duration',
        'accrual_days': 'accrualDays',
        'reward_asset': 'rewardAsset',
        'apy': 'APY',
        'reward_amt': 'rewardAmt',
        'extra_reward_asset': 'extraRewardAsset',
        'extra_reward_apy': 'extraRewardAPY',
        'est_extra_reward_amt': 'estExtraRewardAmt',
        'next_interest_pay': 'nextInterestPay',
        'next_interest_pay_date': 'nextInterestPayDate',
        'pay_interest_period': 'payInterestPeriod',
        'redeem_amount_early': 'redeemAmountEarly',
        'interest_end_date': 'interestEndDate',
        'deliver_date': 'deliverDate',
        'redeem_period': 'redeemPeriod',
        'redeeming_amt': 'redeemingAmt',
        'partial_amt_deliver_date': 'partialAmtDeliverDate',
        'can_redeem_early': 'canRedeemEarly',
        'renewable': 'renewable',
        'type': 'type',
        'status': 'status'
    }

    def __init__(self, position_id=None, project_id=None, asset=None, amount=None, purchase_time=None, duration=None, accrual_days=None, reward_asset=None, apy=None, reward_amt=None, extra_reward_asset=None, extra_reward_apy=None, est_extra_reward_amt=None, next_interest_pay=None, next_interest_pay_date=None, pay_interest_period=None, redeem_amount_early=None, interest_end_date=None, deliver_date=None, redeem_period=None, redeeming_amt=None, partial_amt_deliver_date=None, can_redeem_early=None, renewable=None, type=None, status=None):  # noqa: E501
        """InlineResponse200134 - a model defined in Swagger"""  # noqa: E501
        self._position_id = None
        self._project_id = None
        self._asset = None
        self._amount = None
        self._purchase_time = None
        self._duration = None
        self._accrual_days = None
        self._reward_asset = None
        self._apy = None
        self._reward_amt = None
        self._extra_reward_asset = None
        self._extra_reward_apy = None
        self._est_extra_reward_amt = None
        self._next_interest_pay = None
        self._next_interest_pay_date = None
        self._pay_interest_period = None
        self._redeem_amount_early = None
        self._interest_end_date = None
        self._deliver_date = None
        self._redeem_period = None
        self._redeeming_amt = None
        self._partial_amt_deliver_date = None
        self._can_redeem_early = None
        self._renewable = None
        self._type = None
        self._status = None
        self.discriminator = None
        self.position_id = position_id
        self.project_id = project_id
        self.asset = asset
        self.amount = amount
        self.purchase_time = purchase_time
        self.duration = duration
        self.accrual_days = accrual_days
        self.reward_asset = reward_asset
        self.apy = apy
        self.reward_amt = reward_amt
        self.extra_reward_asset = extra_reward_asset
        self.extra_reward_apy = extra_reward_apy
        self.est_extra_reward_amt = est_extra_reward_amt
        self.next_interest_pay = next_interest_pay
        self.next_interest_pay_date = next_interest_pay_date
        self.pay_interest_period = pay_interest_period
        self.redeem_amount_early = redeem_amount_early
        self.interest_end_date = interest_end_date
        self.deliver_date = deliver_date
        self.redeem_period = redeem_period
        self.redeeming_amt = redeeming_amt
        self.partial_amt_deliver_date = partial_amt_deliver_date
        self.can_redeem_early = can_redeem_early
        self.renewable = renewable
        self.type = type
        self.status = status

    @property
    def position_id(self):
        """Gets the position_id of this InlineResponse200134.  # noqa: E501


        :return: The position_id of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this InlineResponse200134.


        :param position_id: The position_id of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if position_id is None:
            raise ValueError("Invalid value for `position_id`, must not be `None`")  # noqa: E501

        self._position_id = position_id

    @property
    def project_id(self):
        """Gets the project_id of this InlineResponse200134.  # noqa: E501


        :return: The project_id of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this InlineResponse200134.


        :param project_id: The project_id of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def asset(self):
        """Gets the asset of this InlineResponse200134.  # noqa: E501


        :return: The asset of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse200134.


        :param asset: The asset of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def amount(self):
        """Gets the amount of this InlineResponse200134.  # noqa: E501


        :return: The amount of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse200134.


        :param amount: The amount of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def purchase_time(self):
        """Gets the purchase_time of this InlineResponse200134.  # noqa: E501


        :return: The purchase_time of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._purchase_time

    @purchase_time.setter
    def purchase_time(self, purchase_time):
        """Sets the purchase_time of this InlineResponse200134.


        :param purchase_time: The purchase_time of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if purchase_time is None:
            raise ValueError("Invalid value for `purchase_time`, must not be `None`")  # noqa: E501

        self._purchase_time = purchase_time

    @property
    def duration(self):
        """Gets the duration of this InlineResponse200134.  # noqa: E501


        :return: The duration of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse200134.


        :param duration: The duration of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def accrual_days(self):
        """Gets the accrual_days of this InlineResponse200134.  # noqa: E501


        :return: The accrual_days of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._accrual_days

    @accrual_days.setter
    def accrual_days(self, accrual_days):
        """Sets the accrual_days of this InlineResponse200134.


        :param accrual_days: The accrual_days of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if accrual_days is None:
            raise ValueError("Invalid value for `accrual_days`, must not be `None`")  # noqa: E501

        self._accrual_days = accrual_days

    @property
    def reward_asset(self):
        """Gets the reward_asset of this InlineResponse200134.  # noqa: E501


        :return: The reward_asset of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._reward_asset

    @reward_asset.setter
    def reward_asset(self, reward_asset):
        """Sets the reward_asset of this InlineResponse200134.


        :param reward_asset: The reward_asset of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if reward_asset is None:
            raise ValueError("Invalid value for `reward_asset`, must not be `None`")  # noqa: E501

        self._reward_asset = reward_asset

    @property
    def apy(self):
        """Gets the apy of this InlineResponse200134.  # noqa: E501


        :return: The apy of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._apy

    @apy.setter
    def apy(self, apy):
        """Sets the apy of this InlineResponse200134.


        :param apy: The apy of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if apy is None:
            raise ValueError("Invalid value for `apy`, must not be `None`")  # noqa: E501

        self._apy = apy

    @property
    def reward_amt(self):
        """Gets the reward_amt of this InlineResponse200134.  # noqa: E501


        :return: The reward_amt of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._reward_amt

    @reward_amt.setter
    def reward_amt(self, reward_amt):
        """Sets the reward_amt of this InlineResponse200134.


        :param reward_amt: The reward_amt of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if reward_amt is None:
            raise ValueError("Invalid value for `reward_amt`, must not be `None`")  # noqa: E501

        self._reward_amt = reward_amt

    @property
    def extra_reward_asset(self):
        """Gets the extra_reward_asset of this InlineResponse200134.  # noqa: E501


        :return: The extra_reward_asset of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._extra_reward_asset

    @extra_reward_asset.setter
    def extra_reward_asset(self, extra_reward_asset):
        """Sets the extra_reward_asset of this InlineResponse200134.


        :param extra_reward_asset: The extra_reward_asset of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if extra_reward_asset is None:
            raise ValueError("Invalid value for `extra_reward_asset`, must not be `None`")  # noqa: E501

        self._extra_reward_asset = extra_reward_asset

    @property
    def extra_reward_apy(self):
        """Gets the extra_reward_apy of this InlineResponse200134.  # noqa: E501


        :return: The extra_reward_apy of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._extra_reward_apy

    @extra_reward_apy.setter
    def extra_reward_apy(self, extra_reward_apy):
        """Sets the extra_reward_apy of this InlineResponse200134.


        :param extra_reward_apy: The extra_reward_apy of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if extra_reward_apy is None:
            raise ValueError("Invalid value for `extra_reward_apy`, must not be `None`")  # noqa: E501

        self._extra_reward_apy = extra_reward_apy

    @property
    def est_extra_reward_amt(self):
        """Gets the est_extra_reward_amt of this InlineResponse200134.  # noqa: E501


        :return: The est_extra_reward_amt of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._est_extra_reward_amt

    @est_extra_reward_amt.setter
    def est_extra_reward_amt(self, est_extra_reward_amt):
        """Sets the est_extra_reward_amt of this InlineResponse200134.


        :param est_extra_reward_amt: The est_extra_reward_amt of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if est_extra_reward_amt is None:
            raise ValueError("Invalid value for `est_extra_reward_amt`, must not be `None`")  # noqa: E501

        self._est_extra_reward_amt = est_extra_reward_amt

    @property
    def next_interest_pay(self):
        """Gets the next_interest_pay of this InlineResponse200134.  # noqa: E501


        :return: The next_interest_pay of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._next_interest_pay

    @next_interest_pay.setter
    def next_interest_pay(self, next_interest_pay):
        """Sets the next_interest_pay of this InlineResponse200134.


        :param next_interest_pay: The next_interest_pay of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if next_interest_pay is None:
            raise ValueError("Invalid value for `next_interest_pay`, must not be `None`")  # noqa: E501

        self._next_interest_pay = next_interest_pay

    @property
    def next_interest_pay_date(self):
        """Gets the next_interest_pay_date of this InlineResponse200134.  # noqa: E501


        :return: The next_interest_pay_date of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._next_interest_pay_date

    @next_interest_pay_date.setter
    def next_interest_pay_date(self, next_interest_pay_date):
        """Sets the next_interest_pay_date of this InlineResponse200134.


        :param next_interest_pay_date: The next_interest_pay_date of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if next_interest_pay_date is None:
            raise ValueError("Invalid value for `next_interest_pay_date`, must not be `None`")  # noqa: E501

        self._next_interest_pay_date = next_interest_pay_date

    @property
    def pay_interest_period(self):
        """Gets the pay_interest_period of this InlineResponse200134.  # noqa: E501


        :return: The pay_interest_period of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._pay_interest_period

    @pay_interest_period.setter
    def pay_interest_period(self, pay_interest_period):
        """Sets the pay_interest_period of this InlineResponse200134.


        :param pay_interest_period: The pay_interest_period of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if pay_interest_period is None:
            raise ValueError("Invalid value for `pay_interest_period`, must not be `None`")  # noqa: E501

        self._pay_interest_period = pay_interest_period

    @property
    def redeem_amount_early(self):
        """Gets the redeem_amount_early of this InlineResponse200134.  # noqa: E501


        :return: The redeem_amount_early of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._redeem_amount_early

    @redeem_amount_early.setter
    def redeem_amount_early(self, redeem_amount_early):
        """Sets the redeem_amount_early of this InlineResponse200134.


        :param redeem_amount_early: The redeem_amount_early of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if redeem_amount_early is None:
            raise ValueError("Invalid value for `redeem_amount_early`, must not be `None`")  # noqa: E501

        self._redeem_amount_early = redeem_amount_early

    @property
    def interest_end_date(self):
        """Gets the interest_end_date of this InlineResponse200134.  # noqa: E501


        :return: The interest_end_date of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._interest_end_date

    @interest_end_date.setter
    def interest_end_date(self, interest_end_date):
        """Sets the interest_end_date of this InlineResponse200134.


        :param interest_end_date: The interest_end_date of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if interest_end_date is None:
            raise ValueError("Invalid value for `interest_end_date`, must not be `None`")  # noqa: E501

        self._interest_end_date = interest_end_date

    @property
    def deliver_date(self):
        """Gets the deliver_date of this InlineResponse200134.  # noqa: E501


        :return: The deliver_date of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._deliver_date

    @deliver_date.setter
    def deliver_date(self, deliver_date):
        """Sets the deliver_date of this InlineResponse200134.


        :param deliver_date: The deliver_date of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if deliver_date is None:
            raise ValueError("Invalid value for `deliver_date`, must not be `None`")  # noqa: E501

        self._deliver_date = deliver_date

    @property
    def redeem_period(self):
        """Gets the redeem_period of this InlineResponse200134.  # noqa: E501


        :return: The redeem_period of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._redeem_period

    @redeem_period.setter
    def redeem_period(self, redeem_period):
        """Sets the redeem_period of this InlineResponse200134.


        :param redeem_period: The redeem_period of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if redeem_period is None:
            raise ValueError("Invalid value for `redeem_period`, must not be `None`")  # noqa: E501

        self._redeem_period = redeem_period

    @property
    def redeeming_amt(self):
        """Gets the redeeming_amt of this InlineResponse200134.  # noqa: E501


        :return: The redeeming_amt of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._redeeming_amt

    @redeeming_amt.setter
    def redeeming_amt(self, redeeming_amt):
        """Sets the redeeming_amt of this InlineResponse200134.


        :param redeeming_amt: The redeeming_amt of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if redeeming_amt is None:
            raise ValueError("Invalid value for `redeeming_amt`, must not be `None`")  # noqa: E501

        self._redeeming_amt = redeeming_amt

    @property
    def partial_amt_deliver_date(self):
        """Gets the partial_amt_deliver_date of this InlineResponse200134.  # noqa: E501


        :return: The partial_amt_deliver_date of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._partial_amt_deliver_date

    @partial_amt_deliver_date.setter
    def partial_amt_deliver_date(self, partial_amt_deliver_date):
        """Sets the partial_amt_deliver_date of this InlineResponse200134.


        :param partial_amt_deliver_date: The partial_amt_deliver_date of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if partial_amt_deliver_date is None:
            raise ValueError("Invalid value for `partial_amt_deliver_date`, must not be `None`")  # noqa: E501

        self._partial_amt_deliver_date = partial_amt_deliver_date

    @property
    def can_redeem_early(self):
        """Gets the can_redeem_early of this InlineResponse200134.  # noqa: E501


        :return: The can_redeem_early of this InlineResponse200134.  # noqa: E501
        :rtype: bool
        """
        return self._can_redeem_early

    @can_redeem_early.setter
    def can_redeem_early(self, can_redeem_early):
        """Sets the can_redeem_early of this InlineResponse200134.


        :param can_redeem_early: The can_redeem_early of this InlineResponse200134.  # noqa: E501
        :type: bool
        """
        if can_redeem_early is None:
            raise ValueError("Invalid value for `can_redeem_early`, must not be `None`")  # noqa: E501

        self._can_redeem_early = can_redeem_early

    @property
    def renewable(self):
        """Gets the renewable of this InlineResponse200134.  # noqa: E501


        :return: The renewable of this InlineResponse200134.  # noqa: E501
        :rtype: bool
        """
        return self._renewable

    @renewable.setter
    def renewable(self, renewable):
        """Sets the renewable of this InlineResponse200134.


        :param renewable: The renewable of this InlineResponse200134.  # noqa: E501
        :type: bool
        """
        if renewable is None:
            raise ValueError("Invalid value for `renewable`, must not be `None`")  # noqa: E501

        self._renewable = renewable

    @property
    def type(self):
        """Gets the type of this InlineResponse200134.  # noqa: E501


        :return: The type of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200134.


        :param type: The type of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def status(self):
        """Gets the status of this InlineResponse200134.  # noqa: E501


        :return: The status of this InlineResponse200134.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200134.


        :param status: The status of this InlineResponse200134.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200134, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200134):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
