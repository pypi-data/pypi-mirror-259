# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountCommissionRates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maker': 'str',
        'taker': 'str',
        'buyer': 'str',
        'seller': 'str'
    }

    attribute_map = {
        'maker': 'maker',
        'taker': 'taker',
        'buyer': 'buyer',
        'seller': 'seller'
    }

    def __init__(self, maker=None, taker=None, buyer=None, seller=None):  # noqa: E501
        """AccountCommissionRates - a model defined in Swagger"""  # noqa: E501
        self._maker = None
        self._taker = None
        self._buyer = None
        self._seller = None
        self.discriminator = None
        self.maker = maker
        self.taker = taker
        self.buyer = buyer
        self.seller = seller

    @property
    def maker(self):
        """Gets the maker of this AccountCommissionRates.  # noqa: E501


        :return: The maker of this AccountCommissionRates.  # noqa: E501
        :rtype: str
        """
        return self._maker

    @maker.setter
    def maker(self, maker):
        """Sets the maker of this AccountCommissionRates.


        :param maker: The maker of this AccountCommissionRates.  # noqa: E501
        :type: str
        """
        if maker is None:
            raise ValueError("Invalid value for `maker`, must not be `None`")  # noqa: E501

        self._maker = maker

    @property
    def taker(self):
        """Gets the taker of this AccountCommissionRates.  # noqa: E501


        :return: The taker of this AccountCommissionRates.  # noqa: E501
        :rtype: str
        """
        return self._taker

    @taker.setter
    def taker(self, taker):
        """Sets the taker of this AccountCommissionRates.


        :param taker: The taker of this AccountCommissionRates.  # noqa: E501
        :type: str
        """
        if taker is None:
            raise ValueError("Invalid value for `taker`, must not be `None`")  # noqa: E501

        self._taker = taker

    @property
    def buyer(self):
        """Gets the buyer of this AccountCommissionRates.  # noqa: E501


        :return: The buyer of this AccountCommissionRates.  # noqa: E501
        :rtype: str
        """
        return self._buyer

    @buyer.setter
    def buyer(self, buyer):
        """Sets the buyer of this AccountCommissionRates.


        :param buyer: The buyer of this AccountCommissionRates.  # noqa: E501
        :type: str
        """
        if buyer is None:
            raise ValueError("Invalid value for `buyer`, must not be `None`")  # noqa: E501

        self._buyer = buyer

    @property
    def seller(self):
        """Gets the seller of this AccountCommissionRates.  # noqa: E501


        :return: The seller of this AccountCommissionRates.  # noqa: E501
        :rtype: str
        """
        return self._seller

    @seller.setter
    def seller(self, seller):
        """Sets the seller of this AccountCommissionRates.


        :param seller: The seller of this AccountCommissionRates.  # noqa: E501
        :type: str
        """
        if seller is None:
            raise ValueError("Invalid value for `seller`, must not be `None`")  # noqa: E501

        self._seller = seller

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountCommissionRates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCommissionRates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
