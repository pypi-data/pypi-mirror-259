# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2002(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_update_id': 'int',
        'bids': 'list[list[str]]',
        'asks': 'list[list[str]]'
    }

    attribute_map = {
        'last_update_id': 'lastUpdateId',
        'bids': 'bids',
        'asks': 'asks'
    }

    def __init__(self, last_update_id=None, bids=None, asks=None):  # noqa: E501
        """InlineResponse2002 - a model defined in Swagger"""  # noqa: E501
        self._last_update_id = None
        self._bids = None
        self._asks = None
        self.discriminator = None
        self.last_update_id = last_update_id
        self.bids = bids
        self.asks = asks

    @property
    def last_update_id(self):
        """Gets the last_update_id of this InlineResponse2002.  # noqa: E501


        :return: The last_update_id of this InlineResponse2002.  # noqa: E501
        :rtype: int
        """
        return self._last_update_id

    @last_update_id.setter
    def last_update_id(self, last_update_id):
        """Sets the last_update_id of this InlineResponse2002.


        :param last_update_id: The last_update_id of this InlineResponse2002.  # noqa: E501
        :type: int
        """
        if last_update_id is None:
            raise ValueError("Invalid value for `last_update_id`, must not be `None`")  # noqa: E501

        self._last_update_id = last_update_id

    @property
    def bids(self):
        """Gets the bids of this InlineResponse2002.  # noqa: E501


        :return: The bids of this InlineResponse2002.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._bids

    @bids.setter
    def bids(self, bids):
        """Sets the bids of this InlineResponse2002.


        :param bids: The bids of this InlineResponse2002.  # noqa: E501
        :type: list[list[str]]
        """
        if bids is None:
            raise ValueError("Invalid value for `bids`, must not be `None`")  # noqa: E501

        self._bids = bids

    @property
    def asks(self):
        """Gets the asks of this InlineResponse2002.  # noqa: E501


        :return: The asks of this InlineResponse2002.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._asks

    @asks.setter
    def asks(self, asks):
        """Sets the asks of this InlineResponse2002.


        :param asks: The asks of this InlineResponse2002.  # noqa: E501
        :type: list[list[str]]
        """
        if asks is None:
            raise ValueError("Invalid value for `asks`, must not be `None`")  # noqa: E501

        self._asks = asks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2002, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
