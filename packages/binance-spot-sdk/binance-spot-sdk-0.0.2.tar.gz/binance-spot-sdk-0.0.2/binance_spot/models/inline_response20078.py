# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20078(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_restrict': 'bool',
        'create_time': 'int',
        'enable_internal_transfer': 'bool',
        'enable_futures': 'bool',
        'enable_portfolio_margin_trading': 'bool',
        'enable_vanilla_options': 'bool',
        'permits_universal_transfer': 'bool',
        'enable_reading': 'bool',
        'enable_spot_and_margin_trading': 'bool',
        'enable_withdrawals': 'bool',
        'enable_margin': 'bool',
        'trading_authority_expiration_time': 'int'
    }

    attribute_map = {
        'ip_restrict': 'ipRestrict',
        'create_time': 'createTime',
        'enable_internal_transfer': 'enableInternalTransfer',
        'enable_futures': 'enableFutures',
        'enable_portfolio_margin_trading': 'enablePortfolioMarginTrading',
        'enable_vanilla_options': 'enableVanillaOptions',
        'permits_universal_transfer': 'permitsUniversalTransfer',
        'enable_reading': 'enableReading',
        'enable_spot_and_margin_trading': 'enableSpotAndMarginTrading',
        'enable_withdrawals': 'enableWithdrawals',
        'enable_margin': 'enableMargin',
        'trading_authority_expiration_time': 'tradingAuthorityExpirationTime'
    }

    def __init__(self, ip_restrict=None, create_time=None, enable_internal_transfer=None, enable_futures=None, enable_portfolio_margin_trading=None, enable_vanilla_options=None, permits_universal_transfer=None, enable_reading=None, enable_spot_and_margin_trading=None, enable_withdrawals=None, enable_margin=None, trading_authority_expiration_time=None):  # noqa: E501
        """InlineResponse20078 - a model defined in Swagger"""  # noqa: E501
        self._ip_restrict = None
        self._create_time = None
        self._enable_internal_transfer = None
        self._enable_futures = None
        self._enable_portfolio_margin_trading = None
        self._enable_vanilla_options = None
        self._permits_universal_transfer = None
        self._enable_reading = None
        self._enable_spot_and_margin_trading = None
        self._enable_withdrawals = None
        self._enable_margin = None
        self._trading_authority_expiration_time = None
        self.discriminator = None
        self.ip_restrict = ip_restrict
        self.create_time = create_time
        self.enable_internal_transfer = enable_internal_transfer
        self.enable_futures = enable_futures
        if enable_portfolio_margin_trading is not None:
            self.enable_portfolio_margin_trading = enable_portfolio_margin_trading
        self.enable_vanilla_options = enable_vanilla_options
        self.permits_universal_transfer = permits_universal_transfer
        self.enable_reading = enable_reading
        self.enable_spot_and_margin_trading = enable_spot_and_margin_trading
        self.enable_withdrawals = enable_withdrawals
        self.enable_margin = enable_margin
        self.trading_authority_expiration_time = trading_authority_expiration_time

    @property
    def ip_restrict(self):
        """Gets the ip_restrict of this InlineResponse20078.  # noqa: E501


        :return: The ip_restrict of this InlineResponse20078.  # noqa: E501
        :rtype: bool
        """
        return self._ip_restrict

    @ip_restrict.setter
    def ip_restrict(self, ip_restrict):
        """Sets the ip_restrict of this InlineResponse20078.


        :param ip_restrict: The ip_restrict of this InlineResponse20078.  # noqa: E501
        :type: bool
        """
        if ip_restrict is None:
            raise ValueError("Invalid value for `ip_restrict`, must not be `None`")  # noqa: E501

        self._ip_restrict = ip_restrict

    @property
    def create_time(self):
        """Gets the create_time of this InlineResponse20078.  # noqa: E501


        :return: The create_time of this InlineResponse20078.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InlineResponse20078.


        :param create_time: The create_time of this InlineResponse20078.  # noqa: E501
        :type: int
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def enable_internal_transfer(self):
        """Gets the enable_internal_transfer of this InlineResponse20078.  # noqa: E501

        This option authorizes this key to transfer funds between your master account and your sub account instantly  # noqa: E501

        :return: The enable_internal_transfer of this InlineResponse20078.  # noqa: E501
        :rtype: bool
        """
        return self._enable_internal_transfer

    @enable_internal_transfer.setter
    def enable_internal_transfer(self, enable_internal_transfer):
        """Sets the enable_internal_transfer of this InlineResponse20078.

        This option authorizes this key to transfer funds between your master account and your sub account instantly  # noqa: E501

        :param enable_internal_transfer: The enable_internal_transfer of this InlineResponse20078.  # noqa: E501
        :type: bool
        """
        if enable_internal_transfer is None:
            raise ValueError("Invalid value for `enable_internal_transfer`, must not be `None`")  # noqa: E501

        self._enable_internal_transfer = enable_internal_transfer

    @property
    def enable_futures(self):
        """Gets the enable_futures of this InlineResponse20078.  # noqa: E501

        API Key created before your futures account opened does not support futures API service  # noqa: E501

        :return: The enable_futures of this InlineResponse20078.  # noqa: E501
        :rtype: bool
        """
        return self._enable_futures

    @enable_futures.setter
    def enable_futures(self, enable_futures):
        """Sets the enable_futures of this InlineResponse20078.

        API Key created before your futures account opened does not support futures API service  # noqa: E501

        :param enable_futures: The enable_futures of this InlineResponse20078.  # noqa: E501
        :type: bool
        """
        if enable_futures is None:
            raise ValueError("Invalid value for `enable_futures`, must not be `None`")  # noqa: E501

        self._enable_futures = enable_futures

    @property
    def enable_portfolio_margin_trading(self):
        """Gets the enable_portfolio_margin_trading of this InlineResponse20078.  # noqa: E501

        API Key created before your activate portfolio margin does not support portfolio margin API service  # noqa: E501

        :return: The enable_portfolio_margin_trading of this InlineResponse20078.  # noqa: E501
        :rtype: bool
        """
        return self._enable_portfolio_margin_trading

    @enable_portfolio_margin_trading.setter
    def enable_portfolio_margin_trading(self, enable_portfolio_margin_trading):
        """Sets the enable_portfolio_margin_trading of this InlineResponse20078.

        API Key created before your activate portfolio margin does not support portfolio margin API service  # noqa: E501

        :param enable_portfolio_margin_trading: The enable_portfolio_margin_trading of this InlineResponse20078.  # noqa: E501
        :type: bool
        """

        self._enable_portfolio_margin_trading = enable_portfolio_margin_trading

    @property
    def enable_vanilla_options(self):
        """Gets the enable_vanilla_options of this InlineResponse20078.  # noqa: E501

        Authorizes this key to Vanilla options trading  # noqa: E501

        :return: The enable_vanilla_options of this InlineResponse20078.  # noqa: E501
        :rtype: bool
        """
        return self._enable_vanilla_options

    @enable_vanilla_options.setter
    def enable_vanilla_options(self, enable_vanilla_options):
        """Sets the enable_vanilla_options of this InlineResponse20078.

        Authorizes this key to Vanilla options trading  # noqa: E501

        :param enable_vanilla_options: The enable_vanilla_options of this InlineResponse20078.  # noqa: E501
        :type: bool
        """
        if enable_vanilla_options is None:
            raise ValueError("Invalid value for `enable_vanilla_options`, must not be `None`")  # noqa: E501

        self._enable_vanilla_options = enable_vanilla_options

    @property
    def permits_universal_transfer(self):
        """Gets the permits_universal_transfer of this InlineResponse20078.  # noqa: E501

        Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization  # noqa: E501

        :return: The permits_universal_transfer of this InlineResponse20078.  # noqa: E501
        :rtype: bool
        """
        return self._permits_universal_transfer

    @permits_universal_transfer.setter
    def permits_universal_transfer(self, permits_universal_transfer):
        """Sets the permits_universal_transfer of this InlineResponse20078.

        Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization  # noqa: E501

        :param permits_universal_transfer: The permits_universal_transfer of this InlineResponse20078.  # noqa: E501
        :type: bool
        """
        if permits_universal_transfer is None:
            raise ValueError("Invalid value for `permits_universal_transfer`, must not be `None`")  # noqa: E501

        self._permits_universal_transfer = permits_universal_transfer

    @property
    def enable_reading(self):
        """Gets the enable_reading of this InlineResponse20078.  # noqa: E501


        :return: The enable_reading of this InlineResponse20078.  # noqa: E501
        :rtype: bool
        """
        return self._enable_reading

    @enable_reading.setter
    def enable_reading(self, enable_reading):
        """Sets the enable_reading of this InlineResponse20078.


        :param enable_reading: The enable_reading of this InlineResponse20078.  # noqa: E501
        :type: bool
        """
        if enable_reading is None:
            raise ValueError("Invalid value for `enable_reading`, must not be `None`")  # noqa: E501

        self._enable_reading = enable_reading

    @property
    def enable_spot_and_margin_trading(self):
        """Gets the enable_spot_and_margin_trading of this InlineResponse20078.  # noqa: E501


        :return: The enable_spot_and_margin_trading of this InlineResponse20078.  # noqa: E501
        :rtype: bool
        """
        return self._enable_spot_and_margin_trading

    @enable_spot_and_margin_trading.setter
    def enable_spot_and_margin_trading(self, enable_spot_and_margin_trading):
        """Sets the enable_spot_and_margin_trading of this InlineResponse20078.


        :param enable_spot_and_margin_trading: The enable_spot_and_margin_trading of this InlineResponse20078.  # noqa: E501
        :type: bool
        """
        if enable_spot_and_margin_trading is None:
            raise ValueError("Invalid value for `enable_spot_and_margin_trading`, must not be `None`")  # noqa: E501

        self._enable_spot_and_margin_trading = enable_spot_and_margin_trading

    @property
    def enable_withdrawals(self):
        """Gets the enable_withdrawals of this InlineResponse20078.  # noqa: E501

        This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals  # noqa: E501

        :return: The enable_withdrawals of this InlineResponse20078.  # noqa: E501
        :rtype: bool
        """
        return self._enable_withdrawals

    @enable_withdrawals.setter
    def enable_withdrawals(self, enable_withdrawals):
        """Sets the enable_withdrawals of this InlineResponse20078.

        This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals  # noqa: E501

        :param enable_withdrawals: The enable_withdrawals of this InlineResponse20078.  # noqa: E501
        :type: bool
        """
        if enable_withdrawals is None:
            raise ValueError("Invalid value for `enable_withdrawals`, must not be `None`")  # noqa: E501

        self._enable_withdrawals = enable_withdrawals

    @property
    def enable_margin(self):
        """Gets the enable_margin of this InlineResponse20078.  # noqa: E501

        This option can be adjusted after the Cross Margin account transfer is completed  # noqa: E501

        :return: The enable_margin of this InlineResponse20078.  # noqa: E501
        :rtype: bool
        """
        return self._enable_margin

    @enable_margin.setter
    def enable_margin(self, enable_margin):
        """Sets the enable_margin of this InlineResponse20078.

        This option can be adjusted after the Cross Margin account transfer is completed  # noqa: E501

        :param enable_margin: The enable_margin of this InlineResponse20078.  # noqa: E501
        :type: bool
        """
        if enable_margin is None:
            raise ValueError("Invalid value for `enable_margin`, must not be `None`")  # noqa: E501

        self._enable_margin = enable_margin

    @property
    def trading_authority_expiration_time(self):
        """Gets the trading_authority_expiration_time of this InlineResponse20078.  # noqa: E501

        Expiration time for spot and margin trading permission  # noqa: E501

        :return: The trading_authority_expiration_time of this InlineResponse20078.  # noqa: E501
        :rtype: int
        """
        return self._trading_authority_expiration_time

    @trading_authority_expiration_time.setter
    def trading_authority_expiration_time(self, trading_authority_expiration_time):
        """Sets the trading_authority_expiration_time of this InlineResponse20078.

        Expiration time for spot and margin trading permission  # noqa: E501

        :param trading_authority_expiration_time: The trading_authority_expiration_time of this InlineResponse20078.  # noqa: E501
        :type: int
        """
        if trading_authority_expiration_time is None:
            raise ValueError("Invalid value for `trading_authority_expiration_time`, must not be `None`")  # noqa: E501

        self._trading_authority_expiration_time = trading_authority_expiration_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20078, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20078):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
