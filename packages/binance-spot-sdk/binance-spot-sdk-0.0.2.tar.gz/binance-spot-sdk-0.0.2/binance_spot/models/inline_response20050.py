# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20050(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delist_time': 'int',
        'cross_margin_assets': 'list[str]',
        'isolated_margin_symbols': 'list[str]'
    }

    attribute_map = {
        'delist_time': 'delistTime',
        'cross_margin_assets': 'crossMarginAssets',
        'isolated_margin_symbols': 'isolatedMarginSymbols'
    }

    def __init__(self, delist_time=None, cross_margin_assets=None, isolated_margin_symbols=None):  # noqa: E501
        """InlineResponse20050 - a model defined in Swagger"""  # noqa: E501
        self._delist_time = None
        self._cross_margin_assets = None
        self._isolated_margin_symbols = None
        self.discriminator = None
        if delist_time is not None:
            self.delist_time = delist_time
        if cross_margin_assets is not None:
            self.cross_margin_assets = cross_margin_assets
        if isolated_margin_symbols is not None:
            self.isolated_margin_symbols = isolated_margin_symbols

    @property
    def delist_time(self):
        """Gets the delist_time of this InlineResponse20050.  # noqa: E501


        :return: The delist_time of this InlineResponse20050.  # noqa: E501
        :rtype: int
        """
        return self._delist_time

    @delist_time.setter
    def delist_time(self, delist_time):
        """Sets the delist_time of this InlineResponse20050.


        :param delist_time: The delist_time of this InlineResponse20050.  # noqa: E501
        :type: int
        """

        self._delist_time = delist_time

    @property
    def cross_margin_assets(self):
        """Gets the cross_margin_assets of this InlineResponse20050.  # noqa: E501


        :return: The cross_margin_assets of this InlineResponse20050.  # noqa: E501
        :rtype: list[str]
        """
        return self._cross_margin_assets

    @cross_margin_assets.setter
    def cross_margin_assets(self, cross_margin_assets):
        """Sets the cross_margin_assets of this InlineResponse20050.


        :param cross_margin_assets: The cross_margin_assets of this InlineResponse20050.  # noqa: E501
        :type: list[str]
        """

        self._cross_margin_assets = cross_margin_assets

    @property
    def isolated_margin_symbols(self):
        """Gets the isolated_margin_symbols of this InlineResponse20050.  # noqa: E501


        :return: The isolated_margin_symbols of this InlineResponse20050.  # noqa: E501
        :rtype: list[str]
        """
        return self._isolated_margin_symbols

    @isolated_margin_symbols.setter
    def isolated_margin_symbols(self, isolated_margin_symbols):
        """Sets the isolated_margin_symbols of this InlineResponse20050.


        :param isolated_margin_symbols: The isolated_margin_symbols of this InlineResponse20050.  # noqa: E501
        :type: list[str]
        """

        self._isolated_margin_symbols = isolated_margin_symbols

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20050, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20050):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
