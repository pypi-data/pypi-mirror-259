# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200229(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'list': 'list[InlineResponse200229List]',
        'start_time': 'int',
        'end_time': 'int',
        'limit': 'int',
        'more_data': 'bool'
    }

    attribute_map = {
        'list': 'list',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'limit': 'limit',
        'more_data': 'moreData'
    }

    def __init__(self, list=None, start_time=None, end_time=None, limit=None, more_data=None):  # noqa: E501
        """InlineResponse200229 - a model defined in Swagger"""  # noqa: E501
        self._list = None
        self._start_time = None
        self._end_time = None
        self._limit = None
        self._more_data = None
        self.discriminator = None
        self.list = list
        self.start_time = start_time
        self.end_time = end_time
        self.limit = limit
        self.more_data = more_data

    @property
    def list(self):
        """Gets the list of this InlineResponse200229.  # noqa: E501


        :return: The list of this InlineResponse200229.  # noqa: E501
        :rtype: list[InlineResponse200229List]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this InlineResponse200229.


        :param list: The list of this InlineResponse200229.  # noqa: E501
        :type: list[InlineResponse200229List]
        """
        if list is None:
            raise ValueError("Invalid value for `list`, must not be `None`")  # noqa: E501

        self._list = list

    @property
    def start_time(self):
        """Gets the start_time of this InlineResponse200229.  # noqa: E501


        :return: The start_time of this InlineResponse200229.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InlineResponse200229.


        :param start_time: The start_time of this InlineResponse200229.  # noqa: E501
        :type: int
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this InlineResponse200229.  # noqa: E501


        :return: The end_time of this InlineResponse200229.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InlineResponse200229.


        :param end_time: The end_time of this InlineResponse200229.  # noqa: E501
        :type: int
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def limit(self):
        """Gets the limit of this InlineResponse200229.  # noqa: E501


        :return: The limit of this InlineResponse200229.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this InlineResponse200229.


        :param limit: The limit of this InlineResponse200229.  # noqa: E501
        :type: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def more_data(self):
        """Gets the more_data of this InlineResponse200229.  # noqa: E501


        :return: The more_data of this InlineResponse200229.  # noqa: E501
        :rtype: bool
        """
        return self._more_data

    @more_data.setter
    def more_data(self, more_data):
        """Sets the more_data of this InlineResponse200229.


        :param more_data: The more_data of this InlineResponse200229.  # noqa: E501
        :type: bool
        """
        if more_data is None:
            raise ValueError("Invalid value for `more_data`, must not be `None`")  # noqa: E501

        self._more_data = more_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200229, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200229):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
