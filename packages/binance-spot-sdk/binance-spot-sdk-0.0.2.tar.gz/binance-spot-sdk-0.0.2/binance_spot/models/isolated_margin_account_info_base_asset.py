# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IsolatedMarginAccountInfoBaseAsset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'borrow_enabled': 'bool',
        'borrowed': 'str',
        'free': 'str',
        'interest': 'str',
        'locked': 'str',
        'net_asset': 'str',
        'net_asset_of_btc': 'str',
        'repay_enabled': 'bool',
        'total_asset': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'borrow_enabled': 'borrowEnabled',
        'borrowed': 'borrowed',
        'free': 'free',
        'interest': 'interest',
        'locked': 'locked',
        'net_asset': 'netAsset',
        'net_asset_of_btc': 'netAssetOfBtc',
        'repay_enabled': 'repayEnabled',
        'total_asset': 'totalAsset'
    }

    def __init__(self, asset=None, borrow_enabled=None, borrowed=None, free=None, interest=None, locked=None, net_asset=None, net_asset_of_btc=None, repay_enabled=None, total_asset=None):  # noqa: E501
        """IsolatedMarginAccountInfoBaseAsset - a model defined in Swagger"""  # noqa: E501
        self._asset = None
        self._borrow_enabled = None
        self._borrowed = None
        self._free = None
        self._interest = None
        self._locked = None
        self._net_asset = None
        self._net_asset_of_btc = None
        self._repay_enabled = None
        self._total_asset = None
        self.discriminator = None
        self.asset = asset
        self.borrow_enabled = borrow_enabled
        self.borrowed = borrowed
        self.free = free
        self.interest = interest
        self.locked = locked
        self.net_asset = net_asset
        self.net_asset_of_btc = net_asset_of_btc
        self.repay_enabled = repay_enabled
        self.total_asset = total_asset

    @property
    def asset(self):
        """Gets the asset of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501


        :return: The asset of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this IsolatedMarginAccountInfoBaseAsset.


        :param asset: The asset of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def borrow_enabled(self):
        """Gets the borrow_enabled of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501


        :return: The borrow_enabled of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :rtype: bool
        """
        return self._borrow_enabled

    @borrow_enabled.setter
    def borrow_enabled(self, borrow_enabled):
        """Sets the borrow_enabled of this IsolatedMarginAccountInfoBaseAsset.


        :param borrow_enabled: The borrow_enabled of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :type: bool
        """
        if borrow_enabled is None:
            raise ValueError("Invalid value for `borrow_enabled`, must not be `None`")  # noqa: E501

        self._borrow_enabled = borrow_enabled

    @property
    def borrowed(self):
        """Gets the borrowed of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501


        :return: The borrowed of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :rtype: str
        """
        return self._borrowed

    @borrowed.setter
    def borrowed(self, borrowed):
        """Sets the borrowed of this IsolatedMarginAccountInfoBaseAsset.


        :param borrowed: The borrowed of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :type: str
        """
        if borrowed is None:
            raise ValueError("Invalid value for `borrowed`, must not be `None`")  # noqa: E501

        self._borrowed = borrowed

    @property
    def free(self):
        """Gets the free of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501


        :return: The free of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :rtype: str
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this IsolatedMarginAccountInfoBaseAsset.


        :param free: The free of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :type: str
        """
        if free is None:
            raise ValueError("Invalid value for `free`, must not be `None`")  # noqa: E501

        self._free = free

    @property
    def interest(self):
        """Gets the interest of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501


        :return: The interest of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :rtype: str
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this IsolatedMarginAccountInfoBaseAsset.


        :param interest: The interest of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :type: str
        """
        if interest is None:
            raise ValueError("Invalid value for `interest`, must not be `None`")  # noqa: E501

        self._interest = interest

    @property
    def locked(self):
        """Gets the locked of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501


        :return: The locked of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this IsolatedMarginAccountInfoBaseAsset.


        :param locked: The locked of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :type: str
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")  # noqa: E501

        self._locked = locked

    @property
    def net_asset(self):
        """Gets the net_asset of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501


        :return: The net_asset of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :rtype: str
        """
        return self._net_asset

    @net_asset.setter
    def net_asset(self, net_asset):
        """Sets the net_asset of this IsolatedMarginAccountInfoBaseAsset.


        :param net_asset: The net_asset of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :type: str
        """
        if net_asset is None:
            raise ValueError("Invalid value for `net_asset`, must not be `None`")  # noqa: E501

        self._net_asset = net_asset

    @property
    def net_asset_of_btc(self):
        """Gets the net_asset_of_btc of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501


        :return: The net_asset_of_btc of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :rtype: str
        """
        return self._net_asset_of_btc

    @net_asset_of_btc.setter
    def net_asset_of_btc(self, net_asset_of_btc):
        """Sets the net_asset_of_btc of this IsolatedMarginAccountInfoBaseAsset.


        :param net_asset_of_btc: The net_asset_of_btc of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :type: str
        """
        if net_asset_of_btc is None:
            raise ValueError("Invalid value for `net_asset_of_btc`, must not be `None`")  # noqa: E501

        self._net_asset_of_btc = net_asset_of_btc

    @property
    def repay_enabled(self):
        """Gets the repay_enabled of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501


        :return: The repay_enabled of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :rtype: bool
        """
        return self._repay_enabled

    @repay_enabled.setter
    def repay_enabled(self, repay_enabled):
        """Sets the repay_enabled of this IsolatedMarginAccountInfoBaseAsset.


        :param repay_enabled: The repay_enabled of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :type: bool
        """
        if repay_enabled is None:
            raise ValueError("Invalid value for `repay_enabled`, must not be `None`")  # noqa: E501

        self._repay_enabled = repay_enabled

    @property
    def total_asset(self):
        """Gets the total_asset of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501


        :return: The total_asset of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :rtype: str
        """
        return self._total_asset

    @total_asset.setter
    def total_asset(self, total_asset):
        """Sets the total_asset of this IsolatedMarginAccountInfoBaseAsset.


        :param total_asset: The total_asset of this IsolatedMarginAccountInfoBaseAsset.  # noqa: E501
        :type: str
        """
        if total_asset is None:
            raise ValueError("Invalid value for `total_asset`, must not be `None`")  # noqa: E501

        self._total_asset = total_asset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IsolatedMarginAccountInfoBaseAsset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IsolatedMarginAccountInfoBaseAsset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
