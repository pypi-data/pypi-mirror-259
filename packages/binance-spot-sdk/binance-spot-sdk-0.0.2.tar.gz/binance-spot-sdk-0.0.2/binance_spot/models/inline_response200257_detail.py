# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200257Detail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'reward_asset': 'str',
        'duration': 'int',
        'renewable': 'bool',
        'is_sold_out': 'bool',
        'apr': 'str',
        'status': 'str',
        'subscription_start_time': 'str',
        'extra_reward_asset': 'str',
        'extra_reward_apr': 'str'
    }

    attribute_map = {
        'asset': 'asset',
        'reward_asset': 'rewardAsset',
        'duration': 'duration',
        'renewable': 'renewable',
        'is_sold_out': 'isSoldOut',
        'apr': 'apr',
        'status': 'status',
        'subscription_start_time': 'subscriptionStartTime',
        'extra_reward_asset': 'extraRewardAsset',
        'extra_reward_apr': 'extraRewardAPR'
    }

    def __init__(self, asset=None, reward_asset=None, duration=None, renewable=None, is_sold_out=None, apr=None, status=None, subscription_start_time=None, extra_reward_asset=None, extra_reward_apr=None):  # noqa: E501
        """InlineResponse200257Detail - a model defined in Swagger"""  # noqa: E501
        self._asset = None
        self._reward_asset = None
        self._duration = None
        self._renewable = None
        self._is_sold_out = None
        self._apr = None
        self._status = None
        self._subscription_start_time = None
        self._extra_reward_asset = None
        self._extra_reward_apr = None
        self.discriminator = None
        self.asset = asset
        self.reward_asset = reward_asset
        self.duration = duration
        self.renewable = renewable
        self.is_sold_out = is_sold_out
        self.apr = apr
        self.status = status
        self.subscription_start_time = subscription_start_time
        self.extra_reward_asset = extra_reward_asset
        self.extra_reward_apr = extra_reward_apr

    @property
    def asset(self):
        """Gets the asset of this InlineResponse200257Detail.  # noqa: E501


        :return: The asset of this InlineResponse200257Detail.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse200257Detail.


        :param asset: The asset of this InlineResponse200257Detail.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def reward_asset(self):
        """Gets the reward_asset of this InlineResponse200257Detail.  # noqa: E501


        :return: The reward_asset of this InlineResponse200257Detail.  # noqa: E501
        :rtype: str
        """
        return self._reward_asset

    @reward_asset.setter
    def reward_asset(self, reward_asset):
        """Sets the reward_asset of this InlineResponse200257Detail.


        :param reward_asset: The reward_asset of this InlineResponse200257Detail.  # noqa: E501
        :type: str
        """
        if reward_asset is None:
            raise ValueError("Invalid value for `reward_asset`, must not be `None`")  # noqa: E501

        self._reward_asset = reward_asset

    @property
    def duration(self):
        """Gets the duration of this InlineResponse200257Detail.  # noqa: E501


        :return: The duration of this InlineResponse200257Detail.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse200257Detail.


        :param duration: The duration of this InlineResponse200257Detail.  # noqa: E501
        :type: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def renewable(self):
        """Gets the renewable of this InlineResponse200257Detail.  # noqa: E501


        :return: The renewable of this InlineResponse200257Detail.  # noqa: E501
        :rtype: bool
        """
        return self._renewable

    @renewable.setter
    def renewable(self, renewable):
        """Sets the renewable of this InlineResponse200257Detail.


        :param renewable: The renewable of this InlineResponse200257Detail.  # noqa: E501
        :type: bool
        """
        if renewable is None:
            raise ValueError("Invalid value for `renewable`, must not be `None`")  # noqa: E501

        self._renewable = renewable

    @property
    def is_sold_out(self):
        """Gets the is_sold_out of this InlineResponse200257Detail.  # noqa: E501


        :return: The is_sold_out of this InlineResponse200257Detail.  # noqa: E501
        :rtype: bool
        """
        return self._is_sold_out

    @is_sold_out.setter
    def is_sold_out(self, is_sold_out):
        """Sets the is_sold_out of this InlineResponse200257Detail.


        :param is_sold_out: The is_sold_out of this InlineResponse200257Detail.  # noqa: E501
        :type: bool
        """
        if is_sold_out is None:
            raise ValueError("Invalid value for `is_sold_out`, must not be `None`")  # noqa: E501

        self._is_sold_out = is_sold_out

    @property
    def apr(self):
        """Gets the apr of this InlineResponse200257Detail.  # noqa: E501


        :return: The apr of this InlineResponse200257Detail.  # noqa: E501
        :rtype: str
        """
        return self._apr

    @apr.setter
    def apr(self, apr):
        """Sets the apr of this InlineResponse200257Detail.


        :param apr: The apr of this InlineResponse200257Detail.  # noqa: E501
        :type: str
        """
        if apr is None:
            raise ValueError("Invalid value for `apr`, must not be `None`")  # noqa: E501

        self._apr = apr

    @property
    def status(self):
        """Gets the status of this InlineResponse200257Detail.  # noqa: E501


        :return: The status of this InlineResponse200257Detail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200257Detail.


        :param status: The status of this InlineResponse200257Detail.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def subscription_start_time(self):
        """Gets the subscription_start_time of this InlineResponse200257Detail.  # noqa: E501


        :return: The subscription_start_time of this InlineResponse200257Detail.  # noqa: E501
        :rtype: str
        """
        return self._subscription_start_time

    @subscription_start_time.setter
    def subscription_start_time(self, subscription_start_time):
        """Sets the subscription_start_time of this InlineResponse200257Detail.


        :param subscription_start_time: The subscription_start_time of this InlineResponse200257Detail.  # noqa: E501
        :type: str
        """
        if subscription_start_time is None:
            raise ValueError("Invalid value for `subscription_start_time`, must not be `None`")  # noqa: E501

        self._subscription_start_time = subscription_start_time

    @property
    def extra_reward_asset(self):
        """Gets the extra_reward_asset of this InlineResponse200257Detail.  # noqa: E501


        :return: The extra_reward_asset of this InlineResponse200257Detail.  # noqa: E501
        :rtype: str
        """
        return self._extra_reward_asset

    @extra_reward_asset.setter
    def extra_reward_asset(self, extra_reward_asset):
        """Sets the extra_reward_asset of this InlineResponse200257Detail.


        :param extra_reward_asset: The extra_reward_asset of this InlineResponse200257Detail.  # noqa: E501
        :type: str
        """
        if extra_reward_asset is None:
            raise ValueError("Invalid value for `extra_reward_asset`, must not be `None`")  # noqa: E501

        self._extra_reward_asset = extra_reward_asset

    @property
    def extra_reward_apr(self):
        """Gets the extra_reward_apr of this InlineResponse200257Detail.  # noqa: E501


        :return: The extra_reward_apr of this InlineResponse200257Detail.  # noqa: E501
        :rtype: str
        """
        return self._extra_reward_apr

    @extra_reward_apr.setter
    def extra_reward_apr(self, extra_reward_apr):
        """Sets the extra_reward_apr of this InlineResponse200257Detail.


        :param extra_reward_apr: The extra_reward_apr of this InlineResponse200257Detail.  # noqa: E501
        :type: str
        """
        if extra_reward_apr is None:
            raise ValueError("Invalid value for `extra_reward_apr`, must not be `None`")  # noqa: E501

        self._extra_reward_apr = extra_reward_apr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200257Detail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200257Detail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
