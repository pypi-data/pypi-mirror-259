# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200162(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'executed_qty': 'str',
        'executed_amt': 'str',
        'sub_orders': 'list[InlineResponse200162SubOrders]'
    }

    attribute_map = {
        'total': 'total',
        'executed_qty': 'executedQty',
        'executed_amt': 'executedAmt',
        'sub_orders': 'subOrders'
    }

    def __init__(self, total=None, executed_qty=None, executed_amt=None, sub_orders=None):  # noqa: E501
        """InlineResponse200162 - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._executed_qty = None
        self._executed_amt = None
        self._sub_orders = None
        self.discriminator = None
        self.total = total
        self.executed_qty = executed_qty
        self.executed_amt = executed_amt
        self.sub_orders = sub_orders

    @property
    def total(self):
        """Gets the total of this InlineResponse200162.  # noqa: E501


        :return: The total of this InlineResponse200162.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this InlineResponse200162.


        :param total: The total of this InlineResponse200162.  # noqa: E501
        :type: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def executed_qty(self):
        """Gets the executed_qty of this InlineResponse200162.  # noqa: E501


        :return: The executed_qty of this InlineResponse200162.  # noqa: E501
        :rtype: str
        """
        return self._executed_qty

    @executed_qty.setter
    def executed_qty(self, executed_qty):
        """Sets the executed_qty of this InlineResponse200162.


        :param executed_qty: The executed_qty of this InlineResponse200162.  # noqa: E501
        :type: str
        """
        if executed_qty is None:
            raise ValueError("Invalid value for `executed_qty`, must not be `None`")  # noqa: E501

        self._executed_qty = executed_qty

    @property
    def executed_amt(self):
        """Gets the executed_amt of this InlineResponse200162.  # noqa: E501


        :return: The executed_amt of this InlineResponse200162.  # noqa: E501
        :rtype: str
        """
        return self._executed_amt

    @executed_amt.setter
    def executed_amt(self, executed_amt):
        """Sets the executed_amt of this InlineResponse200162.


        :param executed_amt: The executed_amt of this InlineResponse200162.  # noqa: E501
        :type: str
        """
        if executed_amt is None:
            raise ValueError("Invalid value for `executed_amt`, must not be `None`")  # noqa: E501

        self._executed_amt = executed_amt

    @property
    def sub_orders(self):
        """Gets the sub_orders of this InlineResponse200162.  # noqa: E501


        :return: The sub_orders of this InlineResponse200162.  # noqa: E501
        :rtype: list[InlineResponse200162SubOrders]
        """
        return self._sub_orders

    @sub_orders.setter
    def sub_orders(self, sub_orders):
        """Sets the sub_orders of this InlineResponse200162.


        :param sub_orders: The sub_orders of this InlineResponse200162.  # noqa: E501
        :type: list[InlineResponse200162SubOrders]
        """
        if sub_orders is None:
            raise ValueError("Invalid value for `sub_orders`, must not be `None`")  # noqa: E501

        self._sub_orders = sub_orders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200162, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200162):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
