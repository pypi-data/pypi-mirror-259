# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20064Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_locked': 'bool',
        'planned_recover_time': 'int',
        'trigger_condition': 'InlineResponse20064DataTriggerCondition',
        'indicators': 'InlineResponse20064DataIndicators',
        'update_time': 'int'
    }

    attribute_map = {
        'is_locked': 'isLocked',
        'planned_recover_time': 'plannedRecoverTime',
        'trigger_condition': 'triggerCondition',
        'indicators': 'indicators',
        'update_time': 'updateTime'
    }

    def __init__(self, is_locked=None, planned_recover_time=None, trigger_condition=None, indicators=None, update_time=None):  # noqa: E501
        """InlineResponse20064Data - a model defined in Swagger"""  # noqa: E501
        self._is_locked = None
        self._planned_recover_time = None
        self._trigger_condition = None
        self._indicators = None
        self._update_time = None
        self.discriminator = None
        self.is_locked = is_locked
        self.planned_recover_time = planned_recover_time
        self.trigger_condition = trigger_condition
        self.indicators = indicators
        self.update_time = update_time

    @property
    def is_locked(self):
        """Gets the is_locked of this InlineResponse20064Data.  # noqa: E501

        API trading function is locked or not  # noqa: E501

        :return: The is_locked of this InlineResponse20064Data.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this InlineResponse20064Data.

        API trading function is locked or not  # noqa: E501

        :param is_locked: The is_locked of this InlineResponse20064Data.  # noqa: E501
        :type: bool
        """
        if is_locked is None:
            raise ValueError("Invalid value for `is_locked`, must not be `None`")  # noqa: E501

        self._is_locked = is_locked

    @property
    def planned_recover_time(self):
        """Gets the planned_recover_time of this InlineResponse20064Data.  # noqa: E501

        If API trading function is locked, this is the planned recover time  # noqa: E501

        :return: The planned_recover_time of this InlineResponse20064Data.  # noqa: E501
        :rtype: int
        """
        return self._planned_recover_time

    @planned_recover_time.setter
    def planned_recover_time(self, planned_recover_time):
        """Sets the planned_recover_time of this InlineResponse20064Data.

        If API trading function is locked, this is the planned recover time  # noqa: E501

        :param planned_recover_time: The planned_recover_time of this InlineResponse20064Data.  # noqa: E501
        :type: int
        """
        if planned_recover_time is None:
            raise ValueError("Invalid value for `planned_recover_time`, must not be `None`")  # noqa: E501

        self._planned_recover_time = planned_recover_time

    @property
    def trigger_condition(self):
        """Gets the trigger_condition of this InlineResponse20064Data.  # noqa: E501


        :return: The trigger_condition of this InlineResponse20064Data.  # noqa: E501
        :rtype: InlineResponse20064DataTriggerCondition
        """
        return self._trigger_condition

    @trigger_condition.setter
    def trigger_condition(self, trigger_condition):
        """Sets the trigger_condition of this InlineResponse20064Data.


        :param trigger_condition: The trigger_condition of this InlineResponse20064Data.  # noqa: E501
        :type: InlineResponse20064DataTriggerCondition
        """
        if trigger_condition is None:
            raise ValueError("Invalid value for `trigger_condition`, must not be `None`")  # noqa: E501

        self._trigger_condition = trigger_condition

    @property
    def indicators(self):
        """Gets the indicators of this InlineResponse20064Data.  # noqa: E501


        :return: The indicators of this InlineResponse20064Data.  # noqa: E501
        :rtype: InlineResponse20064DataIndicators
        """
        return self._indicators

    @indicators.setter
    def indicators(self, indicators):
        """Sets the indicators of this InlineResponse20064Data.


        :param indicators: The indicators of this InlineResponse20064Data.  # noqa: E501
        :type: InlineResponse20064DataIndicators
        """
        if indicators is None:
            raise ValueError("Invalid value for `indicators`, must not be `None`")  # noqa: E501

        self._indicators = indicators

    @property
    def update_time(self):
        """Gets the update_time of this InlineResponse20064Data.  # noqa: E501


        :return: The update_time of this InlineResponse20064Data.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InlineResponse20064Data.


        :param update_time: The update_time of this InlineResponse20064Data.  # noqa: E501
        :type: int
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20064Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20064Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
