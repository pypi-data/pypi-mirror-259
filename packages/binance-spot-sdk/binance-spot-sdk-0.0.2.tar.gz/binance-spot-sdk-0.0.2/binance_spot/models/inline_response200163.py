# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200163(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uni_mmr': 'str',
        'account_equity': 'str',
        'actual_equity': 'str',
        'account_maint_margin': 'str',
        'account_status': 'str',
        'account_type': 'str'
    }

    attribute_map = {
        'uni_mmr': 'uniMMR',
        'account_equity': 'accountEquity',
        'actual_equity': 'actualEquity',
        'account_maint_margin': 'accountMaintMargin',
        'account_status': 'accountStatus',
        'account_type': 'accountType'
    }

    def __init__(self, uni_mmr=None, account_equity=None, actual_equity=None, account_maint_margin=None, account_status=None, account_type=None):  # noqa: E501
        """InlineResponse200163 - a model defined in Swagger"""  # noqa: E501
        self._uni_mmr = None
        self._account_equity = None
        self._actual_equity = None
        self._account_maint_margin = None
        self._account_status = None
        self._account_type = None
        self.discriminator = None
        self.uni_mmr = uni_mmr
        self.account_equity = account_equity
        self.actual_equity = actual_equity
        self.account_maint_margin = account_maint_margin
        self.account_status = account_status
        self.account_type = account_type

    @property
    def uni_mmr(self):
        """Gets the uni_mmr of this InlineResponse200163.  # noqa: E501

        Classic Portfolio margin account maintenance margin rate  # noqa: E501

        :return: The uni_mmr of this InlineResponse200163.  # noqa: E501
        :rtype: str
        """
        return self._uni_mmr

    @uni_mmr.setter
    def uni_mmr(self, uni_mmr):
        """Sets the uni_mmr of this InlineResponse200163.

        Classic Portfolio margin account maintenance margin rate  # noqa: E501

        :param uni_mmr: The uni_mmr of this InlineResponse200163.  # noqa: E501
        :type: str
        """
        if uni_mmr is None:
            raise ValueError("Invalid value for `uni_mmr`, must not be `None`")  # noqa: E501

        self._uni_mmr = uni_mmr

    @property
    def account_equity(self):
        """Gets the account_equity of this InlineResponse200163.  # noqa: E501

        Account equity, unit is USD  # noqa: E501

        :return: The account_equity of this InlineResponse200163.  # noqa: E501
        :rtype: str
        """
        return self._account_equity

    @account_equity.setter
    def account_equity(self, account_equity):
        """Sets the account_equity of this InlineResponse200163.

        Account equity, unit is USD  # noqa: E501

        :param account_equity: The account_equity of this InlineResponse200163.  # noqa: E501
        :type: str
        """
        if account_equity is None:
            raise ValueError("Invalid value for `account_equity`, must not be `None`")  # noqa: E501

        self._account_equity = account_equity

    @property
    def actual_equity(self):
        """Gets the actual_equity of this InlineResponse200163.  # noqa: E501

        Actual equity, unit is USD  # noqa: E501

        :return: The actual_equity of this InlineResponse200163.  # noqa: E501
        :rtype: str
        """
        return self._actual_equity

    @actual_equity.setter
    def actual_equity(self, actual_equity):
        """Sets the actual_equity of this InlineResponse200163.

        Actual equity, unit is USD  # noqa: E501

        :param actual_equity: The actual_equity of this InlineResponse200163.  # noqa: E501
        :type: str
        """
        if actual_equity is None:
            raise ValueError("Invalid value for `actual_equity`, must not be `None`")  # noqa: E501

        self._actual_equity = actual_equity

    @property
    def account_maint_margin(self):
        """Gets the account_maint_margin of this InlineResponse200163.  # noqa: E501

        Classic Portfolio margin account maintenance margin, unit is USD  # noqa: E501

        :return: The account_maint_margin of this InlineResponse200163.  # noqa: E501
        :rtype: str
        """
        return self._account_maint_margin

    @account_maint_margin.setter
    def account_maint_margin(self, account_maint_margin):
        """Sets the account_maint_margin of this InlineResponse200163.

        Classic Portfolio margin account maintenance margin, unit is USD  # noqa: E501

        :param account_maint_margin: The account_maint_margin of this InlineResponse200163.  # noqa: E501
        :type: str
        """
        if account_maint_margin is None:
            raise ValueError("Invalid value for `account_maint_margin`, must not be `None`")  # noqa: E501

        self._account_maint_margin = account_maint_margin

    @property
    def account_status(self):
        """Gets the account_status of this InlineResponse200163.  # noqa: E501

        Classic Portfolio margin account status:\"NORMAL\", \"MARGIN_CALL\", \"SUPPLY_MARGIN\", \"REDUCE_ONLY\", \"ACTIVE_LIQUIDATION\", \"FORCE_LIQUIDATION\", \"BANKRUPTED\"  # noqa: E501

        :return: The account_status of this InlineResponse200163.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this InlineResponse200163.

        Classic Portfolio margin account status:\"NORMAL\", \"MARGIN_CALL\", \"SUPPLY_MARGIN\", \"REDUCE_ONLY\", \"ACTIVE_LIQUIDATION\", \"FORCE_LIQUIDATION\", \"BANKRUPTED\"  # noqa: E501

        :param account_status: The account_status of this InlineResponse200163.  # noqa: E501
        :type: str
        """
        if account_status is None:
            raise ValueError("Invalid value for `account_status`, must not be `None`")  # noqa: E501

        self._account_status = account_status

    @property
    def account_type(self):
        """Gets the account_type of this InlineResponse200163.  # noqa: E501

        PM_1 for classic PM, PM_2 for PM  # noqa: E501

        :return: The account_type of this InlineResponse200163.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this InlineResponse200163.

        PM_1 for classic PM, PM_2 for PM  # noqa: E501

        :param account_type: The account_type of this InlineResponse200163.  # noqa: E501
        :type: str
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")  # noqa: E501

        self._account_type = account_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200163, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200163):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
