# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Symbols(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'status': 'str',
        'base_asset': 'str',
        'base_asset_precision': 'int',
        'quote_asset': 'str',
        'quote_asset_precision': 'int',
        'base_commission_precision': 'int',
        'quote_commission_precision': 'int',
        'order_types': 'list[str]',
        'iceberg_allowed': 'bool',
        'oco_allowed': 'bool',
        'quote_order_qty_market_allowed': 'bool',
        'allow_trailing_stop': 'bool',
        'is_spot_trading_allowed': 'bool',
        'is_margin_trading_allowed': 'bool',
        'filters': 'list[InlineResponse2001Filters]',
        'permissions': 'list[str]',
        'default_self_trade_prevention_mode': 'str',
        'allowed_self_trade_prevention_modes': 'list[str]'
    }

    attribute_map = {
        'symbol': 'symbol',
        'status': 'status',
        'base_asset': 'baseAsset',
        'base_asset_precision': 'baseAssetPrecision',
        'quote_asset': 'quoteAsset',
        'quote_asset_precision': 'quoteAssetPrecision',
        'base_commission_precision': 'baseCommissionPrecision',
        'quote_commission_precision': 'quoteCommissionPrecision',
        'order_types': 'orderTypes',
        'iceberg_allowed': 'icebergAllowed',
        'oco_allowed': 'ocoAllowed',
        'quote_order_qty_market_allowed': 'quoteOrderQtyMarketAllowed',
        'allow_trailing_stop': 'allowTrailingStop',
        'is_spot_trading_allowed': 'isSpotTradingAllowed',
        'is_margin_trading_allowed': 'isMarginTradingAllowed',
        'filters': 'filters',
        'permissions': 'permissions',
        'default_self_trade_prevention_mode': 'defaultSelfTradePreventionMode',
        'allowed_self_trade_prevention_modes': 'allowedSelfTradePreventionModes'
    }

    def __init__(self, symbol=None, status=None, base_asset=None, base_asset_precision=None, quote_asset=None, quote_asset_precision=None, base_commission_precision=None, quote_commission_precision=None, order_types=None, iceberg_allowed=None, oco_allowed=None, quote_order_qty_market_allowed=None, allow_trailing_stop=None, is_spot_trading_allowed=None, is_margin_trading_allowed=None, filters=None, permissions=None, default_self_trade_prevention_mode=None, allowed_self_trade_prevention_modes=None):  # noqa: E501
        """InlineResponse2001Symbols - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._status = None
        self._base_asset = None
        self._base_asset_precision = None
        self._quote_asset = None
        self._quote_asset_precision = None
        self._base_commission_precision = None
        self._quote_commission_precision = None
        self._order_types = None
        self._iceberg_allowed = None
        self._oco_allowed = None
        self._quote_order_qty_market_allowed = None
        self._allow_trailing_stop = None
        self._is_spot_trading_allowed = None
        self._is_margin_trading_allowed = None
        self._filters = None
        self._permissions = None
        self._default_self_trade_prevention_mode = None
        self._allowed_self_trade_prevention_modes = None
        self.discriminator = None
        self.symbol = symbol
        self.status = status
        self.base_asset = base_asset
        self.base_asset_precision = base_asset_precision
        self.quote_asset = quote_asset
        self.quote_asset_precision = quote_asset_precision
        self.base_commission_precision = base_commission_precision
        self.quote_commission_precision = quote_commission_precision
        self.order_types = order_types
        self.iceberg_allowed = iceberg_allowed
        self.oco_allowed = oco_allowed
        self.quote_order_qty_market_allowed = quote_order_qty_market_allowed
        self.allow_trailing_stop = allow_trailing_stop
        self.is_spot_trading_allowed = is_spot_trading_allowed
        self.is_margin_trading_allowed = is_margin_trading_allowed
        self.filters = filters
        self.permissions = permissions
        self.default_self_trade_prevention_mode = default_self_trade_prevention_mode
        self.allowed_self_trade_prevention_modes = allowed_self_trade_prevention_modes

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse2001Symbols.  # noqa: E501


        :return: The symbol of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse2001Symbols.


        :param symbol: The symbol of this InlineResponse2001Symbols.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def status(self):
        """Gets the status of this InlineResponse2001Symbols.  # noqa: E501


        :return: The status of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2001Symbols.


        :param status: The status of this InlineResponse2001Symbols.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def base_asset(self):
        """Gets the base_asset of this InlineResponse2001Symbols.  # noqa: E501


        :return: The base_asset of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: str
        """
        return self._base_asset

    @base_asset.setter
    def base_asset(self, base_asset):
        """Sets the base_asset of this InlineResponse2001Symbols.


        :param base_asset: The base_asset of this InlineResponse2001Symbols.  # noqa: E501
        :type: str
        """
        if base_asset is None:
            raise ValueError("Invalid value for `base_asset`, must not be `None`")  # noqa: E501

        self._base_asset = base_asset

    @property
    def base_asset_precision(self):
        """Gets the base_asset_precision of this InlineResponse2001Symbols.  # noqa: E501


        :return: The base_asset_precision of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: int
        """
        return self._base_asset_precision

    @base_asset_precision.setter
    def base_asset_precision(self, base_asset_precision):
        """Sets the base_asset_precision of this InlineResponse2001Symbols.


        :param base_asset_precision: The base_asset_precision of this InlineResponse2001Symbols.  # noqa: E501
        :type: int
        """
        if base_asset_precision is None:
            raise ValueError("Invalid value for `base_asset_precision`, must not be `None`")  # noqa: E501

        self._base_asset_precision = base_asset_precision

    @property
    def quote_asset(self):
        """Gets the quote_asset of this InlineResponse2001Symbols.  # noqa: E501


        :return: The quote_asset of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: str
        """
        return self._quote_asset

    @quote_asset.setter
    def quote_asset(self, quote_asset):
        """Sets the quote_asset of this InlineResponse2001Symbols.


        :param quote_asset: The quote_asset of this InlineResponse2001Symbols.  # noqa: E501
        :type: str
        """
        if quote_asset is None:
            raise ValueError("Invalid value for `quote_asset`, must not be `None`")  # noqa: E501

        self._quote_asset = quote_asset

    @property
    def quote_asset_precision(self):
        """Gets the quote_asset_precision of this InlineResponse2001Symbols.  # noqa: E501


        :return: The quote_asset_precision of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: int
        """
        return self._quote_asset_precision

    @quote_asset_precision.setter
    def quote_asset_precision(self, quote_asset_precision):
        """Sets the quote_asset_precision of this InlineResponse2001Symbols.


        :param quote_asset_precision: The quote_asset_precision of this InlineResponse2001Symbols.  # noqa: E501
        :type: int
        """
        if quote_asset_precision is None:
            raise ValueError("Invalid value for `quote_asset_precision`, must not be `None`")  # noqa: E501

        self._quote_asset_precision = quote_asset_precision

    @property
    def base_commission_precision(self):
        """Gets the base_commission_precision of this InlineResponse2001Symbols.  # noqa: E501


        :return: The base_commission_precision of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: int
        """
        return self._base_commission_precision

    @base_commission_precision.setter
    def base_commission_precision(self, base_commission_precision):
        """Sets the base_commission_precision of this InlineResponse2001Symbols.


        :param base_commission_precision: The base_commission_precision of this InlineResponse2001Symbols.  # noqa: E501
        :type: int
        """
        if base_commission_precision is None:
            raise ValueError("Invalid value for `base_commission_precision`, must not be `None`")  # noqa: E501

        self._base_commission_precision = base_commission_precision

    @property
    def quote_commission_precision(self):
        """Gets the quote_commission_precision of this InlineResponse2001Symbols.  # noqa: E501


        :return: The quote_commission_precision of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: int
        """
        return self._quote_commission_precision

    @quote_commission_precision.setter
    def quote_commission_precision(self, quote_commission_precision):
        """Sets the quote_commission_precision of this InlineResponse2001Symbols.


        :param quote_commission_precision: The quote_commission_precision of this InlineResponse2001Symbols.  # noqa: E501
        :type: int
        """
        if quote_commission_precision is None:
            raise ValueError("Invalid value for `quote_commission_precision`, must not be `None`")  # noqa: E501

        self._quote_commission_precision = quote_commission_precision

    @property
    def order_types(self):
        """Gets the order_types of this InlineResponse2001Symbols.  # noqa: E501


        :return: The order_types of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_types

    @order_types.setter
    def order_types(self, order_types):
        """Sets the order_types of this InlineResponse2001Symbols.


        :param order_types: The order_types of this InlineResponse2001Symbols.  # noqa: E501
        :type: list[str]
        """
        if order_types is None:
            raise ValueError("Invalid value for `order_types`, must not be `None`")  # noqa: E501

        self._order_types = order_types

    @property
    def iceberg_allowed(self):
        """Gets the iceberg_allowed of this InlineResponse2001Symbols.  # noqa: E501


        :return: The iceberg_allowed of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: bool
        """
        return self._iceberg_allowed

    @iceberg_allowed.setter
    def iceberg_allowed(self, iceberg_allowed):
        """Sets the iceberg_allowed of this InlineResponse2001Symbols.


        :param iceberg_allowed: The iceberg_allowed of this InlineResponse2001Symbols.  # noqa: E501
        :type: bool
        """
        if iceberg_allowed is None:
            raise ValueError("Invalid value for `iceberg_allowed`, must not be `None`")  # noqa: E501

        self._iceberg_allowed = iceberg_allowed

    @property
    def oco_allowed(self):
        """Gets the oco_allowed of this InlineResponse2001Symbols.  # noqa: E501


        :return: The oco_allowed of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: bool
        """
        return self._oco_allowed

    @oco_allowed.setter
    def oco_allowed(self, oco_allowed):
        """Sets the oco_allowed of this InlineResponse2001Symbols.


        :param oco_allowed: The oco_allowed of this InlineResponse2001Symbols.  # noqa: E501
        :type: bool
        """
        if oco_allowed is None:
            raise ValueError("Invalid value for `oco_allowed`, must not be `None`")  # noqa: E501

        self._oco_allowed = oco_allowed

    @property
    def quote_order_qty_market_allowed(self):
        """Gets the quote_order_qty_market_allowed of this InlineResponse2001Symbols.  # noqa: E501


        :return: The quote_order_qty_market_allowed of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: bool
        """
        return self._quote_order_qty_market_allowed

    @quote_order_qty_market_allowed.setter
    def quote_order_qty_market_allowed(self, quote_order_qty_market_allowed):
        """Sets the quote_order_qty_market_allowed of this InlineResponse2001Symbols.


        :param quote_order_qty_market_allowed: The quote_order_qty_market_allowed of this InlineResponse2001Symbols.  # noqa: E501
        :type: bool
        """
        if quote_order_qty_market_allowed is None:
            raise ValueError("Invalid value for `quote_order_qty_market_allowed`, must not be `None`")  # noqa: E501

        self._quote_order_qty_market_allowed = quote_order_qty_market_allowed

    @property
    def allow_trailing_stop(self):
        """Gets the allow_trailing_stop of this InlineResponse2001Symbols.  # noqa: E501


        :return: The allow_trailing_stop of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: bool
        """
        return self._allow_trailing_stop

    @allow_trailing_stop.setter
    def allow_trailing_stop(self, allow_trailing_stop):
        """Sets the allow_trailing_stop of this InlineResponse2001Symbols.


        :param allow_trailing_stop: The allow_trailing_stop of this InlineResponse2001Symbols.  # noqa: E501
        :type: bool
        """
        if allow_trailing_stop is None:
            raise ValueError("Invalid value for `allow_trailing_stop`, must not be `None`")  # noqa: E501

        self._allow_trailing_stop = allow_trailing_stop

    @property
    def is_spot_trading_allowed(self):
        """Gets the is_spot_trading_allowed of this InlineResponse2001Symbols.  # noqa: E501


        :return: The is_spot_trading_allowed of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: bool
        """
        return self._is_spot_trading_allowed

    @is_spot_trading_allowed.setter
    def is_spot_trading_allowed(self, is_spot_trading_allowed):
        """Sets the is_spot_trading_allowed of this InlineResponse2001Symbols.


        :param is_spot_trading_allowed: The is_spot_trading_allowed of this InlineResponse2001Symbols.  # noqa: E501
        :type: bool
        """
        if is_spot_trading_allowed is None:
            raise ValueError("Invalid value for `is_spot_trading_allowed`, must not be `None`")  # noqa: E501

        self._is_spot_trading_allowed = is_spot_trading_allowed

    @property
    def is_margin_trading_allowed(self):
        """Gets the is_margin_trading_allowed of this InlineResponse2001Symbols.  # noqa: E501


        :return: The is_margin_trading_allowed of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: bool
        """
        return self._is_margin_trading_allowed

    @is_margin_trading_allowed.setter
    def is_margin_trading_allowed(self, is_margin_trading_allowed):
        """Sets the is_margin_trading_allowed of this InlineResponse2001Symbols.


        :param is_margin_trading_allowed: The is_margin_trading_allowed of this InlineResponse2001Symbols.  # noqa: E501
        :type: bool
        """
        if is_margin_trading_allowed is None:
            raise ValueError("Invalid value for `is_margin_trading_allowed`, must not be `None`")  # noqa: E501

        self._is_margin_trading_allowed = is_margin_trading_allowed

    @property
    def filters(self):
        """Gets the filters of this InlineResponse2001Symbols.  # noqa: E501


        :return: The filters of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: list[InlineResponse2001Filters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this InlineResponse2001Symbols.


        :param filters: The filters of this InlineResponse2001Symbols.  # noqa: E501
        :type: list[InlineResponse2001Filters]
        """
        if filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")  # noqa: E501

        self._filters = filters

    @property
    def permissions(self):
        """Gets the permissions of this InlineResponse2001Symbols.  # noqa: E501


        :return: The permissions of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this InlineResponse2001Symbols.


        :param permissions: The permissions of this InlineResponse2001Symbols.  # noqa: E501
        :type: list[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def default_self_trade_prevention_mode(self):
        """Gets the default_self_trade_prevention_mode of this InlineResponse2001Symbols.  # noqa: E501


        :return: The default_self_trade_prevention_mode of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: str
        """
        return self._default_self_trade_prevention_mode

    @default_self_trade_prevention_mode.setter
    def default_self_trade_prevention_mode(self, default_self_trade_prevention_mode):
        """Sets the default_self_trade_prevention_mode of this InlineResponse2001Symbols.


        :param default_self_trade_prevention_mode: The default_self_trade_prevention_mode of this InlineResponse2001Symbols.  # noqa: E501
        :type: str
        """
        if default_self_trade_prevention_mode is None:
            raise ValueError("Invalid value for `default_self_trade_prevention_mode`, must not be `None`")  # noqa: E501

        self._default_self_trade_prevention_mode = default_self_trade_prevention_mode

    @property
    def allowed_self_trade_prevention_modes(self):
        """Gets the allowed_self_trade_prevention_modes of this InlineResponse2001Symbols.  # noqa: E501


        :return: The allowed_self_trade_prevention_modes of this InlineResponse2001Symbols.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_self_trade_prevention_modes

    @allowed_self_trade_prevention_modes.setter
    def allowed_self_trade_prevention_modes(self, allowed_self_trade_prevention_modes):
        """Sets the allowed_self_trade_prevention_modes of this InlineResponse2001Symbols.


        :param allowed_self_trade_prevention_modes: The allowed_self_trade_prevention_modes of this InlineResponse2001Symbols.  # noqa: E501
        :type: list[str]
        """
        if allowed_self_trade_prevention_modes is None:
            raise ValueError("Invalid value for `allowed_self_trade_prevention_modes`, must not be `None`")  # noqa: E501

        self._allowed_self_trade_prevention_modes = allowed_self_trade_prevention_modes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Symbols, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Symbols):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
