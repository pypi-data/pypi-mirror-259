# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Filters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter_type': 'str',
        'min_price': 'str',
        'max_price': 'str',
        'tick_size': 'str'
    }

    attribute_map = {
        'filter_type': 'filterType',
        'min_price': 'minPrice',
        'max_price': 'maxPrice',
        'tick_size': 'tickSize'
    }

    def __init__(self, filter_type=None, min_price=None, max_price=None, tick_size=None):  # noqa: E501
        """InlineResponse2001Filters - a model defined in Swagger"""  # noqa: E501
        self._filter_type = None
        self._min_price = None
        self._max_price = None
        self._tick_size = None
        self.discriminator = None
        self.filter_type = filter_type
        self.min_price = min_price
        self.max_price = max_price
        self.tick_size = tick_size

    @property
    def filter_type(self):
        """Gets the filter_type of this InlineResponse2001Filters.  # noqa: E501


        :return: The filter_type of this InlineResponse2001Filters.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this InlineResponse2001Filters.


        :param filter_type: The filter_type of this InlineResponse2001Filters.  # noqa: E501
        :type: str
        """
        if filter_type is None:
            raise ValueError("Invalid value for `filter_type`, must not be `None`")  # noqa: E501

        self._filter_type = filter_type

    @property
    def min_price(self):
        """Gets the min_price of this InlineResponse2001Filters.  # noqa: E501


        :return: The min_price of this InlineResponse2001Filters.  # noqa: E501
        :rtype: str
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """Sets the min_price of this InlineResponse2001Filters.


        :param min_price: The min_price of this InlineResponse2001Filters.  # noqa: E501
        :type: str
        """
        if min_price is None:
            raise ValueError("Invalid value for `min_price`, must not be `None`")  # noqa: E501

        self._min_price = min_price

    @property
    def max_price(self):
        """Gets the max_price of this InlineResponse2001Filters.  # noqa: E501


        :return: The max_price of this InlineResponse2001Filters.  # noqa: E501
        :rtype: str
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """Sets the max_price of this InlineResponse2001Filters.


        :param max_price: The max_price of this InlineResponse2001Filters.  # noqa: E501
        :type: str
        """
        if max_price is None:
            raise ValueError("Invalid value for `max_price`, must not be `None`")  # noqa: E501

        self._max_price = max_price

    @property
    def tick_size(self):
        """Gets the tick_size of this InlineResponse2001Filters.  # noqa: E501


        :return: The tick_size of this InlineResponse2001Filters.  # noqa: E501
        :rtype: str
        """
        return self._tick_size

    @tick_size.setter
    def tick_size(self, tick_size):
        """Sets the tick_size of this InlineResponse2001Filters.


        :param tick_size: The tick_size of this InlineResponse2001Filters.  # noqa: E501
        :type: str
        """
        if tick_size is None:
            raise ValueError("Invalid value for `tick_size`, must not be `None`")  # noqa: E501

        self._tick_size = tick_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Filters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Filters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
