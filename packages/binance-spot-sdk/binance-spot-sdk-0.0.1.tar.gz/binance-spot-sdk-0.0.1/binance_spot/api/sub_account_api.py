# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class SubAccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_capital_deposit_sub_address_get(self, email, coin, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Spot Assets Summary (For Master Account)  # noqa: E501

        Fetch sub-account deposit address  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_sub_address_get(email, coin, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str coin: Coin name (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str network:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_deposit_sub_address_get_with_http_info(email, coin, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_deposit_sub_address_get_with_http_info(email, coin, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_deposit_sub_address_get_with_http_info(self, email, coin, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Spot Assets Summary (For Master Account)  # noqa: E501

        Fetch sub-account deposit address  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_sub_address_get_with_http_info(email, coin, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str coin: Coin name (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str network:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'coin', 'timestamp', 'signature', 'network', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_deposit_sub_address_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_capital_deposit_sub_address_get`")  # noqa: E501
        # verify the required parameter 'coin' is set
        if ('coin' not in params or
                params['coin'] is None):
            raise ValueError("Missing the required parameter `coin` when calling `sapi_v1_capital_deposit_sub_address_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_capital_deposit_sub_address_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_capital_deposit_sub_address_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'network' in params:
            query_params.append(('network', params['network']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/deposit/subAddress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20087',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_capital_deposit_sub_hisrec_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Deposit History (For Master Account)  # noqa: E501

        Fetch sub-account deposit history  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_sub_hisrec_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str coin: Coin name
        :param int status: 0(0:pending,6: credited but cannot withdraw, 1:success)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit:
        :param int offset:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20088]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_deposit_sub_hisrec_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_deposit_sub_hisrec_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_deposit_sub_hisrec_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Deposit History (For Master Account)  # noqa: E501

        Fetch sub-account deposit history  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_sub_hisrec_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str coin: Coin name
        :param int status: 0(0:pending,6: credited but cannot withdraw, 1:success)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit:
        :param int offset:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20088]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'coin', 'status', 'start_time', 'end_time', 'limit', 'offset', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_deposit_sub_hisrec_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_capital_deposit_sub_hisrec_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_capital_deposit_sub_hisrec_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_capital_deposit_sub_hisrec_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/deposit/subHisrec', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20088]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_account_snapshot_get(self, email, type, timestamp, signature, **kwargs):  # noqa: E501
        """Managed sub-account snapshot (For Investor Master Account)  # noqa: E501

        - The query time period must be less then 30 days - Support query within the last one month only - If `startTime` and `endTime` not sent, return records of the last 7 days by default  Weight(IP): 2400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_account_snapshot_get(email, type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str type: \"SPOT\", \"MARGIN\"(cross), \"FUTURES\"(UM) (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: min 7, max 30, default 7
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200111
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_account_snapshot_get_with_http_info(email, type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_account_snapshot_get_with_http_info(email, type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_account_snapshot_get_with_http_info(self, email, type, timestamp, signature, **kwargs):  # noqa: E501
        """Managed sub-account snapshot (For Investor Master Account)  # noqa: E501

        - The query time period must be less then 30 days - Support query within the last one month only - If `startTime` and `endTime` not sent, return records of the last 7 days by default  Weight(IP): 2400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_account_snapshot_get_with_http_info(email, type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str type: \"SPOT\", \"MARGIN\"(cross), \"FUTURES\"(UM) (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: min 7, max 30, default 7
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200111
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'type', 'timestamp', 'signature', 'start_time', 'end_time', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_account_snapshot_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_managed_subaccount_account_snapshot_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `sapi_v1_managed_subaccount_account_snapshot_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_account_snapshot_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_account_snapshot_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/accountSnapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200111',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_asset_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Managed sub-account asset details(For Investor Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_asset_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200110]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_asset_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_asset_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_asset_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Managed sub-account asset details(For Investor Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_asset_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200110]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_asset_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_managed_subaccount_asset_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_asset_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_asset_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/asset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200110]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_deposit_address_get(self, email, coin, timestamp, signature, **kwargs):  # noqa: E501
        """Get Managed Sub-account Deposit Address (For Investor Master Account)  # noqa: E501

        Get investor's managed sub-account deposit address  Weight(UID): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_deposit_address_get(email, coin, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param str coin: Coin name (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str network:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200116
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_deposit_address_get_with_http_info(email, coin, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_deposit_address_get_with_http_info(email, coin, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_deposit_address_get_with_http_info(self, email, coin, timestamp, signature, **kwargs):  # noqa: E501
        """Get Managed Sub-account Deposit Address (For Investor Master Account)  # noqa: E501

        Get investor's managed sub-account deposit address  Weight(UID): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_deposit_address_get_with_http_info(email, coin, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param str coin: Coin name (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str network:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200116
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'coin', 'timestamp', 'signature', 'network', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_deposit_address_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_managed_subaccount_deposit_address_get`")  # noqa: E501
        # verify the required parameter 'coin' is set
        if ('coin' not in params or
                params['coin'] is None):
            raise ValueError("Missing the required parameter `coin` when calling `sapi_v1_managed_subaccount_deposit_address_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_deposit_address_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_deposit_address_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'network' in params:
            query_params.append(('network', params['network']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/deposit/address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200116',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_deposit_post(self, to_email, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Deposit assets into the managed sub-account(For Investor Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_deposit_post(to_email, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to_email: Recipient email (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200109
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_deposit_post_with_http_info(to_email, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_deposit_post_with_http_info(to_email, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_deposit_post_with_http_info(self, to_email, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Deposit assets into the managed sub-account(For Investor Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_deposit_post_with_http_info(to_email, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to_email: Recipient email (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200109
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to_email', 'asset', 'amount', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_deposit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to_email' is set
        if ('to_email' not in params or
                params['to_email'] is None):
            raise ValueError("Missing the required parameter `to_email` when calling `sapi_v1_managed_subaccount_deposit_post`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_managed_subaccount_deposit_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_managed_subaccount_deposit_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_deposit_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_deposit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'to_email' in params:
            query_params.append(('toEmail', params['to_email']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/deposit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200109',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_fetch_future_asset_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub-account Futures Asset Details (For Investor Master Account)  # noqa: E501

        Investor can use this api to query managed sub account futures asset details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_fetch_future_asset_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200113
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_fetch_future_asset_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_fetch_future_asset_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_fetch_future_asset_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub-account Futures Asset Details (For Investor Master Account)  # noqa: E501

        Investor can use this api to query managed sub account futures asset details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_fetch_future_asset_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200113
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_fetch_future_asset_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_managed_subaccount_fetch_future_asset_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_fetch_future_asset_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_fetch_future_asset_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/fetch-future-asset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200113',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_info_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub-account List (For Investor)  # noqa: E501

        Get investor's managed sub-account list.  Weight(UID): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_info_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page: Default 1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200115
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_info_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_info_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_info_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub-account List (For Investor)  # noqa: E501

        Get investor's managed sub-account list.  Weight(UID): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_info_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page: Default 1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200115
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'page', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_info_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_managed_subaccount_info_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_info_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200115',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_margin_asset_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub-account Margin Asset Details (For Investor Master Account)  # noqa: E501

        Investor can use this api to query managed sub account margin asset details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_margin_asset_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200114
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_margin_asset_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_margin_asset_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_margin_asset_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub-account Margin Asset Details (For Investor Master Account)  # noqa: E501

        Investor can use this api to query managed sub account margin asset details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_margin_asset_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200114
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_margin_asset_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_managed_subaccount_margin_asset_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_margin_asset_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_margin_asset_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/marginAsset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200114',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_query_trans_log_for_investor_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub Account Transfer Log (For Investor Master Account)  # noqa: E501

        Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_query_trans_log_for_investor_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default 500; max 1000.
        :param str transfers: Transfer Direction (FROM/TO)
        :param str transfer_function_account_type: Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200112
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_query_trans_log_for_investor_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_query_trans_log_for_investor_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_query_trans_log_for_investor_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub Account Transfer Log (For Investor Master Account)  # noqa: E501

        Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_query_trans_log_for_investor_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default 500; max 1000.
        :param str transfers: Transfer Direction (FROM/TO)
        :param str transfer_function_account_type: Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200112
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'start_time', 'end_time', 'page', 'limit', 'transfers', 'transfer_function_account_type', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_query_trans_log_for_investor_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_managed_subaccount_query_trans_log_for_investor_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_query_trans_log_for_investor_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_query_trans_log_for_investor_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'transfers' in params:
            query_params.append(('transfers', params['transfers']))  # noqa: E501
        if 'transfer_function_account_type' in params:
            query_params.append(('transferFunctionAccountType', params['transfer_function_account_type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/queryTransLogForInvestor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200112',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_query_trans_log_for_trade_parent_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub Account Transfer Log (For Trading Team Master Account)  # noqa: E501

        Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team  Weight(IP): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_query_trans_log_for_trade_parent_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default 500; max 1000.
        :param str transfers: Transfer Direction (FROM/TO)
        :param str transfer_function_account_type: Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200112
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_query_trans_log_for_trade_parent_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_query_trans_log_for_trade_parent_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_query_trans_log_for_trade_parent_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub Account Transfer Log (For Trading Team Master Account)  # noqa: E501

        Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team  Weight(IP): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_query_trans_log_for_trade_parent_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default 500; max 1000.
        :param str transfers: Transfer Direction (FROM/TO)
        :param str transfer_function_account_type: Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200112
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'start_time', 'end_time', 'page', 'limit', 'transfers', 'transfer_function_account_type', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_query_trans_log_for_trade_parent_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_managed_subaccount_query_trans_log_for_trade_parent_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_query_trans_log_for_trade_parent_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_query_trans_log_for_trade_parent_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'transfers' in params:
            query_params.append(('transfers', params['transfers']))  # noqa: E501
        if 'transfer_function_account_type' in params:
            query_params.append(('transferFunctionAccountType', params['transfer_function_account_type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/queryTransLogForTradeParent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200112',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_query_trans_log_get(self, transfers, transfer_function_account_type, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)  # noqa: E501

        Query Managed Sub Account Transfer Log (For Trading Team Sub Account)  Weight(UID): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_query_trans_log_get(transfers, transfer_function_account_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transfers: Transfer Direction (required)
        :param str transfer_function_account_type: Transfer function account type (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200117
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_query_trans_log_get_with_http_info(transfers, transfer_function_account_type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_query_trans_log_get_with_http_info(transfers, transfer_function_account_type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_query_trans_log_get_with_http_info(self, transfers, transfer_function_account_type, timestamp, signature, **kwargs):  # noqa: E501
        """Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)  # noqa: E501

        Query Managed Sub Account Transfer Log (For Trading Team Sub Account)  Weight(UID): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_query_trans_log_get_with_http_info(transfers, transfer_function_account_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transfers: Transfer Direction (required)
        :param str transfer_function_account_type: Transfer function account type (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200117
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transfers', 'transfer_function_account_type', 'timestamp', 'signature', 'start_time', 'end_time', 'page', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_query_trans_log_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transfers' is set
        if ('transfers' not in params or
                params['transfers'] is None):
            raise ValueError("Missing the required parameter `transfers` when calling `sapi_v1_managed_subaccount_query_trans_log_get`")  # noqa: E501
        # verify the required parameter 'transfer_function_account_type' is set
        if ('transfer_function_account_type' not in params or
                params['transfer_function_account_type'] is None):
            raise ValueError("Missing the required parameter `transfer_function_account_type` when calling `sapi_v1_managed_subaccount_query_trans_log_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_query_trans_log_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_query_trans_log_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'transfers' in params:
            query_params.append(('transfers', params['transfers']))  # noqa: E501
        if 'transfer_function_account_type' in params:
            query_params.append(('transferFunctionAccountType', params['transfer_function_account_type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/query-trans-log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200117',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_managed_subaccount_withdraw_post(self, from_email, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Withdrawl assets from the managed sub-account(For Investor Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_withdraw_post(from_email, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_email: Sender email (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int transfer_date: Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200109
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_managed_subaccount_withdraw_post_with_http_info(from_email, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_managed_subaccount_withdraw_post_with_http_info(from_email, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_managed_subaccount_withdraw_post_with_http_info(self, from_email, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Withdrawl assets from the managed sub-account(For Investor Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_managed_subaccount_withdraw_post_with_http_info(from_email, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_email: Sender email (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int transfer_date: Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200109
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_email', 'asset', 'amount', 'timestamp', 'signature', 'transfer_date', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_managed_subaccount_withdraw_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_email' is set
        if ('from_email' not in params or
                params['from_email'] is None):
            raise ValueError("Missing the required parameter `from_email` when calling `sapi_v1_managed_subaccount_withdraw_post`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_managed_subaccount_withdraw_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_managed_subaccount_withdraw_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_managed_subaccount_withdraw_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_managed_subaccount_withdraw_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_email' in params:
            query_params.append(('fromEmail', params['from_email']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'transfer_date' in params:
            query_params.append(('transferDate', params['transfer_date']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/managed-subaccount/withdraw', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200109',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_blvt_enable_post(self, email, enable_blvt, timestamp, signature, **kwargs):  # noqa: E501
        """Enable Leverage Token for Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_blvt_enable_post(email, enable_blvt, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param bool enable_blvt: Only true for now (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200108
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_blvt_enable_post_with_http_info(email, enable_blvt, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_blvt_enable_post_with_http_info(email, enable_blvt, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_blvt_enable_post_with_http_info(self, email, enable_blvt, timestamp, signature, **kwargs):  # noqa: E501
        """Enable Leverage Token for Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_blvt_enable_post_with_http_info(email, enable_blvt, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param bool enable_blvt: Only true for now (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200108
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'enable_blvt', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_blvt_enable_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_blvt_enable_post`")  # noqa: E501
        # verify the required parameter 'enable_blvt' is set
        if ('enable_blvt' not in params or
                params['enable_blvt'] is None):
            raise ValueError("Missing the required parameter `enable_blvt` when calling `sapi_v1_sub_account_blvt_enable_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_blvt_enable_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_blvt_enable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'enable_blvt' in params:
            query_params.append(('enableBlvt', params['enable_blvt']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/blvt/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200108',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_eoptions_enable_post(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Enable Options for Sub-account (For Master Account)(USER_DATA)  # noqa: E501

        Enable Options for Sub-account (For Master Account).  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_eoptions_enable_post(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200121
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_eoptions_enable_post_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_eoptions_enable_post_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_eoptions_enable_post_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Enable Options for Sub-account (For Master Account)(USER_DATA)  # noqa: E501

        Enable Options for Sub-account (For Master Account).  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_eoptions_enable_post_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200121
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_eoptions_enable_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_eoptions_enable_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_eoptions_enable_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_eoptions_enable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/eoptions/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200121',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_futures_account_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Detail on Sub-account's Futures Account (For Master Account)  # noqa: E501

        Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_account_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_futures_account_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_futures_account_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_futures_account_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Detail on Sub-account's Futures Account (For Master Account)  # noqa: E501

        Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_account_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20098
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_futures_account_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_futures_account_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_futures_account_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_futures_account_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/futures/account', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20098',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_futures_account_summary_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Summary of Sub-account's Futures Account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_account_summary_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20099
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_futures_account_summary_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_futures_account_summary_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_futures_account_summary_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Summary of Sub-account's Futures Account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_account_summary_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20099
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_futures_account_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_futures_account_summary_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_futures_account_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/futures/accountSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20099',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_futures_enable_post(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Enable Futures for Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_enable_post(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_futures_enable_post_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_futures_enable_post_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_futures_enable_post_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Enable Futures for Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_enable_post_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20097
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_futures_enable_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_futures_enable_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_futures_enable_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_futures_enable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/futures/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20097',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_futures_internal_transfer_get(self, email, futures_type, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Futures Asset Transfer History (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_internal_transfer_get(email, futures_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int futures_type: 1:USDT-margined Futures, 2: Coin-margined Futures (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default value: 50, Max value: 500
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_futures_internal_transfer_get_with_http_info(email, futures_type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_futures_internal_transfer_get_with_http_info(email, futures_type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_futures_internal_transfer_get_with_http_info(self, email, futures_type, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Futures Asset Transfer History (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_internal_transfer_get_with_http_info(email, futures_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int futures_type: 1:USDT-margined Futures, 2: Coin-margined Futures (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default value: 50, Max value: 500
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'futures_type', 'timestamp', 'signature', 'start_time', 'end_time', 'page', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_futures_internal_transfer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_futures_internal_transfer_get`")  # noqa: E501
        # verify the required parameter 'futures_type' is set
        if ('futures_type' not in params or
                params['futures_type'] is None):
            raise ValueError("Missing the required parameter `futures_type` when calling `sapi_v1_sub_account_futures_internal_transfer_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_futures_internal_transfer_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_futures_internal_transfer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'futures_type' in params:
            query_params.append(('futuresType', params['futures_type']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/futures/internalTransfer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20083',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_futures_internal_transfer_post(self, from_email, to_email, futures_type, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Futures Asset Transfer (For Master Account)  # noqa: E501

        - Master account can transfer max 2000 times a minute  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_internal_transfer_post(from_email, to_email, futures_type, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_email: Sender email (required)
        :param str to_email: Recipient email (required)
        :param int futures_type: 1:USDT-margined Futures,2: Coin-margined Futures (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_futures_internal_transfer_post_with_http_info(from_email, to_email, futures_type, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_futures_internal_transfer_post_with_http_info(from_email, to_email, futures_type, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_futures_internal_transfer_post_with_http_info(self, from_email, to_email, futures_type, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Futures Asset Transfer (For Master Account)  # noqa: E501

        - Master account can transfer max 2000 times a minute  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_internal_transfer_post_with_http_info(from_email, to_email, futures_type, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_email: Sender email (required)
        :param str to_email: Recipient email (required)
        :param int futures_type: 1:USDT-margined Futures,2: Coin-margined Futures (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_email', 'to_email', 'futures_type', 'asset', 'amount', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_futures_internal_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_email' is set
        if ('from_email' not in params or
                params['from_email'] is None):
            raise ValueError("Missing the required parameter `from_email` when calling `sapi_v1_sub_account_futures_internal_transfer_post`")  # noqa: E501
        # verify the required parameter 'to_email' is set
        if ('to_email' not in params or
                params['to_email'] is None):
            raise ValueError("Missing the required parameter `to_email` when calling `sapi_v1_sub_account_futures_internal_transfer_post`")  # noqa: E501
        # verify the required parameter 'futures_type' is set
        if ('futures_type' not in params or
                params['futures_type'] is None):
            raise ValueError("Missing the required parameter `futures_type` when calling `sapi_v1_sub_account_futures_internal_transfer_post`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_sub_account_futures_internal_transfer_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_sub_account_futures_internal_transfer_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_futures_internal_transfer_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_futures_internal_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_email' in params:
            query_params.append(('fromEmail', params['from_email']))  # noqa: E501
        if 'to_email' in params:
            query_params.append(('toEmail', params['to_email']))  # noqa: E501
        if 'futures_type' in params:
            query_params.append(('futuresType', params['futures_type']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/futures/internalTransfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20084',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_futures_position_risk_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Futures Position-Risk of Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_position_risk_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200100]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_futures_position_risk_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_futures_position_risk_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_futures_position_risk_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Futures Position-Risk of Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_position_risk_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200100]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_futures_position_risk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_futures_position_risk_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_futures_position_risk_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_futures_position_risk_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/futures/positionRisk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200100]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_futures_transfer_post(self, email, asset, amount, type, timestamp, signature, **kwargs):  # noqa: E501
        """Transfer for Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_transfer_post(email, asset, amount, type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int type: * `1` - transfer from subaccount's spot account to its USDT-margined futures account * `2` - transfer from subaccount's USDT-margined futures account to its spot account * `3` - transfer from subaccount's spot account to its COIN-margined futures account * `4` - transfer from subaccount's COIN-margined futures account to its spot account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_futures_transfer_post_with_http_info(email, asset, amount, type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_futures_transfer_post_with_http_info(email, asset, amount, type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_futures_transfer_post_with_http_info(self, email, asset, amount, type, timestamp, signature, **kwargs):  # noqa: E501
        """Transfer for Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_futures_transfer_post_with_http_info(email, asset, amount, type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int type: * `1` - transfer from subaccount's spot account to its USDT-margined futures account * `2` - transfer from subaccount's USDT-margined futures account to its spot account * `3` - transfer from subaccount's spot account to its COIN-margined futures account * `4` - transfer from subaccount's COIN-margined futures account to its spot account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'asset', 'amount', 'type', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_futures_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_futures_transfer_post`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_sub_account_futures_transfer_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_sub_account_futures_transfer_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `sapi_v1_sub_account_futures_transfer_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_futures_transfer_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_futures_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/futures/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200101',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_list_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query Sub-account List (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_list_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str email: Sub-account email
        :param str is_freeze:
        :param int page: Default 1
        :param int limit: Default 1; max 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20081
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_list_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_list_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_list_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query Sub-account List (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_list_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str email: Sub-account email
        :param str is_freeze:
        :param int page: Default 1
        :param int limit: Default 1; max 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20081
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'email', 'is_freeze', 'page', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'is_freeze' in params:
            query_params.append(('isFreeze', params['is_freeze']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20081',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_margin_account_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Detail on Sub-account's Margin Account (For Master Account)  # noqa: E501

        Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_margin_account_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20095
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_margin_account_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_margin_account_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_margin_account_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Detail on Sub-account's Margin Account (For Master Account)  # noqa: E501

        Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_margin_account_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20095
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_margin_account_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_margin_account_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_margin_account_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_margin_account_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/margin/account', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20095',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_margin_account_summary_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Summary of Sub-account's Margin Account (For Master Account)  # noqa: E501

        Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_margin_account_summary_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20096
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_margin_account_summary_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_margin_account_summary_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_margin_account_summary_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Summary of Sub-account's Margin Account (For Master Account)  # noqa: E501

        Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_margin_account_summary_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20096
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_margin_account_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_margin_account_summary_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_margin_account_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/margin/accountSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20096',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_margin_enable_post(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Enable Margin for Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_margin_enable_post(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_margin_enable_post_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_margin_enable_post_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_margin_enable_post_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Enable Margin for Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_margin_enable_post_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_margin_enable_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_margin_enable_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_margin_enable_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_margin_enable_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/margin/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20094',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_margin_transfer_post(self, email, asset, amount, type, timestamp, signature, **kwargs):  # noqa: E501
        """Margin Transfer for Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_margin_transfer_post(email, asset, amount, type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int type: * `1` - transfer from subaccount's spot account to margin account * `2` - transfer from subaccount's margin account to its spot account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_margin_transfer_post_with_http_info(email, asset, amount, type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_margin_transfer_post_with_http_info(email, asset, amount, type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_margin_transfer_post_with_http_info(self, email, asset, amount, type, timestamp, signature, **kwargs):  # noqa: E501
        """Margin Transfer for Sub-account (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_margin_transfer_post_with_http_info(email, asset, amount, type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int type: * `1` - transfer from subaccount's spot account to margin account * `2` - transfer from subaccount's margin account to its spot account (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'asset', 'amount', 'type', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_margin_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_margin_transfer_post`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_sub_account_margin_transfer_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_sub_account_margin_transfer_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `sapi_v1_sub_account_margin_transfer_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_margin_transfer_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_margin_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/margin/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200101',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_spot_summary_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Spot Assets Summary (For Master Account)  # noqa: E501

        Get BTC valued asset summary of subaccounts.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_spot_summary_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str email: Sub-account email
        :param int page: Default 1
        :param int size: Default:10 Max:20
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_spot_summary_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_spot_summary_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_spot_summary_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Spot Assets Summary (For Master Account)  # noqa: E501

        Get BTC valued asset summary of subaccounts.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_spot_summary_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str email: Sub-account email
        :param int page: Default 1
        :param int size: Default:10 Max:20
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'email', 'page', 'size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_spot_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_spot_summary_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_spot_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/spotSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20086',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_status_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account's Status on Margin/Futures (For Master Account)  # noqa: E501

        - If no `email` sent, all sub-accounts' information will be returned.  Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_status_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str email: Sub-account email
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20093]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_status_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_status_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_status_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account's Status on Margin/Futures (For Master Account)  # noqa: E501

        - If no `email` sent, all sub-accounts' information will be returned.  Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_status_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str email: Sub-account email
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20093]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'email', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_status_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20093]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_sub_account_api_ip_restriction_get(self, email, sub_account_api_key, timestamp, signature, **kwargs):  # noqa: E501
        """Get IP Restriction for a Sub-account API Key (For Master Account)  # noqa: E501

        Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_sub_account_api_ip_restriction_get(email, sub_account_api_key, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str sub_account_api_key: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200118
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_sub_account_api_ip_restriction_get_with_http_info(email, sub_account_api_key, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_sub_account_api_ip_restriction_get_with_http_info(email, sub_account_api_key, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_sub_account_api_ip_restriction_get_with_http_info(self, email, sub_account_api_key, timestamp, signature, **kwargs):  # noqa: E501
        """Get IP Restriction for a Sub-account API Key (For Master Account)  # noqa: E501

        Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_sub_account_api_ip_restriction_get_with_http_info(email, sub_account_api_key, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str sub_account_api_key: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200118
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'sub_account_api_key', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_sub_account_api_ip_restriction_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_sub_account_api_ip_restriction_get`")  # noqa: E501
        # verify the required parameter 'sub_account_api_key' is set
        if ('sub_account_api_key' not in params or
                params['sub_account_api_key'] is None):
            raise ValueError("Missing the required parameter `sub_account_api_key` when calling `sapi_v1_sub_account_sub_account_api_ip_restriction_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_sub_account_api_ip_restriction_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_sub_account_api_ip_restriction_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'sub_account_api_key' in params:
            query_params.append(('subAccountApiKey', params['sub_account_api_key']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/subAccountApi/ipRestriction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200118',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete(self, email, sub_account_api_key, timestamp, signature, **kwargs):  # noqa: E501
        """Delete IP List for a Sub-account API Key (For Master Account)  # noqa: E501

        Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete(email, sub_account_api_key, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str sub_account_api_key: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str ip_address: Can be added in batches, separated by commas
        :param str third_party_name: third party IP list name
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200119
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete_with_http_info(email, sub_account_api_key, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete_with_http_info(email, sub_account_api_key, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete_with_http_info(self, email, sub_account_api_key, timestamp, signature, **kwargs):  # noqa: E501
        """Delete IP List for a Sub-account API Key (For Master Account)  # noqa: E501

        Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete_with_http_info(email, sub_account_api_key, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str sub_account_api_key: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str ip_address: Can be added in batches, separated by commas
        :param str third_party_name: third party IP list name
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200119
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'sub_account_api_key', 'timestamp', 'signature', 'ip_address', 'third_party_name', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete`")  # noqa: E501
        # verify the required parameter 'sub_account_api_key' is set
        if ('sub_account_api_key' not in params or
                params['sub_account_api_key'] is None):
            raise ValueError("Missing the required parameter `sub_account_api_key` when calling `sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_sub_account_api_ip_restriction_ip_list_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'sub_account_api_key' in params:
            query_params.append(('subAccountApiKey', params['sub_account_api_key']))  # noqa: E501
        if 'ip_address' in params:
            query_params.append(('ipAddress', params['ip_address']))  # noqa: E501
        if 'third_party_name' in params:
            query_params.append(('thirdPartyName', params['third_party_name']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200119',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_sub_transfer_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Spot Asset Transfer History (For Master Account)  # noqa: E501

        - fromEmail and toEmail cannot be sent at the same time. - Return fromEmail equal master account email by default.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_sub_transfer_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str from_email: Sub-account email
        :param str to_email: Sub-account email
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default 1
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20082]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_sub_transfer_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_sub_transfer_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_sub_transfer_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Spot Asset Transfer History (For Master Account)  # noqa: E501

        - fromEmail and toEmail cannot be sent at the same time. - Return fromEmail equal master account email by default.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_sub_transfer_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str from_email: Sub-account email
        :param str to_email: Sub-account email
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default 1
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20082]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'from_email', 'to_email', 'start_time', 'end_time', 'page', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_sub_transfer_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_sub_transfer_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_sub_transfer_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_email' in params:
            query_params.append(('fromEmail', params['from_email']))  # noqa: E501
        if 'to_email' in params:
            query_params.append(('toEmail', params['to_email']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/sub/transfer/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20082]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_transaction_statistics_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Sub-account Transaction Statistics (For Master Account)  # noqa: E501

        Query Sub-account Transaction statistics (For Master Account).  Weight(UID): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_transaction_statistics_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200120
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_transaction_statistics_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_transaction_statistics_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_transaction_statistics_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Sub-account Transaction Statistics (For Master Account)  # noqa: E501

        Query Sub-account Transaction statistics (For Master Account).  Weight(UID): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_transaction_statistics_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200120
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_transaction_statistics_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_sub_account_transaction_statistics_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_transaction_statistics_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_transaction_statistics_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/transaction-statistics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200120',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_transfer_sub_to_master_post(self, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Transfer to Master (For Sub-account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_transfer_sub_to_master_post(asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_transfer_sub_to_master_post_with_http_info(asset, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_transfer_sub_to_master_post_with_http_info(asset, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_transfer_sub_to_master_post_with_http_info(self, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Transfer to Master (For Sub-account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_transfer_sub_to_master_post_with_http_info(asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset', 'amount', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_transfer_sub_to_master_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_sub_account_transfer_sub_to_master_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_sub_account_transfer_sub_to_master_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_transfer_sub_to_master_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_transfer_sub_to_master_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/transfer/subToMaster', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200101',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_transfer_sub_to_sub_post(self, to_email, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Transfer to Sub-account of Same Master (For Sub-account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_transfer_sub_to_sub_post(to_email, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to_email: Recipient email (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_transfer_sub_to_sub_post_with_http_info(to_email, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_transfer_sub_to_sub_post_with_http_info(to_email, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_transfer_sub_to_sub_post_with_http_info(self, to_email, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Transfer to Sub-account of Same Master (For Sub-account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_transfer_sub_to_sub_post_with_http_info(to_email, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str to_email: Recipient email (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['to_email', 'asset', 'amount', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_transfer_sub_to_sub_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'to_email' is set
        if ('to_email' not in params or
                params['to_email'] is None):
            raise ValueError("Missing the required parameter `to_email` when calling `sapi_v1_sub_account_transfer_sub_to_sub_post`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_sub_account_transfer_sub_to_sub_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_sub_account_transfer_sub_to_sub_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_transfer_sub_to_sub_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_transfer_sub_to_sub_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'to_email' in params:
            query_params.append(('toEmail', params['to_email']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/transfer/subToSub', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200101',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_transfer_sub_user_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Transfer History (For Sub-account)  # noqa: E501

        - If `type` is not sent, the records of type 2: transfer out will be returned by default. - If `startTime` and `endTime` are not sent, the recent 30-day data will be returned.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_transfer_sub_user_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param int type: * `1` - transfer in * `2` - transfer out
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200102]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_transfer_sub_user_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_transfer_sub_user_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_transfer_sub_user_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Transfer History (For Sub-account)  # noqa: E501

        - If `type` is not sent, the records of type 2: transfer out will be returned by default. - If `startTime` and `endTime` are not sent, the recent 30-day data will be returned.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_transfer_sub_user_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param int type: * `1` - transfer in * `2` - transfer out
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200102]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'asset', 'type', 'start_time', 'end_time', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_transfer_sub_user_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_transfer_sub_user_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_transfer_sub_user_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/transfer/subUserHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200102]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_universal_transfer_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Universal Transfer History (For Master Account)  # noqa: E501

        - `fromEmail` and `toEmail` cannot be sent at the same time. - Return `fromEmail` equal master account email by default. - The query time period must be less then 30 days. - If startTime and endTime not sent, return records of the last 30 days by default.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_universal_transfer_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str from_email: Sub-account email
        :param str to_email: Sub-account email
        :param str client_tran_id:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default 500, Max 500
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200103]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_universal_transfer_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_universal_transfer_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_universal_transfer_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Universal Transfer History (For Master Account)  # noqa: E501

        - `fromEmail` and `toEmail` cannot be sent at the same time. - Return `fromEmail` equal master account email by default. - The query time period must be less then 30 days. - If startTime and endTime not sent, return records of the last 30 days by default.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_universal_transfer_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str from_email: Sub-account email
        :param str to_email: Sub-account email
        :param str client_tran_id:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param int limit: Default 500, Max 500
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200103]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'from_email', 'to_email', 'client_tran_id', 'start_time', 'end_time', 'page', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_universal_transfer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_universal_transfer_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_universal_transfer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_email' in params:
            query_params.append(('fromEmail', params['from_email']))  # noqa: E501
        if 'to_email' in params:
            query_params.append(('toEmail', params['to_email']))  # noqa: E501
        if 'client_tran_id' in params:
            query_params.append(('clientTranId', params['client_tran_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/universalTransfer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200103]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_universal_transfer_post(self, from_account_type, to_account_type, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Universal Transfer (For Master Account)  # noqa: E501

        - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account by default if fromEmail is not sent. - Transfer to master account by default if toEmail is not sent. - Supported transfer scenarios:   - Master account SPOT transfer to sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN   - Sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN transfer to master account SPOT   - Transfer between two sub-account SPOT accounts  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_universal_transfer_post(from_account_type, to_account_type, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_account_type: (required)
        :param str to_account_type: (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str from_email: Sub-account email
        :param str to_email: Sub-account email
        :param str client_tran_id:
        :param str symbol: Only supported under ISOLATED_MARGIN type
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200104
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_universal_transfer_post_with_http_info(from_account_type, to_account_type, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_universal_transfer_post_with_http_info(from_account_type, to_account_type, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_universal_transfer_post_with_http_info(self, from_account_type, to_account_type, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Universal Transfer (For Master Account)  # noqa: E501

        - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account by default if fromEmail is not sent. - Transfer to master account by default if toEmail is not sent. - Supported transfer scenarios:   - Master account SPOT transfer to sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN   - Sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN transfer to master account SPOT   - Transfer between two sub-account SPOT accounts  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_universal_transfer_post_with_http_info(from_account_type, to_account_type, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_account_type: (required)
        :param str to_account_type: (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str from_email: Sub-account email
        :param str to_email: Sub-account email
        :param str client_tran_id:
        :param str symbol: Only supported under ISOLATED_MARGIN type
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200104
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_account_type', 'to_account_type', 'asset', 'amount', 'timestamp', 'signature', 'from_email', 'to_email', 'client_tran_id', 'symbol', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_universal_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_account_type' is set
        if ('from_account_type' not in params or
                params['from_account_type'] is None):
            raise ValueError("Missing the required parameter `from_account_type` when calling `sapi_v1_sub_account_universal_transfer_post`")  # noqa: E501
        # verify the required parameter 'to_account_type' is set
        if ('to_account_type' not in params or
                params['to_account_type'] is None):
            raise ValueError("Missing the required parameter `to_account_type` when calling `sapi_v1_sub_account_universal_transfer_post`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_sub_account_universal_transfer_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_sub_account_universal_transfer_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_universal_transfer_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_universal_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_email' in params:
            query_params.append(('fromEmail', params['from_email']))  # noqa: E501
        if 'to_email' in params:
            query_params.append(('toEmail', params['to_email']))  # noqa: E501
        if 'from_account_type' in params:
            query_params.append(('fromAccountType', params['from_account_type']))  # noqa: E501
        if 'to_account_type' in params:
            query_params.append(('toAccountType', params['to_account_type']))  # noqa: E501
        if 'client_tran_id' in params:
            query_params.append(('clientTranId', params['client_tran_id']))  # noqa: E501
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/universalTransfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200104',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_sub_account_virtual_sub_account_post(self, sub_account_string, timestamp, signature, **kwargs):  # noqa: E501
        """Create a Virtual Sub-account(For Master Account)  # noqa: E501

        - This request will generate a virtual sub account under your master account. - You need to enable \"trade\" option for the api key which requests this endpoint.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_virtual_sub_account_post(sub_account_string, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_account_string: Please input a string. We will create a virtual email using that string for you to register (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20080
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_sub_account_virtual_sub_account_post_with_http_info(sub_account_string, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_sub_account_virtual_sub_account_post_with_http_info(sub_account_string, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_sub_account_virtual_sub_account_post_with_http_info(self, sub_account_string, timestamp, signature, **kwargs):  # noqa: E501
        """Create a Virtual Sub-account(For Master Account)  # noqa: E501

        - This request will generate a virtual sub account under your master account. - You need to enable \"trade\" option for the api key which requests this endpoint.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_sub_account_virtual_sub_account_post_with_http_info(sub_account_string, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sub_account_string: Please input a string. We will create a virtual email using that string for you to register (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20080
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_account_string', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_sub_account_virtual_sub_account_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_account_string' is set
        if ('sub_account_string' not in params or
                params['sub_account_string'] is None):
            raise ValueError("Missing the required parameter `sub_account_string` when calling `sapi_v1_sub_account_virtual_sub_account_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_sub_account_virtual_sub_account_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_sub_account_virtual_sub_account_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sub_account_string' in params:
            query_params.append(('subAccountString', params['sub_account_string']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/sub-account/virtualSubAccount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20080',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v2_sub_account_futures_account_get(self, email, futures_type, timestamp, signature, **kwargs):  # noqa: E501
        """Detail on Sub-account's Futures Account V2 (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v2_sub_account_futures_account_get(email, futures_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int futures_type: * `1` - USDT Margined Futures * `2` - COIN Margined Futures (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200105
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v2_sub_account_futures_account_get_with_http_info(email, futures_type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v2_sub_account_futures_account_get_with_http_info(email, futures_type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v2_sub_account_futures_account_get_with_http_info(self, email, futures_type, timestamp, signature, **kwargs):  # noqa: E501
        """Detail on Sub-account's Futures Account V2 (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v2_sub_account_futures_account_get_with_http_info(email, futures_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int futures_type: * `1` - USDT Margined Futures * `2` - COIN Margined Futures (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200105
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'futures_type', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v2_sub_account_futures_account_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v2_sub_account_futures_account_get`")  # noqa: E501
        # verify the required parameter 'futures_type' is set
        if ('futures_type' not in params or
                params['futures_type'] is None):
            raise ValueError("Missing the required parameter `futures_type` when calling `sapi_v2_sub_account_futures_account_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v2_sub_account_futures_account_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v2_sub_account_futures_account_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'futures_type' in params:
            query_params.append(('futuresType', params['futures_type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v2/sub-account/futures/account', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200105',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v2_sub_account_futures_account_summary_get(self, futures_type, timestamp, signature, **kwargs):  # noqa: E501
        """Summary of Sub-account's Futures Account V2 (For Master Account)  # noqa: E501

        Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v2_sub_account_futures_account_summary_get(futures_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int futures_type: * `1` - USDT Margined Futures * `2` - COIN Margined Futures (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page: Default 1
        :param int limit: Default 10, Max 20
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200106
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v2_sub_account_futures_account_summary_get_with_http_info(futures_type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v2_sub_account_futures_account_summary_get_with_http_info(futures_type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v2_sub_account_futures_account_summary_get_with_http_info(self, futures_type, timestamp, signature, **kwargs):  # noqa: E501
        """Summary of Sub-account's Futures Account V2 (For Master Account)  # noqa: E501

        Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v2_sub_account_futures_account_summary_get_with_http_info(futures_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int futures_type: * `1` - USDT Margined Futures * `2` - COIN Margined Futures (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page: Default 1
        :param int limit: Default 10, Max 20
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200106
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['futures_type', 'timestamp', 'signature', 'page', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v2_sub_account_futures_account_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'futures_type' is set
        if ('futures_type' not in params or
                params['futures_type'] is None):
            raise ValueError("Missing the required parameter `futures_type` when calling `sapi_v2_sub_account_futures_account_summary_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v2_sub_account_futures_account_summary_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v2_sub_account_futures_account_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'futures_type' in params:
            query_params.append(('futuresType', params['futures_type']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v2/sub-account/futures/accountSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200106',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v2_sub_account_futures_position_risk_get(self, email, futures_type, timestamp, signature, **kwargs):  # noqa: E501
        """Futures Position-Risk of Sub-account V2 (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v2_sub_account_futures_position_risk_get(email, futures_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int futures_type: * `1` - USDT Margined Futures * `2` - COIN Margined Futures (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200107
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v2_sub_account_futures_position_risk_get_with_http_info(email, futures_type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v2_sub_account_futures_position_risk_get_with_http_info(email, futures_type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v2_sub_account_futures_position_risk_get_with_http_info(self, email, futures_type, timestamp, signature, **kwargs):  # noqa: E501
        """Futures Position-Risk of Sub-account V2 (For Master Account)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v2_sub_account_futures_position_risk_get_with_http_info(email, futures_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int futures_type: * `1` - USDT Margined Futures * `2` - COIN Margined Futures (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200107
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'futures_type', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v2_sub_account_futures_position_risk_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v2_sub_account_futures_position_risk_get`")  # noqa: E501
        # verify the required parameter 'futures_type' is set
        if ('futures_type' not in params or
                params['futures_type'] is None):
            raise ValueError("Missing the required parameter `futures_type` when calling `sapi_v2_sub_account_futures_position_risk_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v2_sub_account_futures_position_risk_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v2_sub_account_futures_position_risk_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'futures_type' in params:
            query_params.append(('futuresType', params['futures_type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v2/sub-account/futures/positionRisk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200107',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v2_sub_account_sub_account_api_ip_restriction_post(self, email, sub_account_api_key, status, timestamp, signature, **kwargs):  # noqa: E501
        """Update IP Restriction for Sub-Account API key (For Master Account)  # noqa: E501

        Update IP Restriction for Sub-Account API key  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v2_sub_account_sub_account_api_ip_restriction_post(email, sub_account_api_key, status, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str sub_account_api_key: (required)
        :param str status: IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only. 3 = Restrict access to users' trusted third party IPs only (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str third_party_name: third party IP list name
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200122
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v2_sub_account_sub_account_api_ip_restriction_post_with_http_info(email, sub_account_api_key, status, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v2_sub_account_sub_account_api_ip_restriction_post_with_http_info(email, sub_account_api_key, status, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v2_sub_account_sub_account_api_ip_restriction_post_with_http_info(self, email, sub_account_api_key, status, timestamp, signature, **kwargs):  # noqa: E501
        """Update IP Restriction for Sub-Account API key (For Master Account)  # noqa: E501

        Update IP Restriction for Sub-Account API key  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v2_sub_account_sub_account_api_ip_restriction_post_with_http_info(email, sub_account_api_key, status, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param str sub_account_api_key: (required)
        :param str status: IP Restriction status. 1 = IP Unrestricted. 2 = Restrict access to trusted IPs only. 3 = Restrict access to users' trusted third party IPs only (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str third_party_name: third party IP list name
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200122
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'sub_account_api_key', 'status', 'timestamp', 'signature', 'third_party_name', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v2_sub_account_sub_account_api_ip_restriction_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v2_sub_account_sub_account_api_ip_restriction_post`")  # noqa: E501
        # verify the required parameter 'sub_account_api_key' is set
        if ('sub_account_api_key' not in params or
                params['sub_account_api_key'] is None):
            raise ValueError("Missing the required parameter `sub_account_api_key` when calling `sapi_v2_sub_account_sub_account_api_ip_restriction_post`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `sapi_v2_sub_account_sub_account_api_ip_restriction_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v2_sub_account_sub_account_api_ip_restriction_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v2_sub_account_sub_account_api_ip_restriction_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'sub_account_api_key' in params:
            query_params.append(('subAccountApiKey', params['sub_account_api_key']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'third_party_name' in params:
            query_params.append(('thirdPartyName', params['third_party_name']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v2/sub-account/subAccountApi/ipRestriction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200122',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v3_sub_account_assets_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Assets (For Master Account)  # noqa: E501

        Fetch sub-account assets  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v3_sub_account_assets_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v3_sub_account_assets_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v3_sub_account_assets_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v3_sub_account_assets_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Sub-account Assets (For Master Account)  # noqa: E501

        Fetch sub-account assets  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v3_sub_account_assets_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Sub-account email (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v3_sub_account_assets_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v3_sub_account_assets_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v3_sub_account_assets_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v3_sub_account_assets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v3/sub-account/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20085',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v4_sub_account_assets_get(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Sub-account Assets (For Master Account)  # noqa: E501

        Fetch sub-account assets  Weight(UID): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v4_sub_account_assets_get(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200123
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v4_sub_account_assets_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v4_sub_account_assets_get_with_http_info(email, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v4_sub_account_assets_get_with_http_info(self, email, timestamp, signature, **kwargs):  # noqa: E501
        """Query Sub-account Assets (For Master Account)  # noqa: E501

        Fetch sub-account assets  Weight(UID): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v4_sub_account_assets_get_with_http_info(email, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200123
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v4_sub_account_assets_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v4_sub_account_assets_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v4_sub_account_assets_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v4_sub_account_assets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v4/sub-account/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200123',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
