# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class SpotAlgoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_algo_spot_historical_orders_get(self, symbol, side, timestamp, signature, **kwargs):  # noqa: E501
        """Query Historical Algo Orders  # noqa: E501

        Get all historical SPOT TWAP orders  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_spot_historical_orders_get(symbol, side, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading symbol, e.g. BNBUSDT (required)
        :param str side: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200161
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_spot_historical_orders_get_with_http_info(symbol, side, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_spot_historical_orders_get_with_http_info(symbol, side, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_spot_historical_orders_get_with_http_info(self, symbol, side, timestamp, signature, **kwargs):  # noqa: E501
        """Query Historical Algo Orders  # noqa: E501

        Get all historical SPOT TWAP orders  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_spot_historical_orders_get_with_http_info(symbol, side, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading symbol, e.g. BNBUSDT (required)
        :param str side: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int page: Default 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200161
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'side', 'timestamp', 'signature', 'start_time', 'end_time', 'page', 'page_size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_spot_historical_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `sapi_v1_algo_spot_historical_orders_get`")  # noqa: E501
        # verify the required parameter 'side' is set
        if ('side' not in params or
                params['side'] is None):
            raise ValueError("Missing the required parameter `side` when calling `sapi_v1_algo_spot_historical_orders_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_spot_historical_orders_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_spot_historical_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'side' in params:
            query_params.append(('side', params['side']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/spot/historicalOrders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200161',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_algo_spot_new_order_twap_post(self, symbol, side, quantity, duration, timestamp, signature, **kwargs):  # noqa: E501
        """Time-Weighted Average Price (Twap) New Order  # noqa: E501

        Place a new spot TWAP order with Algo service.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_spot_new_order_twap_post(symbol, side, quantity, duration, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading symbol, e.g. BNBUSDT (required)
        :param str side: (required)
        :param float quantity: (required)
        :param int duration: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str client_algo_id:
        :param float limit_price:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200158
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_spot_new_order_twap_post_with_http_info(symbol, side, quantity, duration, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_spot_new_order_twap_post_with_http_info(symbol, side, quantity, duration, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_spot_new_order_twap_post_with_http_info(self, symbol, side, quantity, duration, timestamp, signature, **kwargs):  # noqa: E501
        """Time-Weighted Average Price (Twap) New Order  # noqa: E501

        Place a new spot TWAP order with Algo service.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_spot_new_order_twap_post_with_http_info(symbol, side, quantity, duration, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Trading symbol, e.g. BNBUSDT (required)
        :param str side: (required)
        :param float quantity: (required)
        :param int duration: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str client_algo_id:
        :param float limit_price:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200158
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', 'side', 'quantity', 'duration', 'timestamp', 'signature', 'client_algo_id', 'limit_price', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_spot_new_order_twap_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `sapi_v1_algo_spot_new_order_twap_post`")  # noqa: E501
        # verify the required parameter 'side' is set
        if ('side' not in params or
                params['side'] is None):
            raise ValueError("Missing the required parameter `side` when calling `sapi_v1_algo_spot_new_order_twap_post`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if ('quantity' not in params or
                params['quantity'] is None):
            raise ValueError("Missing the required parameter `quantity` when calling `sapi_v1_algo_spot_new_order_twap_post`")  # noqa: E501
        # verify the required parameter 'duration' is set
        if ('duration' not in params or
                params['duration'] is None):
            raise ValueError("Missing the required parameter `duration` when calling `sapi_v1_algo_spot_new_order_twap_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_spot_new_order_twap_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_spot_new_order_twap_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'side' in params:
            query_params.append(('side', params['side']))  # noqa: E501
        if 'quantity' in params:
            query_params.append(('quantity', params['quantity']))  # noqa: E501
        if 'duration' in params:
            query_params.append(('duration', params['duration']))  # noqa: E501
        if 'client_algo_id' in params:
            query_params.append(('clientAlgoId', params['client_algo_id']))  # noqa: E501
        if 'limit_price' in params:
            query_params.append(('limitPrice', params['limit_price']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/spot/newOrderTwap', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200158',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_algo_spot_open_orders_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query Current Algo Open Orders  # noqa: E501

        Get all open SPOT TWAP orders  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_spot_open_orders_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200160
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_spot_open_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_spot_open_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_spot_open_orders_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query Current Algo Open Orders  # noqa: E501

        Get all open SPOT TWAP orders  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_spot_open_orders_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200160
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_spot_open_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_spot_open_orders_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_spot_open_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/spot/openOrders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200160',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_algo_spot_order_delete(self, algo_id, timestamp, signature, **kwargs):  # noqa: E501
        """Cancel Algo Order  # noqa: E501

        Cancel an open TWAP order  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_spot_order_delete(algo_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int algo_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200159
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_spot_order_delete_with_http_info(algo_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_spot_order_delete_with_http_info(algo_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_spot_order_delete_with_http_info(self, algo_id, timestamp, signature, **kwargs):  # noqa: E501
        """Cancel Algo Order  # noqa: E501

        Cancel an open TWAP order  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_spot_order_delete_with_http_info(algo_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int algo_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200159
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo_id', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_spot_order_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo_id' is set
        if ('algo_id' not in params or
                params['algo_id'] is None):
            raise ValueError("Missing the required parameter `algo_id` when calling `sapi_v1_algo_spot_order_delete`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_spot_order_delete`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_spot_order_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo_id' in params:
            query_params.append(('algoId', params['algo_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/spot/order', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200159',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_algo_spot_sub_orders_get(self, algo_id, timestamp, signature, **kwargs):  # noqa: E501
        """Query Sub Orders  # noqa: E501

        Get respective sub orders for a specified algoId  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_spot_sub_orders_get(algo_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int algo_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page: Default 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200162
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_algo_spot_sub_orders_get_with_http_info(algo_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_algo_spot_sub_orders_get_with_http_info(algo_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_algo_spot_sub_orders_get_with_http_info(self, algo_id, timestamp, signature, **kwargs):  # noqa: E501
        """Query Sub Orders  # noqa: E501

        Get respective sub orders for a specified algoId  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_algo_spot_sub_orders_get_with_http_info(algo_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int algo_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int page: Default 1
        :param str page_size: Number of pages, minimum 10, maximum 200
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200162
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['algo_id', 'timestamp', 'signature', 'page', 'page_size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_algo_spot_sub_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'algo_id' is set
        if ('algo_id' not in params or
                params['algo_id'] is None):
            raise ValueError("Missing the required parameter `algo_id` when calling `sapi_v1_algo_spot_sub_orders_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_algo_spot_sub_orders_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_algo_spot_sub_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'algo_id' in params:
            query_params.append(('algoId', params['algo_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/algo/spot/subOrders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200162',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
