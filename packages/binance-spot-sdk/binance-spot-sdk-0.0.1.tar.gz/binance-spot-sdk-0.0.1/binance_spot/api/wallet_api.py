# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class WalletApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_account_api_restrictions_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get API Key Permission (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_api_restrictions_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20078
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_account_api_restrictions_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_account_api_restrictions_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_account_api_restrictions_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get API Key Permission (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_api_restrictions_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20078
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_account_api_restrictions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_account_api_restrictions_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_account_api_restrictions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/account/apiRestrictions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20078',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_account_api_trading_status_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Account API Trading Status (USER_DATA)  # noqa: E501

        Fetch account API trading status with details.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_api_trading_status_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_account_api_trading_status_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_account_api_trading_status_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_account_api_trading_status_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Account API Trading Status (USER_DATA)  # noqa: E501

        Fetch account API trading status with details.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_api_trading_status_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_account_api_trading_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_account_api_trading_status_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_account_api_trading_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/account/apiTradingStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20064',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_account_disable_fast_withdraw_switch_post(self, timestamp, signature, **kwargs):  # noqa: E501
        """Disable Fast Withdraw Switch (USER_DATA)  # noqa: E501

        - This request will disable fastwithdraw switch under your account. - You need to enable \"trade\" option for the api key which requests this endpoint.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_disable_fast_withdraw_switch_post(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_account_disable_fast_withdraw_switch_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_account_disable_fast_withdraw_switch_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_account_disable_fast_withdraw_switch_post_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Disable Fast Withdraw Switch (USER_DATA)  # noqa: E501

        - This request will disable fastwithdraw switch under your account. - You need to enable \"trade\" option for the api key which requests this endpoint.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_disable_fast_withdraw_switch_post_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_account_disable_fast_withdraw_switch_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_account_disable_fast_withdraw_switch_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_account_disable_fast_withdraw_switch_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/account/disableFastWithdrawSwitch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_account_enable_fast_withdraw_switch_post(self, timestamp, signature, **kwargs):  # noqa: E501
        """Enable Fast Withdraw Switch (USER_DATA)  # noqa: E501

        - This request will enable fastwithdraw switch under your account. You need to enable \"trade\" option for the api key which requests this endpoint. - When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_enable_fast_withdraw_switch_post(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_account_enable_fast_withdraw_switch_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_account_enable_fast_withdraw_switch_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_account_enable_fast_withdraw_switch_post_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Enable Fast Withdraw Switch (USER_DATA)  # noqa: E501

        - This request will enable fastwithdraw switch under your account. You need to enable \"trade\" option for the api key which requests this endpoint. - When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly. There is no on-chain transaction, no transaction ID and no withdrawal fee.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_enable_fast_withdraw_switch_post_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_account_enable_fast_withdraw_switch_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_account_enable_fast_withdraw_switch_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_account_enable_fast_withdraw_switch_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/account/enableFastWithdrawSwitch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_account_snapshot_get(self, type, timestamp, signature, **kwargs):  # noqa: E501
        """Daily Account Snapshot (USER_DATA)  # noqa: E501

        - The query time period must be less than 30 days - Support query within the last one month only - If startTimeand endTime not sent, return records of the last 7 days by default  Weight(IP): 2400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_snapshot_get(type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_account_snapshot_get_with_http_info(type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_account_snapshot_get_with_http_info(type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_account_snapshot_get_with_http_info(self, type, timestamp, signature, **kwargs):  # noqa: E501
        """Daily Account Snapshot (USER_DATA)  # noqa: E501

        - The query time period must be less than 30 days - Support query within the last one month only - If startTimeand endTime not sent, return records of the last 7 days by default  Weight(IP): 2400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_snapshot_get_with_http_info(type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20058
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'timestamp', 'signature', 'start_time', 'end_time', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_account_snapshot_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `sapi_v1_account_snapshot_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_account_snapshot_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_account_snapshot_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/accountSnapshot', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20058',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_account_status_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Account Status (USER_DATA)  # noqa: E501

        Fetch account status detail.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_status_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_account_status_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_account_status_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_account_status_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Account Status (USER_DATA)  # noqa: E501

        Fetch account status detail.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_account_status_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_account_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_account_status_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_account_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/account/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20063',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_asset_detail_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Asset Detail (USER_DATA)  # noqa: E501

        Fetch details of assets supported on Binance.  - Please get network and other deposit or withdraw details from `GET /sapi/v1/capital/config/getall`.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_asset_detail_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_asset_detail_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_asset_detail_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_asset_detail_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Asset Detail (USER_DATA)  # noqa: E501

        Fetch details of assets supported on Binance.  - Please get network and other deposit or withdraw details from `GET /sapi/v1/capital/config/getall`.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_asset_detail_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'asset', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_asset_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_asset_detail_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_asset_detail_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/assetDetail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20069',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_asset_dividend_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Asset Dividend Record (USER_DATA)  # noqa: E501

        Query asset Dividend Record  Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_asset_dividend_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_asset_dividend_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_asset_dividend_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_asset_dividend_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Asset Dividend Record (USER_DATA)  # noqa: E501

        Query asset Dividend Record  Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_asset_dividend_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'asset', 'start_time', 'end_time', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_asset_dividend_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_asset_dividend_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_asset_dividend_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/assetDividend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20068',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_convert_transfer_post(self, client_tran_id, asset, amount, target_asset, timestamp, signature, **kwargs):  # noqa: E501
        """Convert Transfer (USER_DATA)  # noqa: E501

        Convert transfer, convert between BUSD and stablecoins. If the clientId has been used before, will not do the convert transfer, the original transfer will be returned.  Weight(UID): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_convert_transfer_post(client_tran_id, asset, amount, target_asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_tran_id: The unique flag, the min length is 20 (required)
        :param str asset: (required)
        :param float amount: (required)
        :param str target_asset: Target asset you want to convert (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_convert_transfer_post_with_http_info(client_tran_id, asset, amount, target_asset, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_convert_transfer_post_with_http_info(client_tran_id, asset, amount, target_asset, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_convert_transfer_post_with_http_info(self, client_tran_id, asset, amount, target_asset, timestamp, signature, **kwargs):  # noqa: E501
        """Convert Transfer (USER_DATA)  # noqa: E501

        Convert transfer, convert between BUSD and stablecoins. If the clientId has been used before, will not do the convert transfer, the original transfer will be returned.  Weight(UID): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_convert_transfer_post_with_http_info(client_tran_id, asset, amount, target_asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_tran_id: The unique flag, the min length is 20 (required)
        :param str asset: (required)
        :param float amount: (required)
        :param str target_asset: Target asset you want to convert (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_tran_id', 'asset', 'amount', 'target_asset', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_convert_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_tran_id' is set
        if ('client_tran_id' not in params or
                params['client_tran_id'] is None):
            raise ValueError("Missing the required parameter `client_tran_id` when calling `sapi_v1_asset_convert_transfer_post`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_asset_convert_transfer_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_asset_convert_transfer_post`")  # noqa: E501
        # verify the required parameter 'target_asset' is set
        if ('target_asset' not in params or
                params['target_asset'] is None):
            raise ValueError("Missing the required parameter `target_asset` when calling `sapi_v1_asset_convert_transfer_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_convert_transfer_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_convert_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_tran_id' in params:
            query_params.append(('clientTranId', params['client_tran_id']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'target_asset' in params:
            query_params.append(('targetAsset', params['target_asset']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/convert-transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20075',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_convert_transfer_query_by_page_get(self, start_time, end_time, timestamp, signature, **kwargs):  # noqa: E501
        """Query Convert Transfer (USER_DATA)  # noqa: E501

        Weight(UID): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_convert_transfer_query_by_page_get(start_time, end_time, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_time: UTC timestamp in ms (required)
        :param int end_time: UTC timestamp in ms (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int tran_id: The transaction id
        :param str asset: If it is blank, we will match deducted asset and target asset.
        :param str account_type: MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_convert_transfer_query_by_page_get_with_http_info(start_time, end_time, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_convert_transfer_query_by_page_get_with_http_info(start_time, end_time, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_convert_transfer_query_by_page_get_with_http_info(self, start_time, end_time, timestamp, signature, **kwargs):  # noqa: E501
        """Query Convert Transfer (USER_DATA)  # noqa: E501

        Weight(UID): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_convert_transfer_query_by_page_get_with_http_info(start_time, end_time, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_time: UTC timestamp in ms (required)
        :param int end_time: UTC timestamp in ms (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int tran_id: The transaction id
        :param str asset: If it is blank, we will match deducted asset and target asset.
        :param str account_type: MAIN: main account. CARD: funding account. If it is blank, we will query spot and card wallet, otherwise, we just query the corresponding wallet
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_time', 'end_time', 'timestamp', 'signature', 'tran_id', 'asset', 'account_type', 'current', 'size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_convert_transfer_query_by_page_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `sapi_v1_asset_convert_transfer_query_by_page_get`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `sapi_v1_asset_convert_transfer_query_by_page_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_convert_transfer_query_by_page_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_convert_transfer_query_by_page_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tran_id' in params:
            query_params.append(('tranId', params['tran_id']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'account_type' in params:
            query_params.append(('accountType', params['account_type']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/convert-transfer/queryByPage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20076',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_custody_transfer_history_get(self, email, start_time, end_time, asset, timestamp, signature, **kwargs):  # noqa: E501
        """Query User Delegation History(For Master Account) (USER_DATA)  # noqa: E501

        Query User Delegation History  Weight(IP): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_custody_transfer_history_get(email, start_time, end_time, asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int start_time: (required)
        :param int end_time: (required)
        :param str asset: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str type:
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20091
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_custody_transfer_history_get_with_http_info(email, start_time, end_time, asset, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_custody_transfer_history_get_with_http_info(email, start_time, end_time, asset, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_custody_transfer_history_get_with_http_info(self, email, start_time, end_time, asset, timestamp, signature, **kwargs):  # noqa: E501
        """Query User Delegation History(For Master Account) (USER_DATA)  # noqa: E501

        Query User Delegation History  Weight(IP): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_custody_transfer_history_get_with_http_info(email, start_time, end_time, asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: (required)
        :param int start_time: (required)
        :param int end_time: (required)
        :param str asset: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str type:
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20091
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email', 'start_time', 'end_time', 'asset', 'timestamp', 'signature', 'type', 'current', 'size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_custody_transfer_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `sapi_v1_asset_custody_transfer_history_get`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `sapi_v1_asset_custody_transfer_history_get`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `sapi_v1_asset_custody_transfer_history_get`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_asset_custody_transfer_history_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_custody_transfer_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_custody_transfer_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/custody/transfer-history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20091',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_dribblet_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """DustLog(USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_dribblet_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_dribblet_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_dribblet_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_dribblet_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """DustLog(USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_dribblet_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'start_time', 'end_time', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_dribblet_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_dribblet_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_dribblet_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/dribblet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20065',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_dust_btc_post(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Assets That Can Be Converted Into BNB (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_dust_btc_post(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_dust_btc_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_dust_btc_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_dust_btc_post_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Assets That Can Be Converted Into BNB (USER_DATA)  # noqa: E501

        Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_dust_btc_post_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20066
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_dust_btc_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_dust_btc_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_dust_btc_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/dust-btc', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20066',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_dust_post(self, asset, timestamp, signature, **kwargs):  # noqa: E501
        """Dust Transfer (USER_DATA)  # noqa: E501

        Convert dust assets to BNB.  Weight(UID): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_dust_post(asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] asset: The asset being converted. For example, asset=BTC&asset=USDT (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_dust_post_with_http_info(asset, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_dust_post_with_http_info(asset, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_dust_post_with_http_info(self, asset, timestamp, signature, **kwargs):  # noqa: E501
        """Dust Transfer (USER_DATA)  # noqa: E501

        Convert dust assets to BNB.  Weight(UID): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_dust_post_with_http_info(asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] asset: The asset being converted. For example, asset=BTC&asset=USDT (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20067
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_dust_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_asset_dust_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_dust_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_dust_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
            collection_formats['asset'] = 'multi'  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/dust', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20067',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_get_funding_asset_post(self, timestamp, signature, **kwargs):  # noqa: E501
        """Funding Wallet (USER_DATA)  # noqa: E501

        - Currently supports querying the following business assets：Binance Pay, Binance Card, Binance Gift Card, Stock Token  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_get_funding_asset_post(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param str need_btc_valuation:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20073]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_get_funding_asset_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_get_funding_asset_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_get_funding_asset_post_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Funding Wallet (USER_DATA)  # noqa: E501

        - Currently supports querying the following business assets：Binance Pay, Binance Card, Binance Gift Card, Stock Token  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_get_funding_asset_post_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param str need_btc_valuation:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20073]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'asset', 'need_btc_valuation', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_get_funding_asset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_get_funding_asset_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_get_funding_asset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'need_btc_valuation' in params:
            query_params.append(('needBtcValuation', params['need_btc_valuation']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/get-funding-asset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20073]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get(self, start_time, end_time, timestamp, signature, **kwargs):  # noqa: E501
        """Get Cloud-Mining payment and refund history (USER_DATA)  # noqa: E501

        The query of Cloud-Mining payment and refund history  Weight(UID): 600  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get(start_time, end_time, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_time: UTC timestamp in ms (required)
        :param int end_time: UTC timestamp in ms (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int tran_id: The transaction id
        :param str client_tran_id: The unique flag
        :param str asset: If it is blank, we will query all assets
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get_with_http_info(start_time, end_time, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get_with_http_info(start_time, end_time, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get_with_http_info(self, start_time, end_time, timestamp, signature, **kwargs):  # noqa: E501
        """Get Cloud-Mining payment and refund history (USER_DATA)  # noqa: E501

        The query of Cloud-Mining payment and refund history  Weight(UID): 600  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get_with_http_info(start_time, end_time, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_time: UTC timestamp in ms (required)
        :param int end_time: UTC timestamp in ms (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int tran_id: The transaction id
        :param str client_tran_id: The unique flag
        :param str asset: If it is blank, we will query all assets
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_time', 'end_time', 'timestamp', 'signature', 'tran_id', 'client_tran_id', 'asset', 'current', 'size', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_ledger_transfer_cloud_mining_query_by_page_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tran_id' in params:
            query_params.append(('tranId', params['tran_id']))  # noqa: E501
        if 'client_tran_id' in params:
            query_params.append(('clientTranId', params['client_tran_id']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_trade_fee_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Trade Fee (USER_DATA)  # noqa: E501

        Fetch trade fee  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_trade_fee_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str symbol: Trading symbol, e.g. BNBUSDT
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20070]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_trade_fee_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_trade_fee_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_trade_fee_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Trade Fee (USER_DATA)  # noqa: E501

        Fetch trade fee  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_trade_fee_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str symbol: Trading symbol, e.g. BNBUSDT
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20070]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'symbol', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_trade_fee_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_trade_fee_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_trade_fee_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'symbol' in params:
            query_params.append(('symbol', params['symbol']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/tradeFee', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20070]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_transfer_get(self, type, timestamp, signature, **kwargs):  # noqa: E501
        """Query User Universal Transfer History (USER_DATA)  # noqa: E501

        - `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN - `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN - Support query within the last 6 months only - If `startTime` and `endTime` not sent, return records of the last 7 days by default  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_transfer_get(type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Universal transfer type (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param str from_symbol: Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
        :param str to_symbol: Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_transfer_get_with_http_info(type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_transfer_get_with_http_info(type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_transfer_get_with_http_info(self, type, timestamp, signature, **kwargs):  # noqa: E501
        """Query User Universal Transfer History (USER_DATA)  # noqa: E501

        - `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN - `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN - Support query within the last 6 months only - If `startTime` and `endTime` not sent, return records of the last 7 days by default  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_transfer_get_with_http_info(type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Universal transfer type (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int size: Default:10 Max:100
        :param str from_symbol: Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
        :param str to_symbol: Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'timestamp', 'signature', 'start_time', 'end_time', 'current', 'size', 'from_symbol', 'to_symbol', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_transfer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `sapi_v1_asset_transfer_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_transfer_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_transfer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'from_symbol' in params:
            query_params.append(('fromSymbol', params['from_symbol']))  # noqa: E501
        if 'to_symbol' in params:
            query_params.append(('toSymbol', params['to_symbol']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/transfer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_transfer_post(self, type, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """User Universal Transfer (USER_DATA)  # noqa: E501

        You need to enable `Permits Universal Transfer` option for the api key which requests this endpoint.  - `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN - `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN  ENUM of transfer types:   - MAIN_UMFUTURE Spot account transfer to USDⓈ-M Futures account   - MAIN_CMFUTURE Spot account transfer to COIN-M Futures account   - MAIN_MARGIN Spot account transfer to Margin(cross)account   - UMFUTURE_MAIN USDⓈ-M Futures account transfer to Spot account   - UMFUTURE_MARGIN USDⓈ-M Futures account transfer to Margin(cross)account   - CMFUTURE_MAIN COIN-M Futures account transfer to Spot account   - CMFUTURE_MARGIN COIN-M Futures account transfer to Margin(cross) account   - MARGIN_MAIN Margin(cross)account transfer to Spot account   - MARGIN_UMFUTURE Margin(cross)account transfer to USDⓈ-M Futures   - MARGIN_CMFUTURE Margin(cross)account transfer to COIN-M Futures   - ISOLATEDMARGIN_MARGIN Isolated margin account transfer to Margin(cross) account   - MARGIN_ISOLATEDMARGIN Margin(cross) account transfer to Isolated margin account   - ISOLATEDMARGIN_ISOLATEDMARGIN Isolated margin account transfer to Isolated margin account   - MAIN_FUNDING Spot account transfer to Funding account   - FUNDING_MAIN Funding account transfer to Spot account   - FUNDING_UMFUTURE Funding account transfer to UMFUTURE account   - UMFUTURE_FUNDING UMFUTURE account transfer to Funding account   - MARGIN_FUNDING MARGIN account transfer to Funding account   - FUNDING_MARGIN Funding account transfer to Margin account   - FUNDING_CMFUTURE Funding account transfer to CMFUTURE account   - CMFUTURE_FUNDING CMFUTURE account transfer to Funding account   - MAIN_OPTION Spot account transfer to Options account   - OPTION_MAIN Options account transfer to Spot account   - UMFUTURE_OPTION USDⓈ-M Futures account transfer to Options account   - OPTION_UMFUTURE Options account transfer to USDⓈ-M Futures account   - MARGIN_OPTION Margin(cross)account transfer to Options account   - OPTION_MARGIN Options account transfer to Margin(cross)account   - FUNDING_OPTION Funding account transfer to Options account   - OPTION_FUNDING Options account transfer to Funding account   - MAIN_PORTFOLIO_MARGIN Spot account transfer to Portfolio Margin account   - PORTFOLIO_MARGIN_MAIN Portfolio Margin account transfer to Spot account   - MAIN_ISOLATED_MARGIN Spot account transfer to Isolated margin account   - ISOLATED_MARGIN_MAIN Isolated margin account transfer to Spot account  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_transfer_post(type, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Universal transfer type (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str from_symbol: Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
        :param str to_symbol: Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_transfer_post_with_http_info(type, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_transfer_post_with_http_info(type, asset, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_transfer_post_with_http_info(self, type, asset, amount, timestamp, signature, **kwargs):  # noqa: E501
        """User Universal Transfer (USER_DATA)  # noqa: E501

        You need to enable `Permits Universal Transfer` option for the api key which requests this endpoint.  - `fromSymbol` must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN - `toSymbol` must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN  ENUM of transfer types:   - MAIN_UMFUTURE Spot account transfer to USDⓈ-M Futures account   - MAIN_CMFUTURE Spot account transfer to COIN-M Futures account   - MAIN_MARGIN Spot account transfer to Margin(cross)account   - UMFUTURE_MAIN USDⓈ-M Futures account transfer to Spot account   - UMFUTURE_MARGIN USDⓈ-M Futures account transfer to Margin(cross)account   - CMFUTURE_MAIN COIN-M Futures account transfer to Spot account   - CMFUTURE_MARGIN COIN-M Futures account transfer to Margin(cross) account   - MARGIN_MAIN Margin(cross)account transfer to Spot account   - MARGIN_UMFUTURE Margin(cross)account transfer to USDⓈ-M Futures   - MARGIN_CMFUTURE Margin(cross)account transfer to COIN-M Futures   - ISOLATEDMARGIN_MARGIN Isolated margin account transfer to Margin(cross) account   - MARGIN_ISOLATEDMARGIN Margin(cross) account transfer to Isolated margin account   - ISOLATEDMARGIN_ISOLATEDMARGIN Isolated margin account transfer to Isolated margin account   - MAIN_FUNDING Spot account transfer to Funding account   - FUNDING_MAIN Funding account transfer to Spot account   - FUNDING_UMFUTURE Funding account transfer to UMFUTURE account   - UMFUTURE_FUNDING UMFUTURE account transfer to Funding account   - MARGIN_FUNDING MARGIN account transfer to Funding account   - FUNDING_MARGIN Funding account transfer to Margin account   - FUNDING_CMFUTURE Funding account transfer to CMFUTURE account   - CMFUTURE_FUNDING CMFUTURE account transfer to Funding account   - MAIN_OPTION Spot account transfer to Options account   - OPTION_MAIN Options account transfer to Spot account   - UMFUTURE_OPTION USDⓈ-M Futures account transfer to Options account   - OPTION_UMFUTURE Options account transfer to USDⓈ-M Futures account   - MARGIN_OPTION Margin(cross)account transfer to Options account   - OPTION_MARGIN Options account transfer to Margin(cross)account   - FUNDING_OPTION Funding account transfer to Options account   - OPTION_FUNDING Options account transfer to Funding account   - MAIN_PORTFOLIO_MARGIN Spot account transfer to Portfolio Margin account   - PORTFOLIO_MARGIN_MAIN Portfolio Margin account transfer to Spot account   - MAIN_ISOLATED_MARGIN Spot account transfer to Isolated margin account   - ISOLATED_MARGIN_MAIN Isolated margin account transfer to Spot account  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_transfer_post_with_http_info(type, asset, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: Universal transfer type (required)
        :param str asset: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str from_symbol: Must be sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
        :param str to_symbol: Must be sent when type are MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'asset', 'amount', 'timestamp', 'signature', 'from_symbol', 'to_symbol', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_transfer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `sapi_v1_asset_transfer_post`")  # noqa: E501
        # verify the required parameter 'asset' is set
        if ('asset' not in params or
                params['asset'] is None):
            raise ValueError("Missing the required parameter `asset` when calling `sapi_v1_asset_transfer_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_asset_transfer_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_transfer_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_transfer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'from_symbol' in params:
            query_params.append(('fromSymbol', params['from_symbol']))  # noqa: E501
        if 'to_symbol' in params:
            query_params.append(('toSymbol', params['to_symbol']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20072',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_asset_wallet_balance_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query User Wallet Balance (USER_DATA)  # noqa: E501

        Query User Wallet Balance  Weight(IP): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_wallet_balance_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20090]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_asset_wallet_balance_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_asset_wallet_balance_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_asset_wallet_balance_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query User Wallet Balance (USER_DATA)  # noqa: E501

        Query User Wallet Balance  Weight(IP): 60  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_asset_wallet_balance_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20090]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_asset_wallet_balance_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_asset_wallet_balance_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_asset_wallet_balance_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/asset/wallet/balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20090]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_capital_config_getall_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """All Coins' Information (USER_DATA)  # noqa: E501

        Get information of coins (available for deposit and withdraw) for user.  Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_config_getall_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20057]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_config_getall_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_config_getall_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_config_getall_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """All Coins' Information (USER_DATA)  # noqa: E501

        Get information of coins (available for deposit and withdraw) for user.  Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_config_getall_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20057]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_config_getall_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_capital_config_getall_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_capital_config_getall_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/config/getall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20057]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_capital_contract_convertible_coins_get(self, **kwargs):  # noqa: E501
        """Query auto-converting stable coins (USER_DATA)  # noqa: E501

        Get a user's auto-conversion settings in deposit/withdrawal  Weight(UID): 600'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_contract_convertible_coins_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20079
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_contract_convertible_coins_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_contract_convertible_coins_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_contract_convertible_coins_get_with_http_info(self, **kwargs):  # noqa: E501
        """Query auto-converting stable coins (USER_DATA)  # noqa: E501

        Get a user's auto-conversion settings in deposit/withdrawal  Weight(UID): 600'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_contract_convertible_coins_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20079
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_contract_convertible_coins_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/contract/convertible-coins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20079',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_capital_contract_convertible_coins_post(self, coin, enable, **kwargs):  # noqa: E501
        """Switch on/off BUSD and stable coins conversion (USER_DATA) (USER_DATA)  # noqa: E501

        User can use it to turn on or turn off the BUSD auto-conversion from/to a specific stable coin.  Weight(UID): 600'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_contract_convertible_coins_post(coin, enable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coin: Must be USDC, USDP or TUSD (required)
        :param bool enable: true: turn on the auto-conversion. false: turn off the auto-conversion (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_contract_convertible_coins_post_with_http_info(coin, enable, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_contract_convertible_coins_post_with_http_info(coin, enable, **kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_contract_convertible_coins_post_with_http_info(self, coin, enable, **kwargs):  # noqa: E501
        """Switch on/off BUSD and stable coins conversion (USER_DATA) (USER_DATA)  # noqa: E501

        User can use it to turn on or turn off the BUSD auto-conversion from/to a specific stable coin.  Weight(UID): 600'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_contract_convertible_coins_post_with_http_info(coin, enable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coin: Must be USDC, USDP or TUSD (required)
        :param bool enable: true: turn on the auto-conversion. false: turn off the auto-conversion (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coin', 'enable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_contract_convertible_coins_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coin' is set
        if ('coin' not in params or
                params['coin'] is None):
            raise ValueError("Missing the required parameter `coin` when calling `sapi_v1_capital_contract_convertible_coins_post`")  # noqa: E501
        # verify the required parameter 'enable' is set
        if ('enable' not in params or
                params['enable'] is None):
            raise ValueError("Missing the required parameter `enable` when calling `sapi_v1_capital_contract_convertible_coins_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'enable' in params:
            query_params.append(('enable', params['enable']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/contract/convertible-coins', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_capital_deposit_address_get(self, coin, timestamp, signature, **kwargs):  # noqa: E501
        """Deposit Address (supporting network) (USER_DATA)  # noqa: E501

        Fetch deposit address with network.  - If network is not send, return with default network of the coin. - You can get network and isDefault in networkList in the response of Get /sapi/v1/capital/config/getall (HMAC SHA256).  Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_address_get(coin, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coin: Coin name (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str network:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_deposit_address_get_with_http_info(coin, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_deposit_address_get_with_http_info(coin, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_deposit_address_get_with_http_info(self, coin, timestamp, signature, **kwargs):  # noqa: E501
        """Deposit Address (supporting network) (USER_DATA)  # noqa: E501

        Fetch deposit address with network.  - If network is not send, return with default network of the coin. - You can get network and isDefault in networkList in the response of Get /sapi/v1/capital/config/getall (HMAC SHA256).  Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_address_get_with_http_info(coin, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coin: Coin name (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str network:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coin', 'timestamp', 'signature', 'network', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_deposit_address_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coin' is set
        if ('coin' not in params or
                params['coin'] is None):
            raise ValueError("Missing the required parameter `coin` when calling `sapi_v1_capital_deposit_address_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_capital_deposit_address_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_capital_deposit_address_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'network' in params:
            query_params.append(('network', params['network']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/deposit/address', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_capital_deposit_address_list_get(self, coin, timestamp, signature, **kwargs):  # noqa: E501
        """Fetch deposit address list with network (USER_DATA)  # noqa: E501

        Fetch deposit address list with network.  Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_address_list_get(coin, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coin: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str network:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20092]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_deposit_address_list_get_with_http_info(coin, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_deposit_address_list_get_with_http_info(coin, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_deposit_address_list_get_with_http_info(self, coin, timestamp, signature, **kwargs):  # noqa: E501
        """Fetch deposit address list with network (USER_DATA)  # noqa: E501

        Fetch deposit address list with network.  Weight(IP): 10  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_address_list_get_with_http_info(coin, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coin: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str network:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20092]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coin', 'timestamp', 'signature', 'network', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_deposit_address_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coin' is set
        if ('coin' not in params or
                params['coin'] is None):
            raise ValueError("Missing the required parameter `coin` when calling `sapi_v1_capital_deposit_address_list_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_capital_deposit_address_list_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_capital_deposit_address_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'network' in params:
            query_params.append(('network', params['network']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/deposit/address/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20092]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_capital_deposit_credit_apply_post(self, timestamp, signature, **kwargs):  # noqa: E501
        """One click arrival deposit apply (USER_DATA)  # noqa: E501

        Apply deposit credit for expired address (One click arrival)  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_credit_apply_post(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int deposit_id: Deposit record Id, priority use
        :param str tx_id: Deposit txId, used when depositId is not specified
        :param int sub_account_id:
        :param int sub_user_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_deposit_credit_apply_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_deposit_credit_apply_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_deposit_credit_apply_post_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """One click arrival deposit apply (USER_DATA)  # noqa: E501

        Apply deposit credit for expired address (One click arrival)  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_credit_apply_post_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int deposit_id: Deposit record Id, priority use
        :param str tx_id: Deposit txId, used when depositId is not specified
        :param int sub_account_id:
        :param int sub_user_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'deposit_id', 'tx_id', 'sub_account_id', 'sub_user_id', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_deposit_credit_apply_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_capital_deposit_credit_apply_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_capital_deposit_credit_apply_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'deposit_id' in params:
            query_params.append(('depositId', params['deposit_id']))  # noqa: E501
        if 'tx_id' in params:
            query_params.append(('txId', params['tx_id']))  # noqa: E501
        if 'sub_account_id' in params:
            query_params.append(('subAccountId', params['sub_account_id']))  # noqa: E501
        if 'sub_user_id' in params:
            query_params.append(('subUserId', params['sub_user_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/deposit/credit-apply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20089',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_capital_deposit_hisrec_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Deposit History(supporting network) (USER_DATA)  # noqa: E501

        Fetch deposit history.  - Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days. - If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_hisrec_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str coin: Coin name
        :param int status: * `0` - pending * `6` - credited but cannot withdraw * `1` - success
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int offset:
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20060]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_deposit_hisrec_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_deposit_hisrec_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_deposit_hisrec_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Deposit History(supporting network) (USER_DATA)  # noqa: E501

        Fetch deposit history.  - Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days. - If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_deposit_hisrec_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str coin: Coin name
        :param int status: * `0` - pending * `6` - credited but cannot withdraw * `1` - success
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int offset:
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20060]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'coin', 'status', 'start_time', 'end_time', 'offset', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_deposit_hisrec_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_capital_deposit_hisrec_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_capital_deposit_hisrec_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/deposit/hisrec', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20060]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_capital_withdraw_apply_post(self, coin, address, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Withdraw (USER_DATA)  # noqa: E501

        Submit a withdraw request.  - If `network` not send, return with default network of the coin. - You can get `network` and `isDefault` in `networkList` of a coin in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_withdraw_apply_post(coin, address, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coin: Coin name (required)
        :param str address: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str withdraw_order_id: Client id for withdraw
        :param str network:
        :param str address_tag: Secondary address identifier for coins like XRP,XMR etc.
        :param bool transaction_fee_flag: When making internal transfer - `true` ->  returning the fee to the destination account; - `false` -> returning the fee back to the departure account.
        :param str name:
        :param int wallet_type: The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_withdraw_apply_post_with_http_info(coin, address, amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_withdraw_apply_post_with_http_info(coin, address, amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_withdraw_apply_post_with_http_info(self, coin, address, amount, timestamp, signature, **kwargs):  # noqa: E501
        """Withdraw (USER_DATA)  # noqa: E501

        Submit a withdraw request.  - If `network` not send, return with default network of the coin. - You can get `network` and `isDefault` in `networkList` of a coin in the response of `Get /sapi/v1/capital/config/getall (HMAC SHA256)`.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_withdraw_apply_post_with_http_info(coin, address, amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str coin: Coin name (required)
        :param str address: (required)
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str withdraw_order_id: Client id for withdraw
        :param str network:
        :param str address_tag: Secondary address identifier for coins like XRP,XMR etc.
        :param bool transaction_fee_flag: When making internal transfer - `true` ->  returning the fee to the destination account; - `false` -> returning the fee back to the departure account.
        :param str name:
        :param int wallet_type: The wallet type for withdraw，0-Spot wallet, 1- Funding wallet. Default is Spot wallet
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['coin', 'address', 'amount', 'timestamp', 'signature', 'withdraw_order_id', 'network', 'address_tag', 'transaction_fee_flag', 'name', 'wallet_type', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_withdraw_apply_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'coin' is set
        if ('coin' not in params or
                params['coin'] is None):
            raise ValueError("Missing the required parameter `coin` when calling `sapi_v1_capital_withdraw_apply_post`")  # noqa: E501
        # verify the required parameter 'address' is set
        if ('address' not in params or
                params['address'] is None):
            raise ValueError("Missing the required parameter `address` when calling `sapi_v1_capital_withdraw_apply_post`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_capital_withdraw_apply_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_capital_withdraw_apply_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_capital_withdraw_apply_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'withdraw_order_id' in params:
            query_params.append(('withdrawOrderId', params['withdraw_order_id']))  # noqa: E501
        if 'network' in params:
            query_params.append(('network', params['network']))  # noqa: E501
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'address_tag' in params:
            query_params.append(('addressTag', params['address_tag']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'transaction_fee_flag' in params:
            query_params.append(('transactionFeeFlag', params['transaction_fee_flag']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'wallet_type' in params:
            query_params.append(('walletType', params['wallet_type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/withdraw/apply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_capital_withdraw_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Withdraw History (supporting network) (USER_DATA)  # noqa: E501

        Fetch withdraw history.  This endpoint specifically uses per second UID rate limit, user's total second level IP rate limit is 180000/second. Response from the endpoint contains header key X-SAPI-USED-UID-WEIGHT-1S, which defines weight used by the current IP.  - `network` may not be in the response for old withdraw. - Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days. - If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days - If withdrawOrderId is sent, time between startTime and endTime must be less than 7 days. - If withdrawOrderId is sent, startTime and endTime are not sent, will return last 7 days records by default.  Weight(UID): 18000 Request Limit: 10 requests per second  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_withdraw_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str coin: Coin name
        :param str withdraw_order_id:
        :param int status: * `0` - Email Sent * `1` - Cancelled * `2` - Awaiting Approval * `3` - Rejected * `4` - Processing * `5` - Failure * `6` - Completed
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int offset:
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20061]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_capital_withdraw_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_capital_withdraw_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_capital_withdraw_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Withdraw History (supporting network) (USER_DATA)  # noqa: E501

        Fetch withdraw history.  This endpoint specifically uses per second UID rate limit, user's total second level IP rate limit is 180000/second. Response from the endpoint contains header key X-SAPI-USED-UID-WEIGHT-1S, which defines weight used by the current IP.  - `network` may not be in the response for old withdraw. - Please notice the default `startTime` and `endTime` to make sure that time interval is within 0-90 days. - If both `startTime` and `endTime` are sent, time between `startTime` and `endTime` must be less than 90 days - If withdrawOrderId is sent, time between startTime and endTime must be less than 7 days. - If withdrawOrderId is sent, startTime and endTime are not sent, will return last 7 days records by default.  Weight(UID): 18000 Request Limit: 10 requests per second  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_capital_withdraw_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str coin: Coin name
        :param str withdraw_order_id:
        :param int status: * `0` - Email Sent * `1` - Cancelled * `2` - Awaiting Approval * `3` - Rejected * `4` - Processing * `5` - Failure * `6` - Completed
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int offset:
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20061]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'coin', 'withdraw_order_id', 'status', 'start_time', 'end_time', 'offset', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_capital_withdraw_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_capital_withdraw_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_capital_withdraw_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'coin' in params:
            query_params.append(('coin', params['coin']))  # noqa: E501
        if 'withdraw_order_id' in params:
            query_params.append(('withdrawOrderId', params['withdraw_order_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/capital/withdraw/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20061]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_system_status_get(self, **kwargs):  # noqa: E501
        """System Status (System)  # noqa: E501

        Fetch system status.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_system_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_system_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_system_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sapi_v1_system_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """System Status (System)  # noqa: E501

        Fetch system status.  Weight(IP): 1  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_system_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20056
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_system_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/system/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20056',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v3_asset_get_user_asset_post(self, timestamp, signature, **kwargs):  # noqa: E501
        """User Asset (USER_DATA)  # noqa: E501

        Get user assets, just for positive data.  Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v3_asset_get_user_asset_post(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param str need_btc_valuation:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20074]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v3_asset_get_user_asset_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v3_asset_get_user_asset_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v3_asset_get_user_asset_post_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """User Asset (USER_DATA)  # noqa: E501

        Get user assets, just for positive data.  Weight(IP): 5  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v3_asset_get_user_asset_post_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str asset:
        :param str need_btc_valuation:
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse20074]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'asset', 'need_btc_valuation', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v3_asset_get_user_asset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v3_asset_get_user_asset_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v3_asset_get_user_asset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset' in params:
            query_params.append(('asset', params['asset']))  # noqa: E501
        if 'need_btc_valuation' in params:
            query_params.append(('needBtcValuation', params['need_btc_valuation']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v3/asset/getUserAsset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20074]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
