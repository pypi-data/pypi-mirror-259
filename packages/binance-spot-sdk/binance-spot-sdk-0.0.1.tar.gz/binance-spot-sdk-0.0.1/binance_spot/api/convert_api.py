# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class ConvertApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_convert_accept_quote_post(self, quote_id, timestamp, signature, **kwargs):  # noqa: E501
        """Accept Quote (TRADE)  # noqa: E501

        Accept the offered quote by quote ID.  Weight(UID): 500  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_accept_quote_post(quote_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quote_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200227
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_convert_accept_quote_post_with_http_info(quote_id, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_convert_accept_quote_post_with_http_info(quote_id, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_convert_accept_quote_post_with_http_info(self, quote_id, timestamp, signature, **kwargs):  # noqa: E501
        """Accept Quote (TRADE)  # noqa: E501

        Accept the offered quote by quote ID.  Weight(UID): 500  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_accept_quote_post_with_http_info(quote_id, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quote_id: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200227
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quote_id', 'timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_convert_accept_quote_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quote_id' is set
        if ('quote_id' not in params or
                params['quote_id'] is None):
            raise ValueError("Missing the required parameter `quote_id` when calling `sapi_v1_convert_accept_quote_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_convert_accept_quote_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_convert_accept_quote_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'quote_id' in params:
            query_params.append(('quoteId', params['quote_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/convert/acceptQuote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200227',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_convert_asset_info_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query order quantity precision per asset (USER_DATA)  # noqa: E501

        Query for supported asset precision information  Weight(IP): 100  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_asset_info_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200225]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_convert_asset_info_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_convert_asset_info_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_convert_asset_info_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query order quantity precision per asset (USER_DATA)  # noqa: E501

        Query for supported asset precision information  Weight(IP): 100  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_asset_info_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200225]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_convert_asset_info_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_convert_asset_info_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_convert_asset_info_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/convert/assetInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200225]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_convert_exchange_info_get(self, **kwargs):  # noqa: E501
        """List All Convert Pairs  # noqa: E501

        Query for all convertible token pairs and the tokens’ respective upper/lower limits  Weight(IP): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_exchange_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_asset: User spends coin
        :param str to_asset: User receives coin
        :return: list[InlineResponse200224]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_convert_exchange_info_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_convert_exchange_info_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sapi_v1_convert_exchange_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """List All Convert Pairs  # noqa: E501

        Query for all convertible token pairs and the tokens’ respective upper/lower limits  Weight(IP): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_exchange_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_asset: User spends coin
        :param str to_asset: User receives coin
        :return: list[InlineResponse200224]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_asset', 'to_asset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_convert_exchange_info_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_asset' in params:
            query_params.append(('fromAsset', params['from_asset']))  # noqa: E501
        if 'to_asset' in params:
            query_params.append(('toAsset', params['to_asset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/convert/exchangeInfo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200224]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_convert_get_quote_post(self, from_asset, to_asset, timestamp, signature, **kwargs):  # noqa: E501
        """Send quote request (USER_DATA)  # noqa: E501

        Request a quote for the requested token pairs  Weight(UID): 200  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_get_quote_post(from_asset, to_asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_asset: (required)
        :param str to_asset: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param float from_amount: When specified, it is the amount you will be debited after the conversion
        :param float to_amount: When specified, it is the amount you will be debited after the conversion
        :param str valid_time: 10s, 30s, 1m, 2m, default 10s
        :param str wallet_type: SPOT or FUNDING. Default is SPOT
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200226
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_convert_get_quote_post_with_http_info(from_asset, to_asset, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_convert_get_quote_post_with_http_info(from_asset, to_asset, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_convert_get_quote_post_with_http_info(self, from_asset, to_asset, timestamp, signature, **kwargs):  # noqa: E501
        """Send quote request (USER_DATA)  # noqa: E501

        Request a quote for the requested token pairs  Weight(UID): 200  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_get_quote_post_with_http_info(from_asset, to_asset, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str from_asset: (required)
        :param str to_asset: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param float from_amount: When specified, it is the amount you will be debited after the conversion
        :param float to_amount: When specified, it is the amount you will be debited after the conversion
        :param str valid_time: 10s, 30s, 1m, 2m, default 10s
        :param str wallet_type: SPOT or FUNDING. Default is SPOT
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200226
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_asset', 'to_asset', 'timestamp', 'signature', 'from_amount', 'to_amount', 'valid_time', 'wallet_type', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_convert_get_quote_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_asset' is set
        if ('from_asset' not in params or
                params['from_asset'] is None):
            raise ValueError("Missing the required parameter `from_asset` when calling `sapi_v1_convert_get_quote_post`")  # noqa: E501
        # verify the required parameter 'to_asset' is set
        if ('to_asset' not in params or
                params['to_asset'] is None):
            raise ValueError("Missing the required parameter `to_asset` when calling `sapi_v1_convert_get_quote_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_convert_get_quote_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_convert_get_quote_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_asset' in params:
            query_params.append(('fromAsset', params['from_asset']))  # noqa: E501
        if 'to_asset' in params:
            query_params.append(('toAsset', params['to_asset']))  # noqa: E501
        if 'from_amount' in params:
            query_params.append(('fromAmount', params['from_amount']))  # noqa: E501
        if 'to_amount' in params:
            query_params.append(('toAmount', params['to_amount']))  # noqa: E501
        if 'valid_time' in params:
            query_params.append(('validTime', params['valid_time']))  # noqa: E501
        if 'wallet_type' in params:
            query_params.append(('walletType', params['wallet_type']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/convert/getQuote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200226',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_convert_order_status_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Order status (USER_DATA)  # noqa: E501

        Query order status by order ID.  Weight(UID): 100  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_order_status_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str order_id:
        :param str quote_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200228
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_convert_order_status_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_convert_order_status_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_convert_order_status_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Order status (USER_DATA)  # noqa: E501

        Query order status by order ID.  Weight(UID): 100  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_order_status_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str order_id:
        :param str quote_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200228
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'order_id', 'quote_id', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_convert_order_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_convert_order_status_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_convert_order_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'quote_id' in params:
            query_params.append(('quoteId', params['quote_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/convert/orderStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200228',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_convert_trade_flow_get(self, start_time, end_time, timestamp, signature, **kwargs):  # noqa: E501
        """Get Convert Trade History (USER_DATA)  # noqa: E501

        - The max interval between startTime and endTime is 30 days.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_trade_flow_get(start_time, end_time, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_time: UTC timestamp in ms (required)
        :param int end_time: UTC timestamp in ms (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int limit: default 100, max 1000
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200229
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_convert_trade_flow_get_with_http_info(start_time, end_time, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_convert_trade_flow_get_with_http_info(start_time, end_time, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_convert_trade_flow_get_with_http_info(self, start_time, end_time, timestamp, signature, **kwargs):  # noqa: E501
        """Get Convert Trade History (USER_DATA)  # noqa: E501

        - The max interval between startTime and endTime is 30 days.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_convert_trade_flow_get_with_http_info(start_time, end_time, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start_time: UTC timestamp in ms (required)
        :param int end_time: UTC timestamp in ms (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int limit: default 100, max 1000
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200229
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_time', 'end_time', 'timestamp', 'signature', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_convert_trade_flow_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `sapi_v1_convert_trade_flow_get`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `sapi_v1_convert_trade_flow_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_convert_trade_flow_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_convert_trade_flow_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/convert/tradeFlow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200229',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
