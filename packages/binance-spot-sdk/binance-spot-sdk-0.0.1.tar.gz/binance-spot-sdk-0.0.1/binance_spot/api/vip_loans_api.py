# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class VIPLoansApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_loan_vip_borrow_post(self, loan_account_id, loan_amount, collateral_account_id, collateral_coin, is_flexible_rate, timestamp, signature, **kwargs):  # noqa: E501
        """VIP Loan Borrow  # noqa: E501

        VIP loan is available for VIP users only.  Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_borrow_post(loan_account_id, loan_amount, collateral_account_id, collateral_coin, is_flexible_rate, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_account_id: (required)
        :param float loan_amount: (required)
        :param str collateral_account_id: (required)
        :param str collateral_coin: (required)
        :param str is_flexible_rate: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param int loan_term:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200196
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_vip_borrow_post_with_http_info(loan_account_id, loan_amount, collateral_account_id, collateral_coin, is_flexible_rate, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_vip_borrow_post_with_http_info(loan_account_id, loan_amount, collateral_account_id, collateral_coin, is_flexible_rate, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_vip_borrow_post_with_http_info(self, loan_account_id, loan_amount, collateral_account_id, collateral_coin, is_flexible_rate, timestamp, signature, **kwargs):  # noqa: E501
        """VIP Loan Borrow  # noqa: E501

        VIP loan is available for VIP users only.  Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_borrow_post_with_http_info(loan_account_id, loan_amount, collateral_account_id, collateral_coin, is_flexible_rate, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int loan_account_id: (required)
        :param float loan_amount: (required)
        :param str collateral_account_id: (required)
        :param str collateral_coin: (required)
        :param str is_flexible_rate: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param int loan_term:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200196
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['loan_account_id', 'loan_amount', 'collateral_account_id', 'collateral_coin', 'is_flexible_rate', 'timestamp', 'signature', 'loan_coin', 'loan_term', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_vip_borrow_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'loan_account_id' is set
        if ('loan_account_id' not in params or
                params['loan_account_id'] is None):
            raise ValueError("Missing the required parameter `loan_account_id` when calling `sapi_v1_loan_vip_borrow_post`")  # noqa: E501
        # verify the required parameter 'loan_amount' is set
        if ('loan_amount' not in params or
                params['loan_amount'] is None):
            raise ValueError("Missing the required parameter `loan_amount` when calling `sapi_v1_loan_vip_borrow_post`")  # noqa: E501
        # verify the required parameter 'collateral_account_id' is set
        if ('collateral_account_id' not in params or
                params['collateral_account_id'] is None):
            raise ValueError("Missing the required parameter `collateral_account_id` when calling `sapi_v1_loan_vip_borrow_post`")  # noqa: E501
        # verify the required parameter 'collateral_coin' is set
        if ('collateral_coin' not in params or
                params['collateral_coin'] is None):
            raise ValueError("Missing the required parameter `collateral_coin` when calling `sapi_v1_loan_vip_borrow_post`")  # noqa: E501
        # verify the required parameter 'is_flexible_rate' is set
        if ('is_flexible_rate' not in params or
                params['is_flexible_rate'] is None):
            raise ValueError("Missing the required parameter `is_flexible_rate` when calling `sapi_v1_loan_vip_borrow_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_vip_borrow_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_vip_borrow_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_account_id' in params:
            query_params.append(('loanAccountId', params['loan_account_id']))  # noqa: E501
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'loan_amount' in params:
            query_params.append(('loanAmount', params['loan_amount']))  # noqa: E501
        if 'collateral_account_id' in params:
            query_params.append(('collateralAccountId', params['collateral_account_id']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'is_flexible_rate' in params:
            query_params.append(('isFlexibleRate', params['is_flexible_rate']))  # noqa: E501
        if 'loan_term' in params:
            query_params.append(('loanTerm', params['loan_term']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/vip/borrow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200196',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_vip_collateral_account_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Check Locked Value of VIP Collateral Account (USER_DATA)  # noqa: E501

        VIP loan is available for VIP users only.  Weight(IP): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_collateral_account_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order id
        :param int collateral_account_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200195
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_vip_collateral_account_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_vip_collateral_account_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_vip_collateral_account_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Check Locked Value of VIP Collateral Account (USER_DATA)  # noqa: E501

        VIP loan is available for VIP users only.  Weight(IP): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_collateral_account_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order id
        :param int collateral_account_id:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200195
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'order_id', 'collateral_account_id', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_vip_collateral_account_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_vip_collateral_account_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_vip_collateral_account_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'collateral_account_id' in params:
            query_params.append(('collateralAccountId', params['collateral_account_id']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/vip/collateral/account', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200195',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_vip_collateral_data_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Collateral Asset Data (USER_DATA)  # noqa: E501

        Get collateral asset data.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_collateral_data_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str collateral_coin: Coin used as collateral
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200198
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_vip_collateral_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_vip_collateral_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_vip_collateral_data_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Collateral Asset Data (USER_DATA)  # noqa: E501

        Get collateral asset data.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_collateral_data_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str collateral_coin: Coin used as collateral
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200198
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'collateral_coin', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_vip_collateral_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_vip_collateral_data_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_vip_collateral_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/vip/collateral/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200198',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_vip_loanable_data_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Loanable Assets Data  # noqa: E501

        Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_loanable_data_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param int vip_level: Defaults to user's vip level
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200197
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_vip_loanable_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_vip_loanable_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_vip_loanable_data_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Loanable Assets Data  # noqa: E501

        Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_loanable_data_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Coin loaned
        :param int vip_level: Defaults to user's vip level
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200197
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'loan_coin', 'vip_level', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_vip_loanable_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_vip_loanable_data_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_vip_loanable_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'vip_level' in params:
            query_params.append(('vipLevel', params['vip_level']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/vip/loanable/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200197',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_vip_ongoing_orders_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get VIP Loan Ongoing Orders (USER_DATA)  # noqa: E501

        VIP loan is available for VIP users only.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_ongoing_orders_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order id
        :param int collateral_account_id:
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 10; max 100.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200192
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_vip_ongoing_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_vip_ongoing_orders_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_vip_ongoing_orders_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get VIP Loan Ongoing Orders (USER_DATA)  # noqa: E501

        VIP loan is available for VIP users only.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_ongoing_orders_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order id
        :param int collateral_account_id:
        :param str loan_coin: Coin loaned
        :param str collateral_coin: Coin used as collateral
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 10; max 100.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200192
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'order_id', 'collateral_account_id', 'loan_coin', 'collateral_coin', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_vip_ongoing_orders_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_vip_ongoing_orders_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_vip_ongoing_orders_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'collateral_account_id' in params:
            query_params.append(('collateralAccountId', params['collateral_account_id']))  # noqa: E501
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'collateral_coin' in params:
            query_params.append(('collateralCoin', params['collateral_coin']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/vip/ongoing/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200192',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_vip_renew_post(self, timestamp, signature, **kwargs):  # noqa: E501
        """VIP Loan Renew  # noqa: E501

        VIP loan is available for VIP users only.  Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_renew_post(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order id
        :param int loan_term:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_vip_renew_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_vip_renew_post_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_vip_renew_post_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """VIP Loan Renew  # noqa: E501

        VIP loan is available for VIP users only.  Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_renew_post_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order id
        :param int loan_term:
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'order_id', 'loan_term', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_vip_renew_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_vip_renew_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_vip_renew_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'loan_term' in params:
            query_params.append(('loanTerm', params['loan_term']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/vip/renew', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_vip_repay_history_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get VIP Loan Repayment History (USER_DATA)  # noqa: E501

        VIP loan is available for VIP users only.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_repay_history_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order id
        :param str loan_coin: Coin loaned
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 10; max 100.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200194
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_vip_repay_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_vip_repay_history_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_vip_repay_history_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get VIP Loan Repayment History (USER_DATA)  # noqa: E501

        VIP loan is available for VIP users only.  Weight(IP): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_repay_history_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order id
        :param str loan_coin: Coin loaned
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 10; max 100.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200194
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'order_id', 'loan_coin', 'start_time', 'end_time', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_vip_repay_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_vip_repay_history_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_vip_repay_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/vip/repay/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200194',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_vip_repay_post(self, amount, timestamp, signature, **kwargs):  # noqa: E501
        """VIP Loan Repay (TRADE)  # noqa: E501

        VIP loan is available for VIP users only.  Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_repay_post(amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order id
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200193
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_vip_repay_post_with_http_info(amount, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_vip_repay_post_with_http_info(amount, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_vip_repay_post_with_http_info(self, amount, timestamp, signature, **kwargs):  # noqa: E501
        """VIP Loan Repay (TRADE)  # noqa: E501

        VIP loan is available for VIP users only.  Weight(UID): 6000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_repay_post_with_http_info(amount, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float amount: (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int order_id: Order id
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200193
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['amount', 'timestamp', 'signature', 'order_id', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_vip_repay_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `sapi_v1_loan_vip_repay_post`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_vip_repay_post`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_vip_repay_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_id' in params:
            query_params.append(('orderId', params['order_id']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/vip/repay', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200193',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_vip_request_data_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query Application Status (USER_DATA)  # noqa: E501

        Get Application Status  Weight(UID): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_request_data_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200199
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_vip_request_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_vip_request_data_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_vip_request_data_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Query Application Status (USER_DATA)  # noqa: E501

        Get Application Status  Weight(UID): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_request_data_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int current: Current querying page. Start from 1. Default:1
        :param int limit: Default 500; max 1000.
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200199
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'current', 'limit', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_vip_request_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_vip_request_data_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_vip_request_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'current' in params:
            query_params.append(('current', params['current']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/vip/request/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200199',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_loan_vip_request_interest_rate_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Borrow Interest Rate (USER_DATA)  # noqa: E501

        Get borrow interest rate.  Weight(UID): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_request_interest_rate_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Max 10 assets, Multiple split by \",\"
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200200]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_loan_vip_request_interest_rate_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_loan_vip_request_interest_rate_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_loan_vip_request_interest_rate_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get Borrow Interest Rate (USER_DATA)  # noqa: E501

        Get borrow interest rate.  Weight(UID): 400  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_loan_vip_request_interest_rate_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param str loan_coin: Max 10 assets, Multiple split by \",\"
        :param int recv_window: The value cannot be greater than 60000
        :return: list[InlineResponse200200]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'loan_coin', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_loan_vip_request_interest_rate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_loan_vip_request_interest_rate_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_loan_vip_request_interest_rate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'loan_coin' in params:
            query_params.append(('loanCoin', params['loan_coin']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/loan/vip/request/interestRate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse200200]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
