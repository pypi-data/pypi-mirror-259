# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20047Rows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'amount': 'str',
        'target_asset': 'str',
        'target_amount': 'str',
        'biz_type': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'asset': 'asset',
        'amount': 'amount',
        'target_asset': 'targetAsset',
        'target_amount': 'targetAmount',
        'biz_type': 'bizType',
        'timestamp': 'timestamp'
    }

    def __init__(self, asset=None, amount=None, target_asset=None, target_amount=None, biz_type=None, timestamp=None):  # noqa: E501
        """InlineResponse20047Rows - a model defined in Swagger"""  # noqa: E501
        self._asset = None
        self._amount = None
        self._target_asset = None
        self._target_amount = None
        self._biz_type = None
        self._timestamp = None
        self.discriminator = None
        self.asset = asset
        self.amount = amount
        self.target_asset = target_asset
        self.target_amount = target_amount
        self.biz_type = biz_type
        self.timestamp = timestamp

    @property
    def asset(self):
        """Gets the asset of this InlineResponse20047Rows.  # noqa: E501


        :return: The asset of this InlineResponse20047Rows.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse20047Rows.


        :param asset: The asset of this InlineResponse20047Rows.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def amount(self):
        """Gets the amount of this InlineResponse20047Rows.  # noqa: E501


        :return: The amount of this InlineResponse20047Rows.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse20047Rows.


        :param amount: The amount of this InlineResponse20047Rows.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def target_asset(self):
        """Gets the target_asset of this InlineResponse20047Rows.  # noqa: E501


        :return: The target_asset of this InlineResponse20047Rows.  # noqa: E501
        :rtype: str
        """
        return self._target_asset

    @target_asset.setter
    def target_asset(self, target_asset):
        """Sets the target_asset of this InlineResponse20047Rows.


        :param target_asset: The target_asset of this InlineResponse20047Rows.  # noqa: E501
        :type: str
        """
        if target_asset is None:
            raise ValueError("Invalid value for `target_asset`, must not be `None`")  # noqa: E501

        self._target_asset = target_asset

    @property
    def target_amount(self):
        """Gets the target_amount of this InlineResponse20047Rows.  # noqa: E501


        :return: The target_amount of this InlineResponse20047Rows.  # noqa: E501
        :rtype: str
        """
        return self._target_amount

    @target_amount.setter
    def target_amount(self, target_amount):
        """Sets the target_amount of this InlineResponse20047Rows.


        :param target_amount: The target_amount of this InlineResponse20047Rows.  # noqa: E501
        :type: str
        """
        if target_amount is None:
            raise ValueError("Invalid value for `target_amount`, must not be `None`")  # noqa: E501

        self._target_amount = target_amount

    @property
    def biz_type(self):
        """Gets the biz_type of this InlineResponse20047Rows.  # noqa: E501


        :return: The biz_type of this InlineResponse20047Rows.  # noqa: E501
        :rtype: str
        """
        return self._biz_type

    @biz_type.setter
    def biz_type(self, biz_type):
        """Sets the biz_type of this InlineResponse20047Rows.


        :param biz_type: The biz_type of this InlineResponse20047Rows.  # noqa: E501
        :type: str
        """
        if biz_type is None:
            raise ValueError("Invalid value for `biz_type`, must not be `None`")  # noqa: E501

        self._biz_type = biz_type

    @property
    def timestamp(self):
        """Gets the timestamp of this InlineResponse20047Rows.  # noqa: E501


        :return: The timestamp of this InlineResponse20047Rows.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InlineResponse20047Rows.


        :param timestamp: The timestamp of this InlineResponse20047Rows.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20047Rows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20047Rows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
