# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200181(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operation_id': 'int',
        'pool_id': 'int',
        'pool_name': 'str',
        'operation': 'str',
        'status': 'int',
        'update_time': 'int',
        'share_amount': 'str'
    }

    attribute_map = {
        'operation_id': 'operationId',
        'pool_id': 'poolId',
        'pool_name': 'poolName',
        'operation': 'operation',
        'status': 'status',
        'update_time': 'updateTime',
        'share_amount': 'shareAmount'
    }

    def __init__(self, operation_id=None, pool_id=None, pool_name=None, operation=None, status=None, update_time=None, share_amount=None):  # noqa: E501
        """InlineResponse200181 - a model defined in Swagger"""  # noqa: E501
        self._operation_id = None
        self._pool_id = None
        self._pool_name = None
        self._operation = None
        self._status = None
        self._update_time = None
        self._share_amount = None
        self.discriminator = None
        self.operation_id = operation_id
        self.pool_id = pool_id
        self.pool_name = pool_name
        self.operation = operation
        self.status = status
        self.update_time = update_time
        self.share_amount = share_amount

    @property
    def operation_id(self):
        """Gets the operation_id of this InlineResponse200181.  # noqa: E501


        :return: The operation_id of this InlineResponse200181.  # noqa: E501
        :rtype: int
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this InlineResponse200181.


        :param operation_id: The operation_id of this InlineResponse200181.  # noqa: E501
        :type: int
        """
        if operation_id is None:
            raise ValueError("Invalid value for `operation_id`, must not be `None`")  # noqa: E501

        self._operation_id = operation_id

    @property
    def pool_id(self):
        """Gets the pool_id of this InlineResponse200181.  # noqa: E501


        :return: The pool_id of this InlineResponse200181.  # noqa: E501
        :rtype: int
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this InlineResponse200181.


        :param pool_id: The pool_id of this InlineResponse200181.  # noqa: E501
        :type: int
        """
        if pool_id is None:
            raise ValueError("Invalid value for `pool_id`, must not be `None`")  # noqa: E501

        self._pool_id = pool_id

    @property
    def pool_name(self):
        """Gets the pool_name of this InlineResponse200181.  # noqa: E501


        :return: The pool_name of this InlineResponse200181.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this InlineResponse200181.


        :param pool_name: The pool_name of this InlineResponse200181.  # noqa: E501
        :type: str
        """
        if pool_name is None:
            raise ValueError("Invalid value for `pool_name`, must not be `None`")  # noqa: E501

        self._pool_name = pool_name

    @property
    def operation(self):
        """Gets the operation of this InlineResponse200181.  # noqa: E501

        \"ADD\" or \"REMOVE\"  # noqa: E501

        :return: The operation of this InlineResponse200181.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this InlineResponse200181.

        \"ADD\" or \"REMOVE\"  # noqa: E501

        :param operation: The operation of this InlineResponse200181.  # noqa: E501
        :type: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def status(self):
        """Gets the status of this InlineResponse200181.  # noqa: E501

        0: pending, 1: success, 2: failed  # noqa: E501

        :return: The status of this InlineResponse200181.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200181.

        0: pending, 1: success, 2: failed  # noqa: E501

        :param status: The status of this InlineResponse200181.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def update_time(self):
        """Gets the update_time of this InlineResponse200181.  # noqa: E501


        :return: The update_time of this InlineResponse200181.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InlineResponse200181.


        :param update_time: The update_time of this InlineResponse200181.  # noqa: E501
        :type: int
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    @property
    def share_amount(self):
        """Gets the share_amount of this InlineResponse200181.  # noqa: E501


        :return: The share_amount of this InlineResponse200181.  # noqa: E501
        :rtype: str
        """
        return self._share_amount

    @share_amount.setter
    def share_amount(self, share_amount):
        """Sets the share_amount of this InlineResponse200181.


        :param share_amount: The share_amount of this InlineResponse200181.  # noqa: E501
        :type: str
        """
        if share_amount is None:
            raise ValueError("Invalid value for `share_amount`, must not be `None`")  # noqa: E501

        self._share_amount = share_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200181, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200181):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
