# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200102(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'counter_party': 'str',
        'email': 'str',
        'type': 'int',
        'asset': 'str',
        'qty': 'str',
        'from_account_type': 'str',
        'to_account_type': 'str',
        'status': 'str',
        'tran_id': 'int',
        'time': 'int'
    }

    attribute_map = {
        'counter_party': 'counterParty',
        'email': 'email',
        'type': 'type',
        'asset': 'asset',
        'qty': 'qty',
        'from_account_type': 'fromAccountType',
        'to_account_type': 'toAccountType',
        'status': 'status',
        'tran_id': 'tranId',
        'time': 'time'
    }

    def __init__(self, counter_party=None, email=None, type=None, asset=None, qty=None, from_account_type=None, to_account_type=None, status=None, tran_id=None, time=None):  # noqa: E501
        """InlineResponse200102 - a model defined in Swagger"""  # noqa: E501
        self._counter_party = None
        self._email = None
        self._type = None
        self._asset = None
        self._qty = None
        self._from_account_type = None
        self._to_account_type = None
        self._status = None
        self._tran_id = None
        self._time = None
        self.discriminator = None
        self.counter_party = counter_party
        self.email = email
        self.type = type
        self.asset = asset
        self.qty = qty
        self.from_account_type = from_account_type
        self.to_account_type = to_account_type
        self.status = status
        self.tran_id = tran_id
        self.time = time

    @property
    def counter_party(self):
        """Gets the counter_party of this InlineResponse200102.  # noqa: E501


        :return: The counter_party of this InlineResponse200102.  # noqa: E501
        :rtype: str
        """
        return self._counter_party

    @counter_party.setter
    def counter_party(self, counter_party):
        """Sets the counter_party of this InlineResponse200102.


        :param counter_party: The counter_party of this InlineResponse200102.  # noqa: E501
        :type: str
        """
        if counter_party is None:
            raise ValueError("Invalid value for `counter_party`, must not be `None`")  # noqa: E501

        self._counter_party = counter_party

    @property
    def email(self):
        """Gets the email of this InlineResponse200102.  # noqa: E501


        :return: The email of this InlineResponse200102.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse200102.


        :param email: The email of this InlineResponse200102.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def type(self):
        """Gets the type of this InlineResponse200102.  # noqa: E501

        1 for transfer in, 2 for transfer out  # noqa: E501

        :return: The type of this InlineResponse200102.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200102.

        1 for transfer in, 2 for transfer out  # noqa: E501

        :param type: The type of this InlineResponse200102.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def asset(self):
        """Gets the asset of this InlineResponse200102.  # noqa: E501


        :return: The asset of this InlineResponse200102.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse200102.


        :param asset: The asset of this InlineResponse200102.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def qty(self):
        """Gets the qty of this InlineResponse200102.  # noqa: E501


        :return: The qty of this InlineResponse200102.  # noqa: E501
        :rtype: str
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this InlineResponse200102.


        :param qty: The qty of this InlineResponse200102.  # noqa: E501
        :type: str
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def from_account_type(self):
        """Gets the from_account_type of this InlineResponse200102.  # noqa: E501


        :return: The from_account_type of this InlineResponse200102.  # noqa: E501
        :rtype: str
        """
        return self._from_account_type

    @from_account_type.setter
    def from_account_type(self, from_account_type):
        """Sets the from_account_type of this InlineResponse200102.


        :param from_account_type: The from_account_type of this InlineResponse200102.  # noqa: E501
        :type: str
        """
        if from_account_type is None:
            raise ValueError("Invalid value for `from_account_type`, must not be `None`")  # noqa: E501

        self._from_account_type = from_account_type

    @property
    def to_account_type(self):
        """Gets the to_account_type of this InlineResponse200102.  # noqa: E501


        :return: The to_account_type of this InlineResponse200102.  # noqa: E501
        :rtype: str
        """
        return self._to_account_type

    @to_account_type.setter
    def to_account_type(self, to_account_type):
        """Sets the to_account_type of this InlineResponse200102.


        :param to_account_type: The to_account_type of this InlineResponse200102.  # noqa: E501
        :type: str
        """
        if to_account_type is None:
            raise ValueError("Invalid value for `to_account_type`, must not be `None`")  # noqa: E501

        self._to_account_type = to_account_type

    @property
    def status(self):
        """Gets the status of this InlineResponse200102.  # noqa: E501


        :return: The status of this InlineResponse200102.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200102.


        :param status: The status of this InlineResponse200102.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def tran_id(self):
        """Gets the tran_id of this InlineResponse200102.  # noqa: E501


        :return: The tran_id of this InlineResponse200102.  # noqa: E501
        :rtype: int
        """
        return self._tran_id

    @tran_id.setter
    def tran_id(self, tran_id):
        """Sets the tran_id of this InlineResponse200102.


        :param tran_id: The tran_id of this InlineResponse200102.  # noqa: E501
        :type: int
        """
        if tran_id is None:
            raise ValueError("Invalid value for `tran_id`, must not be `None`")  # noqa: E501

        self._tran_id = tran_id

    @property
    def time(self):
        """Gets the time of this InlineResponse200102.  # noqa: E501


        :return: The time of this InlineResponse200102.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this InlineResponse200102.


        :param time: The time of this InlineResponse200102.  # noqa: E501
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200102, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200102):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
