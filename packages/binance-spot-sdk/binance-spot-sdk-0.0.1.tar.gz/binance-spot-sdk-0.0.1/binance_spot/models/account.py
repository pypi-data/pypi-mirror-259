# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maker_commission': 'int',
        'taker_commission': 'int',
        'buyer_commission': 'int',
        'seller_commission': 'int',
        'commission_rates': 'AccountCommissionRates',
        'can_trade': 'bool',
        'can_withdraw': 'bool',
        'can_deposit': 'bool',
        'brokered': 'bool',
        'require_self_trade_prevention': 'bool',
        'prevent_sor': 'bool',
        'update_time': 'int',
        'account_type': 'str',
        'balances': 'list[AccountBalances]',
        'permissions': 'list[str]',
        'uid': 'int'
    }

    attribute_map = {
        'maker_commission': 'makerCommission',
        'taker_commission': 'takerCommission',
        'buyer_commission': 'buyerCommission',
        'seller_commission': 'sellerCommission',
        'commission_rates': 'commissionRates',
        'can_trade': 'canTrade',
        'can_withdraw': 'canWithdraw',
        'can_deposit': 'canDeposit',
        'brokered': 'brokered',
        'require_self_trade_prevention': 'requireSelfTradePrevention',
        'prevent_sor': 'preventSor',
        'update_time': 'updateTime',
        'account_type': 'accountType',
        'balances': 'balances',
        'permissions': 'permissions',
        'uid': 'uid'
    }

    def __init__(self, maker_commission=None, taker_commission=None, buyer_commission=None, seller_commission=None, commission_rates=None, can_trade=None, can_withdraw=None, can_deposit=None, brokered=None, require_self_trade_prevention=None, prevent_sor=None, update_time=None, account_type=None, balances=None, permissions=None, uid=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._maker_commission = None
        self._taker_commission = None
        self._buyer_commission = None
        self._seller_commission = None
        self._commission_rates = None
        self._can_trade = None
        self._can_withdraw = None
        self._can_deposit = None
        self._brokered = None
        self._require_self_trade_prevention = None
        self._prevent_sor = None
        self._update_time = None
        self._account_type = None
        self._balances = None
        self._permissions = None
        self._uid = None
        self.discriminator = None
        self.maker_commission = maker_commission
        self.taker_commission = taker_commission
        self.buyer_commission = buyer_commission
        self.seller_commission = seller_commission
        self.commission_rates = commission_rates
        self.can_trade = can_trade
        self.can_withdraw = can_withdraw
        self.can_deposit = can_deposit
        self.brokered = brokered
        self.require_self_trade_prevention = require_self_trade_prevention
        self.prevent_sor = prevent_sor
        self.update_time = update_time
        self.account_type = account_type
        self.balances = balances
        self.permissions = permissions
        self.uid = uid

    @property
    def maker_commission(self):
        """Gets the maker_commission of this Account.  # noqa: E501


        :return: The maker_commission of this Account.  # noqa: E501
        :rtype: int
        """
        return self._maker_commission

    @maker_commission.setter
    def maker_commission(self, maker_commission):
        """Sets the maker_commission of this Account.


        :param maker_commission: The maker_commission of this Account.  # noqa: E501
        :type: int
        """
        if maker_commission is None:
            raise ValueError("Invalid value for `maker_commission`, must not be `None`")  # noqa: E501

        self._maker_commission = maker_commission

    @property
    def taker_commission(self):
        """Gets the taker_commission of this Account.  # noqa: E501


        :return: The taker_commission of this Account.  # noqa: E501
        :rtype: int
        """
        return self._taker_commission

    @taker_commission.setter
    def taker_commission(self, taker_commission):
        """Sets the taker_commission of this Account.


        :param taker_commission: The taker_commission of this Account.  # noqa: E501
        :type: int
        """
        if taker_commission is None:
            raise ValueError("Invalid value for `taker_commission`, must not be `None`")  # noqa: E501

        self._taker_commission = taker_commission

    @property
    def buyer_commission(self):
        """Gets the buyer_commission of this Account.  # noqa: E501


        :return: The buyer_commission of this Account.  # noqa: E501
        :rtype: int
        """
        return self._buyer_commission

    @buyer_commission.setter
    def buyer_commission(self, buyer_commission):
        """Sets the buyer_commission of this Account.


        :param buyer_commission: The buyer_commission of this Account.  # noqa: E501
        :type: int
        """
        if buyer_commission is None:
            raise ValueError("Invalid value for `buyer_commission`, must not be `None`")  # noqa: E501

        self._buyer_commission = buyer_commission

    @property
    def seller_commission(self):
        """Gets the seller_commission of this Account.  # noqa: E501


        :return: The seller_commission of this Account.  # noqa: E501
        :rtype: int
        """
        return self._seller_commission

    @seller_commission.setter
    def seller_commission(self, seller_commission):
        """Sets the seller_commission of this Account.


        :param seller_commission: The seller_commission of this Account.  # noqa: E501
        :type: int
        """
        if seller_commission is None:
            raise ValueError("Invalid value for `seller_commission`, must not be `None`")  # noqa: E501

        self._seller_commission = seller_commission

    @property
    def commission_rates(self):
        """Gets the commission_rates of this Account.  # noqa: E501


        :return: The commission_rates of this Account.  # noqa: E501
        :rtype: AccountCommissionRates
        """
        return self._commission_rates

    @commission_rates.setter
    def commission_rates(self, commission_rates):
        """Sets the commission_rates of this Account.


        :param commission_rates: The commission_rates of this Account.  # noqa: E501
        :type: AccountCommissionRates
        """
        if commission_rates is None:
            raise ValueError("Invalid value for `commission_rates`, must not be `None`")  # noqa: E501

        self._commission_rates = commission_rates

    @property
    def can_trade(self):
        """Gets the can_trade of this Account.  # noqa: E501


        :return: The can_trade of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._can_trade

    @can_trade.setter
    def can_trade(self, can_trade):
        """Sets the can_trade of this Account.


        :param can_trade: The can_trade of this Account.  # noqa: E501
        :type: bool
        """
        if can_trade is None:
            raise ValueError("Invalid value for `can_trade`, must not be `None`")  # noqa: E501

        self._can_trade = can_trade

    @property
    def can_withdraw(self):
        """Gets the can_withdraw of this Account.  # noqa: E501


        :return: The can_withdraw of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._can_withdraw

    @can_withdraw.setter
    def can_withdraw(self, can_withdraw):
        """Sets the can_withdraw of this Account.


        :param can_withdraw: The can_withdraw of this Account.  # noqa: E501
        :type: bool
        """
        if can_withdraw is None:
            raise ValueError("Invalid value for `can_withdraw`, must not be `None`")  # noqa: E501

        self._can_withdraw = can_withdraw

    @property
    def can_deposit(self):
        """Gets the can_deposit of this Account.  # noqa: E501


        :return: The can_deposit of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._can_deposit

    @can_deposit.setter
    def can_deposit(self, can_deposit):
        """Sets the can_deposit of this Account.


        :param can_deposit: The can_deposit of this Account.  # noqa: E501
        :type: bool
        """
        if can_deposit is None:
            raise ValueError("Invalid value for `can_deposit`, must not be `None`")  # noqa: E501

        self._can_deposit = can_deposit

    @property
    def brokered(self):
        """Gets the brokered of this Account.  # noqa: E501


        :return: The brokered of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._brokered

    @brokered.setter
    def brokered(self, brokered):
        """Sets the brokered of this Account.


        :param brokered: The brokered of this Account.  # noqa: E501
        :type: bool
        """
        if brokered is None:
            raise ValueError("Invalid value for `brokered`, must not be `None`")  # noqa: E501

        self._brokered = brokered

    @property
    def require_self_trade_prevention(self):
        """Gets the require_self_trade_prevention of this Account.  # noqa: E501


        :return: The require_self_trade_prevention of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._require_self_trade_prevention

    @require_self_trade_prevention.setter
    def require_self_trade_prevention(self, require_self_trade_prevention):
        """Sets the require_self_trade_prevention of this Account.


        :param require_self_trade_prevention: The require_self_trade_prevention of this Account.  # noqa: E501
        :type: bool
        """
        if require_self_trade_prevention is None:
            raise ValueError("Invalid value for `require_self_trade_prevention`, must not be `None`")  # noqa: E501

        self._require_self_trade_prevention = require_self_trade_prevention

    @property
    def prevent_sor(self):
        """Gets the prevent_sor of this Account.  # noqa: E501


        :return: The prevent_sor of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._prevent_sor

    @prevent_sor.setter
    def prevent_sor(self, prevent_sor):
        """Sets the prevent_sor of this Account.


        :param prevent_sor: The prevent_sor of this Account.  # noqa: E501
        :type: bool
        """
        if prevent_sor is None:
            raise ValueError("Invalid value for `prevent_sor`, must not be `None`")  # noqa: E501

        self._prevent_sor = prevent_sor

    @property
    def update_time(self):
        """Gets the update_time of this Account.  # noqa: E501


        :return: The update_time of this Account.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Account.


        :param update_time: The update_time of this Account.  # noqa: E501
        :type: int
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    @property
    def account_type(self):
        """Gets the account_type of this Account.  # noqa: E501


        :return: The account_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Account.


        :param account_type: The account_type of this Account.  # noqa: E501
        :type: str
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")  # noqa: E501

        self._account_type = account_type

    @property
    def balances(self):
        """Gets the balances of this Account.  # noqa: E501


        :return: The balances of this Account.  # noqa: E501
        :rtype: list[AccountBalances]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this Account.


        :param balances: The balances of this Account.  # noqa: E501
        :type: list[AccountBalances]
        """
        if balances is None:
            raise ValueError("Invalid value for `balances`, must not be `None`")  # noqa: E501

        self._balances = balances

    @property
    def permissions(self):
        """Gets the permissions of this Account.  # noqa: E501


        :return: The permissions of this Account.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Account.


        :param permissions: The permissions of this Account.  # noqa: E501
        :type: list[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def uid(self):
        """Gets the uid of this Account.  # noqa: E501


        :return: The uid of this Account.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Account.


        :param uid: The uid of this Account.  # noqa: E501
        :type: int
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
