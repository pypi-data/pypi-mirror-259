# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200231List(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_no': 'str',
        'tokens': 'list[InlineResponse200231Tokens]',
        'trade_time': 'int',
        'trade_amount': 'str',
        'trade_currency': 'str'
    }

    attribute_map = {
        'order_no': 'orderNo',
        'tokens': 'tokens',
        'trade_time': 'tradeTime',
        'trade_amount': 'tradeAmount',
        'trade_currency': 'tradeCurrency'
    }

    def __init__(self, order_no=None, tokens=None, trade_time=None, trade_amount=None, trade_currency=None):  # noqa: E501
        """InlineResponse200231List - a model defined in Swagger"""  # noqa: E501
        self._order_no = None
        self._tokens = None
        self._trade_time = None
        self._trade_amount = None
        self._trade_currency = None
        self.discriminator = None
        self.order_no = order_no
        self.tokens = tokens
        self.trade_time = trade_time
        self.trade_amount = trade_amount
        self.trade_currency = trade_currency

    @property
    def order_no(self):
        """Gets the order_no of this InlineResponse200231List.  # noqa: E501

        0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee  # noqa: E501

        :return: The order_no of this InlineResponse200231List.  # noqa: E501
        :rtype: str
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """Sets the order_no of this InlineResponse200231List.

        0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee  # noqa: E501

        :param order_no: The order_no of this InlineResponse200231List.  # noqa: E501
        :type: str
        """
        if order_no is None:
            raise ValueError("Invalid value for `order_no`, must not be `None`")  # noqa: E501

        self._order_no = order_no

    @property
    def tokens(self):
        """Gets the tokens of this InlineResponse200231List.  # noqa: E501


        :return: The tokens of this InlineResponse200231List.  # noqa: E501
        :rtype: list[InlineResponse200231Tokens]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this InlineResponse200231List.


        :param tokens: The tokens of this InlineResponse200231List.  # noqa: E501
        :type: list[InlineResponse200231Tokens]
        """
        if tokens is None:
            raise ValueError("Invalid value for `tokens`, must not be `None`")  # noqa: E501

        self._tokens = tokens

    @property
    def trade_time(self):
        """Gets the trade_time of this InlineResponse200231List.  # noqa: E501


        :return: The trade_time of this InlineResponse200231List.  # noqa: E501
        :rtype: int
        """
        return self._trade_time

    @trade_time.setter
    def trade_time(self, trade_time):
        """Sets the trade_time of this InlineResponse200231List.


        :param trade_time: The trade_time of this InlineResponse200231List.  # noqa: E501
        :type: int
        """
        if trade_time is None:
            raise ValueError("Invalid value for `trade_time`, must not be `None`")  # noqa: E501

        self._trade_time = trade_time

    @property
    def trade_amount(self):
        """Gets the trade_amount of this InlineResponse200231List.  # noqa: E501


        :return: The trade_amount of this InlineResponse200231List.  # noqa: E501
        :rtype: str
        """
        return self._trade_amount

    @trade_amount.setter
    def trade_amount(self, trade_amount):
        """Sets the trade_amount of this InlineResponse200231List.


        :param trade_amount: The trade_amount of this InlineResponse200231List.  # noqa: E501
        :type: str
        """
        if trade_amount is None:
            raise ValueError("Invalid value for `trade_amount`, must not be `None`")  # noqa: E501

        self._trade_amount = trade_amount

    @property
    def trade_currency(self):
        """Gets the trade_currency of this InlineResponse200231List.  # noqa: E501


        :return: The trade_currency of this InlineResponse200231List.  # noqa: E501
        :rtype: str
        """
        return self._trade_currency

    @trade_currency.setter
    def trade_currency(self, trade_currency):
        """Sets the trade_currency of this InlineResponse200231List.


        :param trade_currency: The trade_currency of this InlineResponse200231List.  # noqa: E501
        :type: str
        """
        if trade_currency is None:
            raise ValueError("Invalid value for `trade_currency`, must not be `None`")  # noqa: E501

        self._trade_currency = trade_currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200231List, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200231List):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
