# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubAccountUSDTFuturesDetailsFutureAccountResp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'assets': 'list[SubAccountUSDTFuturesDetailsFutureAccountRespAssets]',
        'can_deposit': 'bool',
        'can_trade': 'bool',
        'can_withdraw': 'bool',
        'fee_tier': 'int',
        'max_withdraw_amount': 'str',
        'total_initial_margin': 'str',
        'total_maintenance_margin': 'str',
        'total_margin_balance': 'str',
        'total_open_order_initial_margin': 'str',
        'total_position_initial_margin': 'str',
        'total_unrealized_profit': 'str',
        'total_wallet_balance': 'str',
        'update_time': 'int'
    }

    attribute_map = {
        'email': 'email',
        'assets': 'assets',
        'can_deposit': 'canDeposit',
        'can_trade': 'canTrade',
        'can_withdraw': 'canWithdraw',
        'fee_tier': 'feeTier',
        'max_withdraw_amount': 'maxWithdrawAmount',
        'total_initial_margin': 'totalInitialMargin',
        'total_maintenance_margin': 'totalMaintenanceMargin',
        'total_margin_balance': 'totalMarginBalance',
        'total_open_order_initial_margin': 'totalOpenOrderInitialMargin',
        'total_position_initial_margin': 'totalPositionInitialMargin',
        'total_unrealized_profit': 'totalUnrealizedProfit',
        'total_wallet_balance': 'totalWalletBalance',
        'update_time': 'updateTime'
    }

    def __init__(self, email=None, assets=None, can_deposit=None, can_trade=None, can_withdraw=None, fee_tier=None, max_withdraw_amount=None, total_initial_margin=None, total_maintenance_margin=None, total_margin_balance=None, total_open_order_initial_margin=None, total_position_initial_margin=None, total_unrealized_profit=None, total_wallet_balance=None, update_time=None):  # noqa: E501
        """SubAccountUSDTFuturesDetailsFutureAccountResp - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._assets = None
        self._can_deposit = None
        self._can_trade = None
        self._can_withdraw = None
        self._fee_tier = None
        self._max_withdraw_amount = None
        self._total_initial_margin = None
        self._total_maintenance_margin = None
        self._total_margin_balance = None
        self._total_open_order_initial_margin = None
        self._total_position_initial_margin = None
        self._total_unrealized_profit = None
        self._total_wallet_balance = None
        self._update_time = None
        self.discriminator = None
        self.email = email
        self.assets = assets
        self.can_deposit = can_deposit
        self.can_trade = can_trade
        self.can_withdraw = can_withdraw
        self.fee_tier = fee_tier
        self.max_withdraw_amount = max_withdraw_amount
        self.total_initial_margin = total_initial_margin
        self.total_maintenance_margin = total_maintenance_margin
        self.total_margin_balance = total_margin_balance
        self.total_open_order_initial_margin = total_open_order_initial_margin
        self.total_position_initial_margin = total_position_initial_margin
        self.total_unrealized_profit = total_unrealized_profit
        self.total_wallet_balance = total_wallet_balance
        self.update_time = update_time

    @property
    def email(self):
        """Gets the email of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The email of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param email: The email of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def assets(self):
        """Gets the assets of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The assets of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: list[SubAccountUSDTFuturesDetailsFutureAccountRespAssets]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param assets: The assets of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: list[SubAccountUSDTFuturesDetailsFutureAccountRespAssets]
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501

        self._assets = assets

    @property
    def can_deposit(self):
        """Gets the can_deposit of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The can_deposit of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: bool
        """
        return self._can_deposit

    @can_deposit.setter
    def can_deposit(self, can_deposit):
        """Sets the can_deposit of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param can_deposit: The can_deposit of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: bool
        """
        if can_deposit is None:
            raise ValueError("Invalid value for `can_deposit`, must not be `None`")  # noqa: E501

        self._can_deposit = can_deposit

    @property
    def can_trade(self):
        """Gets the can_trade of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The can_trade of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: bool
        """
        return self._can_trade

    @can_trade.setter
    def can_trade(self, can_trade):
        """Sets the can_trade of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param can_trade: The can_trade of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: bool
        """
        if can_trade is None:
            raise ValueError("Invalid value for `can_trade`, must not be `None`")  # noqa: E501

        self._can_trade = can_trade

    @property
    def can_withdraw(self):
        """Gets the can_withdraw of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The can_withdraw of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: bool
        """
        return self._can_withdraw

    @can_withdraw.setter
    def can_withdraw(self, can_withdraw):
        """Sets the can_withdraw of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param can_withdraw: The can_withdraw of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: bool
        """
        if can_withdraw is None:
            raise ValueError("Invalid value for `can_withdraw`, must not be `None`")  # noqa: E501

        self._can_withdraw = can_withdraw

    @property
    def fee_tier(self):
        """Gets the fee_tier of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The fee_tier of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: int
        """
        return self._fee_tier

    @fee_tier.setter
    def fee_tier(self, fee_tier):
        """Sets the fee_tier of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param fee_tier: The fee_tier of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: int
        """
        if fee_tier is None:
            raise ValueError("Invalid value for `fee_tier`, must not be `None`")  # noqa: E501

        self._fee_tier = fee_tier

    @property
    def max_withdraw_amount(self):
        """Gets the max_withdraw_amount of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The max_withdraw_amount of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: str
        """
        return self._max_withdraw_amount

    @max_withdraw_amount.setter
    def max_withdraw_amount(self, max_withdraw_amount):
        """Sets the max_withdraw_amount of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param max_withdraw_amount: The max_withdraw_amount of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: str
        """
        if max_withdraw_amount is None:
            raise ValueError("Invalid value for `max_withdraw_amount`, must not be `None`")  # noqa: E501

        self._max_withdraw_amount = max_withdraw_amount

    @property
    def total_initial_margin(self):
        """Gets the total_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The total_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: str
        """
        return self._total_initial_margin

    @total_initial_margin.setter
    def total_initial_margin(self, total_initial_margin):
        """Sets the total_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param total_initial_margin: The total_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: str
        """
        if total_initial_margin is None:
            raise ValueError("Invalid value for `total_initial_margin`, must not be `None`")  # noqa: E501

        self._total_initial_margin = total_initial_margin

    @property
    def total_maintenance_margin(self):
        """Gets the total_maintenance_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The total_maintenance_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: str
        """
        return self._total_maintenance_margin

    @total_maintenance_margin.setter
    def total_maintenance_margin(self, total_maintenance_margin):
        """Sets the total_maintenance_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param total_maintenance_margin: The total_maintenance_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: str
        """
        if total_maintenance_margin is None:
            raise ValueError("Invalid value for `total_maintenance_margin`, must not be `None`")  # noqa: E501

        self._total_maintenance_margin = total_maintenance_margin

    @property
    def total_margin_balance(self):
        """Gets the total_margin_balance of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The total_margin_balance of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: str
        """
        return self._total_margin_balance

    @total_margin_balance.setter
    def total_margin_balance(self, total_margin_balance):
        """Sets the total_margin_balance of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param total_margin_balance: The total_margin_balance of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: str
        """
        if total_margin_balance is None:
            raise ValueError("Invalid value for `total_margin_balance`, must not be `None`")  # noqa: E501

        self._total_margin_balance = total_margin_balance

    @property
    def total_open_order_initial_margin(self):
        """Gets the total_open_order_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The total_open_order_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: str
        """
        return self._total_open_order_initial_margin

    @total_open_order_initial_margin.setter
    def total_open_order_initial_margin(self, total_open_order_initial_margin):
        """Sets the total_open_order_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param total_open_order_initial_margin: The total_open_order_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: str
        """
        if total_open_order_initial_margin is None:
            raise ValueError("Invalid value for `total_open_order_initial_margin`, must not be `None`")  # noqa: E501

        self._total_open_order_initial_margin = total_open_order_initial_margin

    @property
    def total_position_initial_margin(self):
        """Gets the total_position_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The total_position_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: str
        """
        return self._total_position_initial_margin

    @total_position_initial_margin.setter
    def total_position_initial_margin(self, total_position_initial_margin):
        """Sets the total_position_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param total_position_initial_margin: The total_position_initial_margin of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: str
        """
        if total_position_initial_margin is None:
            raise ValueError("Invalid value for `total_position_initial_margin`, must not be `None`")  # noqa: E501

        self._total_position_initial_margin = total_position_initial_margin

    @property
    def total_unrealized_profit(self):
        """Gets the total_unrealized_profit of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The total_unrealized_profit of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: str
        """
        return self._total_unrealized_profit

    @total_unrealized_profit.setter
    def total_unrealized_profit(self, total_unrealized_profit):
        """Sets the total_unrealized_profit of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param total_unrealized_profit: The total_unrealized_profit of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: str
        """
        if total_unrealized_profit is None:
            raise ValueError("Invalid value for `total_unrealized_profit`, must not be `None`")  # noqa: E501

        self._total_unrealized_profit = total_unrealized_profit

    @property
    def total_wallet_balance(self):
        """Gets the total_wallet_balance of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The total_wallet_balance of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: str
        """
        return self._total_wallet_balance

    @total_wallet_balance.setter
    def total_wallet_balance(self, total_wallet_balance):
        """Sets the total_wallet_balance of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param total_wallet_balance: The total_wallet_balance of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: str
        """
        if total_wallet_balance is None:
            raise ValueError("Invalid value for `total_wallet_balance`, must not be `None`")  # noqa: E501

        self._total_wallet_balance = total_wallet_balance

    @property
    def update_time(self):
        """Gets the update_time of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501


        :return: The update_time of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :rtype: int
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this SubAccountUSDTFuturesDetailsFutureAccountResp.


        :param update_time: The update_time of this SubAccountUSDTFuturesDetailsFutureAccountResp.  # noqa: E501
        :type: int
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubAccountUSDTFuturesDetailsFutureAccountResp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubAccountUSDTFuturesDetailsFutureAccountResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
