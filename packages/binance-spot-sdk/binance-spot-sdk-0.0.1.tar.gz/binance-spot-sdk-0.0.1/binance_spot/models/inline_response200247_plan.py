# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200247Plan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_id': 'int',
        'plan_type': 'str',
        'edit_allowed': 'str',
        'flexible_allowed_to_use': 'str',
        'creation_date_time': 'int',
        'first_execution_date_time': 'int',
        'next_execution_date_time': 'int',
        'status': 'str',
        'target_asset': 'str',
        'source_asset': 'str',
        'total_invested_in_usd': 'str',
        'plan_value_in_usd': 'str',
        'pnl_in_usd': 'str',
        'roi': 'str',
        'details': 'list[InlineResponse200247Details]'
    }

    attribute_map = {
        'plan_id': 'planId',
        'plan_type': 'planType',
        'edit_allowed': 'editAllowed',
        'flexible_allowed_to_use': 'flexibleAllowedToUse',
        'creation_date_time': 'creationDateTime',
        'first_execution_date_time': 'firstExecutionDateTime',
        'next_execution_date_time': 'nextExecutionDateTime',
        'status': 'status',
        'target_asset': 'targetAsset',
        'source_asset': 'sourceAsset',
        'total_invested_in_usd': 'totalInvestedInUSD',
        'plan_value_in_usd': 'planValueInUSD',
        'pnl_in_usd': 'pnlInUSD',
        'roi': 'roi',
        'details': 'details'
    }

    def __init__(self, plan_id=None, plan_type=None, edit_allowed=None, flexible_allowed_to_use=None, creation_date_time=None, first_execution_date_time=None, next_execution_date_time=None, status=None, target_asset=None, source_asset=None, total_invested_in_usd=None, plan_value_in_usd=None, pnl_in_usd=None, roi=None, details=None):  # noqa: E501
        """InlineResponse200247Plan - a model defined in Swagger"""  # noqa: E501
        self._plan_id = None
        self._plan_type = None
        self._edit_allowed = None
        self._flexible_allowed_to_use = None
        self._creation_date_time = None
        self._first_execution_date_time = None
        self._next_execution_date_time = None
        self._status = None
        self._target_asset = None
        self._source_asset = None
        self._total_invested_in_usd = None
        self._plan_value_in_usd = None
        self._pnl_in_usd = None
        self._roi = None
        self._details = None
        self.discriminator = None
        self.plan_id = plan_id
        self.plan_type = plan_type
        self.edit_allowed = edit_allowed
        self.flexible_allowed_to_use = flexible_allowed_to_use
        self.creation_date_time = creation_date_time
        self.first_execution_date_time = first_execution_date_time
        self.next_execution_date_time = next_execution_date_time
        self.status = status
        self.target_asset = target_asset
        self.source_asset = source_asset
        self.total_invested_in_usd = total_invested_in_usd
        self.plan_value_in_usd = plan_value_in_usd
        self.pnl_in_usd = pnl_in_usd
        self.roi = roi
        self.details = details

    @property
    def plan_id(self):
        """Gets the plan_id of this InlineResponse200247Plan.  # noqa: E501


        :return: The plan_id of this InlineResponse200247Plan.  # noqa: E501
        :rtype: int
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this InlineResponse200247Plan.


        :param plan_id: The plan_id of this InlineResponse200247Plan.  # noqa: E501
        :type: int
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")  # noqa: E501

        self._plan_id = plan_id

    @property
    def plan_type(self):
        """Gets the plan_type of this InlineResponse200247Plan.  # noqa: E501


        :return: The plan_type of this InlineResponse200247Plan.  # noqa: E501
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this InlineResponse200247Plan.


        :param plan_type: The plan_type of this InlineResponse200247Plan.  # noqa: E501
        :type: str
        """
        if plan_type is None:
            raise ValueError("Invalid value for `plan_type`, must not be `None`")  # noqa: E501

        self._plan_type = plan_type

    @property
    def edit_allowed(self):
        """Gets the edit_allowed of this InlineResponse200247Plan.  # noqa: E501


        :return: The edit_allowed of this InlineResponse200247Plan.  # noqa: E501
        :rtype: str
        """
        return self._edit_allowed

    @edit_allowed.setter
    def edit_allowed(self, edit_allowed):
        """Sets the edit_allowed of this InlineResponse200247Plan.


        :param edit_allowed: The edit_allowed of this InlineResponse200247Plan.  # noqa: E501
        :type: str
        """
        if edit_allowed is None:
            raise ValueError("Invalid value for `edit_allowed`, must not be `None`")  # noqa: E501

        self._edit_allowed = edit_allowed

    @property
    def flexible_allowed_to_use(self):
        """Gets the flexible_allowed_to_use of this InlineResponse200247Plan.  # noqa: E501


        :return: The flexible_allowed_to_use of this InlineResponse200247Plan.  # noqa: E501
        :rtype: str
        """
        return self._flexible_allowed_to_use

    @flexible_allowed_to_use.setter
    def flexible_allowed_to_use(self, flexible_allowed_to_use):
        """Sets the flexible_allowed_to_use of this InlineResponse200247Plan.


        :param flexible_allowed_to_use: The flexible_allowed_to_use of this InlineResponse200247Plan.  # noqa: E501
        :type: str
        """
        if flexible_allowed_to_use is None:
            raise ValueError("Invalid value for `flexible_allowed_to_use`, must not be `None`")  # noqa: E501

        self._flexible_allowed_to_use = flexible_allowed_to_use

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this InlineResponse200247Plan.  # noqa: E501


        :return: The creation_date_time of this InlineResponse200247Plan.  # noqa: E501
        :rtype: int
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this InlineResponse200247Plan.


        :param creation_date_time: The creation_date_time of this InlineResponse200247Plan.  # noqa: E501
        :type: int
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    @property
    def first_execution_date_time(self):
        """Gets the first_execution_date_time of this InlineResponse200247Plan.  # noqa: E501


        :return: The first_execution_date_time of this InlineResponse200247Plan.  # noqa: E501
        :rtype: int
        """
        return self._first_execution_date_time

    @first_execution_date_time.setter
    def first_execution_date_time(self, first_execution_date_time):
        """Sets the first_execution_date_time of this InlineResponse200247Plan.


        :param first_execution_date_time: The first_execution_date_time of this InlineResponse200247Plan.  # noqa: E501
        :type: int
        """
        if first_execution_date_time is None:
            raise ValueError("Invalid value for `first_execution_date_time`, must not be `None`")  # noqa: E501

        self._first_execution_date_time = first_execution_date_time

    @property
    def next_execution_date_time(self):
        """Gets the next_execution_date_time of this InlineResponse200247Plan.  # noqa: E501


        :return: The next_execution_date_time of this InlineResponse200247Plan.  # noqa: E501
        :rtype: int
        """
        return self._next_execution_date_time

    @next_execution_date_time.setter
    def next_execution_date_time(self, next_execution_date_time):
        """Sets the next_execution_date_time of this InlineResponse200247Plan.


        :param next_execution_date_time: The next_execution_date_time of this InlineResponse200247Plan.  # noqa: E501
        :type: int
        """
        if next_execution_date_time is None:
            raise ValueError("Invalid value for `next_execution_date_time`, must not be `None`")  # noqa: E501

        self._next_execution_date_time = next_execution_date_time

    @property
    def status(self):
        """Gets the status of this InlineResponse200247Plan.  # noqa: E501


        :return: The status of this InlineResponse200247Plan.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200247Plan.


        :param status: The status of this InlineResponse200247Plan.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def target_asset(self):
        """Gets the target_asset of this InlineResponse200247Plan.  # noqa: E501


        :return: The target_asset of this InlineResponse200247Plan.  # noqa: E501
        :rtype: str
        """
        return self._target_asset

    @target_asset.setter
    def target_asset(self, target_asset):
        """Sets the target_asset of this InlineResponse200247Plan.


        :param target_asset: The target_asset of this InlineResponse200247Plan.  # noqa: E501
        :type: str
        """
        if target_asset is None:
            raise ValueError("Invalid value for `target_asset`, must not be `None`")  # noqa: E501

        self._target_asset = target_asset

    @property
    def source_asset(self):
        """Gets the source_asset of this InlineResponse200247Plan.  # noqa: E501


        :return: The source_asset of this InlineResponse200247Plan.  # noqa: E501
        :rtype: str
        """
        return self._source_asset

    @source_asset.setter
    def source_asset(self, source_asset):
        """Sets the source_asset of this InlineResponse200247Plan.


        :param source_asset: The source_asset of this InlineResponse200247Plan.  # noqa: E501
        :type: str
        """
        if source_asset is None:
            raise ValueError("Invalid value for `source_asset`, must not be `None`")  # noqa: E501

        self._source_asset = source_asset

    @property
    def total_invested_in_usd(self):
        """Gets the total_invested_in_usd of this InlineResponse200247Plan.  # noqa: E501


        :return: The total_invested_in_usd of this InlineResponse200247Plan.  # noqa: E501
        :rtype: str
        """
        return self._total_invested_in_usd

    @total_invested_in_usd.setter
    def total_invested_in_usd(self, total_invested_in_usd):
        """Sets the total_invested_in_usd of this InlineResponse200247Plan.


        :param total_invested_in_usd: The total_invested_in_usd of this InlineResponse200247Plan.  # noqa: E501
        :type: str
        """
        if total_invested_in_usd is None:
            raise ValueError("Invalid value for `total_invested_in_usd`, must not be `None`")  # noqa: E501

        self._total_invested_in_usd = total_invested_in_usd

    @property
    def plan_value_in_usd(self):
        """Gets the plan_value_in_usd of this InlineResponse200247Plan.  # noqa: E501


        :return: The plan_value_in_usd of this InlineResponse200247Plan.  # noqa: E501
        :rtype: str
        """
        return self._plan_value_in_usd

    @plan_value_in_usd.setter
    def plan_value_in_usd(self, plan_value_in_usd):
        """Sets the plan_value_in_usd of this InlineResponse200247Plan.


        :param plan_value_in_usd: The plan_value_in_usd of this InlineResponse200247Plan.  # noqa: E501
        :type: str
        """
        if plan_value_in_usd is None:
            raise ValueError("Invalid value for `plan_value_in_usd`, must not be `None`")  # noqa: E501

        self._plan_value_in_usd = plan_value_in_usd

    @property
    def pnl_in_usd(self):
        """Gets the pnl_in_usd of this InlineResponse200247Plan.  # noqa: E501


        :return: The pnl_in_usd of this InlineResponse200247Plan.  # noqa: E501
        :rtype: str
        """
        return self._pnl_in_usd

    @pnl_in_usd.setter
    def pnl_in_usd(self, pnl_in_usd):
        """Sets the pnl_in_usd of this InlineResponse200247Plan.


        :param pnl_in_usd: The pnl_in_usd of this InlineResponse200247Plan.  # noqa: E501
        :type: str
        """
        if pnl_in_usd is None:
            raise ValueError("Invalid value for `pnl_in_usd`, must not be `None`")  # noqa: E501

        self._pnl_in_usd = pnl_in_usd

    @property
    def roi(self):
        """Gets the roi of this InlineResponse200247Plan.  # noqa: E501


        :return: The roi of this InlineResponse200247Plan.  # noqa: E501
        :rtype: str
        """
        return self._roi

    @roi.setter
    def roi(self, roi):
        """Sets the roi of this InlineResponse200247Plan.


        :param roi: The roi of this InlineResponse200247Plan.  # noqa: E501
        :type: str
        """
        if roi is None:
            raise ValueError("Invalid value for `roi`, must not be `None`")  # noqa: E501

        self._roi = roi

    @property
    def details(self):
        """Gets the details of this InlineResponse200247Plan.  # noqa: E501


        :return: The details of this InlineResponse200247Plan.  # noqa: E501
        :rtype: list[InlineResponse200247Details]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this InlineResponse200247Plan.


        :param details: The details of this InlineResponse200247Plan.  # noqa: E501
        :type: list[InlineResponse200247Details]
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200247Plan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200247Plan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
