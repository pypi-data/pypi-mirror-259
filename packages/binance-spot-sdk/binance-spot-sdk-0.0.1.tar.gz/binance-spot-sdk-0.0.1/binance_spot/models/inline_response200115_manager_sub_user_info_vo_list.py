# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200115ManagerSubUserInfoVoList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'root_user_id': 'int',
        'managersub_user_id': 'int',
        'bind_parent_user_id': 'int',
        'email': 'str',
        'insert_time_stamp': 'int',
        'bind_parent_email': 'str',
        'is_sub_user_enabled': 'bool',
        'is_user_active': 'bool',
        'is_margin_enabled': 'bool',
        'is_future_enabled': 'bool',
        'is_signed_lvt_risk_agreement': 'bool'
    }

    attribute_map = {
        'root_user_id': 'rootUserId',
        'managersub_user_id': 'managersubUserId',
        'bind_parent_user_id': 'bindParentUserId',
        'email': 'email',
        'insert_time_stamp': 'insertTimeStamp',
        'bind_parent_email': 'bindParentEmail',
        'is_sub_user_enabled': 'isSubUserEnabled',
        'is_user_active': 'isUserActive',
        'is_margin_enabled': 'isMarginEnabled',
        'is_future_enabled': 'isFutureEnabled',
        'is_signed_lvt_risk_agreement': 'isSignedLVTRiskAgreement'
    }

    def __init__(self, root_user_id=None, managersub_user_id=None, bind_parent_user_id=None, email=None, insert_time_stamp=None, bind_parent_email=None, is_sub_user_enabled=None, is_user_active=None, is_margin_enabled=None, is_future_enabled=None, is_signed_lvt_risk_agreement=None):  # noqa: E501
        """InlineResponse200115ManagerSubUserInfoVoList - a model defined in Swagger"""  # noqa: E501
        self._root_user_id = None
        self._managersub_user_id = None
        self._bind_parent_user_id = None
        self._email = None
        self._insert_time_stamp = None
        self._bind_parent_email = None
        self._is_sub_user_enabled = None
        self._is_user_active = None
        self._is_margin_enabled = None
        self._is_future_enabled = None
        self._is_signed_lvt_risk_agreement = None
        self.discriminator = None
        self.root_user_id = root_user_id
        self.managersub_user_id = managersub_user_id
        self.bind_parent_user_id = bind_parent_user_id
        if email is not None:
            self.email = email
        self.insert_time_stamp = insert_time_stamp
        self.bind_parent_email = bind_parent_email
        self.is_sub_user_enabled = is_sub_user_enabled
        self.is_user_active = is_user_active
        self.is_margin_enabled = is_margin_enabled
        self.is_future_enabled = is_future_enabled
        self.is_signed_lvt_risk_agreement = is_signed_lvt_risk_agreement

    @property
    def root_user_id(self):
        """Gets the root_user_id of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The root_user_id of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: int
        """
        return self._root_user_id

    @root_user_id.setter
    def root_user_id(self, root_user_id):
        """Sets the root_user_id of this InlineResponse200115ManagerSubUserInfoVoList.


        :param root_user_id: The root_user_id of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: int
        """
        if root_user_id is None:
            raise ValueError("Invalid value for `root_user_id`, must not be `None`")  # noqa: E501

        self._root_user_id = root_user_id

    @property
    def managersub_user_id(self):
        """Gets the managersub_user_id of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The managersub_user_id of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: int
        """
        return self._managersub_user_id

    @managersub_user_id.setter
    def managersub_user_id(self, managersub_user_id):
        """Sets the managersub_user_id of this InlineResponse200115ManagerSubUserInfoVoList.


        :param managersub_user_id: The managersub_user_id of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: int
        """
        if managersub_user_id is None:
            raise ValueError("Invalid value for `managersub_user_id`, must not be `None`")  # noqa: E501

        self._managersub_user_id = managersub_user_id

    @property
    def bind_parent_user_id(self):
        """Gets the bind_parent_user_id of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The bind_parent_user_id of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: int
        """
        return self._bind_parent_user_id

    @bind_parent_user_id.setter
    def bind_parent_user_id(self, bind_parent_user_id):
        """Sets the bind_parent_user_id of this InlineResponse200115ManagerSubUserInfoVoList.


        :param bind_parent_user_id: The bind_parent_user_id of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: int
        """
        if bind_parent_user_id is None:
            raise ValueError("Invalid value for `bind_parent_user_id`, must not be `None`")  # noqa: E501

        self._bind_parent_user_id = bind_parent_user_id

    @property
    def email(self):
        """Gets the email of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The email of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse200115ManagerSubUserInfoVoList.


        :param email: The email of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def insert_time_stamp(self):
        """Gets the insert_time_stamp of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The insert_time_stamp of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: int
        """
        return self._insert_time_stamp

    @insert_time_stamp.setter
    def insert_time_stamp(self, insert_time_stamp):
        """Sets the insert_time_stamp of this InlineResponse200115ManagerSubUserInfoVoList.


        :param insert_time_stamp: The insert_time_stamp of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: int
        """
        if insert_time_stamp is None:
            raise ValueError("Invalid value for `insert_time_stamp`, must not be `None`")  # noqa: E501

        self._insert_time_stamp = insert_time_stamp

    @property
    def bind_parent_email(self):
        """Gets the bind_parent_email of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The bind_parent_email of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: str
        """
        return self._bind_parent_email

    @bind_parent_email.setter
    def bind_parent_email(self, bind_parent_email):
        """Sets the bind_parent_email of this InlineResponse200115ManagerSubUserInfoVoList.


        :param bind_parent_email: The bind_parent_email of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: str
        """
        if bind_parent_email is None:
            raise ValueError("Invalid value for `bind_parent_email`, must not be `None`")  # noqa: E501

        self._bind_parent_email = bind_parent_email

    @property
    def is_sub_user_enabled(self):
        """Gets the is_sub_user_enabled of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The is_sub_user_enabled of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: bool
        """
        return self._is_sub_user_enabled

    @is_sub_user_enabled.setter
    def is_sub_user_enabled(self, is_sub_user_enabled):
        """Sets the is_sub_user_enabled of this InlineResponse200115ManagerSubUserInfoVoList.


        :param is_sub_user_enabled: The is_sub_user_enabled of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: bool
        """
        if is_sub_user_enabled is None:
            raise ValueError("Invalid value for `is_sub_user_enabled`, must not be `None`")  # noqa: E501

        self._is_sub_user_enabled = is_sub_user_enabled

    @property
    def is_user_active(self):
        """Gets the is_user_active of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The is_user_active of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: bool
        """
        return self._is_user_active

    @is_user_active.setter
    def is_user_active(self, is_user_active):
        """Sets the is_user_active of this InlineResponse200115ManagerSubUserInfoVoList.


        :param is_user_active: The is_user_active of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: bool
        """
        if is_user_active is None:
            raise ValueError("Invalid value for `is_user_active`, must not be `None`")  # noqa: E501

        self._is_user_active = is_user_active

    @property
    def is_margin_enabled(self):
        """Gets the is_margin_enabled of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The is_margin_enabled of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: bool
        """
        return self._is_margin_enabled

    @is_margin_enabled.setter
    def is_margin_enabled(self, is_margin_enabled):
        """Sets the is_margin_enabled of this InlineResponse200115ManagerSubUserInfoVoList.


        :param is_margin_enabled: The is_margin_enabled of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: bool
        """
        if is_margin_enabled is None:
            raise ValueError("Invalid value for `is_margin_enabled`, must not be `None`")  # noqa: E501

        self._is_margin_enabled = is_margin_enabled

    @property
    def is_future_enabled(self):
        """Gets the is_future_enabled of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The is_future_enabled of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: bool
        """
        return self._is_future_enabled

    @is_future_enabled.setter
    def is_future_enabled(self, is_future_enabled):
        """Sets the is_future_enabled of this InlineResponse200115ManagerSubUserInfoVoList.


        :param is_future_enabled: The is_future_enabled of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: bool
        """
        if is_future_enabled is None:
            raise ValueError("Invalid value for `is_future_enabled`, must not be `None`")  # noqa: E501

        self._is_future_enabled = is_future_enabled

    @property
    def is_signed_lvt_risk_agreement(self):
        """Gets the is_signed_lvt_risk_agreement of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501


        :return: The is_signed_lvt_risk_agreement of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :rtype: bool
        """
        return self._is_signed_lvt_risk_agreement

    @is_signed_lvt_risk_agreement.setter
    def is_signed_lvt_risk_agreement(self, is_signed_lvt_risk_agreement):
        """Sets the is_signed_lvt_risk_agreement of this InlineResponse200115ManagerSubUserInfoVoList.


        :param is_signed_lvt_risk_agreement: The is_signed_lvt_risk_agreement of this InlineResponse200115ManagerSubUserInfoVoList.  # noqa: E501
        :type: bool
        """
        if is_signed_lvt_risk_agreement is None:
            raise ValueError("Invalid value for `is_signed_lvt_risk_agreement`, must not be `None`")  # noqa: E501

        self._is_signed_lvt_risk_agreement = is_signed_lvt_risk_agreement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200115ManagerSubUserInfoVoList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200115ManagerSubUserInfoVoList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
