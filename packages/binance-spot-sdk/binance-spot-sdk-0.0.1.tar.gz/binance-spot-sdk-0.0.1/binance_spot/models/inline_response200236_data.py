# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200236Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'amount': 'str',
        'reference_no': 'str',
        'identity_no': 'str'
    }

    attribute_map = {
        'token': 'token',
        'amount': 'amount',
        'reference_no': 'referenceNo',
        'identity_no': 'identityNo'
    }

    def __init__(self, token=None, amount=None, reference_no=None, identity_no=None):  # noqa: E501
        """InlineResponse200236Data - a model defined in Swagger"""  # noqa: E501
        self._token = None
        self._amount = None
        self._reference_no = None
        self._identity_no = None
        self.discriminator = None
        self.token = token
        self.amount = amount
        self.reference_no = reference_no
        self.identity_no = identity_no

    @property
    def token(self):
        """Gets the token of this InlineResponse200236Data.  # noqa: E501


        :return: The token of this InlineResponse200236Data.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this InlineResponse200236Data.


        :param token: The token of this InlineResponse200236Data.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def amount(self):
        """Gets the amount of this InlineResponse200236Data.  # noqa: E501


        :return: The amount of this InlineResponse200236Data.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse200236Data.


        :param amount: The amount of this InlineResponse200236Data.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def reference_no(self):
        """Gets the reference_no of this InlineResponse200236Data.  # noqa: E501


        :return: The reference_no of this InlineResponse200236Data.  # noqa: E501
        :rtype: str
        """
        return self._reference_no

    @reference_no.setter
    def reference_no(self, reference_no):
        """Sets the reference_no of this InlineResponse200236Data.


        :param reference_no: The reference_no of this InlineResponse200236Data.  # noqa: E501
        :type: str
        """
        if reference_no is None:
            raise ValueError("Invalid value for `reference_no`, must not be `None`")  # noqa: E501

        self._reference_no = reference_no

    @property
    def identity_no(self):
        """Gets the identity_no of this InlineResponse200236Data.  # noqa: E501


        :return: The identity_no of this InlineResponse200236Data.  # noqa: E501
        :rtype: str
        """
        return self._identity_no

    @identity_no.setter
    def identity_no(self, identity_no):
        """Sets the identity_no of this InlineResponse200236Data.


        :param identity_no: The identity_no of this InlineResponse200236Data.  # noqa: E501
        :type: str
        """
        if identity_no is None:
            raise ValueError("Invalid value for `identity_no`, must not be `None`")  # noqa: E501

        self._identity_no = identity_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200236Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200236Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
