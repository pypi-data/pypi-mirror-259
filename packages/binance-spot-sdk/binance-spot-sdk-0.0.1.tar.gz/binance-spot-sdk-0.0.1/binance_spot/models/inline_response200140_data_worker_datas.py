# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200140DataWorkerDatas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'worker_id': 'str',
        'worker_name': 'str',
        'status': 'int',
        'hash_rate': 'int',
        'day_hash_rate': 'int',
        'reject_rate': 'int',
        'last_share_time': 'int'
    }

    attribute_map = {
        'worker_id': 'workerId',
        'worker_name': 'workerName',
        'status': 'status',
        'hash_rate': 'hashRate',
        'day_hash_rate': 'dayHashRate',
        'reject_rate': 'rejectRate',
        'last_share_time': 'lastShareTime'
    }

    def __init__(self, worker_id=None, worker_name=None, status=None, hash_rate=None, day_hash_rate=None, reject_rate=None, last_share_time=None):  # noqa: E501
        """InlineResponse200140DataWorkerDatas - a model defined in Swagger"""  # noqa: E501
        self._worker_id = None
        self._worker_name = None
        self._status = None
        self._hash_rate = None
        self._day_hash_rate = None
        self._reject_rate = None
        self._last_share_time = None
        self.discriminator = None
        self.worker_id = worker_id
        self.worker_name = worker_name
        self.status = status
        self.hash_rate = hash_rate
        self.day_hash_rate = day_hash_rate
        self.reject_rate = reject_rate
        self.last_share_time = last_share_time

    @property
    def worker_id(self):
        """Gets the worker_id of this InlineResponse200140DataWorkerDatas.  # noqa: E501


        :return: The worker_id of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :rtype: str
        """
        return self._worker_id

    @worker_id.setter
    def worker_id(self, worker_id):
        """Sets the worker_id of this InlineResponse200140DataWorkerDatas.


        :param worker_id: The worker_id of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :type: str
        """
        if worker_id is None:
            raise ValueError("Invalid value for `worker_id`, must not be `None`")  # noqa: E501

        self._worker_id = worker_id

    @property
    def worker_name(self):
        """Gets the worker_name of this InlineResponse200140DataWorkerDatas.  # noqa: E501


        :return: The worker_name of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :rtype: str
        """
        return self._worker_name

    @worker_name.setter
    def worker_name(self, worker_name):
        """Sets the worker_name of this InlineResponse200140DataWorkerDatas.


        :param worker_name: The worker_name of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :type: str
        """
        if worker_name is None:
            raise ValueError("Invalid value for `worker_name`, must not be `None`")  # noqa: E501

        self._worker_name = worker_name

    @property
    def status(self):
        """Gets the status of this InlineResponse200140DataWorkerDatas.  # noqa: E501

        Status：1 valid, 2 invalid, 3 no longer valid  # noqa: E501

        :return: The status of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200140DataWorkerDatas.

        Status：1 valid, 2 invalid, 3 no longer valid  # noqa: E501

        :param status: The status of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def hash_rate(self):
        """Gets the hash_rate of this InlineResponse200140DataWorkerDatas.  # noqa: E501

        Real-time rate  # noqa: E501

        :return: The hash_rate of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :rtype: int
        """
        return self._hash_rate

    @hash_rate.setter
    def hash_rate(self, hash_rate):
        """Sets the hash_rate of this InlineResponse200140DataWorkerDatas.

        Real-time rate  # noqa: E501

        :param hash_rate: The hash_rate of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :type: int
        """
        if hash_rate is None:
            raise ValueError("Invalid value for `hash_rate`, must not be `None`")  # noqa: E501

        self._hash_rate = hash_rate

    @property
    def day_hash_rate(self):
        """Gets the day_hash_rate of this InlineResponse200140DataWorkerDatas.  # noqa: E501

        24H Hashrate  # noqa: E501

        :return: The day_hash_rate of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :rtype: int
        """
        return self._day_hash_rate

    @day_hash_rate.setter
    def day_hash_rate(self, day_hash_rate):
        """Sets the day_hash_rate of this InlineResponse200140DataWorkerDatas.

        24H Hashrate  # noqa: E501

        :param day_hash_rate: The day_hash_rate of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :type: int
        """
        if day_hash_rate is None:
            raise ValueError("Invalid value for `day_hash_rate`, must not be `None`")  # noqa: E501

        self._day_hash_rate = day_hash_rate

    @property
    def reject_rate(self):
        """Gets the reject_rate of this InlineResponse200140DataWorkerDatas.  # noqa: E501

        Real-time Rejection Rate  # noqa: E501

        :return: The reject_rate of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :rtype: int
        """
        return self._reject_rate

    @reject_rate.setter
    def reject_rate(self, reject_rate):
        """Sets the reject_rate of this InlineResponse200140DataWorkerDatas.

        Real-time Rejection Rate  # noqa: E501

        :param reject_rate: The reject_rate of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :type: int
        """
        if reject_rate is None:
            raise ValueError("Invalid value for `reject_rate`, must not be `None`")  # noqa: E501

        self._reject_rate = reject_rate

    @property
    def last_share_time(self):
        """Gets the last_share_time of this InlineResponse200140DataWorkerDatas.  # noqa: E501

        Last submission time  # noqa: E501

        :return: The last_share_time of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :rtype: int
        """
        return self._last_share_time

    @last_share_time.setter
    def last_share_time(self, last_share_time):
        """Sets the last_share_time of this InlineResponse200140DataWorkerDatas.

        Last submission time  # noqa: E501

        :param last_share_time: The last_share_time of this InlineResponse200140DataWorkerDatas.  # noqa: E501
        :type: int
        """
        if last_share_time is None:
            raise ValueError("Invalid value for `last_share_time`, must not be `None`")  # noqa: E501

        self._last_share_time = last_share_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200140DataWorkerDatas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200140DataWorkerDatas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
