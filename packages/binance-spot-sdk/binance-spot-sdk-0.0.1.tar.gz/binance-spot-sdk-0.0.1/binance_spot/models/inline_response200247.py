# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200247(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_value_in_usd': 'str',
        'plan_value_in_btc': 'str',
        'pnl_in_usd': 'str',
        'roi': 'str',
        'plan': 'list[InlineResponse200247Plan]'
    }

    attribute_map = {
        'plan_value_in_usd': 'planValueInUSD',
        'plan_value_in_btc': 'planValueInBTC',
        'pnl_in_usd': 'pnlInUSD',
        'roi': 'roi',
        'plan': 'plan'
    }

    def __init__(self, plan_value_in_usd=None, plan_value_in_btc=None, pnl_in_usd=None, roi=None, plan=None):  # noqa: E501
        """InlineResponse200247 - a model defined in Swagger"""  # noqa: E501
        self._plan_value_in_usd = None
        self._plan_value_in_btc = None
        self._pnl_in_usd = None
        self._roi = None
        self._plan = None
        self.discriminator = None
        if plan_value_in_usd is not None:
            self.plan_value_in_usd = plan_value_in_usd
        if plan_value_in_btc is not None:
            self.plan_value_in_btc = plan_value_in_btc
        if pnl_in_usd is not None:
            self.pnl_in_usd = pnl_in_usd
        if roi is not None:
            self.roi = roi
        if plan is not None:
            self.plan = plan

    @property
    def plan_value_in_usd(self):
        """Gets the plan_value_in_usd of this InlineResponse200247.  # noqa: E501


        :return: The plan_value_in_usd of this InlineResponse200247.  # noqa: E501
        :rtype: str
        """
        return self._plan_value_in_usd

    @plan_value_in_usd.setter
    def plan_value_in_usd(self, plan_value_in_usd):
        """Sets the plan_value_in_usd of this InlineResponse200247.


        :param plan_value_in_usd: The plan_value_in_usd of this InlineResponse200247.  # noqa: E501
        :type: str
        """

        self._plan_value_in_usd = plan_value_in_usd

    @property
    def plan_value_in_btc(self):
        """Gets the plan_value_in_btc of this InlineResponse200247.  # noqa: E501


        :return: The plan_value_in_btc of this InlineResponse200247.  # noqa: E501
        :rtype: str
        """
        return self._plan_value_in_btc

    @plan_value_in_btc.setter
    def plan_value_in_btc(self, plan_value_in_btc):
        """Sets the plan_value_in_btc of this InlineResponse200247.


        :param plan_value_in_btc: The plan_value_in_btc of this InlineResponse200247.  # noqa: E501
        :type: str
        """

        self._plan_value_in_btc = plan_value_in_btc

    @property
    def pnl_in_usd(self):
        """Gets the pnl_in_usd of this InlineResponse200247.  # noqa: E501


        :return: The pnl_in_usd of this InlineResponse200247.  # noqa: E501
        :rtype: str
        """
        return self._pnl_in_usd

    @pnl_in_usd.setter
    def pnl_in_usd(self, pnl_in_usd):
        """Sets the pnl_in_usd of this InlineResponse200247.


        :param pnl_in_usd: The pnl_in_usd of this InlineResponse200247.  # noqa: E501
        :type: str
        """

        self._pnl_in_usd = pnl_in_usd

    @property
    def roi(self):
        """Gets the roi of this InlineResponse200247.  # noqa: E501


        :return: The roi of this InlineResponse200247.  # noqa: E501
        :rtype: str
        """
        return self._roi

    @roi.setter
    def roi(self, roi):
        """Sets the roi of this InlineResponse200247.


        :param roi: The roi of this InlineResponse200247.  # noqa: E501
        :type: str
        """

        self._roi = roi

    @property
    def plan(self):
        """Gets the plan of this InlineResponse200247.  # noqa: E501


        :return: The plan of this InlineResponse200247.  # noqa: E501
        :rtype: list[InlineResponse200247Plan]
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this InlineResponse200247.


        :param plan: The plan of this InlineResponse200247.  # noqa: E501
        :type: list[InlineResponse200247Plan]
        """

        self._plan = plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200247, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200247):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
