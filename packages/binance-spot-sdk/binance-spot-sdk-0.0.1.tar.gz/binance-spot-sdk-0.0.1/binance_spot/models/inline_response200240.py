# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200240(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_assets': 'str',
        'auto_invest_asset_list': 'list[InlineResponse200240AutoInvestAssetList]'
    }

    attribute_map = {
        'target_assets': 'targetAssets',
        'auto_invest_asset_list': 'autoInvestAssetList'
    }

    def __init__(self, target_assets=None, auto_invest_asset_list=None):  # noqa: E501
        """InlineResponse200240 - a model defined in Swagger"""  # noqa: E501
        self._target_assets = None
        self._auto_invest_asset_list = None
        self.discriminator = None
        if target_assets is not None:
            self.target_assets = target_assets
        if auto_invest_asset_list is not None:
            self.auto_invest_asset_list = auto_invest_asset_list

    @property
    def target_assets(self):
        """Gets the target_assets of this InlineResponse200240.  # noqa: E501


        :return: The target_assets of this InlineResponse200240.  # noqa: E501
        :rtype: str
        """
        return self._target_assets

    @target_assets.setter
    def target_assets(self, target_assets):
        """Sets the target_assets of this InlineResponse200240.


        :param target_assets: The target_assets of this InlineResponse200240.  # noqa: E501
        :type: str
        """

        self._target_assets = target_assets

    @property
    def auto_invest_asset_list(self):
        """Gets the auto_invest_asset_list of this InlineResponse200240.  # noqa: E501


        :return: The auto_invest_asset_list of this InlineResponse200240.  # noqa: E501
        :rtype: list[InlineResponse200240AutoInvestAssetList]
        """
        return self._auto_invest_asset_list

    @auto_invest_asset_list.setter
    def auto_invest_asset_list(self, auto_invest_asset_list):
        """Sets the auto_invest_asset_list of this InlineResponse200240.


        :param auto_invest_asset_list: The auto_invest_asset_list of this InlineResponse200240.  # noqa: E501
        :type: list[InlineResponse200240AutoInvestAssetList]
        """

        self._auto_invest_asset_list = auto_invest_asset_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200240, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200240):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
