# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200254(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'index_id': 'int',
        'index_name': 'str',
        'redemption_id': 'int',
        'status': 'str',
        'asset': 'str',
        'amount': 'str',
        'redemption_date_time': 'int',
        'transaction_fee': 'str',
        'transaction_fee_unit': 'str'
    }

    attribute_map = {
        'index_id': 'indexId',
        'index_name': 'indexName',
        'redemption_id': 'redemptionId',
        'status': 'status',
        'asset': 'asset',
        'amount': 'amount',
        'redemption_date_time': 'redemptionDateTime',
        'transaction_fee': 'transactionFee',
        'transaction_fee_unit': 'transactionFeeUnit'
    }

    def __init__(self, index_id=None, index_name=None, redemption_id=None, status=None, asset=None, amount=None, redemption_date_time=None, transaction_fee=None, transaction_fee_unit=None):  # noqa: E501
        """InlineResponse200254 - a model defined in Swagger"""  # noqa: E501
        self._index_id = None
        self._index_name = None
        self._redemption_id = None
        self._status = None
        self._asset = None
        self._amount = None
        self._redemption_date_time = None
        self._transaction_fee = None
        self._transaction_fee_unit = None
        self.discriminator = None
        self.index_id = index_id
        self.index_name = index_name
        self.redemption_id = redemption_id
        self.status = status
        self.asset = asset
        self.amount = amount
        self.redemption_date_time = redemption_date_time
        self.transaction_fee = transaction_fee
        self.transaction_fee_unit = transaction_fee_unit

    @property
    def index_id(self):
        """Gets the index_id of this InlineResponse200254.  # noqa: E501


        :return: The index_id of this InlineResponse200254.  # noqa: E501
        :rtype: int
        """
        return self._index_id

    @index_id.setter
    def index_id(self, index_id):
        """Sets the index_id of this InlineResponse200254.


        :param index_id: The index_id of this InlineResponse200254.  # noqa: E501
        :type: int
        """
        if index_id is None:
            raise ValueError("Invalid value for `index_id`, must not be `None`")  # noqa: E501

        self._index_id = index_id

    @property
    def index_name(self):
        """Gets the index_name of this InlineResponse200254.  # noqa: E501


        :return: The index_name of this InlineResponse200254.  # noqa: E501
        :rtype: str
        """
        return self._index_name

    @index_name.setter
    def index_name(self, index_name):
        """Sets the index_name of this InlineResponse200254.


        :param index_name: The index_name of this InlineResponse200254.  # noqa: E501
        :type: str
        """
        if index_name is None:
            raise ValueError("Invalid value for `index_name`, must not be `None`")  # noqa: E501

        self._index_name = index_name

    @property
    def redemption_id(self):
        """Gets the redemption_id of this InlineResponse200254.  # noqa: E501


        :return: The redemption_id of this InlineResponse200254.  # noqa: E501
        :rtype: int
        """
        return self._redemption_id

    @redemption_id.setter
    def redemption_id(self, redemption_id):
        """Sets the redemption_id of this InlineResponse200254.


        :param redemption_id: The redemption_id of this InlineResponse200254.  # noqa: E501
        :type: int
        """
        if redemption_id is None:
            raise ValueError("Invalid value for `redemption_id`, must not be `None`")  # noqa: E501

        self._redemption_id = redemption_id

    @property
    def status(self):
        """Gets the status of this InlineResponse200254.  # noqa: E501


        :return: The status of this InlineResponse200254.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200254.


        :param status: The status of this InlineResponse200254.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def asset(self):
        """Gets the asset of this InlineResponse200254.  # noqa: E501


        :return: The asset of this InlineResponse200254.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse200254.


        :param asset: The asset of this InlineResponse200254.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def amount(self):
        """Gets the amount of this InlineResponse200254.  # noqa: E501


        :return: The amount of this InlineResponse200254.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse200254.


        :param amount: The amount of this InlineResponse200254.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def redemption_date_time(self):
        """Gets the redemption_date_time of this InlineResponse200254.  # noqa: E501


        :return: The redemption_date_time of this InlineResponse200254.  # noqa: E501
        :rtype: int
        """
        return self._redemption_date_time

    @redemption_date_time.setter
    def redemption_date_time(self, redemption_date_time):
        """Sets the redemption_date_time of this InlineResponse200254.


        :param redemption_date_time: The redemption_date_time of this InlineResponse200254.  # noqa: E501
        :type: int
        """
        if redemption_date_time is None:
            raise ValueError("Invalid value for `redemption_date_time`, must not be `None`")  # noqa: E501

        self._redemption_date_time = redemption_date_time

    @property
    def transaction_fee(self):
        """Gets the transaction_fee of this InlineResponse200254.  # noqa: E501


        :return: The transaction_fee of this InlineResponse200254.  # noqa: E501
        :rtype: str
        """
        return self._transaction_fee

    @transaction_fee.setter
    def transaction_fee(self, transaction_fee):
        """Sets the transaction_fee of this InlineResponse200254.


        :param transaction_fee: The transaction_fee of this InlineResponse200254.  # noqa: E501
        :type: str
        """
        if transaction_fee is None:
            raise ValueError("Invalid value for `transaction_fee`, must not be `None`")  # noqa: E501

        self._transaction_fee = transaction_fee

    @property
    def transaction_fee_unit(self):
        """Gets the transaction_fee_unit of this InlineResponse200254.  # noqa: E501


        :return: The transaction_fee_unit of this InlineResponse200254.  # noqa: E501
        :rtype: str
        """
        return self._transaction_fee_unit

    @transaction_fee_unit.setter
    def transaction_fee_unit(self, transaction_fee_unit):
        """Sets the transaction_fee_unit of this InlineResponse200254.


        :param transaction_fee_unit: The transaction_fee_unit of this InlineResponse200254.  # noqa: E501
        :type: str
        """
        if transaction_fee_unit is None:
            raise ValueError("Invalid value for `transaction_fee_unit`, must not be `None`")  # noqa: E501

        self._transaction_fee_unit = transaction_fee_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200254, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200254):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
