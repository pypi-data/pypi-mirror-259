# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20070(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'maker_commission': 'str',
        'taker_commission': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'maker_commission': 'makerCommission',
        'taker_commission': 'takerCommission'
    }

    def __init__(self, symbol=None, maker_commission=None, taker_commission=None):  # noqa: E501
        """InlineResponse20070 - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._maker_commission = None
        self._taker_commission = None
        self.discriminator = None
        self.symbol = symbol
        self.maker_commission = maker_commission
        self.taker_commission = taker_commission

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse20070.  # noqa: E501


        :return: The symbol of this InlineResponse20070.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse20070.


        :param symbol: The symbol of this InlineResponse20070.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def maker_commission(self):
        """Gets the maker_commission of this InlineResponse20070.  # noqa: E501


        :return: The maker_commission of this InlineResponse20070.  # noqa: E501
        :rtype: str
        """
        return self._maker_commission

    @maker_commission.setter
    def maker_commission(self, maker_commission):
        """Sets the maker_commission of this InlineResponse20070.


        :param maker_commission: The maker_commission of this InlineResponse20070.  # noqa: E501
        :type: str
        """
        if maker_commission is None:
            raise ValueError("Invalid value for `maker_commission`, must not be `None`")  # noqa: E501

        self._maker_commission = maker_commission

    @property
    def taker_commission(self):
        """Gets the taker_commission of this InlineResponse20070.  # noqa: E501


        :return: The taker_commission of this InlineResponse20070.  # noqa: E501
        :rtype: str
        """
        return self._taker_commission

    @taker_commission.setter
    def taker_commission(self, taker_commission):
        """Sets the taker_commission of this InlineResponse20070.


        :param taker_commission: The taker_commission of this InlineResponse20070.  # noqa: E501
        :type: str
        """
        if taker_commission is None:
            raise ValueError("Invalid value for `taker_commission`, must not be `None`")  # noqa: E501

        self._taker_commission = taker_commission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20070, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20070):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
