# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200138Data(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coin_name': 'str',
        'coin_id': 'int',
        'pool_index': 'int',
        'algo_id': 'int',
        'algo_name': 'str'
    }

    attribute_map = {
        'coin_name': 'coinName',
        'coin_id': 'coinId',
        'pool_index': 'poolIndex',
        'algo_id': 'algoId',
        'algo_name': 'algoName'
    }

    def __init__(self, coin_name=None, coin_id=None, pool_index=None, algo_id=None, algo_name=None):  # noqa: E501
        """InlineResponse200138Data - a model defined in Swagger"""  # noqa: E501
        self._coin_name = None
        self._coin_id = None
        self._pool_index = None
        self._algo_id = None
        self._algo_name = None
        self.discriminator = None
        self.coin_name = coin_name
        self.coin_id = coin_id
        self.pool_index = pool_index
        self.algo_id = algo_id
        self.algo_name = algo_name

    @property
    def coin_name(self):
        """Gets the coin_name of this InlineResponse200138Data.  # noqa: E501


        :return: The coin_name of this InlineResponse200138Data.  # noqa: E501
        :rtype: str
        """
        return self._coin_name

    @coin_name.setter
    def coin_name(self, coin_name):
        """Sets the coin_name of this InlineResponse200138Data.


        :param coin_name: The coin_name of this InlineResponse200138Data.  # noqa: E501
        :type: str
        """
        if coin_name is None:
            raise ValueError("Invalid value for `coin_name`, must not be `None`")  # noqa: E501

        self._coin_name = coin_name

    @property
    def coin_id(self):
        """Gets the coin_id of this InlineResponse200138Data.  # noqa: E501


        :return: The coin_id of this InlineResponse200138Data.  # noqa: E501
        :rtype: int
        """
        return self._coin_id

    @coin_id.setter
    def coin_id(self, coin_id):
        """Sets the coin_id of this InlineResponse200138Data.


        :param coin_id: The coin_id of this InlineResponse200138Data.  # noqa: E501
        :type: int
        """
        if coin_id is None:
            raise ValueError("Invalid value for `coin_id`, must not be `None`")  # noqa: E501

        self._coin_id = coin_id

    @property
    def pool_index(self):
        """Gets the pool_index of this InlineResponse200138Data.  # noqa: E501


        :return: The pool_index of this InlineResponse200138Data.  # noqa: E501
        :rtype: int
        """
        return self._pool_index

    @pool_index.setter
    def pool_index(self, pool_index):
        """Sets the pool_index of this InlineResponse200138Data.


        :param pool_index: The pool_index of this InlineResponse200138Data.  # noqa: E501
        :type: int
        """
        if pool_index is None:
            raise ValueError("Invalid value for `pool_index`, must not be `None`")  # noqa: E501

        self._pool_index = pool_index

    @property
    def algo_id(self):
        """Gets the algo_id of this InlineResponse200138Data.  # noqa: E501


        :return: The algo_id of this InlineResponse200138Data.  # noqa: E501
        :rtype: int
        """
        return self._algo_id

    @algo_id.setter
    def algo_id(self, algo_id):
        """Sets the algo_id of this InlineResponse200138Data.


        :param algo_id: The algo_id of this InlineResponse200138Data.  # noqa: E501
        :type: int
        """
        if algo_id is None:
            raise ValueError("Invalid value for `algo_id`, must not be `None`")  # noqa: E501

        self._algo_id = algo_id

    @property
    def algo_name(self):
        """Gets the algo_name of this InlineResponse200138Data.  # noqa: E501


        :return: The algo_name of this InlineResponse200138Data.  # noqa: E501
        :rtype: str
        """
        return self._algo_name

    @algo_name.setter
    def algo_name(self, algo_name):
        """Sets the algo_name of this InlineResponse200138Data.


        :param algo_name: The algo_name of this InlineResponse200138Data.  # noqa: E501
        :type: str
        """
        if algo_name is None:
            raise ValueError("Invalid value for `algo_name`, must not be `None`")  # noqa: E501

        self._algo_name = algo_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200138Data, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200138Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
