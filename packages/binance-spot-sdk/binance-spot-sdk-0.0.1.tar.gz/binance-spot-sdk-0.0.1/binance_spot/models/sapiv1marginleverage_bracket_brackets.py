# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Sapiv1marginleverageBracketBrackets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'leverage': 'int',
        'max_debt': 'float',
        'maintenance_margin_rate': 'float',
        'initial_margin_rate': 'float',
        'fast_num': 'float'
    }

    attribute_map = {
        'leverage': 'leverage',
        'max_debt': 'maxDebt',
        'maintenance_margin_rate': 'maintenanceMarginRate',
        'initial_margin_rate': 'initialMarginRate',
        'fast_num': 'fastNum'
    }

    def __init__(self, leverage=None, max_debt=None, maintenance_margin_rate=None, initial_margin_rate=None, fast_num=None):  # noqa: E501
        """Sapiv1marginleverageBracketBrackets - a model defined in Swagger"""  # noqa: E501
        self._leverage = None
        self._max_debt = None
        self._maintenance_margin_rate = None
        self._initial_margin_rate = None
        self._fast_num = None
        self.discriminator = None
        if leverage is not None:
            self.leverage = leverage
        if max_debt is not None:
            self.max_debt = max_debt
        if maintenance_margin_rate is not None:
            self.maintenance_margin_rate = maintenance_margin_rate
        if initial_margin_rate is not None:
            self.initial_margin_rate = initial_margin_rate
        if fast_num is not None:
            self.fast_num = fast_num

    @property
    def leverage(self):
        """Gets the leverage of this Sapiv1marginleverageBracketBrackets.  # noqa: E501


        :return: The leverage of this Sapiv1marginleverageBracketBrackets.  # noqa: E501
        :rtype: int
        """
        return self._leverage

    @leverage.setter
    def leverage(self, leverage):
        """Sets the leverage of this Sapiv1marginleverageBracketBrackets.


        :param leverage: The leverage of this Sapiv1marginleverageBracketBrackets.  # noqa: E501
        :type: int
        """

        self._leverage = leverage

    @property
    def max_debt(self):
        """Gets the max_debt of this Sapiv1marginleverageBracketBrackets.  # noqa: E501


        :return: The max_debt of this Sapiv1marginleverageBracketBrackets.  # noqa: E501
        :rtype: float
        """
        return self._max_debt

    @max_debt.setter
    def max_debt(self, max_debt):
        """Sets the max_debt of this Sapiv1marginleverageBracketBrackets.


        :param max_debt: The max_debt of this Sapiv1marginleverageBracketBrackets.  # noqa: E501
        :type: float
        """

        self._max_debt = max_debt

    @property
    def maintenance_margin_rate(self):
        """Gets the maintenance_margin_rate of this Sapiv1marginleverageBracketBrackets.  # noqa: E501


        :return: The maintenance_margin_rate of this Sapiv1marginleverageBracketBrackets.  # noqa: E501
        :rtype: float
        """
        return self._maintenance_margin_rate

    @maintenance_margin_rate.setter
    def maintenance_margin_rate(self, maintenance_margin_rate):
        """Sets the maintenance_margin_rate of this Sapiv1marginleverageBracketBrackets.


        :param maintenance_margin_rate: The maintenance_margin_rate of this Sapiv1marginleverageBracketBrackets.  # noqa: E501
        :type: float
        """

        self._maintenance_margin_rate = maintenance_margin_rate

    @property
    def initial_margin_rate(self):
        """Gets the initial_margin_rate of this Sapiv1marginleverageBracketBrackets.  # noqa: E501


        :return: The initial_margin_rate of this Sapiv1marginleverageBracketBrackets.  # noqa: E501
        :rtype: float
        """
        return self._initial_margin_rate

    @initial_margin_rate.setter
    def initial_margin_rate(self, initial_margin_rate):
        """Sets the initial_margin_rate of this Sapiv1marginleverageBracketBrackets.


        :param initial_margin_rate: The initial_margin_rate of this Sapiv1marginleverageBracketBrackets.  # noqa: E501
        :type: float
        """

        self._initial_margin_rate = initial_margin_rate

    @property
    def fast_num(self):
        """Gets the fast_num of this Sapiv1marginleverageBracketBrackets.  # noqa: E501


        :return: The fast_num of this Sapiv1marginleverageBracketBrackets.  # noqa: E501
        :rtype: float
        """
        return self._fast_num

    @fast_num.setter
    def fast_num(self, fast_num):
        """Sets the fast_num of this Sapiv1marginleverageBracketBrackets.


        :param fast_num: The fast_num of this Sapiv1marginleverageBracketBrackets.  # noqa: E501
        :type: float
        """

        self._fast_num = fast_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sapiv1marginleverageBracketBrackets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sapiv1marginleverageBracketBrackets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
