# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20039(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'daily_interest_rate': 'str',
        'timestamp': 'int',
        'vip_level': 'int'
    }

    attribute_map = {
        'asset': 'asset',
        'daily_interest_rate': 'dailyInterestRate',
        'timestamp': 'timestamp',
        'vip_level': 'vipLevel'
    }

    def __init__(self, asset=None, daily_interest_rate=None, timestamp=None, vip_level=None):  # noqa: E501
        """InlineResponse20039 - a model defined in Swagger"""  # noqa: E501
        self._asset = None
        self._daily_interest_rate = None
        self._timestamp = None
        self._vip_level = None
        self.discriminator = None
        self.asset = asset
        self.daily_interest_rate = daily_interest_rate
        self.timestamp = timestamp
        self.vip_level = vip_level

    @property
    def asset(self):
        """Gets the asset of this InlineResponse20039.  # noqa: E501


        :return: The asset of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse20039.


        :param asset: The asset of this InlineResponse20039.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def daily_interest_rate(self):
        """Gets the daily_interest_rate of this InlineResponse20039.  # noqa: E501


        :return: The daily_interest_rate of this InlineResponse20039.  # noqa: E501
        :rtype: str
        """
        return self._daily_interest_rate

    @daily_interest_rate.setter
    def daily_interest_rate(self, daily_interest_rate):
        """Sets the daily_interest_rate of this InlineResponse20039.


        :param daily_interest_rate: The daily_interest_rate of this InlineResponse20039.  # noqa: E501
        :type: str
        """
        if daily_interest_rate is None:
            raise ValueError("Invalid value for `daily_interest_rate`, must not be `None`")  # noqa: E501

        self._daily_interest_rate = daily_interest_rate

    @property
    def timestamp(self):
        """Gets the timestamp of this InlineResponse20039.  # noqa: E501


        :return: The timestamp of this InlineResponse20039.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InlineResponse20039.


        :param timestamp: The timestamp of this InlineResponse20039.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def vip_level(self):
        """Gets the vip_level of this InlineResponse20039.  # noqa: E501


        :return: The vip_level of this InlineResponse20039.  # noqa: E501
        :rtype: int
        """
        return self._vip_level

    @vip_level.setter
    def vip_level(self, vip_level):
        """Sets the vip_level of this InlineResponse20039.


        :param vip_level: The vip_level of this InlineResponse20039.  # noqa: E501
        :type: int
        """
        if vip_level is None:
            raise ValueError("Invalid value for `vip_level`, must not be `None`")  # noqa: E501

        self._vip_level = vip_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20039, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20039):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
