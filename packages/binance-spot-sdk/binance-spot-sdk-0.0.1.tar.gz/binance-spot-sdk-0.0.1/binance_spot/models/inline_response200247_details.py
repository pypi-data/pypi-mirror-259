# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200247Details(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_asset': 'str',
        'average_price_in_usd': 'str',
        'total_invested_in_usd': 'str',
        'purchased_amount': 'str',
        'purchased_amount_unit': 'str',
        'pnl_in_usd': 'str',
        'roi': 'str',
        'percentage': 'str',
        'asset_status': 'str',
        'available_amount': 'str',
        'available_amount_unit': 'str',
        'redeemed_amout': 'str',
        'redeemed_amout_unit': 'str',
        'asset_value_in_usd': 'str'
    }

    attribute_map = {
        'target_asset': 'targetAsset',
        'average_price_in_usd': 'averagePriceInUSD',
        'total_invested_in_usd': 'totalInvestedInUSD',
        'purchased_amount': 'purchasedAmount',
        'purchased_amount_unit': 'purchasedAmountUnit',
        'pnl_in_usd': 'pnlInUSD',
        'roi': 'roi',
        'percentage': 'percentage',
        'asset_status': 'assetStatus',
        'available_amount': 'availableAmount',
        'available_amount_unit': 'availableAmountUnit',
        'redeemed_amout': 'redeemedAmout',
        'redeemed_amout_unit': 'redeemedAmoutUnit',
        'asset_value_in_usd': 'assetValueInUSD'
    }

    def __init__(self, target_asset=None, average_price_in_usd=None, total_invested_in_usd=None, purchased_amount=None, purchased_amount_unit=None, pnl_in_usd=None, roi=None, percentage=None, asset_status=None, available_amount=None, available_amount_unit=None, redeemed_amout=None, redeemed_amout_unit=None, asset_value_in_usd=None):  # noqa: E501
        """InlineResponse200247Details - a model defined in Swagger"""  # noqa: E501
        self._target_asset = None
        self._average_price_in_usd = None
        self._total_invested_in_usd = None
        self._purchased_amount = None
        self._purchased_amount_unit = None
        self._pnl_in_usd = None
        self._roi = None
        self._percentage = None
        self._asset_status = None
        self._available_amount = None
        self._available_amount_unit = None
        self._redeemed_amout = None
        self._redeemed_amout_unit = None
        self._asset_value_in_usd = None
        self.discriminator = None
        self.target_asset = target_asset
        self.average_price_in_usd = average_price_in_usd
        self.total_invested_in_usd = total_invested_in_usd
        self.purchased_amount = purchased_amount
        self.purchased_amount_unit = purchased_amount_unit
        self.pnl_in_usd = pnl_in_usd
        self.roi = roi
        self.percentage = percentage
        self.asset_status = asset_status
        self.available_amount = available_amount
        self.available_amount_unit = available_amount_unit
        self.redeemed_amout = redeemed_amout
        self.redeemed_amout_unit = redeemed_amout_unit
        self.asset_value_in_usd = asset_value_in_usd

    @property
    def target_asset(self):
        """Gets the target_asset of this InlineResponse200247Details.  # noqa: E501


        :return: The target_asset of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._target_asset

    @target_asset.setter
    def target_asset(self, target_asset):
        """Sets the target_asset of this InlineResponse200247Details.


        :param target_asset: The target_asset of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if target_asset is None:
            raise ValueError("Invalid value for `target_asset`, must not be `None`")  # noqa: E501

        self._target_asset = target_asset

    @property
    def average_price_in_usd(self):
        """Gets the average_price_in_usd of this InlineResponse200247Details.  # noqa: E501


        :return: The average_price_in_usd of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._average_price_in_usd

    @average_price_in_usd.setter
    def average_price_in_usd(self, average_price_in_usd):
        """Sets the average_price_in_usd of this InlineResponse200247Details.


        :param average_price_in_usd: The average_price_in_usd of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if average_price_in_usd is None:
            raise ValueError("Invalid value for `average_price_in_usd`, must not be `None`")  # noqa: E501

        self._average_price_in_usd = average_price_in_usd

    @property
    def total_invested_in_usd(self):
        """Gets the total_invested_in_usd of this InlineResponse200247Details.  # noqa: E501


        :return: The total_invested_in_usd of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._total_invested_in_usd

    @total_invested_in_usd.setter
    def total_invested_in_usd(self, total_invested_in_usd):
        """Sets the total_invested_in_usd of this InlineResponse200247Details.


        :param total_invested_in_usd: The total_invested_in_usd of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if total_invested_in_usd is None:
            raise ValueError("Invalid value for `total_invested_in_usd`, must not be `None`")  # noqa: E501

        self._total_invested_in_usd = total_invested_in_usd

    @property
    def purchased_amount(self):
        """Gets the purchased_amount of this InlineResponse200247Details.  # noqa: E501


        :return: The purchased_amount of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._purchased_amount

    @purchased_amount.setter
    def purchased_amount(self, purchased_amount):
        """Sets the purchased_amount of this InlineResponse200247Details.


        :param purchased_amount: The purchased_amount of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if purchased_amount is None:
            raise ValueError("Invalid value for `purchased_amount`, must not be `None`")  # noqa: E501

        self._purchased_amount = purchased_amount

    @property
    def purchased_amount_unit(self):
        """Gets the purchased_amount_unit of this InlineResponse200247Details.  # noqa: E501


        :return: The purchased_amount_unit of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._purchased_amount_unit

    @purchased_amount_unit.setter
    def purchased_amount_unit(self, purchased_amount_unit):
        """Sets the purchased_amount_unit of this InlineResponse200247Details.


        :param purchased_amount_unit: The purchased_amount_unit of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if purchased_amount_unit is None:
            raise ValueError("Invalid value for `purchased_amount_unit`, must not be `None`")  # noqa: E501

        self._purchased_amount_unit = purchased_amount_unit

    @property
    def pnl_in_usd(self):
        """Gets the pnl_in_usd of this InlineResponse200247Details.  # noqa: E501


        :return: The pnl_in_usd of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._pnl_in_usd

    @pnl_in_usd.setter
    def pnl_in_usd(self, pnl_in_usd):
        """Sets the pnl_in_usd of this InlineResponse200247Details.


        :param pnl_in_usd: The pnl_in_usd of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if pnl_in_usd is None:
            raise ValueError("Invalid value for `pnl_in_usd`, must not be `None`")  # noqa: E501

        self._pnl_in_usd = pnl_in_usd

    @property
    def roi(self):
        """Gets the roi of this InlineResponse200247Details.  # noqa: E501


        :return: The roi of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._roi

    @roi.setter
    def roi(self, roi):
        """Sets the roi of this InlineResponse200247Details.


        :param roi: The roi of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if roi is None:
            raise ValueError("Invalid value for `roi`, must not be `None`")  # noqa: E501

        self._roi = roi

    @property
    def percentage(self):
        """Gets the percentage of this InlineResponse200247Details.  # noqa: E501


        :return: The percentage of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this InlineResponse200247Details.


        :param percentage: The percentage of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")  # noqa: E501

        self._percentage = percentage

    @property
    def asset_status(self):
        """Gets the asset_status of this InlineResponse200247Details.  # noqa: E501


        :return: The asset_status of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._asset_status

    @asset_status.setter
    def asset_status(self, asset_status):
        """Sets the asset_status of this InlineResponse200247Details.


        :param asset_status: The asset_status of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if asset_status is None:
            raise ValueError("Invalid value for `asset_status`, must not be `None`")  # noqa: E501

        self._asset_status = asset_status

    @property
    def available_amount(self):
        """Gets the available_amount of this InlineResponse200247Details.  # noqa: E501


        :return: The available_amount of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._available_amount

    @available_amount.setter
    def available_amount(self, available_amount):
        """Sets the available_amount of this InlineResponse200247Details.


        :param available_amount: The available_amount of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if available_amount is None:
            raise ValueError("Invalid value for `available_amount`, must not be `None`")  # noqa: E501

        self._available_amount = available_amount

    @property
    def available_amount_unit(self):
        """Gets the available_amount_unit of this InlineResponse200247Details.  # noqa: E501


        :return: The available_amount_unit of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._available_amount_unit

    @available_amount_unit.setter
    def available_amount_unit(self, available_amount_unit):
        """Sets the available_amount_unit of this InlineResponse200247Details.


        :param available_amount_unit: The available_amount_unit of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if available_amount_unit is None:
            raise ValueError("Invalid value for `available_amount_unit`, must not be `None`")  # noqa: E501

        self._available_amount_unit = available_amount_unit

    @property
    def redeemed_amout(self):
        """Gets the redeemed_amout of this InlineResponse200247Details.  # noqa: E501


        :return: The redeemed_amout of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._redeemed_amout

    @redeemed_amout.setter
    def redeemed_amout(self, redeemed_amout):
        """Sets the redeemed_amout of this InlineResponse200247Details.


        :param redeemed_amout: The redeemed_amout of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if redeemed_amout is None:
            raise ValueError("Invalid value for `redeemed_amout`, must not be `None`")  # noqa: E501

        self._redeemed_amout = redeemed_amout

    @property
    def redeemed_amout_unit(self):
        """Gets the redeemed_amout_unit of this InlineResponse200247Details.  # noqa: E501


        :return: The redeemed_amout_unit of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._redeemed_amout_unit

    @redeemed_amout_unit.setter
    def redeemed_amout_unit(self, redeemed_amout_unit):
        """Sets the redeemed_amout_unit of this InlineResponse200247Details.


        :param redeemed_amout_unit: The redeemed_amout_unit of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if redeemed_amout_unit is None:
            raise ValueError("Invalid value for `redeemed_amout_unit`, must not be `None`")  # noqa: E501

        self._redeemed_amout_unit = redeemed_amout_unit

    @property
    def asset_value_in_usd(self):
        """Gets the asset_value_in_usd of this InlineResponse200247Details.  # noqa: E501


        :return: The asset_value_in_usd of this InlineResponse200247Details.  # noqa: E501
        :rtype: str
        """
        return self._asset_value_in_usd

    @asset_value_in_usd.setter
    def asset_value_in_usd(self, asset_value_in_usd):
        """Sets the asset_value_in_usd of this InlineResponse200247Details.


        :param asset_value_in_usd: The asset_value_in_usd of this InlineResponse200247Details.  # noqa: E501
        :type: str
        """
        if asset_value_in_usd is None:
            raise ValueError("Invalid value for `asset_value_in_usd`, must not be `None`")  # noqa: E501

        self._asset_value_in_usd = asset_value_in_usd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200247Details, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200247Details):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
