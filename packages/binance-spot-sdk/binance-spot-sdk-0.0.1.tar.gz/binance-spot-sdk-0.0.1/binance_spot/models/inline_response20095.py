# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20095(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'margin_level': 'str',
        'total_asset_of_btc': 'str',
        'total_liability_of_btc': 'str',
        'total_net_asset_of_btc': 'str',
        'margin_trade_coeff_vo': 'InlineResponse20095MarginTradeCoeffVo',
        'margin_user_asset_vo_list': 'list[InlineResponse20029UserAssets]'
    }

    attribute_map = {
        'email': 'email',
        'margin_level': 'marginLevel',
        'total_asset_of_btc': 'totalAssetOfBtc',
        'total_liability_of_btc': 'totalLiabilityOfBtc',
        'total_net_asset_of_btc': 'totalNetAssetOfBtc',
        'margin_trade_coeff_vo': 'marginTradeCoeffVo',
        'margin_user_asset_vo_list': 'marginUserAssetVoList'
    }

    def __init__(self, email=None, margin_level=None, total_asset_of_btc=None, total_liability_of_btc=None, total_net_asset_of_btc=None, margin_trade_coeff_vo=None, margin_user_asset_vo_list=None):  # noqa: E501
        """InlineResponse20095 - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._margin_level = None
        self._total_asset_of_btc = None
        self._total_liability_of_btc = None
        self._total_net_asset_of_btc = None
        self._margin_trade_coeff_vo = None
        self._margin_user_asset_vo_list = None
        self.discriminator = None
        self.email = email
        self.margin_level = margin_level
        self.total_asset_of_btc = total_asset_of_btc
        self.total_liability_of_btc = total_liability_of_btc
        self.total_net_asset_of_btc = total_net_asset_of_btc
        self.margin_trade_coeff_vo = margin_trade_coeff_vo
        self.margin_user_asset_vo_list = margin_user_asset_vo_list

    @property
    def email(self):
        """Gets the email of this InlineResponse20095.  # noqa: E501


        :return: The email of this InlineResponse20095.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse20095.


        :param email: The email of this InlineResponse20095.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def margin_level(self):
        """Gets the margin_level of this InlineResponse20095.  # noqa: E501


        :return: The margin_level of this InlineResponse20095.  # noqa: E501
        :rtype: str
        """
        return self._margin_level

    @margin_level.setter
    def margin_level(self, margin_level):
        """Sets the margin_level of this InlineResponse20095.


        :param margin_level: The margin_level of this InlineResponse20095.  # noqa: E501
        :type: str
        """
        if margin_level is None:
            raise ValueError("Invalid value for `margin_level`, must not be `None`")  # noqa: E501

        self._margin_level = margin_level

    @property
    def total_asset_of_btc(self):
        """Gets the total_asset_of_btc of this InlineResponse20095.  # noqa: E501


        :return: The total_asset_of_btc of this InlineResponse20095.  # noqa: E501
        :rtype: str
        """
        return self._total_asset_of_btc

    @total_asset_of_btc.setter
    def total_asset_of_btc(self, total_asset_of_btc):
        """Sets the total_asset_of_btc of this InlineResponse20095.


        :param total_asset_of_btc: The total_asset_of_btc of this InlineResponse20095.  # noqa: E501
        :type: str
        """
        if total_asset_of_btc is None:
            raise ValueError("Invalid value for `total_asset_of_btc`, must not be `None`")  # noqa: E501

        self._total_asset_of_btc = total_asset_of_btc

    @property
    def total_liability_of_btc(self):
        """Gets the total_liability_of_btc of this InlineResponse20095.  # noqa: E501


        :return: The total_liability_of_btc of this InlineResponse20095.  # noqa: E501
        :rtype: str
        """
        return self._total_liability_of_btc

    @total_liability_of_btc.setter
    def total_liability_of_btc(self, total_liability_of_btc):
        """Sets the total_liability_of_btc of this InlineResponse20095.


        :param total_liability_of_btc: The total_liability_of_btc of this InlineResponse20095.  # noqa: E501
        :type: str
        """
        if total_liability_of_btc is None:
            raise ValueError("Invalid value for `total_liability_of_btc`, must not be `None`")  # noqa: E501

        self._total_liability_of_btc = total_liability_of_btc

    @property
    def total_net_asset_of_btc(self):
        """Gets the total_net_asset_of_btc of this InlineResponse20095.  # noqa: E501


        :return: The total_net_asset_of_btc of this InlineResponse20095.  # noqa: E501
        :rtype: str
        """
        return self._total_net_asset_of_btc

    @total_net_asset_of_btc.setter
    def total_net_asset_of_btc(self, total_net_asset_of_btc):
        """Sets the total_net_asset_of_btc of this InlineResponse20095.


        :param total_net_asset_of_btc: The total_net_asset_of_btc of this InlineResponse20095.  # noqa: E501
        :type: str
        """
        if total_net_asset_of_btc is None:
            raise ValueError("Invalid value for `total_net_asset_of_btc`, must not be `None`")  # noqa: E501

        self._total_net_asset_of_btc = total_net_asset_of_btc

    @property
    def margin_trade_coeff_vo(self):
        """Gets the margin_trade_coeff_vo of this InlineResponse20095.  # noqa: E501


        :return: The margin_trade_coeff_vo of this InlineResponse20095.  # noqa: E501
        :rtype: InlineResponse20095MarginTradeCoeffVo
        """
        return self._margin_trade_coeff_vo

    @margin_trade_coeff_vo.setter
    def margin_trade_coeff_vo(self, margin_trade_coeff_vo):
        """Sets the margin_trade_coeff_vo of this InlineResponse20095.


        :param margin_trade_coeff_vo: The margin_trade_coeff_vo of this InlineResponse20095.  # noqa: E501
        :type: InlineResponse20095MarginTradeCoeffVo
        """
        if margin_trade_coeff_vo is None:
            raise ValueError("Invalid value for `margin_trade_coeff_vo`, must not be `None`")  # noqa: E501

        self._margin_trade_coeff_vo = margin_trade_coeff_vo

    @property
    def margin_user_asset_vo_list(self):
        """Gets the margin_user_asset_vo_list of this InlineResponse20095.  # noqa: E501


        :return: The margin_user_asset_vo_list of this InlineResponse20095.  # noqa: E501
        :rtype: list[InlineResponse20029UserAssets]
        """
        return self._margin_user_asset_vo_list

    @margin_user_asset_vo_list.setter
    def margin_user_asset_vo_list(self, margin_user_asset_vo_list):
        """Sets the margin_user_asset_vo_list of this InlineResponse20095.


        :param margin_user_asset_vo_list: The margin_user_asset_vo_list of this InlineResponse20095.  # noqa: E501
        :type: list[InlineResponse20029UserAssets]
        """
        if margin_user_asset_vo_list is None:
            raise ValueError("Invalid value for `margin_user_asset_vo_list`, must not be `None`")  # noqa: E501

        self._margin_user_asset_vo_list = margin_user_asset_vo_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20095, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20095):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
