# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200120(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recent30_btc_total': 'str',
        'recent30_btc_futures_total': 'str',
        'recent30_btc_margin_total': 'str',
        'recent30_busd_total': 'str',
        'recent30_busd_futures_total': 'str',
        'recent30_busd_margin_total': 'str',
        'trade_info_vos': 'list[InlineResponse200120TradeInfoVos]'
    }

    attribute_map = {
        'recent30_btc_total': 'recent30BtcTotal',
        'recent30_btc_futures_total': 'recent30BtcFuturesTotal',
        'recent30_btc_margin_total': 'recent30BtcMarginTotal',
        'recent30_busd_total': 'recent30BusdTotal',
        'recent30_busd_futures_total': 'recent30BusdFuturesTotal',
        'recent30_busd_margin_total': 'recent30BusdMarginTotal',
        'trade_info_vos': 'tradeInfoVos'
    }

    def __init__(self, recent30_btc_total=None, recent30_btc_futures_total=None, recent30_btc_margin_total=None, recent30_busd_total=None, recent30_busd_futures_total=None, recent30_busd_margin_total=None, trade_info_vos=None):  # noqa: E501
        """InlineResponse200120 - a model defined in Swagger"""  # noqa: E501
        self._recent30_btc_total = None
        self._recent30_btc_futures_total = None
        self._recent30_btc_margin_total = None
        self._recent30_busd_total = None
        self._recent30_busd_futures_total = None
        self._recent30_busd_margin_total = None
        self._trade_info_vos = None
        self.discriminator = None
        self.recent30_btc_total = recent30_btc_total
        self.recent30_btc_futures_total = recent30_btc_futures_total
        self.recent30_btc_margin_total = recent30_btc_margin_total
        self.recent30_busd_total = recent30_busd_total
        self.recent30_busd_futures_total = recent30_busd_futures_total
        self.recent30_busd_margin_total = recent30_busd_margin_total
        self.trade_info_vos = trade_info_vos

    @property
    def recent30_btc_total(self):
        """Gets the recent30_btc_total of this InlineResponse200120.  # noqa: E501


        :return: The recent30_btc_total of this InlineResponse200120.  # noqa: E501
        :rtype: str
        """
        return self._recent30_btc_total

    @recent30_btc_total.setter
    def recent30_btc_total(self, recent30_btc_total):
        """Sets the recent30_btc_total of this InlineResponse200120.


        :param recent30_btc_total: The recent30_btc_total of this InlineResponse200120.  # noqa: E501
        :type: str
        """
        if recent30_btc_total is None:
            raise ValueError("Invalid value for `recent30_btc_total`, must not be `None`")  # noqa: E501

        self._recent30_btc_total = recent30_btc_total

    @property
    def recent30_btc_futures_total(self):
        """Gets the recent30_btc_futures_total of this InlineResponse200120.  # noqa: E501


        :return: The recent30_btc_futures_total of this InlineResponse200120.  # noqa: E501
        :rtype: str
        """
        return self._recent30_btc_futures_total

    @recent30_btc_futures_total.setter
    def recent30_btc_futures_total(self, recent30_btc_futures_total):
        """Sets the recent30_btc_futures_total of this InlineResponse200120.


        :param recent30_btc_futures_total: The recent30_btc_futures_total of this InlineResponse200120.  # noqa: E501
        :type: str
        """
        if recent30_btc_futures_total is None:
            raise ValueError("Invalid value for `recent30_btc_futures_total`, must not be `None`")  # noqa: E501

        self._recent30_btc_futures_total = recent30_btc_futures_total

    @property
    def recent30_btc_margin_total(self):
        """Gets the recent30_btc_margin_total of this InlineResponse200120.  # noqa: E501


        :return: The recent30_btc_margin_total of this InlineResponse200120.  # noqa: E501
        :rtype: str
        """
        return self._recent30_btc_margin_total

    @recent30_btc_margin_total.setter
    def recent30_btc_margin_total(self, recent30_btc_margin_total):
        """Sets the recent30_btc_margin_total of this InlineResponse200120.


        :param recent30_btc_margin_total: The recent30_btc_margin_total of this InlineResponse200120.  # noqa: E501
        :type: str
        """
        if recent30_btc_margin_total is None:
            raise ValueError("Invalid value for `recent30_btc_margin_total`, must not be `None`")  # noqa: E501

        self._recent30_btc_margin_total = recent30_btc_margin_total

    @property
    def recent30_busd_total(self):
        """Gets the recent30_busd_total of this InlineResponse200120.  # noqa: E501


        :return: The recent30_busd_total of this InlineResponse200120.  # noqa: E501
        :rtype: str
        """
        return self._recent30_busd_total

    @recent30_busd_total.setter
    def recent30_busd_total(self, recent30_busd_total):
        """Sets the recent30_busd_total of this InlineResponse200120.


        :param recent30_busd_total: The recent30_busd_total of this InlineResponse200120.  # noqa: E501
        :type: str
        """
        if recent30_busd_total is None:
            raise ValueError("Invalid value for `recent30_busd_total`, must not be `None`")  # noqa: E501

        self._recent30_busd_total = recent30_busd_total

    @property
    def recent30_busd_futures_total(self):
        """Gets the recent30_busd_futures_total of this InlineResponse200120.  # noqa: E501


        :return: The recent30_busd_futures_total of this InlineResponse200120.  # noqa: E501
        :rtype: str
        """
        return self._recent30_busd_futures_total

    @recent30_busd_futures_total.setter
    def recent30_busd_futures_total(self, recent30_busd_futures_total):
        """Sets the recent30_busd_futures_total of this InlineResponse200120.


        :param recent30_busd_futures_total: The recent30_busd_futures_total of this InlineResponse200120.  # noqa: E501
        :type: str
        """
        if recent30_busd_futures_total is None:
            raise ValueError("Invalid value for `recent30_busd_futures_total`, must not be `None`")  # noqa: E501

        self._recent30_busd_futures_total = recent30_busd_futures_total

    @property
    def recent30_busd_margin_total(self):
        """Gets the recent30_busd_margin_total of this InlineResponse200120.  # noqa: E501


        :return: The recent30_busd_margin_total of this InlineResponse200120.  # noqa: E501
        :rtype: str
        """
        return self._recent30_busd_margin_total

    @recent30_busd_margin_total.setter
    def recent30_busd_margin_total(self, recent30_busd_margin_total):
        """Sets the recent30_busd_margin_total of this InlineResponse200120.


        :param recent30_busd_margin_total: The recent30_busd_margin_total of this InlineResponse200120.  # noqa: E501
        :type: str
        """
        if recent30_busd_margin_total is None:
            raise ValueError("Invalid value for `recent30_busd_margin_total`, must not be `None`")  # noqa: E501

        self._recent30_busd_margin_total = recent30_busd_margin_total

    @property
    def trade_info_vos(self):
        """Gets the trade_info_vos of this InlineResponse200120.  # noqa: E501


        :return: The trade_info_vos of this InlineResponse200120.  # noqa: E501
        :rtype: list[InlineResponse200120TradeInfoVos]
        """
        return self._trade_info_vos

    @trade_info_vos.setter
    def trade_info_vos(self, trade_info_vos):
        """Sets the trade_info_vos of this InlineResponse200120.


        :param trade_info_vos: The trade_info_vos of this InlineResponse200120.  # noqa: E501
        :type: list[InlineResponse200120TradeInfoVos]
        """
        if trade_info_vos is None:
            raise ValueError("Invalid value for `trade_info_vos`, must not be `None`")  # noqa: E501

        self._trade_info_vos = trade_info_vos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200120, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200120):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
