# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200128(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset': 'str',
        'display_priority': 'int',
        'duration': 'int',
        'interest_per_lot': 'str',
        'interest_rate': 'str',
        'lot_size': 'str',
        'lots_low_limit': 'int',
        'lots_purchased': 'int',
        'lots_up_limit': 'int',
        'max_lots_per_user': 'int',
        'need_kyc': 'bool',
        'project_id': 'str',
        'project_name': 'str',
        'status': 'str',
        'type': 'str',
        'with_area_limitation': 'bool'
    }

    attribute_map = {
        'asset': 'asset',
        'display_priority': 'displayPriority',
        'duration': 'duration',
        'interest_per_lot': 'interestPerLot',
        'interest_rate': 'interestRate',
        'lot_size': 'lotSize',
        'lots_low_limit': 'lotsLowLimit',
        'lots_purchased': 'lotsPurchased',
        'lots_up_limit': 'lotsUpLimit',
        'max_lots_per_user': 'maxLotsPerUser',
        'need_kyc': 'needKyc',
        'project_id': 'projectId',
        'project_name': 'projectName',
        'status': 'status',
        'type': 'type',
        'with_area_limitation': 'withAreaLimitation'
    }

    def __init__(self, asset=None, display_priority=None, duration=None, interest_per_lot=None, interest_rate=None, lot_size=None, lots_low_limit=None, lots_purchased=None, lots_up_limit=None, max_lots_per_user=None, need_kyc=None, project_id=None, project_name=None, status=None, type=None, with_area_limitation=None):  # noqa: E501
        """InlineResponse200128 - a model defined in Swagger"""  # noqa: E501
        self._asset = None
        self._display_priority = None
        self._duration = None
        self._interest_per_lot = None
        self._interest_rate = None
        self._lot_size = None
        self._lots_low_limit = None
        self._lots_purchased = None
        self._lots_up_limit = None
        self._max_lots_per_user = None
        self._need_kyc = None
        self._project_id = None
        self._project_name = None
        self._status = None
        self._type = None
        self._with_area_limitation = None
        self.discriminator = None
        self.asset = asset
        self.display_priority = display_priority
        self.duration = duration
        self.interest_per_lot = interest_per_lot
        self.interest_rate = interest_rate
        self.lot_size = lot_size
        self.lots_low_limit = lots_low_limit
        self.lots_purchased = lots_purchased
        self.lots_up_limit = lots_up_limit
        self.max_lots_per_user = max_lots_per_user
        self.need_kyc = need_kyc
        self.project_id = project_id
        self.project_name = project_name
        self.status = status
        self.type = type
        self.with_area_limitation = with_area_limitation

    @property
    def asset(self):
        """Gets the asset of this InlineResponse200128.  # noqa: E501


        :return: The asset of this InlineResponse200128.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse200128.


        :param asset: The asset of this InlineResponse200128.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def display_priority(self):
        """Gets the display_priority of this InlineResponse200128.  # noqa: E501


        :return: The display_priority of this InlineResponse200128.  # noqa: E501
        :rtype: int
        """
        return self._display_priority

    @display_priority.setter
    def display_priority(self, display_priority):
        """Sets the display_priority of this InlineResponse200128.


        :param display_priority: The display_priority of this InlineResponse200128.  # noqa: E501
        :type: int
        """
        if display_priority is None:
            raise ValueError("Invalid value for `display_priority`, must not be `None`")  # noqa: E501

        self._display_priority = display_priority

    @property
    def duration(self):
        """Gets the duration of this InlineResponse200128.  # noqa: E501


        :return: The duration of this InlineResponse200128.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse200128.


        :param duration: The duration of this InlineResponse200128.  # noqa: E501
        :type: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def interest_per_lot(self):
        """Gets the interest_per_lot of this InlineResponse200128.  # noqa: E501


        :return: The interest_per_lot of this InlineResponse200128.  # noqa: E501
        :rtype: str
        """
        return self._interest_per_lot

    @interest_per_lot.setter
    def interest_per_lot(self, interest_per_lot):
        """Sets the interest_per_lot of this InlineResponse200128.


        :param interest_per_lot: The interest_per_lot of this InlineResponse200128.  # noqa: E501
        :type: str
        """
        if interest_per_lot is None:
            raise ValueError("Invalid value for `interest_per_lot`, must not be `None`")  # noqa: E501

        self._interest_per_lot = interest_per_lot

    @property
    def interest_rate(self):
        """Gets the interest_rate of this InlineResponse200128.  # noqa: E501


        :return: The interest_rate of this InlineResponse200128.  # noqa: E501
        :rtype: str
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this InlineResponse200128.


        :param interest_rate: The interest_rate of this InlineResponse200128.  # noqa: E501
        :type: str
        """
        if interest_rate is None:
            raise ValueError("Invalid value for `interest_rate`, must not be `None`")  # noqa: E501

        self._interest_rate = interest_rate

    @property
    def lot_size(self):
        """Gets the lot_size of this InlineResponse200128.  # noqa: E501


        :return: The lot_size of this InlineResponse200128.  # noqa: E501
        :rtype: str
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """Sets the lot_size of this InlineResponse200128.


        :param lot_size: The lot_size of this InlineResponse200128.  # noqa: E501
        :type: str
        """
        if lot_size is None:
            raise ValueError("Invalid value for `lot_size`, must not be `None`")  # noqa: E501

        self._lot_size = lot_size

    @property
    def lots_low_limit(self):
        """Gets the lots_low_limit of this InlineResponse200128.  # noqa: E501


        :return: The lots_low_limit of this InlineResponse200128.  # noqa: E501
        :rtype: int
        """
        return self._lots_low_limit

    @lots_low_limit.setter
    def lots_low_limit(self, lots_low_limit):
        """Sets the lots_low_limit of this InlineResponse200128.


        :param lots_low_limit: The lots_low_limit of this InlineResponse200128.  # noqa: E501
        :type: int
        """
        if lots_low_limit is None:
            raise ValueError("Invalid value for `lots_low_limit`, must not be `None`")  # noqa: E501

        self._lots_low_limit = lots_low_limit

    @property
    def lots_purchased(self):
        """Gets the lots_purchased of this InlineResponse200128.  # noqa: E501


        :return: The lots_purchased of this InlineResponse200128.  # noqa: E501
        :rtype: int
        """
        return self._lots_purchased

    @lots_purchased.setter
    def lots_purchased(self, lots_purchased):
        """Sets the lots_purchased of this InlineResponse200128.


        :param lots_purchased: The lots_purchased of this InlineResponse200128.  # noqa: E501
        :type: int
        """
        if lots_purchased is None:
            raise ValueError("Invalid value for `lots_purchased`, must not be `None`")  # noqa: E501

        self._lots_purchased = lots_purchased

    @property
    def lots_up_limit(self):
        """Gets the lots_up_limit of this InlineResponse200128.  # noqa: E501


        :return: The lots_up_limit of this InlineResponse200128.  # noqa: E501
        :rtype: int
        """
        return self._lots_up_limit

    @lots_up_limit.setter
    def lots_up_limit(self, lots_up_limit):
        """Sets the lots_up_limit of this InlineResponse200128.


        :param lots_up_limit: The lots_up_limit of this InlineResponse200128.  # noqa: E501
        :type: int
        """
        if lots_up_limit is None:
            raise ValueError("Invalid value for `lots_up_limit`, must not be `None`")  # noqa: E501

        self._lots_up_limit = lots_up_limit

    @property
    def max_lots_per_user(self):
        """Gets the max_lots_per_user of this InlineResponse200128.  # noqa: E501


        :return: The max_lots_per_user of this InlineResponse200128.  # noqa: E501
        :rtype: int
        """
        return self._max_lots_per_user

    @max_lots_per_user.setter
    def max_lots_per_user(self, max_lots_per_user):
        """Sets the max_lots_per_user of this InlineResponse200128.


        :param max_lots_per_user: The max_lots_per_user of this InlineResponse200128.  # noqa: E501
        :type: int
        """
        if max_lots_per_user is None:
            raise ValueError("Invalid value for `max_lots_per_user`, must not be `None`")  # noqa: E501

        self._max_lots_per_user = max_lots_per_user

    @property
    def need_kyc(self):
        """Gets the need_kyc of this InlineResponse200128.  # noqa: E501


        :return: The need_kyc of this InlineResponse200128.  # noqa: E501
        :rtype: bool
        """
        return self._need_kyc

    @need_kyc.setter
    def need_kyc(self, need_kyc):
        """Sets the need_kyc of this InlineResponse200128.


        :param need_kyc: The need_kyc of this InlineResponse200128.  # noqa: E501
        :type: bool
        """
        if need_kyc is None:
            raise ValueError("Invalid value for `need_kyc`, must not be `None`")  # noqa: E501

        self._need_kyc = need_kyc

    @property
    def project_id(self):
        """Gets the project_id of this InlineResponse200128.  # noqa: E501


        :return: The project_id of this InlineResponse200128.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this InlineResponse200128.


        :param project_id: The project_id of this InlineResponse200128.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this InlineResponse200128.  # noqa: E501


        :return: The project_name of this InlineResponse200128.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this InlineResponse200128.


        :param project_name: The project_name of this InlineResponse200128.  # noqa: E501
        :type: str
        """
        if project_name is None:
            raise ValueError("Invalid value for `project_name`, must not be `None`")  # noqa: E501

        self._project_name = project_name

    @property
    def status(self):
        """Gets the status of this InlineResponse200128.  # noqa: E501


        :return: The status of this InlineResponse200128.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200128.


        :param status: The status of this InlineResponse200128.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this InlineResponse200128.  # noqa: E501


        :return: The type of this InlineResponse200128.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200128.


        :param type: The type of this InlineResponse200128.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def with_area_limitation(self):
        """Gets the with_area_limitation of this InlineResponse200128.  # noqa: E501


        :return: The with_area_limitation of this InlineResponse200128.  # noqa: E501
        :rtype: bool
        """
        return self._with_area_limitation

    @with_area_limitation.setter
    def with_area_limitation(self, with_area_limitation):
        """Sets the with_area_limitation of this InlineResponse200128.


        :param with_area_limitation: The with_area_limitation of this InlineResponse200128.  # noqa: E501
        :type: bool
        """
        if with_area_limitation is None:
            raise ValueError("Invalid value for `with_area_limitation`, must not be `None`")  # noqa: E501

        self._with_area_limitation = with_area_limitation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200128, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200128):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
