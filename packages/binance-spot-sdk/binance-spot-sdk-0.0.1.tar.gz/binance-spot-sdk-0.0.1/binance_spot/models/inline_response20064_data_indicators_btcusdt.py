# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20064DataIndicatorsBTCUSDT(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'i': 'str',
        'c': 'int',
        'v': 'float',
        't': 'float'
    }

    attribute_map = {
        'i': 'i',
        'c': 'c',
        'v': 'v',
        't': 't'
    }

    def __init__(self, i=None, c=None, v=None, t=None):  # noqa: E501
        """InlineResponse20064DataIndicatorsBTCUSDT - a model defined in Swagger"""  # noqa: E501
        self._i = None
        self._c = None
        self._v = None
        self._t = None
        self.discriminator = None
        self.i = i
        self.c = c
        self.v = v
        self.t = t

    @property
    def i(self):
        """Gets the i of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501

        Unfilled Ratio (UFR)  # noqa: E501

        :return: The i of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501
        :rtype: str
        """
        return self._i

    @i.setter
    def i(self, i):
        """Sets the i of this InlineResponse20064DataIndicatorsBTCUSDT.

        Unfilled Ratio (UFR)  # noqa: E501

        :param i: The i of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501
        :type: str
        """
        if i is None:
            raise ValueError("Invalid value for `i`, must not be `None`")  # noqa: E501

        self._i = i

    @property
    def c(self):
        """Gets the c of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501

        Count of all orders  # noqa: E501

        :return: The c of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501
        :rtype: int
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this InlineResponse20064DataIndicatorsBTCUSDT.

        Count of all orders  # noqa: E501

        :param c: The c of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501
        :type: int
        """
        if c is None:
            raise ValueError("Invalid value for `c`, must not be `None`")  # noqa: E501

        self._c = c

    @property
    def v(self):
        """Gets the v of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501

        Current UFR value  # noqa: E501

        :return: The v of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this InlineResponse20064DataIndicatorsBTCUSDT.

        Current UFR value  # noqa: E501

        :param v: The v of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501
        :type: float
        """
        if v is None:
            raise ValueError("Invalid value for `v`, must not be `None`")  # noqa: E501

        self._v = v

    @property
    def t(self):
        """Gets the t of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501

        Trigger UFR value  # noqa: E501

        :return: The t of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501
        :rtype: float
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this InlineResponse20064DataIndicatorsBTCUSDT.

        Trigger UFR value  # noqa: E501

        :param t: The t of this InlineResponse20064DataIndicatorsBTCUSDT.  # noqa: E501
        :type: float
        """
        if t is None:
            raise ValueError("Invalid value for `t`, must not be `None`")  # noqa: E501

        self._t = t

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20064DataIndicatorsBTCUSDT, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20064DataIndicatorsBTCUSDT):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
