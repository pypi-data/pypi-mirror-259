# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200157SubOrders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'algo_id': 'int',
        'order_id': 'int',
        'order_status': 'str',
        'executed_qty': 'str',
        'executed_amt': 'str',
        'fee_amt': 'str',
        'fee_asset': 'str',
        'book_time': 'int',
        'avg_price': 'str',
        'side': 'str',
        'symbol': 'str',
        'sub_id': 'int',
        'time_in_force': 'str',
        'orig_qty': 'str'
    }

    attribute_map = {
        'algo_id': 'algoId',
        'order_id': 'orderId',
        'order_status': 'orderStatus',
        'executed_qty': 'executedQty',
        'executed_amt': 'executedAmt',
        'fee_amt': 'feeAmt',
        'fee_asset': 'feeAsset',
        'book_time': 'bookTime',
        'avg_price': 'avgPrice',
        'side': 'side',
        'symbol': 'symbol',
        'sub_id': 'subId',
        'time_in_force': 'timeInForce',
        'orig_qty': 'origQty'
    }

    def __init__(self, algo_id=None, order_id=None, order_status=None, executed_qty=None, executed_amt=None, fee_amt=None, fee_asset=None, book_time=None, avg_price=None, side=None, symbol=None, sub_id=None, time_in_force=None, orig_qty=None):  # noqa: E501
        """InlineResponse200157SubOrders - a model defined in Swagger"""  # noqa: E501
        self._algo_id = None
        self._order_id = None
        self._order_status = None
        self._executed_qty = None
        self._executed_amt = None
        self._fee_amt = None
        self._fee_asset = None
        self._book_time = None
        self._avg_price = None
        self._side = None
        self._symbol = None
        self._sub_id = None
        self._time_in_force = None
        self._orig_qty = None
        self.discriminator = None
        self.algo_id = algo_id
        self.order_id = order_id
        self.order_status = order_status
        if executed_qty is not None:
            self.executed_qty = executed_qty
        self.executed_amt = executed_amt
        self.fee_amt = fee_amt
        self.fee_asset = fee_asset
        self.book_time = book_time
        self.avg_price = avg_price
        self.side = side
        self.symbol = symbol
        self.sub_id = sub_id
        self.time_in_force = time_in_force
        self.orig_qty = orig_qty

    @property
    def algo_id(self):
        """Gets the algo_id of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The algo_id of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: int
        """
        return self._algo_id

    @algo_id.setter
    def algo_id(self, algo_id):
        """Sets the algo_id of this InlineResponse200157SubOrders.


        :param algo_id: The algo_id of this InlineResponse200157SubOrders.  # noqa: E501
        :type: int
        """
        if algo_id is None:
            raise ValueError("Invalid value for `algo_id`, must not be `None`")  # noqa: E501

        self._algo_id = algo_id

    @property
    def order_id(self):
        """Gets the order_id of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The order_id of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this InlineResponse200157SubOrders.


        :param order_id: The order_id of this InlineResponse200157SubOrders.  # noqa: E501
        :type: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def order_status(self):
        """Gets the order_status of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The order_status of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this InlineResponse200157SubOrders.


        :param order_status: The order_status of this InlineResponse200157SubOrders.  # noqa: E501
        :type: str
        """
        if order_status is None:
            raise ValueError("Invalid value for `order_status`, must not be `None`")  # noqa: E501

        self._order_status = order_status

    @property
    def executed_qty(self):
        """Gets the executed_qty of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The executed_qty of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: str
        """
        return self._executed_qty

    @executed_qty.setter
    def executed_qty(self, executed_qty):
        """Sets the executed_qty of this InlineResponse200157SubOrders.


        :param executed_qty: The executed_qty of this InlineResponse200157SubOrders.  # noqa: E501
        :type: str
        """

        self._executed_qty = executed_qty

    @property
    def executed_amt(self):
        """Gets the executed_amt of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The executed_amt of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: str
        """
        return self._executed_amt

    @executed_amt.setter
    def executed_amt(self, executed_amt):
        """Sets the executed_amt of this InlineResponse200157SubOrders.


        :param executed_amt: The executed_amt of this InlineResponse200157SubOrders.  # noqa: E501
        :type: str
        """
        if executed_amt is None:
            raise ValueError("Invalid value for `executed_amt`, must not be `None`")  # noqa: E501

        self._executed_amt = executed_amt

    @property
    def fee_amt(self):
        """Gets the fee_amt of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The fee_amt of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: str
        """
        return self._fee_amt

    @fee_amt.setter
    def fee_amt(self, fee_amt):
        """Sets the fee_amt of this InlineResponse200157SubOrders.


        :param fee_amt: The fee_amt of this InlineResponse200157SubOrders.  # noqa: E501
        :type: str
        """
        if fee_amt is None:
            raise ValueError("Invalid value for `fee_amt`, must not be `None`")  # noqa: E501

        self._fee_amt = fee_amt

    @property
    def fee_asset(self):
        """Gets the fee_asset of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The fee_asset of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: str
        """
        return self._fee_asset

    @fee_asset.setter
    def fee_asset(self, fee_asset):
        """Sets the fee_asset of this InlineResponse200157SubOrders.


        :param fee_asset: The fee_asset of this InlineResponse200157SubOrders.  # noqa: E501
        :type: str
        """
        if fee_asset is None:
            raise ValueError("Invalid value for `fee_asset`, must not be `None`")  # noqa: E501

        self._fee_asset = fee_asset

    @property
    def book_time(self):
        """Gets the book_time of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The book_time of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: int
        """
        return self._book_time

    @book_time.setter
    def book_time(self, book_time):
        """Sets the book_time of this InlineResponse200157SubOrders.


        :param book_time: The book_time of this InlineResponse200157SubOrders.  # noqa: E501
        :type: int
        """
        if book_time is None:
            raise ValueError("Invalid value for `book_time`, must not be `None`")  # noqa: E501

        self._book_time = book_time

    @property
    def avg_price(self):
        """Gets the avg_price of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The avg_price of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: str
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price):
        """Sets the avg_price of this InlineResponse200157SubOrders.


        :param avg_price: The avg_price of this InlineResponse200157SubOrders.  # noqa: E501
        :type: str
        """
        if avg_price is None:
            raise ValueError("Invalid value for `avg_price`, must not be `None`")  # noqa: E501

        self._avg_price = avg_price

    @property
    def side(self):
        """Gets the side of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The side of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this InlineResponse200157SubOrders.


        :param side: The side of this InlineResponse200157SubOrders.  # noqa: E501
        :type: str
        """
        if side is None:
            raise ValueError("Invalid value for `side`, must not be `None`")  # noqa: E501

        self._side = side

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The symbol of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse200157SubOrders.


        :param symbol: The symbol of this InlineResponse200157SubOrders.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def sub_id(self):
        """Gets the sub_id of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The sub_id of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: int
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this InlineResponse200157SubOrders.


        :param sub_id: The sub_id of this InlineResponse200157SubOrders.  # noqa: E501
        :type: int
        """
        if sub_id is None:
            raise ValueError("Invalid value for `sub_id`, must not be `None`")  # noqa: E501

        self._sub_id = sub_id

    @property
    def time_in_force(self):
        """Gets the time_in_force of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The time_in_force of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this InlineResponse200157SubOrders.


        :param time_in_force: The time_in_force of this InlineResponse200157SubOrders.  # noqa: E501
        :type: str
        """
        if time_in_force is None:
            raise ValueError("Invalid value for `time_in_force`, must not be `None`")  # noqa: E501

        self._time_in_force = time_in_force

    @property
    def orig_qty(self):
        """Gets the orig_qty of this InlineResponse200157SubOrders.  # noqa: E501


        :return: The orig_qty of this InlineResponse200157SubOrders.  # noqa: E501
        :rtype: str
        """
        return self._orig_qty

    @orig_qty.setter
    def orig_qty(self, orig_qty):
        """Sets the orig_qty of this InlineResponse200157SubOrders.


        :param orig_qty: The orig_qty of this InlineResponse200157SubOrders.  # noqa: E501
        :type: str
        """
        if orig_qty is None:
            raise ValueError("Invalid value for `orig_qty`, must not be `None`")  # noqa: E501

        self._orig_qty = orig_qty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200157SubOrders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200157SubOrders):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
