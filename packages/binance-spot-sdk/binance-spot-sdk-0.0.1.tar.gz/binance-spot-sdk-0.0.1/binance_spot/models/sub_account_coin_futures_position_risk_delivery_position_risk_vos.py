# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_price': 'str',
        'mark_price': 'str',
        'leverage': 'str',
        'isolated': 'str',
        'isolated_wallet': 'str',
        'isolated_margin': 'str',
        'is_auto_add_margin': 'str',
        'position_side': 'str',
        'position_amount': 'str',
        'symbol': 'str',
        'unrealized_profit': 'str'
    }

    attribute_map = {
        'entry_price': 'entryPrice',
        'mark_price': 'markPrice',
        'leverage': 'leverage',
        'isolated': 'isolated',
        'isolated_wallet': 'isolatedWallet',
        'isolated_margin': 'isolatedMargin',
        'is_auto_add_margin': 'isAutoAddMargin',
        'position_side': 'positionSide',
        'position_amount': 'positionAmount',
        'symbol': 'symbol',
        'unrealized_profit': 'unrealizedProfit'
    }

    def __init__(self, entry_price=None, mark_price=None, leverage=None, isolated=None, isolated_wallet=None, isolated_margin=None, is_auto_add_margin=None, position_side=None, position_amount=None, symbol=None, unrealized_profit=None):  # noqa: E501
        """SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos - a model defined in Swagger"""  # noqa: E501
        self._entry_price = None
        self._mark_price = None
        self._leverage = None
        self._isolated = None
        self._isolated_wallet = None
        self._isolated_margin = None
        self._is_auto_add_margin = None
        self._position_side = None
        self._position_amount = None
        self._symbol = None
        self._unrealized_profit = None
        self.discriminator = None
        self.entry_price = entry_price
        self.mark_price = mark_price
        self.leverage = leverage
        self.isolated = isolated
        self.isolated_wallet = isolated_wallet
        self.isolated_margin = isolated_margin
        self.is_auto_add_margin = is_auto_add_margin
        self.position_side = position_side
        self.position_amount = position_amount
        self.symbol = symbol
        self.unrealized_profit = unrealized_profit

    @property
    def entry_price(self):
        """Gets the entry_price of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The entry_price of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._entry_price

    @entry_price.setter
    def entry_price(self, entry_price):
        """Sets the entry_price of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param entry_price: The entry_price of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if entry_price is None:
            raise ValueError("Invalid value for `entry_price`, must not be `None`")  # noqa: E501

        self._entry_price = entry_price

    @property
    def mark_price(self):
        """Gets the mark_price of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The mark_price of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._mark_price

    @mark_price.setter
    def mark_price(self, mark_price):
        """Sets the mark_price of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param mark_price: The mark_price of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if mark_price is None:
            raise ValueError("Invalid value for `mark_price`, must not be `None`")  # noqa: E501

        self._mark_price = mark_price

    @property
    def leverage(self):
        """Gets the leverage of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The leverage of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._leverage

    @leverage.setter
    def leverage(self, leverage):
        """Sets the leverage of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param leverage: The leverage of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if leverage is None:
            raise ValueError("Invalid value for `leverage`, must not be `None`")  # noqa: E501

        self._leverage = leverage

    @property
    def isolated(self):
        """Gets the isolated of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The isolated of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._isolated

    @isolated.setter
    def isolated(self, isolated):
        """Sets the isolated of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param isolated: The isolated of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if isolated is None:
            raise ValueError("Invalid value for `isolated`, must not be `None`")  # noqa: E501

        self._isolated = isolated

    @property
    def isolated_wallet(self):
        """Gets the isolated_wallet of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The isolated_wallet of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._isolated_wallet

    @isolated_wallet.setter
    def isolated_wallet(self, isolated_wallet):
        """Sets the isolated_wallet of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param isolated_wallet: The isolated_wallet of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if isolated_wallet is None:
            raise ValueError("Invalid value for `isolated_wallet`, must not be `None`")  # noqa: E501

        self._isolated_wallet = isolated_wallet

    @property
    def isolated_margin(self):
        """Gets the isolated_margin of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The isolated_margin of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._isolated_margin

    @isolated_margin.setter
    def isolated_margin(self, isolated_margin):
        """Sets the isolated_margin of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param isolated_margin: The isolated_margin of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if isolated_margin is None:
            raise ValueError("Invalid value for `isolated_margin`, must not be `None`")  # noqa: E501

        self._isolated_margin = isolated_margin

    @property
    def is_auto_add_margin(self):
        """Gets the is_auto_add_margin of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The is_auto_add_margin of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._is_auto_add_margin

    @is_auto_add_margin.setter
    def is_auto_add_margin(self, is_auto_add_margin):
        """Sets the is_auto_add_margin of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param is_auto_add_margin: The is_auto_add_margin of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if is_auto_add_margin is None:
            raise ValueError("Invalid value for `is_auto_add_margin`, must not be `None`")  # noqa: E501

        self._is_auto_add_margin = is_auto_add_margin

    @property
    def position_side(self):
        """Gets the position_side of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The position_side of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._position_side

    @position_side.setter
    def position_side(self, position_side):
        """Sets the position_side of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param position_side: The position_side of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if position_side is None:
            raise ValueError("Invalid value for `position_side`, must not be `None`")  # noqa: E501

        self._position_side = position_side

    @property
    def position_amount(self):
        """Gets the position_amount of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The position_amount of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._position_amount

    @position_amount.setter
    def position_amount(self, position_amount):
        """Sets the position_amount of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param position_amount: The position_amount of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if position_amount is None:
            raise ValueError("Invalid value for `position_amount`, must not be `None`")  # noqa: E501

        self._position_amount = position_amount

    @property
    def symbol(self):
        """Gets the symbol of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The symbol of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param symbol: The symbol of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def unrealized_profit(self):
        """Gets the unrealized_profit of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501


        :return: The unrealized_profit of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :rtype: str
        """
        return self._unrealized_profit

    @unrealized_profit.setter
    def unrealized_profit(self, unrealized_profit):
        """Sets the unrealized_profit of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.


        :param unrealized_profit: The unrealized_profit of this SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos.  # noqa: E501
        :type: str
        """
        if unrealized_profit is None:
            raise ValueError("Invalid value for `unrealized_profit`, must not be `None`")  # noqa: E501

        self._unrealized_profit = unrealized_profit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubAccountCOINFuturesPositionRiskDeliveryPositionRiskVos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
