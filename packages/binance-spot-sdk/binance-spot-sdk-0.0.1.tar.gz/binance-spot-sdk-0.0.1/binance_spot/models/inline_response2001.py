# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timezone': 'str',
        'server_time': 'int',
        'rate_limits': 'list[InlineResponse2001RateLimits]',
        'exchange_filters': 'list[object]',
        'symbols': 'list[InlineResponse2001Symbols]'
    }

    attribute_map = {
        'timezone': 'timezone',
        'server_time': 'serverTime',
        'rate_limits': 'rateLimits',
        'exchange_filters': 'exchangeFilters',
        'symbols': 'symbols'
    }

    def __init__(self, timezone=None, server_time=None, rate_limits=None, exchange_filters=None, symbols=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501
        self._timezone = None
        self._server_time = None
        self._rate_limits = None
        self._exchange_filters = None
        self._symbols = None
        self.discriminator = None
        self.timezone = timezone
        self.server_time = server_time
        self.rate_limits = rate_limits
        self.exchange_filters = exchange_filters
        self.symbols = symbols

    @property
    def timezone(self):
        """Gets the timezone of this InlineResponse2001.  # noqa: E501


        :return: The timezone of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this InlineResponse2001.


        :param timezone: The timezone of this InlineResponse2001.  # noqa: E501
        :type: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def server_time(self):
        """Gets the server_time of this InlineResponse2001.  # noqa: E501


        :return: The server_time of this InlineResponse2001.  # noqa: E501
        :rtype: int
        """
        return self._server_time

    @server_time.setter
    def server_time(self, server_time):
        """Sets the server_time of this InlineResponse2001.


        :param server_time: The server_time of this InlineResponse2001.  # noqa: E501
        :type: int
        """
        if server_time is None:
            raise ValueError("Invalid value for `server_time`, must not be `None`")  # noqa: E501

        self._server_time = server_time

    @property
    def rate_limits(self):
        """Gets the rate_limits of this InlineResponse2001.  # noqa: E501


        :return: The rate_limits of this InlineResponse2001.  # noqa: E501
        :rtype: list[InlineResponse2001RateLimits]
        """
        return self._rate_limits

    @rate_limits.setter
    def rate_limits(self, rate_limits):
        """Sets the rate_limits of this InlineResponse2001.


        :param rate_limits: The rate_limits of this InlineResponse2001.  # noqa: E501
        :type: list[InlineResponse2001RateLimits]
        """
        if rate_limits is None:
            raise ValueError("Invalid value for `rate_limits`, must not be `None`")  # noqa: E501

        self._rate_limits = rate_limits

    @property
    def exchange_filters(self):
        """Gets the exchange_filters of this InlineResponse2001.  # noqa: E501


        :return: The exchange_filters of this InlineResponse2001.  # noqa: E501
        :rtype: list[object]
        """
        return self._exchange_filters

    @exchange_filters.setter
    def exchange_filters(self, exchange_filters):
        """Sets the exchange_filters of this InlineResponse2001.


        :param exchange_filters: The exchange_filters of this InlineResponse2001.  # noqa: E501
        :type: list[object]
        """
        if exchange_filters is None:
            raise ValueError("Invalid value for `exchange_filters`, must not be `None`")  # noqa: E501

        self._exchange_filters = exchange_filters

    @property
    def symbols(self):
        """Gets the symbols of this InlineResponse2001.  # noqa: E501


        :return: The symbols of this InlineResponse2001.  # noqa: E501
        :rtype: list[InlineResponse2001Symbols]
        """
        return self._symbols

    @symbols.setter
    def symbols(self, symbols):
        """Sets the symbols of this InlineResponse2001.


        :param symbols: The symbols of this InlineResponse2001.  # noqa: E501
        :type: list[InlineResponse2001Symbols]
        """
        if symbols is None:
            raise ValueError("Invalid value for `symbols`, must not be `None`")  # noqa: E501

        self._symbols = symbols

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
