# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Sapiv1bswappoolConfigureAssetConfigureBUSD(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_add': 'int',
        'max_add': 'int',
        'min_swap': 'int',
        'max_swap': 'int'
    }

    attribute_map = {
        'min_add': 'minAdd',
        'max_add': 'maxAdd',
        'min_swap': 'minSwap',
        'max_swap': 'maxSwap'
    }

    def __init__(self, min_add=None, max_add=None, min_swap=None, max_swap=None):  # noqa: E501
        """Sapiv1bswappoolConfigureAssetConfigureBUSD - a model defined in Swagger"""  # noqa: E501
        self._min_add = None
        self._max_add = None
        self._min_swap = None
        self._max_swap = None
        self.discriminator = None
        self.min_add = min_add
        self.max_add = max_add
        self.min_swap = min_swap
        self.max_swap = max_swap

    @property
    def min_add(self):
        """Gets the min_add of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501


        :return: The min_add of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501
        :rtype: int
        """
        return self._min_add

    @min_add.setter
    def min_add(self, min_add):
        """Sets the min_add of this Sapiv1bswappoolConfigureAssetConfigureBUSD.


        :param min_add: The min_add of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501
        :type: int
        """
        if min_add is None:
            raise ValueError("Invalid value for `min_add`, must not be `None`")  # noqa: E501

        self._min_add = min_add

    @property
    def max_add(self):
        """Gets the max_add of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501


        :return: The max_add of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501
        :rtype: int
        """
        return self._max_add

    @max_add.setter
    def max_add(self, max_add):
        """Sets the max_add of this Sapiv1bswappoolConfigureAssetConfigureBUSD.


        :param max_add: The max_add of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501
        :type: int
        """
        if max_add is None:
            raise ValueError("Invalid value for `max_add`, must not be `None`")  # noqa: E501

        self._max_add = max_add

    @property
    def min_swap(self):
        """Gets the min_swap of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501


        :return: The min_swap of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501
        :rtype: int
        """
        return self._min_swap

    @min_swap.setter
    def min_swap(self, min_swap):
        """Sets the min_swap of this Sapiv1bswappoolConfigureAssetConfigureBUSD.


        :param min_swap: The min_swap of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501
        :type: int
        """
        if min_swap is None:
            raise ValueError("Invalid value for `min_swap`, must not be `None`")  # noqa: E501

        self._min_swap = min_swap

    @property
    def max_swap(self):
        """Gets the max_swap of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501


        :return: The max_swap of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501
        :rtype: int
        """
        return self._max_swap

    @max_swap.setter
    def max_swap(self, max_swap):
        """Sets the max_swap of this Sapiv1bswappoolConfigureAssetConfigureBUSD.


        :param max_swap: The max_swap of this Sapiv1bswappoolConfigureAssetConfigureBUSD.  # noqa: E501
        :type: int
        """
        if max_swap is None:
            raise ValueError("Invalid value for `max_swap`, must not be `None`")  # noqa: E501

        self._max_swap = max_swap

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sapiv1bswappoolConfigureAssetConfigureBUSD, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sapiv1bswappoolConfigureAssetConfigureBUSD):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
