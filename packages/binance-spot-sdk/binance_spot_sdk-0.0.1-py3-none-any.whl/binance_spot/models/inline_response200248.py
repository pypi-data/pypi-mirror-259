# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200248(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'target_asset': 'str',
        'plan_type': 'str',
        'plan_name': 'str',
        'plan_id': 'int',
        'transaction_date_time': 'int',
        'transaction_status': 'str',
        'failed_type': 'str',
        'source_asset': 'str',
        'source_asset_amount': 'str',
        'target_asset_amount': 'str',
        'source_wallet': 'str',
        'flexible_used': 'str',
        'transaction_fee': 'str',
        'transaction_fee_unit': 'str',
        'execution_price': 'str',
        'execution_type': 'str',
        'subscription_cycle': 'str'
    }

    attribute_map = {
        'id': 'id',
        'target_asset': 'targetAsset',
        'plan_type': 'planType',
        'plan_name': 'planName',
        'plan_id': 'planId',
        'transaction_date_time': 'transactionDateTime',
        'transaction_status': 'transactionStatus',
        'failed_type': 'failedType',
        'source_asset': 'sourceAsset',
        'source_asset_amount': 'sourceAssetAmount',
        'target_asset_amount': 'targetAssetAmount',
        'source_wallet': 'sourceWallet',
        'flexible_used': 'flexibleUsed',
        'transaction_fee': 'transactionFee',
        'transaction_fee_unit': 'transactionFeeUnit',
        'execution_price': 'executionPrice',
        'execution_type': 'executionType',
        'subscription_cycle': 'subscriptionCycle'
    }

    def __init__(self, id=None, target_asset=None, plan_type=None, plan_name=None, plan_id=None, transaction_date_time=None, transaction_status=None, failed_type=None, source_asset=None, source_asset_amount=None, target_asset_amount=None, source_wallet=None, flexible_used=None, transaction_fee=None, transaction_fee_unit=None, execution_price=None, execution_type=None, subscription_cycle=None):  # noqa: E501
        """InlineResponse200248 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._target_asset = None
        self._plan_type = None
        self._plan_name = None
        self._plan_id = None
        self._transaction_date_time = None
        self._transaction_status = None
        self._failed_type = None
        self._source_asset = None
        self._source_asset_amount = None
        self._target_asset_amount = None
        self._source_wallet = None
        self._flexible_used = None
        self._transaction_fee = None
        self._transaction_fee_unit = None
        self._execution_price = None
        self._execution_type = None
        self._subscription_cycle = None
        self.discriminator = None
        self.id = id
        self.target_asset = target_asset
        self.plan_type = plan_type
        self.plan_name = plan_name
        self.plan_id = plan_id
        self.transaction_date_time = transaction_date_time
        self.transaction_status = transaction_status
        self.failed_type = failed_type
        self.source_asset = source_asset
        self.source_asset_amount = source_asset_amount
        self.target_asset_amount = target_asset_amount
        self.source_wallet = source_wallet
        self.flexible_used = flexible_used
        self.transaction_fee = transaction_fee
        self.transaction_fee_unit = transaction_fee_unit
        self.execution_price = execution_price
        self.execution_type = execution_type
        self.subscription_cycle = subscription_cycle

    @property
    def id(self):
        """Gets the id of this InlineResponse200248.  # noqa: E501


        :return: The id of this InlineResponse200248.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200248.


        :param id: The id of this InlineResponse200248.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def target_asset(self):
        """Gets the target_asset of this InlineResponse200248.  # noqa: E501


        :return: The target_asset of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._target_asset

    @target_asset.setter
    def target_asset(self, target_asset):
        """Sets the target_asset of this InlineResponse200248.


        :param target_asset: The target_asset of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if target_asset is None:
            raise ValueError("Invalid value for `target_asset`, must not be `None`")  # noqa: E501

        self._target_asset = target_asset

    @property
    def plan_type(self):
        """Gets the plan_type of this InlineResponse200248.  # noqa: E501


        :return: The plan_type of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this InlineResponse200248.


        :param plan_type: The plan_type of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if plan_type is None:
            raise ValueError("Invalid value for `plan_type`, must not be `None`")  # noqa: E501

        self._plan_type = plan_type

    @property
    def plan_name(self):
        """Gets the plan_name of this InlineResponse200248.  # noqa: E501


        :return: The plan_name of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this InlineResponse200248.


        :param plan_name: The plan_name of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if plan_name is None:
            raise ValueError("Invalid value for `plan_name`, must not be `None`")  # noqa: E501

        self._plan_name = plan_name

    @property
    def plan_id(self):
        """Gets the plan_id of this InlineResponse200248.  # noqa: E501


        :return: The plan_id of this InlineResponse200248.  # noqa: E501
        :rtype: int
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this InlineResponse200248.


        :param plan_id: The plan_id of this InlineResponse200248.  # noqa: E501
        :type: int
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")  # noqa: E501

        self._plan_id = plan_id

    @property
    def transaction_date_time(self):
        """Gets the transaction_date_time of this InlineResponse200248.  # noqa: E501


        :return: The transaction_date_time of this InlineResponse200248.  # noqa: E501
        :rtype: int
        """
        return self._transaction_date_time

    @transaction_date_time.setter
    def transaction_date_time(self, transaction_date_time):
        """Sets the transaction_date_time of this InlineResponse200248.


        :param transaction_date_time: The transaction_date_time of this InlineResponse200248.  # noqa: E501
        :type: int
        """
        if transaction_date_time is None:
            raise ValueError("Invalid value for `transaction_date_time`, must not be `None`")  # noqa: E501

        self._transaction_date_time = transaction_date_time

    @property
    def transaction_status(self):
        """Gets the transaction_status of this InlineResponse200248.  # noqa: E501


        :return: The transaction_status of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this InlineResponse200248.


        :param transaction_status: The transaction_status of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")  # noqa: E501

        self._transaction_status = transaction_status

    @property
    def failed_type(self):
        """Gets the failed_type of this InlineResponse200248.  # noqa: E501


        :return: The failed_type of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._failed_type

    @failed_type.setter
    def failed_type(self, failed_type):
        """Sets the failed_type of this InlineResponse200248.


        :param failed_type: The failed_type of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if failed_type is None:
            raise ValueError("Invalid value for `failed_type`, must not be `None`")  # noqa: E501

        self._failed_type = failed_type

    @property
    def source_asset(self):
        """Gets the source_asset of this InlineResponse200248.  # noqa: E501


        :return: The source_asset of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._source_asset

    @source_asset.setter
    def source_asset(self, source_asset):
        """Sets the source_asset of this InlineResponse200248.


        :param source_asset: The source_asset of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if source_asset is None:
            raise ValueError("Invalid value for `source_asset`, must not be `None`")  # noqa: E501

        self._source_asset = source_asset

    @property
    def source_asset_amount(self):
        """Gets the source_asset_amount of this InlineResponse200248.  # noqa: E501


        :return: The source_asset_amount of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._source_asset_amount

    @source_asset_amount.setter
    def source_asset_amount(self, source_asset_amount):
        """Sets the source_asset_amount of this InlineResponse200248.


        :param source_asset_amount: The source_asset_amount of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if source_asset_amount is None:
            raise ValueError("Invalid value for `source_asset_amount`, must not be `None`")  # noqa: E501

        self._source_asset_amount = source_asset_amount

    @property
    def target_asset_amount(self):
        """Gets the target_asset_amount of this InlineResponse200248.  # noqa: E501


        :return: The target_asset_amount of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._target_asset_amount

    @target_asset_amount.setter
    def target_asset_amount(self, target_asset_amount):
        """Sets the target_asset_amount of this InlineResponse200248.


        :param target_asset_amount: The target_asset_amount of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if target_asset_amount is None:
            raise ValueError("Invalid value for `target_asset_amount`, must not be `None`")  # noqa: E501

        self._target_asset_amount = target_asset_amount

    @property
    def source_wallet(self):
        """Gets the source_wallet of this InlineResponse200248.  # noqa: E501


        :return: The source_wallet of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._source_wallet

    @source_wallet.setter
    def source_wallet(self, source_wallet):
        """Sets the source_wallet of this InlineResponse200248.


        :param source_wallet: The source_wallet of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if source_wallet is None:
            raise ValueError("Invalid value for `source_wallet`, must not be `None`")  # noqa: E501

        self._source_wallet = source_wallet

    @property
    def flexible_used(self):
        """Gets the flexible_used of this InlineResponse200248.  # noqa: E501


        :return: The flexible_used of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._flexible_used

    @flexible_used.setter
    def flexible_used(self, flexible_used):
        """Sets the flexible_used of this InlineResponse200248.


        :param flexible_used: The flexible_used of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if flexible_used is None:
            raise ValueError("Invalid value for `flexible_used`, must not be `None`")  # noqa: E501

        self._flexible_used = flexible_used

    @property
    def transaction_fee(self):
        """Gets the transaction_fee of this InlineResponse200248.  # noqa: E501


        :return: The transaction_fee of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._transaction_fee

    @transaction_fee.setter
    def transaction_fee(self, transaction_fee):
        """Sets the transaction_fee of this InlineResponse200248.


        :param transaction_fee: The transaction_fee of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if transaction_fee is None:
            raise ValueError("Invalid value for `transaction_fee`, must not be `None`")  # noqa: E501

        self._transaction_fee = transaction_fee

    @property
    def transaction_fee_unit(self):
        """Gets the transaction_fee_unit of this InlineResponse200248.  # noqa: E501


        :return: The transaction_fee_unit of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._transaction_fee_unit

    @transaction_fee_unit.setter
    def transaction_fee_unit(self, transaction_fee_unit):
        """Sets the transaction_fee_unit of this InlineResponse200248.


        :param transaction_fee_unit: The transaction_fee_unit of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if transaction_fee_unit is None:
            raise ValueError("Invalid value for `transaction_fee_unit`, must not be `None`")  # noqa: E501

        self._transaction_fee_unit = transaction_fee_unit

    @property
    def execution_price(self):
        """Gets the execution_price of this InlineResponse200248.  # noqa: E501


        :return: The execution_price of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._execution_price

    @execution_price.setter
    def execution_price(self, execution_price):
        """Sets the execution_price of this InlineResponse200248.


        :param execution_price: The execution_price of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if execution_price is None:
            raise ValueError("Invalid value for `execution_price`, must not be `None`")  # noqa: E501

        self._execution_price = execution_price

    @property
    def execution_type(self):
        """Gets the execution_type of this InlineResponse200248.  # noqa: E501


        :return: The execution_type of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._execution_type

    @execution_type.setter
    def execution_type(self, execution_type):
        """Sets the execution_type of this InlineResponse200248.


        :param execution_type: The execution_type of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if execution_type is None:
            raise ValueError("Invalid value for `execution_type`, must not be `None`")  # noqa: E501

        self._execution_type = execution_type

    @property
    def subscription_cycle(self):
        """Gets the subscription_cycle of this InlineResponse200248.  # noqa: E501


        :return: The subscription_cycle of this InlineResponse200248.  # noqa: E501
        :rtype: str
        """
        return self._subscription_cycle

    @subscription_cycle.setter
    def subscription_cycle(self, subscription_cycle):
        """Sets the subscription_cycle of this InlineResponse200248.


        :param subscription_cycle: The subscription_cycle of this InlineResponse200248.  # noqa: E501
        :type: str
        """
        if subscription_cycle is None:
            raise ValueError("Invalid value for `subscription_cycle`, must not be `None`")  # noqa: E501

        self._subscription_cycle = subscription_cycle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200248, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200248):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
