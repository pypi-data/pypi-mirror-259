# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200190(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pool_id': 'int',
        'pool_name': 'str',
        'asset_rewards': 'str',
        'claim_time': 'int',
        'claim_amount': 'float',
        'status': 'int'
    }

    attribute_map = {
        'pool_id': 'poolId',
        'pool_name': 'poolName',
        'asset_rewards': 'assetRewards',
        'claim_time': 'claimTime',
        'claim_amount': 'claimAmount',
        'status': 'status'
    }

    def __init__(self, pool_id=None, pool_name=None, asset_rewards=None, claim_time=None, claim_amount=None, status=None):  # noqa: E501
        """InlineResponse200190 - a model defined in Swagger"""  # noqa: E501
        self._pool_id = None
        self._pool_name = None
        self._asset_rewards = None
        self._claim_time = None
        self._claim_amount = None
        self._status = None
        self.discriminator = None
        self.pool_id = pool_id
        self.pool_name = pool_name
        self.asset_rewards = asset_rewards
        self.claim_time = claim_time
        self.claim_amount = claim_amount
        self.status = status

    @property
    def pool_id(self):
        """Gets the pool_id of this InlineResponse200190.  # noqa: E501


        :return: The pool_id of this InlineResponse200190.  # noqa: E501
        :rtype: int
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this InlineResponse200190.


        :param pool_id: The pool_id of this InlineResponse200190.  # noqa: E501
        :type: int
        """
        if pool_id is None:
            raise ValueError("Invalid value for `pool_id`, must not be `None`")  # noqa: E501

        self._pool_id = pool_id

    @property
    def pool_name(self):
        """Gets the pool_name of this InlineResponse200190.  # noqa: E501


        :return: The pool_name of this InlineResponse200190.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this InlineResponse200190.


        :param pool_name: The pool_name of this InlineResponse200190.  # noqa: E501
        :type: str
        """
        if pool_name is None:
            raise ValueError("Invalid value for `pool_name`, must not be `None`")  # noqa: E501

        self._pool_name = pool_name

    @property
    def asset_rewards(self):
        """Gets the asset_rewards of this InlineResponse200190.  # noqa: E501


        :return: The asset_rewards of this InlineResponse200190.  # noqa: E501
        :rtype: str
        """
        return self._asset_rewards

    @asset_rewards.setter
    def asset_rewards(self, asset_rewards):
        """Sets the asset_rewards of this InlineResponse200190.


        :param asset_rewards: The asset_rewards of this InlineResponse200190.  # noqa: E501
        :type: str
        """
        if asset_rewards is None:
            raise ValueError("Invalid value for `asset_rewards`, must not be `None`")  # noqa: E501

        self._asset_rewards = asset_rewards

    @property
    def claim_time(self):
        """Gets the claim_time of this InlineResponse200190.  # noqa: E501


        :return: The claim_time of this InlineResponse200190.  # noqa: E501
        :rtype: int
        """
        return self._claim_time

    @claim_time.setter
    def claim_time(self, claim_time):
        """Sets the claim_time of this InlineResponse200190.


        :param claim_time: The claim_time of this InlineResponse200190.  # noqa: E501
        :type: int
        """
        if claim_time is None:
            raise ValueError("Invalid value for `claim_time`, must not be `None`")  # noqa: E501

        self._claim_time = claim_time

    @property
    def claim_amount(self):
        """Gets the claim_amount of this InlineResponse200190.  # noqa: E501


        :return: The claim_amount of this InlineResponse200190.  # noqa: E501
        :rtype: float
        """
        return self._claim_amount

    @claim_amount.setter
    def claim_amount(self, claim_amount):
        """Sets the claim_amount of this InlineResponse200190.


        :param claim_amount: The claim_amount of this InlineResponse200190.  # noqa: E501
        :type: float
        """
        if claim_amount is None:
            raise ValueError("Invalid value for `claim_amount`, must not be `None`")  # noqa: E501

        self._claim_amount = claim_amount

    @property
    def status(self):
        """Gets the status of this InlineResponse200190.  # noqa: E501

        0: pending, 1: success  # noqa: E501

        :return: The status of this InlineResponse200190.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200190.

        0: pending, 1: success  # noqa: E501

        :param status: The status of this InlineResponse200190.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200190, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200190):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
