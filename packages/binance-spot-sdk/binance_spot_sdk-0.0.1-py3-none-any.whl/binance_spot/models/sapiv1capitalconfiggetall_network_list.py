# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Sapiv1capitalconfiggetallNetworkList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_regex': 'str',
        'coin': 'str',
        'deposit_desc': 'str',
        'deposit_enable': 'bool',
        'is_default': 'bool',
        'memo_regex': 'str',
        'min_confirm': 'int',
        'name': 'str',
        'network': 'str',
        'reset_address_status': 'bool',
        'special_tips': 'str',
        'un_lock_confirm': 'int',
        'withdraw_desc': 'str',
        'withdraw_enable': 'bool',
        'withdraw_fee': 'str',
        'withdraw_integer_multiple': 'str',
        'withdraw_max': 'str',
        'withdraw_min': 'str',
        'same_address': 'bool'
    }

    attribute_map = {
        'address_regex': 'addressRegex',
        'coin': 'coin',
        'deposit_desc': 'depositDesc',
        'deposit_enable': 'depositEnable',
        'is_default': 'isDefault',
        'memo_regex': 'memoRegex',
        'min_confirm': 'minConfirm',
        'name': 'name',
        'network': 'network',
        'reset_address_status': 'resetAddressStatus',
        'special_tips': 'specialTips',
        'un_lock_confirm': 'unLockConfirm',
        'withdraw_desc': 'withdrawDesc',
        'withdraw_enable': 'withdrawEnable',
        'withdraw_fee': 'withdrawFee',
        'withdraw_integer_multiple': 'withdrawIntegerMultiple',
        'withdraw_max': 'withdrawMax',
        'withdraw_min': 'withdrawMin',
        'same_address': 'sameAddress'
    }

    def __init__(self, address_regex=None, coin=None, deposit_desc=None, deposit_enable=None, is_default=None, memo_regex=None, min_confirm=None, name=None, network=None, reset_address_status=None, special_tips=None, un_lock_confirm=None, withdraw_desc=None, withdraw_enable=None, withdraw_fee=None, withdraw_integer_multiple=None, withdraw_max=None, withdraw_min=None, same_address=None):  # noqa: E501
        """Sapiv1capitalconfiggetallNetworkList - a model defined in Swagger"""  # noqa: E501
        self._address_regex = None
        self._coin = None
        self._deposit_desc = None
        self._deposit_enable = None
        self._is_default = None
        self._memo_regex = None
        self._min_confirm = None
        self._name = None
        self._network = None
        self._reset_address_status = None
        self._special_tips = None
        self._un_lock_confirm = None
        self._withdraw_desc = None
        self._withdraw_enable = None
        self._withdraw_fee = None
        self._withdraw_integer_multiple = None
        self._withdraw_max = None
        self._withdraw_min = None
        self._same_address = None
        self.discriminator = None
        self.address_regex = address_regex
        self.coin = coin
        self.deposit_desc = deposit_desc
        self.deposit_enable = deposit_enable
        self.is_default = is_default
        self.memo_regex = memo_regex
        self.min_confirm = min_confirm
        self.name = name
        self.network = network
        self.reset_address_status = reset_address_status
        self.special_tips = special_tips
        self.un_lock_confirm = un_lock_confirm
        self.withdraw_desc = withdraw_desc
        self.withdraw_enable = withdraw_enable
        self.withdraw_fee = withdraw_fee
        self.withdraw_integer_multiple = withdraw_integer_multiple
        self.withdraw_max = withdraw_max
        self.withdraw_min = withdraw_min
        self.same_address = same_address

    @property
    def address_regex(self):
        """Gets the address_regex of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The address_regex of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._address_regex

    @address_regex.setter
    def address_regex(self, address_regex):
        """Sets the address_regex of this Sapiv1capitalconfiggetallNetworkList.


        :param address_regex: The address_regex of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if address_regex is None:
            raise ValueError("Invalid value for `address_regex`, must not be `None`")  # noqa: E501

        self._address_regex = address_regex

    @property
    def coin(self):
        """Gets the coin of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The coin of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._coin

    @coin.setter
    def coin(self, coin):
        """Sets the coin of this Sapiv1capitalconfiggetallNetworkList.


        :param coin: The coin of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if coin is None:
            raise ValueError("Invalid value for `coin`, must not be `None`")  # noqa: E501

        self._coin = coin

    @property
    def deposit_desc(self):
        """Gets the deposit_desc of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501

        shown only when \"depositEnable\" is false.  # noqa: E501

        :return: The deposit_desc of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._deposit_desc

    @deposit_desc.setter
    def deposit_desc(self, deposit_desc):
        """Sets the deposit_desc of this Sapiv1capitalconfiggetallNetworkList.

        shown only when \"depositEnable\" is false.  # noqa: E501

        :param deposit_desc: The deposit_desc of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if deposit_desc is None:
            raise ValueError("Invalid value for `deposit_desc`, must not be `None`")  # noqa: E501

        self._deposit_desc = deposit_desc

    @property
    def deposit_enable(self):
        """Gets the deposit_enable of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The deposit_enable of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: bool
        """
        return self._deposit_enable

    @deposit_enable.setter
    def deposit_enable(self, deposit_enable):
        """Sets the deposit_enable of this Sapiv1capitalconfiggetallNetworkList.


        :param deposit_enable: The deposit_enable of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: bool
        """
        if deposit_enable is None:
            raise ValueError("Invalid value for `deposit_enable`, must not be `None`")  # noqa: E501

        self._deposit_enable = deposit_enable

    @property
    def is_default(self):
        """Gets the is_default of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The is_default of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Sapiv1capitalconfiggetallNetworkList.


        :param is_default: The is_default of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")  # noqa: E501

        self._is_default = is_default

    @property
    def memo_regex(self):
        """Gets the memo_regex of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The memo_regex of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._memo_regex

    @memo_regex.setter
    def memo_regex(self, memo_regex):
        """Sets the memo_regex of this Sapiv1capitalconfiggetallNetworkList.


        :param memo_regex: The memo_regex of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if memo_regex is None:
            raise ValueError("Invalid value for `memo_regex`, must not be `None`")  # noqa: E501

        self._memo_regex = memo_regex

    @property
    def min_confirm(self):
        """Gets the min_confirm of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501

        min number for balance confirmation.  # noqa: E501

        :return: The min_confirm of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: int
        """
        return self._min_confirm

    @min_confirm.setter
    def min_confirm(self, min_confirm):
        """Sets the min_confirm of this Sapiv1capitalconfiggetallNetworkList.

        min number for balance confirmation.  # noqa: E501

        :param min_confirm: The min_confirm of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: int
        """
        if min_confirm is None:
            raise ValueError("Invalid value for `min_confirm`, must not be `None`")  # noqa: E501

        self._min_confirm = min_confirm

    @property
    def name(self):
        """Gets the name of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The name of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sapiv1capitalconfiggetallNetworkList.


        :param name: The name of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def network(self):
        """Gets the network of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The network of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Sapiv1capitalconfiggetallNetworkList.


        :param network: The network of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")  # noqa: E501

        self._network = network

    @property
    def reset_address_status(self):
        """Gets the reset_address_status of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The reset_address_status of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: bool
        """
        return self._reset_address_status

    @reset_address_status.setter
    def reset_address_status(self, reset_address_status):
        """Sets the reset_address_status of this Sapiv1capitalconfiggetallNetworkList.


        :param reset_address_status: The reset_address_status of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: bool
        """
        if reset_address_status is None:
            raise ValueError("Invalid value for `reset_address_status`, must not be `None`")  # noqa: E501

        self._reset_address_status = reset_address_status

    @property
    def special_tips(self):
        """Gets the special_tips of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The special_tips of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._special_tips

    @special_tips.setter
    def special_tips(self, special_tips):
        """Sets the special_tips of this Sapiv1capitalconfiggetallNetworkList.


        :param special_tips: The special_tips of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if special_tips is None:
            raise ValueError("Invalid value for `special_tips`, must not be `None`")  # noqa: E501

        self._special_tips = special_tips

    @property
    def un_lock_confirm(self):
        """Gets the un_lock_confirm of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501

        confirmation number for balance unlock.  # noqa: E501

        :return: The un_lock_confirm of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: int
        """
        return self._un_lock_confirm

    @un_lock_confirm.setter
    def un_lock_confirm(self, un_lock_confirm):
        """Sets the un_lock_confirm of this Sapiv1capitalconfiggetallNetworkList.

        confirmation number for balance unlock.  # noqa: E501

        :param un_lock_confirm: The un_lock_confirm of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: int
        """
        if un_lock_confirm is None:
            raise ValueError("Invalid value for `un_lock_confirm`, must not be `None`")  # noqa: E501

        self._un_lock_confirm = un_lock_confirm

    @property
    def withdraw_desc(self):
        """Gets the withdraw_desc of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501

        shown only when \"withdrawEnable\" is false  # noqa: E501

        :return: The withdraw_desc of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._withdraw_desc

    @withdraw_desc.setter
    def withdraw_desc(self, withdraw_desc):
        """Sets the withdraw_desc of this Sapiv1capitalconfiggetallNetworkList.

        shown only when \"withdrawEnable\" is false  # noqa: E501

        :param withdraw_desc: The withdraw_desc of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if withdraw_desc is None:
            raise ValueError("Invalid value for `withdraw_desc`, must not be `None`")  # noqa: E501

        self._withdraw_desc = withdraw_desc

    @property
    def withdraw_enable(self):
        """Gets the withdraw_enable of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The withdraw_enable of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: bool
        """
        return self._withdraw_enable

    @withdraw_enable.setter
    def withdraw_enable(self, withdraw_enable):
        """Sets the withdraw_enable of this Sapiv1capitalconfiggetallNetworkList.


        :param withdraw_enable: The withdraw_enable of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: bool
        """
        if withdraw_enable is None:
            raise ValueError("Invalid value for `withdraw_enable`, must not be `None`")  # noqa: E501

        self._withdraw_enable = withdraw_enable

    @property
    def withdraw_fee(self):
        """Gets the withdraw_fee of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The withdraw_fee of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._withdraw_fee

    @withdraw_fee.setter
    def withdraw_fee(self, withdraw_fee):
        """Sets the withdraw_fee of this Sapiv1capitalconfiggetallNetworkList.


        :param withdraw_fee: The withdraw_fee of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if withdraw_fee is None:
            raise ValueError("Invalid value for `withdraw_fee`, must not be `None`")  # noqa: E501

        self._withdraw_fee = withdraw_fee

    @property
    def withdraw_integer_multiple(self):
        """Gets the withdraw_integer_multiple of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The withdraw_integer_multiple of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._withdraw_integer_multiple

    @withdraw_integer_multiple.setter
    def withdraw_integer_multiple(self, withdraw_integer_multiple):
        """Sets the withdraw_integer_multiple of this Sapiv1capitalconfiggetallNetworkList.


        :param withdraw_integer_multiple: The withdraw_integer_multiple of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if withdraw_integer_multiple is None:
            raise ValueError("Invalid value for `withdraw_integer_multiple`, must not be `None`")  # noqa: E501

        self._withdraw_integer_multiple = withdraw_integer_multiple

    @property
    def withdraw_max(self):
        """Gets the withdraw_max of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The withdraw_max of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._withdraw_max

    @withdraw_max.setter
    def withdraw_max(self, withdraw_max):
        """Sets the withdraw_max of this Sapiv1capitalconfiggetallNetworkList.


        :param withdraw_max: The withdraw_max of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if withdraw_max is None:
            raise ValueError("Invalid value for `withdraw_max`, must not be `None`")  # noqa: E501

        self._withdraw_max = withdraw_max

    @property
    def withdraw_min(self):
        """Gets the withdraw_min of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The withdraw_min of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: str
        """
        return self._withdraw_min

    @withdraw_min.setter
    def withdraw_min(self, withdraw_min):
        """Sets the withdraw_min of this Sapiv1capitalconfiggetallNetworkList.


        :param withdraw_min: The withdraw_min of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: str
        """
        if withdraw_min is None:
            raise ValueError("Invalid value for `withdraw_min`, must not be `None`")  # noqa: E501

        self._withdraw_min = withdraw_min

    @property
    def same_address(self):
        """Gets the same_address of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501


        :return: The same_address of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :rtype: bool
        """
        return self._same_address

    @same_address.setter
    def same_address(self, same_address):
        """Sets the same_address of this Sapiv1capitalconfiggetallNetworkList.


        :param same_address: The same_address of this Sapiv1capitalconfiggetallNetworkList.  # noqa: E501
        :type: bool
        """
        if same_address is None:
            raise ValueError("Invalid value for `same_address`, must not be `None`")  # noqa: E501

        self._same_address = same_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sapiv1capitalconfiggetallNetworkList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sapiv1capitalconfiggetallNetworkList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
