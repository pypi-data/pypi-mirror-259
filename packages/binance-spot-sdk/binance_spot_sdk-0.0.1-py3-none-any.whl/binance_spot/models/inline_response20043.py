# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20043(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rate_limit_type': 'str',
        'interval': 'str',
        'interval_num': 'int',
        'limit': 'int',
        'count': 'int'
    }

    attribute_map = {
        'rate_limit_type': 'rateLimitType',
        'interval': 'interval',
        'interval_num': 'intervalNum',
        'limit': 'limit',
        'count': 'count'
    }

    def __init__(self, rate_limit_type=None, interval=None, interval_num=None, limit=None, count=None):  # noqa: E501
        """InlineResponse20043 - a model defined in Swagger"""  # noqa: E501
        self._rate_limit_type = None
        self._interval = None
        self._interval_num = None
        self._limit = None
        self._count = None
        self.discriminator = None
        self.rate_limit_type = rate_limit_type
        self.interval = interval
        self.interval_num = interval_num
        self.limit = limit
        self.count = count

    @property
    def rate_limit_type(self):
        """Gets the rate_limit_type of this InlineResponse20043.  # noqa: E501


        :return: The rate_limit_type of this InlineResponse20043.  # noqa: E501
        :rtype: str
        """
        return self._rate_limit_type

    @rate_limit_type.setter
    def rate_limit_type(self, rate_limit_type):
        """Sets the rate_limit_type of this InlineResponse20043.


        :param rate_limit_type: The rate_limit_type of this InlineResponse20043.  # noqa: E501
        :type: str
        """
        if rate_limit_type is None:
            raise ValueError("Invalid value for `rate_limit_type`, must not be `None`")  # noqa: E501

        self._rate_limit_type = rate_limit_type

    @property
    def interval(self):
        """Gets the interval of this InlineResponse20043.  # noqa: E501


        :return: The interval of this InlineResponse20043.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this InlineResponse20043.


        :param interval: The interval of this InlineResponse20043.  # noqa: E501
        :type: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def interval_num(self):
        """Gets the interval_num of this InlineResponse20043.  # noqa: E501


        :return: The interval_num of this InlineResponse20043.  # noqa: E501
        :rtype: int
        """
        return self._interval_num

    @interval_num.setter
    def interval_num(self, interval_num):
        """Sets the interval_num of this InlineResponse20043.


        :param interval_num: The interval_num of this InlineResponse20043.  # noqa: E501
        :type: int
        """
        if interval_num is None:
            raise ValueError("Invalid value for `interval_num`, must not be `None`")  # noqa: E501

        self._interval_num = interval_num

    @property
    def limit(self):
        """Gets the limit of this InlineResponse20043.  # noqa: E501


        :return: The limit of this InlineResponse20043.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this InlineResponse20043.


        :param limit: The limit of this InlineResponse20043.  # noqa: E501
        :type: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def count(self):
        """Gets the count of this InlineResponse20043.  # noqa: E501


        :return: The count of this InlineResponse20043.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InlineResponse20043.


        :param count: The count of this InlineResponse20043.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20043, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20043):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
