# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Trade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'price': 'str',
        'qty': 'str',
        'quote_qty': 'str',
        'time': 'int',
        'is_buyer_maker': 'bool',
        'is_best_match': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'price': 'price',
        'qty': 'qty',
        'quote_qty': 'quoteQty',
        'time': 'time',
        'is_buyer_maker': 'isBuyerMaker',
        'is_best_match': 'isBestMatch'
    }

    def __init__(self, id=None, price=None, qty=None, quote_qty=None, time=None, is_buyer_maker=None, is_best_match=None):  # noqa: E501
        """Trade - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._price = None
        self._qty = None
        self._quote_qty = None
        self._time = None
        self._is_buyer_maker = None
        self._is_best_match = None
        self.discriminator = None
        self.id = id
        self.price = price
        self.qty = qty
        self.quote_qty = quote_qty
        self.time = time
        self.is_buyer_maker = is_buyer_maker
        self.is_best_match = is_best_match

    @property
    def id(self):
        """Gets the id of this Trade.  # noqa: E501

        trade id  # noqa: E501

        :return: The id of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Trade.

        trade id  # noqa: E501

        :param id: The id of this Trade.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def price(self):
        """Gets the price of this Trade.  # noqa: E501

        price  # noqa: E501

        :return: The price of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Trade.

        price  # noqa: E501

        :param price: The price of this Trade.  # noqa: E501
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def qty(self):
        """Gets the qty of this Trade.  # noqa: E501

        amount of base asset  # noqa: E501

        :return: The qty of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this Trade.

        amount of base asset  # noqa: E501

        :param qty: The qty of this Trade.  # noqa: E501
        :type: str
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def quote_qty(self):
        """Gets the quote_qty of this Trade.  # noqa: E501

        amount of quote asset  # noqa: E501

        :return: The quote_qty of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._quote_qty

    @quote_qty.setter
    def quote_qty(self, quote_qty):
        """Sets the quote_qty of this Trade.

        amount of quote asset  # noqa: E501

        :param quote_qty: The quote_qty of this Trade.  # noqa: E501
        :type: str
        """
        if quote_qty is None:
            raise ValueError("Invalid value for `quote_qty`, must not be `None`")  # noqa: E501

        self._quote_qty = quote_qty

    @property
    def time(self):
        """Gets the time of this Trade.  # noqa: E501

        Trade executed timestamp, as same as `T` in the stream  # noqa: E501

        :return: The time of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Trade.

        Trade executed timestamp, as same as `T` in the stream  # noqa: E501

        :param time: The time of this Trade.  # noqa: E501
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def is_buyer_maker(self):
        """Gets the is_buyer_maker of this Trade.  # noqa: E501


        :return: The is_buyer_maker of this Trade.  # noqa: E501
        :rtype: bool
        """
        return self._is_buyer_maker

    @is_buyer_maker.setter
    def is_buyer_maker(self, is_buyer_maker):
        """Sets the is_buyer_maker of this Trade.


        :param is_buyer_maker: The is_buyer_maker of this Trade.  # noqa: E501
        :type: bool
        """
        if is_buyer_maker is None:
            raise ValueError("Invalid value for `is_buyer_maker`, must not be `None`")  # noqa: E501

        self._is_buyer_maker = is_buyer_maker

    @property
    def is_best_match(self):
        """Gets the is_best_match of this Trade.  # noqa: E501


        :return: The is_best_match of this Trade.  # noqa: E501
        :rtype: bool
        """
        return self._is_best_match

    @is_best_match.setter
    def is_best_match(self, is_best_match):
        """Sets the is_best_match of this Trade.


        :param is_best_match: The is_best_match of this Trade.  # noqa: E501
        :type: bool
        """
        if is_best_match is None:
            raise ValueError("Invalid value for `is_best_match`, must not be `None`")  # noqa: E501

        self._is_best_match = is_best_match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Trade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
