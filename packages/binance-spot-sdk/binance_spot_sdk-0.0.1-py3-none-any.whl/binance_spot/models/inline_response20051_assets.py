# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20051Assets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'matic': 'str',
        'stpt': 'str',
        'tvk': 'str',
        'shib': 'str'
    }

    attribute_map = {
        'matic': 'MATIC',
        'stpt': 'STPT',
        'tvk': 'TVK',
        'shib': 'SHIB'
    }

    def __init__(self, matic=None, stpt=None, tvk=None, shib=None):  # noqa: E501
        """InlineResponse20051Assets - a model defined in Swagger"""  # noqa: E501
        self._matic = None
        self._stpt = None
        self._tvk = None
        self._shib = None
        self.discriminator = None
        self.matic = matic
        self.stpt = stpt
        self.tvk = tvk
        self.shib = shib

    @property
    def matic(self):
        """Gets the matic of this InlineResponse20051Assets.  # noqa: E501


        :return: The matic of this InlineResponse20051Assets.  # noqa: E501
        :rtype: str
        """
        return self._matic

    @matic.setter
    def matic(self, matic):
        """Sets the matic of this InlineResponse20051Assets.


        :param matic: The matic of this InlineResponse20051Assets.  # noqa: E501
        :type: str
        """
        if matic is None:
            raise ValueError("Invalid value for `matic`, must not be `None`")  # noqa: E501

        self._matic = matic

    @property
    def stpt(self):
        """Gets the stpt of this InlineResponse20051Assets.  # noqa: E501


        :return: The stpt of this InlineResponse20051Assets.  # noqa: E501
        :rtype: str
        """
        return self._stpt

    @stpt.setter
    def stpt(self, stpt):
        """Sets the stpt of this InlineResponse20051Assets.


        :param stpt: The stpt of this InlineResponse20051Assets.  # noqa: E501
        :type: str
        """
        if stpt is None:
            raise ValueError("Invalid value for `stpt`, must not be `None`")  # noqa: E501

        self._stpt = stpt

    @property
    def tvk(self):
        """Gets the tvk of this InlineResponse20051Assets.  # noqa: E501


        :return: The tvk of this InlineResponse20051Assets.  # noqa: E501
        :rtype: str
        """
        return self._tvk

    @tvk.setter
    def tvk(self, tvk):
        """Sets the tvk of this InlineResponse20051Assets.


        :param tvk: The tvk of this InlineResponse20051Assets.  # noqa: E501
        :type: str
        """
        if tvk is None:
            raise ValueError("Invalid value for `tvk`, must not be `None`")  # noqa: E501

        self._tvk = tvk

    @property
    def shib(self):
        """Gets the shib of this InlineResponse20051Assets.  # noqa: E501


        :return: The shib of this InlineResponse20051Assets.  # noqa: E501
        :rtype: str
        """
        return self._shib

    @shib.setter
    def shib(self, shib):
        """Sets the shib of this InlineResponse20051Assets.


        :param shib: The shib of this InlineResponse20051Assets.  # noqa: E501
        :type: str
        """
        if shib is None:
            raise ValueError("Invalid value for `shib`, must not be `None`")  # noqa: E501

        self._shib = shib

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20051Assets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20051Assets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
