# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20041(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vip_level': 'int',
        'symbol': 'str',
        'leverage': 'str',
        'data': 'list[Sapiv1marginisolatedMarginDataData]'
    }

    attribute_map = {
        'vip_level': 'vipLevel',
        'symbol': 'symbol',
        'leverage': 'leverage',
        'data': 'data'
    }

    def __init__(self, vip_level=None, symbol=None, leverage=None, data=None):  # noqa: E501
        """InlineResponse20041 - a model defined in Swagger"""  # noqa: E501
        self._vip_level = None
        self._symbol = None
        self._leverage = None
        self._data = None
        self.discriminator = None
        if vip_level is not None:
            self.vip_level = vip_level
        if symbol is not None:
            self.symbol = symbol
        if leverage is not None:
            self.leverage = leverage
        if data is not None:
            self.data = data

    @property
    def vip_level(self):
        """Gets the vip_level of this InlineResponse20041.  # noqa: E501


        :return: The vip_level of this InlineResponse20041.  # noqa: E501
        :rtype: int
        """
        return self._vip_level

    @vip_level.setter
    def vip_level(self, vip_level):
        """Sets the vip_level of this InlineResponse20041.


        :param vip_level: The vip_level of this InlineResponse20041.  # noqa: E501
        :type: int
        """

        self._vip_level = vip_level

    @property
    def symbol(self):
        """Gets the symbol of this InlineResponse20041.  # noqa: E501


        :return: The symbol of this InlineResponse20041.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InlineResponse20041.


        :param symbol: The symbol of this InlineResponse20041.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def leverage(self):
        """Gets the leverage of this InlineResponse20041.  # noqa: E501


        :return: The leverage of this InlineResponse20041.  # noqa: E501
        :rtype: str
        """
        return self._leverage

    @leverage.setter
    def leverage(self, leverage):
        """Sets the leverage of this InlineResponse20041.


        :param leverage: The leverage of this InlineResponse20041.  # noqa: E501
        :type: str
        """

        self._leverage = leverage

    @property
    def data(self):
        """Gets the data of this InlineResponse20041.  # noqa: E501


        :return: The data of this InlineResponse20041.  # noqa: E501
        :rtype: list[Sapiv1marginisolatedMarginDataData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this InlineResponse20041.


        :param data: The data of this InlineResponse20041.  # noqa: E501
        :type: list[Sapiv1marginisolatedMarginDataData]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20041, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20041):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
