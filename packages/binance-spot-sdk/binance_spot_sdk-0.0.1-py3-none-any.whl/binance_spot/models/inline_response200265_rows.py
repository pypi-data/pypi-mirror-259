# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200265Rows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position_id': 'str',
        'purchase_id': 'int',
        'time': 'int',
        'asset': 'str',
        'amount': 'str',
        'lock_period': 'str',
        'type': 'str',
        'source_account': 'str',
        'amt_from_spot': 'str',
        'amt_from_funding': 'str',
        'status': 'str'
    }

    attribute_map = {
        'position_id': 'positionId',
        'purchase_id': 'purchaseId',
        'time': 'time',
        'asset': 'asset',
        'amount': 'amount',
        'lock_period': 'lockPeriod',
        'type': 'type',
        'source_account': 'sourceAccount',
        'amt_from_spot': 'amtFromSpot',
        'amt_from_funding': 'amtFromFunding',
        'status': 'status'
    }

    def __init__(self, position_id=None, purchase_id=None, time=None, asset=None, amount=None, lock_period=None, type=None, source_account=None, amt_from_spot=None, amt_from_funding=None, status=None):  # noqa: E501
        """InlineResponse200265Rows - a model defined in Swagger"""  # noqa: E501
        self._position_id = None
        self._purchase_id = None
        self._time = None
        self._asset = None
        self._amount = None
        self._lock_period = None
        self._type = None
        self._source_account = None
        self._amt_from_spot = None
        self._amt_from_funding = None
        self._status = None
        self.discriminator = None
        self.position_id = position_id
        self.purchase_id = purchase_id
        self.time = time
        self.asset = asset
        self.amount = amount
        self.lock_period = lock_period
        self.type = type
        self.source_account = source_account
        self.amt_from_spot = amt_from_spot
        self.amt_from_funding = amt_from_funding
        self.status = status

    @property
    def position_id(self):
        """Gets the position_id of this InlineResponse200265Rows.  # noqa: E501


        :return: The position_id of this InlineResponse200265Rows.  # noqa: E501
        :rtype: str
        """
        return self._position_id

    @position_id.setter
    def position_id(self, position_id):
        """Sets the position_id of this InlineResponse200265Rows.


        :param position_id: The position_id of this InlineResponse200265Rows.  # noqa: E501
        :type: str
        """
        if position_id is None:
            raise ValueError("Invalid value for `position_id`, must not be `None`")  # noqa: E501

        self._position_id = position_id

    @property
    def purchase_id(self):
        """Gets the purchase_id of this InlineResponse200265Rows.  # noqa: E501


        :return: The purchase_id of this InlineResponse200265Rows.  # noqa: E501
        :rtype: int
        """
        return self._purchase_id

    @purchase_id.setter
    def purchase_id(self, purchase_id):
        """Sets the purchase_id of this InlineResponse200265Rows.


        :param purchase_id: The purchase_id of this InlineResponse200265Rows.  # noqa: E501
        :type: int
        """
        if purchase_id is None:
            raise ValueError("Invalid value for `purchase_id`, must not be `None`")  # noqa: E501

        self._purchase_id = purchase_id

    @property
    def time(self):
        """Gets the time of this InlineResponse200265Rows.  # noqa: E501


        :return: The time of this InlineResponse200265Rows.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this InlineResponse200265Rows.


        :param time: The time of this InlineResponse200265Rows.  # noqa: E501
        :type: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def asset(self):
        """Gets the asset of this InlineResponse200265Rows.  # noqa: E501


        :return: The asset of this InlineResponse200265Rows.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse200265Rows.


        :param asset: The asset of this InlineResponse200265Rows.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def amount(self):
        """Gets the amount of this InlineResponse200265Rows.  # noqa: E501


        :return: The amount of this InlineResponse200265Rows.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InlineResponse200265Rows.


        :param amount: The amount of this InlineResponse200265Rows.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def lock_period(self):
        """Gets the lock_period of this InlineResponse200265Rows.  # noqa: E501


        :return: The lock_period of this InlineResponse200265Rows.  # noqa: E501
        :rtype: str
        """
        return self._lock_period

    @lock_period.setter
    def lock_period(self, lock_period):
        """Sets the lock_period of this InlineResponse200265Rows.


        :param lock_period: The lock_period of this InlineResponse200265Rows.  # noqa: E501
        :type: str
        """
        if lock_period is None:
            raise ValueError("Invalid value for `lock_period`, must not be `None`")  # noqa: E501

        self._lock_period = lock_period

    @property
    def type(self):
        """Gets the type of this InlineResponse200265Rows.  # noqa: E501

        NORMAL for normal subscription, AUTO for auto-subscription order, ACTIVITY for activity order, TRIAL for trial fund order, RESTAKE for restake order  # noqa: E501

        :return: The type of this InlineResponse200265Rows.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200265Rows.

        NORMAL for normal subscription, AUTO for auto-subscription order, ACTIVITY for activity order, TRIAL for trial fund order, RESTAKE for restake order  # noqa: E501

        :param type: The type of this InlineResponse200265Rows.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def source_account(self):
        """Gets the source_account of this InlineResponse200265Rows.  # noqa: E501

        SPOT, FUNDING, SPOTANDFUNDING  # noqa: E501

        :return: The source_account of this InlineResponse200265Rows.  # noqa: E501
        :rtype: str
        """
        return self._source_account

    @source_account.setter
    def source_account(self, source_account):
        """Sets the source_account of this InlineResponse200265Rows.

        SPOT, FUNDING, SPOTANDFUNDING  # noqa: E501

        :param source_account: The source_account of this InlineResponse200265Rows.  # noqa: E501
        :type: str
        """
        if source_account is None:
            raise ValueError("Invalid value for `source_account`, must not be `None`")  # noqa: E501

        self._source_account = source_account

    @property
    def amt_from_spot(self):
        """Gets the amt_from_spot of this InlineResponse200265Rows.  # noqa: E501

        Display if sourceAccount is SPOTANDFUNDING   # noqa: E501

        :return: The amt_from_spot of this InlineResponse200265Rows.  # noqa: E501
        :rtype: str
        """
        return self._amt_from_spot

    @amt_from_spot.setter
    def amt_from_spot(self, amt_from_spot):
        """Sets the amt_from_spot of this InlineResponse200265Rows.

        Display if sourceAccount is SPOTANDFUNDING   # noqa: E501

        :param amt_from_spot: The amt_from_spot of this InlineResponse200265Rows.  # noqa: E501
        :type: str
        """
        if amt_from_spot is None:
            raise ValueError("Invalid value for `amt_from_spot`, must not be `None`")  # noqa: E501

        self._amt_from_spot = amt_from_spot

    @property
    def amt_from_funding(self):
        """Gets the amt_from_funding of this InlineResponse200265Rows.  # noqa: E501

        Display if sourceAccount is SPOTANDFUNDING  # noqa: E501

        :return: The amt_from_funding of this InlineResponse200265Rows.  # noqa: E501
        :rtype: str
        """
        return self._amt_from_funding

    @amt_from_funding.setter
    def amt_from_funding(self, amt_from_funding):
        """Sets the amt_from_funding of this InlineResponse200265Rows.

        Display if sourceAccount is SPOTANDFUNDING  # noqa: E501

        :param amt_from_funding: The amt_from_funding of this InlineResponse200265Rows.  # noqa: E501
        :type: str
        """
        if amt_from_funding is None:
            raise ValueError("Invalid value for `amt_from_funding`, must not be `None`")  # noqa: E501

        self._amt_from_funding = amt_from_funding

    @property
    def status(self):
        """Gets the status of this InlineResponse200265Rows.  # noqa: E501

        PURCHASING/SUCCESS/FAILED  # noqa: E501

        :return: The status of this InlineResponse200265Rows.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200265Rows.

        PURCHASING/SUCCESS/FAILED  # noqa: E501

        :param status: The status of this InlineResponse200265Rows.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200265Rows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200265Rows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
