# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20057(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coin': 'str',
        'deposit_all_enable': 'bool',
        'free': 'str',
        'freeze': 'str',
        'ipoable': 'str',
        'ipoing': 'str',
        'is_legal_money': 'bool',
        'locked': 'str',
        'name': 'str',
        'network_list': 'list[Sapiv1capitalconfiggetallNetworkList]',
        'storage': 'str',
        'trading': 'bool',
        'withdraw_all_enable': 'bool',
        'withdrawing': 'str'
    }

    attribute_map = {
        'coin': 'coin',
        'deposit_all_enable': 'depositAllEnable',
        'free': 'free',
        'freeze': 'freeze',
        'ipoable': 'ipoable',
        'ipoing': 'ipoing',
        'is_legal_money': 'isLegalMoney',
        'locked': 'locked',
        'name': 'name',
        'network_list': 'networkList',
        'storage': 'storage',
        'trading': 'trading',
        'withdraw_all_enable': 'withdrawAllEnable',
        'withdrawing': 'withdrawing'
    }

    def __init__(self, coin=None, deposit_all_enable=None, free=None, freeze=None, ipoable=None, ipoing=None, is_legal_money=None, locked=None, name=None, network_list=None, storage=None, trading=None, withdraw_all_enable=None, withdrawing=None):  # noqa: E501
        """InlineResponse20057 - a model defined in Swagger"""  # noqa: E501
        self._coin = None
        self._deposit_all_enable = None
        self._free = None
        self._freeze = None
        self._ipoable = None
        self._ipoing = None
        self._is_legal_money = None
        self._locked = None
        self._name = None
        self._network_list = None
        self._storage = None
        self._trading = None
        self._withdraw_all_enable = None
        self._withdrawing = None
        self.discriminator = None
        self.coin = coin
        self.deposit_all_enable = deposit_all_enable
        self.free = free
        self.freeze = freeze
        self.ipoable = ipoable
        self.ipoing = ipoing
        self.is_legal_money = is_legal_money
        self.locked = locked
        self.name = name
        self.network_list = network_list
        self.storage = storage
        self.trading = trading
        self.withdraw_all_enable = withdraw_all_enable
        self.withdrawing = withdrawing

    @property
    def coin(self):
        """Gets the coin of this InlineResponse20057.  # noqa: E501


        :return: The coin of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._coin

    @coin.setter
    def coin(self, coin):
        """Sets the coin of this InlineResponse20057.


        :param coin: The coin of this InlineResponse20057.  # noqa: E501
        :type: str
        """
        if coin is None:
            raise ValueError("Invalid value for `coin`, must not be `None`")  # noqa: E501

        self._coin = coin

    @property
    def deposit_all_enable(self):
        """Gets the deposit_all_enable of this InlineResponse20057.  # noqa: E501


        :return: The deposit_all_enable of this InlineResponse20057.  # noqa: E501
        :rtype: bool
        """
        return self._deposit_all_enable

    @deposit_all_enable.setter
    def deposit_all_enable(self, deposit_all_enable):
        """Sets the deposit_all_enable of this InlineResponse20057.


        :param deposit_all_enable: The deposit_all_enable of this InlineResponse20057.  # noqa: E501
        :type: bool
        """
        if deposit_all_enable is None:
            raise ValueError("Invalid value for `deposit_all_enable`, must not be `None`")  # noqa: E501

        self._deposit_all_enable = deposit_all_enable

    @property
    def free(self):
        """Gets the free of this InlineResponse20057.  # noqa: E501


        :return: The free of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this InlineResponse20057.


        :param free: The free of this InlineResponse20057.  # noqa: E501
        :type: str
        """
        if free is None:
            raise ValueError("Invalid value for `free`, must not be `None`")  # noqa: E501

        self._free = free

    @property
    def freeze(self):
        """Gets the freeze of this InlineResponse20057.  # noqa: E501


        :return: The freeze of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._freeze

    @freeze.setter
    def freeze(self, freeze):
        """Sets the freeze of this InlineResponse20057.


        :param freeze: The freeze of this InlineResponse20057.  # noqa: E501
        :type: str
        """
        if freeze is None:
            raise ValueError("Invalid value for `freeze`, must not be `None`")  # noqa: E501

        self._freeze = freeze

    @property
    def ipoable(self):
        """Gets the ipoable of this InlineResponse20057.  # noqa: E501


        :return: The ipoable of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._ipoable

    @ipoable.setter
    def ipoable(self, ipoable):
        """Sets the ipoable of this InlineResponse20057.


        :param ipoable: The ipoable of this InlineResponse20057.  # noqa: E501
        :type: str
        """
        if ipoable is None:
            raise ValueError("Invalid value for `ipoable`, must not be `None`")  # noqa: E501

        self._ipoable = ipoable

    @property
    def ipoing(self):
        """Gets the ipoing of this InlineResponse20057.  # noqa: E501


        :return: The ipoing of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._ipoing

    @ipoing.setter
    def ipoing(self, ipoing):
        """Sets the ipoing of this InlineResponse20057.


        :param ipoing: The ipoing of this InlineResponse20057.  # noqa: E501
        :type: str
        """
        if ipoing is None:
            raise ValueError("Invalid value for `ipoing`, must not be `None`")  # noqa: E501

        self._ipoing = ipoing

    @property
    def is_legal_money(self):
        """Gets the is_legal_money of this InlineResponse20057.  # noqa: E501


        :return: The is_legal_money of this InlineResponse20057.  # noqa: E501
        :rtype: bool
        """
        return self._is_legal_money

    @is_legal_money.setter
    def is_legal_money(self, is_legal_money):
        """Sets the is_legal_money of this InlineResponse20057.


        :param is_legal_money: The is_legal_money of this InlineResponse20057.  # noqa: E501
        :type: bool
        """
        if is_legal_money is None:
            raise ValueError("Invalid value for `is_legal_money`, must not be `None`")  # noqa: E501

        self._is_legal_money = is_legal_money

    @property
    def locked(self):
        """Gets the locked of this InlineResponse20057.  # noqa: E501


        :return: The locked of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this InlineResponse20057.


        :param locked: The locked of this InlineResponse20057.  # noqa: E501
        :type: str
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")  # noqa: E501

        self._locked = locked

    @property
    def name(self):
        """Gets the name of this InlineResponse20057.  # noqa: E501


        :return: The name of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20057.


        :param name: The name of this InlineResponse20057.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def network_list(self):
        """Gets the network_list of this InlineResponse20057.  # noqa: E501


        :return: The network_list of this InlineResponse20057.  # noqa: E501
        :rtype: list[Sapiv1capitalconfiggetallNetworkList]
        """
        return self._network_list

    @network_list.setter
    def network_list(self, network_list):
        """Sets the network_list of this InlineResponse20057.


        :param network_list: The network_list of this InlineResponse20057.  # noqa: E501
        :type: list[Sapiv1capitalconfiggetallNetworkList]
        """
        if network_list is None:
            raise ValueError("Invalid value for `network_list`, must not be `None`")  # noqa: E501

        self._network_list = network_list

    @property
    def storage(self):
        """Gets the storage of this InlineResponse20057.  # noqa: E501


        :return: The storage of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this InlineResponse20057.


        :param storage: The storage of this InlineResponse20057.  # noqa: E501
        :type: str
        """
        if storage is None:
            raise ValueError("Invalid value for `storage`, must not be `None`")  # noqa: E501

        self._storage = storage

    @property
    def trading(self):
        """Gets the trading of this InlineResponse20057.  # noqa: E501


        :return: The trading of this InlineResponse20057.  # noqa: E501
        :rtype: bool
        """
        return self._trading

    @trading.setter
    def trading(self, trading):
        """Sets the trading of this InlineResponse20057.


        :param trading: The trading of this InlineResponse20057.  # noqa: E501
        :type: bool
        """
        if trading is None:
            raise ValueError("Invalid value for `trading`, must not be `None`")  # noqa: E501

        self._trading = trading

    @property
    def withdraw_all_enable(self):
        """Gets the withdraw_all_enable of this InlineResponse20057.  # noqa: E501


        :return: The withdraw_all_enable of this InlineResponse20057.  # noqa: E501
        :rtype: bool
        """
        return self._withdraw_all_enable

    @withdraw_all_enable.setter
    def withdraw_all_enable(self, withdraw_all_enable):
        """Sets the withdraw_all_enable of this InlineResponse20057.


        :param withdraw_all_enable: The withdraw_all_enable of this InlineResponse20057.  # noqa: E501
        :type: bool
        """
        if withdraw_all_enable is None:
            raise ValueError("Invalid value for `withdraw_all_enable`, must not be `None`")  # noqa: E501

        self._withdraw_all_enable = withdraw_all_enable

    @property
    def withdrawing(self):
        """Gets the withdrawing of this InlineResponse20057.  # noqa: E501


        :return: The withdrawing of this InlineResponse20057.  # noqa: E501
        :rtype: str
        """
        return self._withdrawing

    @withdrawing.setter
    def withdrawing(self, withdrawing):
        """Sets the withdrawing of this InlineResponse20057.


        :param withdrawing: The withdrawing of this InlineResponse20057.  # noqa: E501
        :type: str
        """
        if withdrawing is None:
            raise ValueError("Invalid value for `withdrawing`, must not be `None`")  # noqa: E501

        self._withdrawing = withdrawing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20057, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20057):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
