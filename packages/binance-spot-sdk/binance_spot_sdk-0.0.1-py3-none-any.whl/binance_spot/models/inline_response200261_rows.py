# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200261Rows(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_amount': 'str',
        'tier_annual_percentage_rate': 'InlineResponse200256TierAnnualPercentageRate',
        'latest_annual_percentage_rate': 'str',
        'yesterday_airdrop_percentage_rate': 'str',
        'asset': 'str',
        'air_drop_asset': 'str',
        'can_redeem': 'bool',
        'collateral_amount': 'str',
        'product_id': 'str',
        'yesterday_real_time_rewards': 'str',
        'cumulative_bonus_rewards': 'str',
        'cumulative_real_time_rewards': 'str',
        'cumulative_total_rewards': 'str',
        'auto_subscribe': 'bool'
    }

    attribute_map = {
        'total_amount': 'totalAmount',
        'tier_annual_percentage_rate': 'tierAnnualPercentageRate',
        'latest_annual_percentage_rate': 'latestAnnualPercentageRate',
        'yesterday_airdrop_percentage_rate': 'yesterdayAirdropPercentageRate',
        'asset': 'asset',
        'air_drop_asset': 'airDropAsset',
        'can_redeem': 'canRedeem',
        'collateral_amount': 'collateralAmount',
        'product_id': 'productId',
        'yesterday_real_time_rewards': 'yesterdayRealTimeRewards',
        'cumulative_bonus_rewards': 'cumulativeBonusRewards',
        'cumulative_real_time_rewards': 'cumulativeRealTimeRewards',
        'cumulative_total_rewards': 'cumulativeTotalRewards',
        'auto_subscribe': 'autoSubscribe'
    }

    def __init__(self, total_amount=None, tier_annual_percentage_rate=None, latest_annual_percentage_rate=None, yesterday_airdrop_percentage_rate=None, asset=None, air_drop_asset=None, can_redeem=None, collateral_amount=None, product_id=None, yesterday_real_time_rewards=None, cumulative_bonus_rewards=None, cumulative_real_time_rewards=None, cumulative_total_rewards=None, auto_subscribe=None):  # noqa: E501
        """InlineResponse200261Rows - a model defined in Swagger"""  # noqa: E501
        self._total_amount = None
        self._tier_annual_percentage_rate = None
        self._latest_annual_percentage_rate = None
        self._yesterday_airdrop_percentage_rate = None
        self._asset = None
        self._air_drop_asset = None
        self._can_redeem = None
        self._collateral_amount = None
        self._product_id = None
        self._yesterday_real_time_rewards = None
        self._cumulative_bonus_rewards = None
        self._cumulative_real_time_rewards = None
        self._cumulative_total_rewards = None
        self._auto_subscribe = None
        self.discriminator = None
        self.total_amount = total_amount
        self.tier_annual_percentage_rate = tier_annual_percentage_rate
        self.latest_annual_percentage_rate = latest_annual_percentage_rate
        self.yesterday_airdrop_percentage_rate = yesterday_airdrop_percentage_rate
        self.asset = asset
        self.air_drop_asset = air_drop_asset
        self.can_redeem = can_redeem
        self.collateral_amount = collateral_amount
        self.product_id = product_id
        self.yesterday_real_time_rewards = yesterday_real_time_rewards
        self.cumulative_bonus_rewards = cumulative_bonus_rewards
        self.cumulative_real_time_rewards = cumulative_real_time_rewards
        self.cumulative_total_rewards = cumulative_total_rewards
        self.auto_subscribe = auto_subscribe

    @property
    def total_amount(self):
        """Gets the total_amount of this InlineResponse200261Rows.  # noqa: E501


        :return: The total_amount of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this InlineResponse200261Rows.


        :param total_amount: The total_amount of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")  # noqa: E501

        self._total_amount = total_amount

    @property
    def tier_annual_percentage_rate(self):
        """Gets the tier_annual_percentage_rate of this InlineResponse200261Rows.  # noqa: E501


        :return: The tier_annual_percentage_rate of this InlineResponse200261Rows.  # noqa: E501
        :rtype: InlineResponse200256TierAnnualPercentageRate
        """
        return self._tier_annual_percentage_rate

    @tier_annual_percentage_rate.setter
    def tier_annual_percentage_rate(self, tier_annual_percentage_rate):
        """Sets the tier_annual_percentage_rate of this InlineResponse200261Rows.


        :param tier_annual_percentage_rate: The tier_annual_percentage_rate of this InlineResponse200261Rows.  # noqa: E501
        :type: InlineResponse200256TierAnnualPercentageRate
        """
        if tier_annual_percentage_rate is None:
            raise ValueError("Invalid value for `tier_annual_percentage_rate`, must not be `None`")  # noqa: E501

        self._tier_annual_percentage_rate = tier_annual_percentage_rate

    @property
    def latest_annual_percentage_rate(self):
        """Gets the latest_annual_percentage_rate of this InlineResponse200261Rows.  # noqa: E501


        :return: The latest_annual_percentage_rate of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._latest_annual_percentage_rate

    @latest_annual_percentage_rate.setter
    def latest_annual_percentage_rate(self, latest_annual_percentage_rate):
        """Sets the latest_annual_percentage_rate of this InlineResponse200261Rows.


        :param latest_annual_percentage_rate: The latest_annual_percentage_rate of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if latest_annual_percentage_rate is None:
            raise ValueError("Invalid value for `latest_annual_percentage_rate`, must not be `None`")  # noqa: E501

        self._latest_annual_percentage_rate = latest_annual_percentage_rate

    @property
    def yesterday_airdrop_percentage_rate(self):
        """Gets the yesterday_airdrop_percentage_rate of this InlineResponse200261Rows.  # noqa: E501


        :return: The yesterday_airdrop_percentage_rate of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._yesterday_airdrop_percentage_rate

    @yesterday_airdrop_percentage_rate.setter
    def yesterday_airdrop_percentage_rate(self, yesterday_airdrop_percentage_rate):
        """Sets the yesterday_airdrop_percentage_rate of this InlineResponse200261Rows.


        :param yesterday_airdrop_percentage_rate: The yesterday_airdrop_percentage_rate of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if yesterday_airdrop_percentage_rate is None:
            raise ValueError("Invalid value for `yesterday_airdrop_percentage_rate`, must not be `None`")  # noqa: E501

        self._yesterday_airdrop_percentage_rate = yesterday_airdrop_percentage_rate

    @property
    def asset(self):
        """Gets the asset of this InlineResponse200261Rows.  # noqa: E501


        :return: The asset of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this InlineResponse200261Rows.


        :param asset: The asset of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")  # noqa: E501

        self._asset = asset

    @property
    def air_drop_asset(self):
        """Gets the air_drop_asset of this InlineResponse200261Rows.  # noqa: E501


        :return: The air_drop_asset of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._air_drop_asset

    @air_drop_asset.setter
    def air_drop_asset(self, air_drop_asset):
        """Sets the air_drop_asset of this InlineResponse200261Rows.


        :param air_drop_asset: The air_drop_asset of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if air_drop_asset is None:
            raise ValueError("Invalid value for `air_drop_asset`, must not be `None`")  # noqa: E501

        self._air_drop_asset = air_drop_asset

    @property
    def can_redeem(self):
        """Gets the can_redeem of this InlineResponse200261Rows.  # noqa: E501


        :return: The can_redeem of this InlineResponse200261Rows.  # noqa: E501
        :rtype: bool
        """
        return self._can_redeem

    @can_redeem.setter
    def can_redeem(self, can_redeem):
        """Sets the can_redeem of this InlineResponse200261Rows.


        :param can_redeem: The can_redeem of this InlineResponse200261Rows.  # noqa: E501
        :type: bool
        """
        if can_redeem is None:
            raise ValueError("Invalid value for `can_redeem`, must not be `None`")  # noqa: E501

        self._can_redeem = can_redeem

    @property
    def collateral_amount(self):
        """Gets the collateral_amount of this InlineResponse200261Rows.  # noqa: E501


        :return: The collateral_amount of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._collateral_amount

    @collateral_amount.setter
    def collateral_amount(self, collateral_amount):
        """Sets the collateral_amount of this InlineResponse200261Rows.


        :param collateral_amount: The collateral_amount of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if collateral_amount is None:
            raise ValueError("Invalid value for `collateral_amount`, must not be `None`")  # noqa: E501

        self._collateral_amount = collateral_amount

    @property
    def product_id(self):
        """Gets the product_id of this InlineResponse200261Rows.  # noqa: E501


        :return: The product_id of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this InlineResponse200261Rows.


        :param product_id: The product_id of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def yesterday_real_time_rewards(self):
        """Gets the yesterday_real_time_rewards of this InlineResponse200261Rows.  # noqa: E501


        :return: The yesterday_real_time_rewards of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._yesterday_real_time_rewards

    @yesterday_real_time_rewards.setter
    def yesterday_real_time_rewards(self, yesterday_real_time_rewards):
        """Sets the yesterday_real_time_rewards of this InlineResponse200261Rows.


        :param yesterday_real_time_rewards: The yesterday_real_time_rewards of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if yesterday_real_time_rewards is None:
            raise ValueError("Invalid value for `yesterday_real_time_rewards`, must not be `None`")  # noqa: E501

        self._yesterday_real_time_rewards = yesterday_real_time_rewards

    @property
    def cumulative_bonus_rewards(self):
        """Gets the cumulative_bonus_rewards of this InlineResponse200261Rows.  # noqa: E501


        :return: The cumulative_bonus_rewards of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._cumulative_bonus_rewards

    @cumulative_bonus_rewards.setter
    def cumulative_bonus_rewards(self, cumulative_bonus_rewards):
        """Sets the cumulative_bonus_rewards of this InlineResponse200261Rows.


        :param cumulative_bonus_rewards: The cumulative_bonus_rewards of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if cumulative_bonus_rewards is None:
            raise ValueError("Invalid value for `cumulative_bonus_rewards`, must not be `None`")  # noqa: E501

        self._cumulative_bonus_rewards = cumulative_bonus_rewards

    @property
    def cumulative_real_time_rewards(self):
        """Gets the cumulative_real_time_rewards of this InlineResponse200261Rows.  # noqa: E501


        :return: The cumulative_real_time_rewards of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._cumulative_real_time_rewards

    @cumulative_real_time_rewards.setter
    def cumulative_real_time_rewards(self, cumulative_real_time_rewards):
        """Sets the cumulative_real_time_rewards of this InlineResponse200261Rows.


        :param cumulative_real_time_rewards: The cumulative_real_time_rewards of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if cumulative_real_time_rewards is None:
            raise ValueError("Invalid value for `cumulative_real_time_rewards`, must not be `None`")  # noqa: E501

        self._cumulative_real_time_rewards = cumulative_real_time_rewards

    @property
    def cumulative_total_rewards(self):
        """Gets the cumulative_total_rewards of this InlineResponse200261Rows.  # noqa: E501


        :return: The cumulative_total_rewards of this InlineResponse200261Rows.  # noqa: E501
        :rtype: str
        """
        return self._cumulative_total_rewards

    @cumulative_total_rewards.setter
    def cumulative_total_rewards(self, cumulative_total_rewards):
        """Sets the cumulative_total_rewards of this InlineResponse200261Rows.


        :param cumulative_total_rewards: The cumulative_total_rewards of this InlineResponse200261Rows.  # noqa: E501
        :type: str
        """
        if cumulative_total_rewards is None:
            raise ValueError("Invalid value for `cumulative_total_rewards`, must not be `None`")  # noqa: E501

        self._cumulative_total_rewards = cumulative_total_rewards

    @property
    def auto_subscribe(self):
        """Gets the auto_subscribe of this InlineResponse200261Rows.  # noqa: E501


        :return: The auto_subscribe of this InlineResponse200261Rows.  # noqa: E501
        :rtype: bool
        """
        return self._auto_subscribe

    @auto_subscribe.setter
    def auto_subscribe(self, auto_subscribe):
        """Sets the auto_subscribe of this InlineResponse200261Rows.


        :param auto_subscribe: The auto_subscribe of this InlineResponse200261Rows.  # noqa: E501
        :type: bool
        """
        if auto_subscribe is None:
            raise ValueError("Invalid value for `auto_subscribe`, must not be `None`")  # noqa: E501

        self._auto_subscribe = auto_subscribe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200261Rows, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200261Rows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
