# coding: utf-8

"""
    Binance Public Spot API

    OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from binance_spot.api_client import ApiClient


class NFTApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sapi_v1_nft_history_deposit_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get NFT Deposit History(USER_DATA)  # noqa: E501

        - The max interval between startTime and endTime is 90 days. - If startTime and endTime are not sent, the recent 7 days' data will be returned.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_nft_history_deposit_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 50, Max 50
        :param int page: Default 1
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200232
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_nft_history_deposit_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_nft_history_deposit_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_nft_history_deposit_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get NFT Deposit History(USER_DATA)  # noqa: E501

        - The max interval between startTime and endTime is 90 days. - If startTime and endTime are not sent, the recent 7 days' data will be returned.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_nft_history_deposit_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 50, Max 50
        :param int page: Default 1
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200232
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'start_time', 'end_time', 'limit', 'page', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_nft_history_deposit_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_nft_history_deposit_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_nft_history_deposit_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/nft/history/deposit', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200232',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_nft_history_transactions_get(self, order_type, timestamp, signature, **kwargs):  # noqa: E501
        """Get NFT Transaction History (USER_DATA)  # noqa: E501

        - The max interval between startTime and endTime is 90 days. - If startTime and endTime are not sent, the recent 7 days' data will be returned.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_nft_history_transactions_get(order_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_type: 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 50, Max 50
        :param int page: Default 1
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200231
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_nft_history_transactions_get_with_http_info(order_type, timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_nft_history_transactions_get_with_http_info(order_type, timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_nft_history_transactions_get_with_http_info(self, order_type, timestamp, signature, **kwargs):  # noqa: E501
        """Get NFT Transaction History (USER_DATA)  # noqa: E501

        - The max interval between startTime and endTime is 90 days. - If startTime and endTime are not sent, the recent 7 days' data will be returned.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_nft_history_transactions_get_with_http_info(order_type, timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_type: 0: purchase order, 1: sell order, 2: royalty income, 3: primary market order, 4: mint fee (required)
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 50, Max 50
        :param int page: Default 1
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200231
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_type', 'timestamp', 'signature', 'start_time', 'end_time', 'limit', 'page', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_nft_history_transactions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_type' is set
        if ('order_type' not in params or
                params['order_type'] is None):
            raise ValueError("Missing the required parameter `order_type` when calling `sapi_v1_nft_history_transactions_get`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_nft_history_transactions_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_nft_history_transactions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'order_type' in params:
            query_params.append(('orderType', params['order_type']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/nft/history/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200231',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_nft_history_withdraw_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get NFT Withdraw History (USER_DATA)  # noqa: E501

        - The max interval between startTime and endTime is 90 days. - If startTime and endTime are not sent, the recent 7 days' data will be returned.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_nft_history_withdraw_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 50, Max 50
        :param int page: Default 1
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200233
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_nft_history_withdraw_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_nft_history_withdraw_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_nft_history_withdraw_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get NFT Withdraw History (USER_DATA)  # noqa: E501

        - The max interval between startTime and endTime is 90 days. - If startTime and endTime are not sent, the recent 7 days' data will be returned.  Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_nft_history_withdraw_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int start_time: UTC timestamp in ms
        :param int end_time: UTC timestamp in ms
        :param int limit: Default 50, Max 50
        :param int page: Default 1
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200233
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'start_time', 'end_time', 'limit', 'page', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_nft_history_withdraw_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_nft_history_withdraw_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_nft_history_withdraw_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/nft/history/withdraw', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200233',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sapi_v1_nft_user_get_asset_get(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get NFT Asset (USER_DATA)  # noqa: E501

        Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_nft_user_get_asset_get(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int limit: Default 50, Max 50
        :param int page: Default 1
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200234
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sapi_v1_nft_user_get_asset_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.sapi_v1_nft_user_get_asset_get_with_http_info(timestamp, signature, **kwargs)  # noqa: E501
            return data

    def sapi_v1_nft_user_get_asset_get_with_http_info(self, timestamp, signature, **kwargs):  # noqa: E501
        """Get NFT Asset (USER_DATA)  # noqa: E501

        Weight(UID): 3000  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sapi_v1_nft_user_get_asset_get_with_http_info(timestamp, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int timestamp: UTC timestamp in ms (required)
        :param str signature: Signature (required)
        :param int limit: Default 50, Max 50
        :param int page: Default 1
        :param int recv_window: The value cannot be greater than 60000
        :return: InlineResponse200234
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'signature', 'limit', 'page', 'recv_window']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sapi_v1_nft_user_get_asset_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `sapi_v1_nft_user_get_asset_get`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `sapi_v1_nft_user_get_asset_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'recv_window' in params:
            query_params.append(('recvWindow', params['recv_window']))  # noqa: E501
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sapi/v1/nft/user/getAsset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200234',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
