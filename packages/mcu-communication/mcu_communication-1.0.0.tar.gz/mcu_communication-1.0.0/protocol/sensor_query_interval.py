# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mcu

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class sensor_query_interval(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = sensor_query_interval()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAssensor_query_interval(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # sensor_query_interval
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # sensor_query_interval
    def Interval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def sensor_query_intervalStart(builder):
    builder.StartObject(1)

def Start(builder):
    sensor_query_intervalStart(builder)

def sensor_query_intervalAddInterval(builder, interval):
    builder.PrependInt64Slot(0, interval, 0)

def AddInterval(builder, interval):
    sensor_query_intervalAddInterval(builder, interval)

def sensor_query_intervalEnd(builder):
    return builder.EndObject()

def End(builder):
    return sensor_query_intervalEnd(builder)
