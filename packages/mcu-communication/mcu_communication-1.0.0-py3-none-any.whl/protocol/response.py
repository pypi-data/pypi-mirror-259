# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mcu

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class response(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = response()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsresponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # response
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # response
    def RequestId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # response
    def PayloadType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # response
    def Payload(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def responseStart(builder):
    builder.StartObject(3)

def Start(builder):
    responseStart(builder)

def responseAddRequestId(builder, requestId):
    builder.PrependInt64Slot(0, requestId, 0)

def AddRequestId(builder, requestId):
    responseAddRequestId(builder, requestId)

def responseAddPayloadType(builder, payloadType):
    builder.PrependUint8Slot(1, payloadType, 0)

def AddPayloadType(builder, payloadType):
    responseAddPayloadType(builder, payloadType)

def responseAddPayload(builder, payload):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(payload), 0)

def AddPayload(builder, payload):
    responseAddPayload(builder, payload)

def responseEnd(builder):
    return builder.EndObject()

def End(builder):
    return responseEnd(builder)
