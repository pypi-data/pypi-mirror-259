# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['opensr_degradation', 'opensr_degradation.naipd']

package_data = \
{'': ['*'], 'opensr_degradation.naipd': ['models/*']}

install_requires = \
['numpy>=1.25.2',
 'pydantic>=2.6.3',
 'scikit-image>=0.19.3',
 'scipy>=1.11.4',
 'torch>=2.1.0',
 'torchvision>=0.16.0']

setup_kwargs = {
    'name': 'opensr-degradation',
    'version': '0.9.2',
    'description': 'A set of methods to emulate Sentinel-2 based on High-Resolution imagery',
    'long_description': '# opensr-degradation\n\n<div align="center">\n\n[![Python support][bp1]][bp2]\n[![PyPI Release][bp3]][bp2]\n[![Repository][bscm1]][bp4]\n[![Releases][bscm2]][bp5]\n[![Licence][blic1]][blic2]\n[![Expand your project structure from atoms of code to galactic dimensions.][bp6]][bp7]\n\n[![Contributions Welcome][bp8]][bp9]\n[![Open issues][bscm3]][bp10]\n[![Merge Requests][bscm4]][bscm5]\n\n[![Poetry][bp11]][bp12]\n[![Bandit][bp13]][bp14]\n[![Pre-commit][bp15]][bp16]\n[![Editorconfig][bp17]][bp18]\n[![Code style: black][bfo1]][bfo2]\n[![isort][bfo3]][bfo4]\n[![Docstrings][bli1]][bli2]\n<!-- UPDATEME by toggling this comment off after replacing your project\'s index in both anchors below\n[![OpenSSF Best Practices][boss1]][boss2] -->\n<!-- UPDATEME by toggling this comment off after replacing your project\'s index in both anchors below\n[![OSSRank][boss3]][boss4] -->\n[![Semantic versions][blic3]][bp5]\n[![Pipelines][bscm6]][bscm7]\n\n_A set of method to make NAIP look like Sentinel-2_\n\n</div>\n\n## Very first steps\n\n### Initialize your code\n\n1. Initialize `git` inside your repo:\n\n```bash\ncd opensr-degradation && git init\n```\n\n2. If you don\'t have `Poetry` installed run:\n\n```bash\nmake poetry-download\n```\n\n> This installs Poetry as a [standalone application][fs1]. If you prefer, you can simply install it inside your virtual environment.\n\n3. Initialize Poetry and install `pre-commit` hooks:\n\n```bash\nmake install\nmake pre-commit-install\n```\n\n4. Run the codestyle:\n\n```bash\nmake codestyle\n```\n\n1. Upload initial code to GitHub:\n\n```bash\ngit add .\ngit commit -m ":tada: Initial commit"\ngit branch -M main\ngit remote add origin https://github.com/csaybar/opensr-degradation.git\ngit push -u origin main\n```### Set up bots\n\n- Set up [Dependabot][hub1] to ensure you have the latest dependencies.\n- Set up [Stale bot][hub2] for automatic issue closing.\n\n### Poetry\n\nWant to know more about Poetry? Check [its documentation][fs2].\n\n<details>\n<summary>Details about Poetry</summary>\n<p>\n\nPoetry\'s [commands][fs3] are very intuitive and easy to learn, like:\n\n- `poetry add numpy@latest`\n- `poetry run pytest`\n- `poetry publish --build`\n\netc.\n</p>\n</details>\n\n### Building and releasing your package\n\nBuilding a new version of the application contains steps:\n\n- Bump the version of your package `poetry version <version>`. You can pass the new version explicitly, or a rule such as `major`, `minor`, or `patch`. For more details, refer to the [Semantic Versions][fs4] standard;\n- Make a commit to `GitHub`;\n- Create a `GitHub release`;\n- And... publish :slight_smile: `poetry publish --build`\n\n## :dart: What\'s next\n\nWell, that\'s up to you. :muscle:\n\nFor further setting up your project:\n\n- Look for files and sections marked with `UPDATEME`, these should be updated according to the needs and characteristics of your project;\n  - **Tip:** If you use VS Code\'s [`Todo Tree`][wn1] extension, you can even set a specific tag to quickly locate these marks. Update your `settings.json` with:\n\n```json\n"todo-tree.highlights.customHighlight": {\n    "UPDATEME": {\n        "icon": "pencil",\n        "iconColour": "#E63946"\n    }\n},\n"todo-tree.general.tags": [\n    "BUG",\n    "HACK",\n    "FIXME",\n    "UPDATEME",\n    "TODO",\n    "XXX",\n    "[ ]"\n]\n```\n\n- In order to reduce user prompts and keep things effective, the template generates files with a few assumptions:\n  - It assumes your main git branch is `master`. If you wish to use another branch name for development, be aware of changes you will have to make in the Issue and Merge Request templates and `README.md` file so links won\'t break when you push them to your repo;\n  - It generates a PyPI badge assuming you will be able to publish your project under `opensr-degradation`, change it otherwise;\n- Make sure to create your desired Issue labels on your platform before you start tracking them so it ensures you will be able to filter them from the get-go;\n- Make changes to your CI configurations to better suit your needs.\n\nIf you want to put your project on steroids, here are a few Python tools which can help you depending on what you want to achieve with your application:\n\n- [`Typer`][wn2] is great for creating CLI applications;\n- [`Rich`][wn3] makes it easy to add beautiful formatting in the terminal;\n- [`tqdm`][wn4] is a fast, extensible progress bar for Python and CLI;\n- [`Python Prompt Toolkit`][wn5] allows you to create more advanced terminal applications, such as a text editor or even your own shell;\n- [`orjson`][wn6], an ultra fast JSON parsing library;\n- [`Pydantic`][wn7] is data validation and settings management using Python type hinting;\n- [`Returns`][wn8] makes you function\'s output meaningful, typed, and safe;\n- [`Loguru`][wn9] makes logging (stupidly) simple;\n- [`IceCream`][wn10] is a little library for sweet and creamy debugging;\n- [`Hydra`][wn11] is a framework for elegantly configuring complex applications;\n- [`FastAPI`][wn12] is a type-driven asynchronous web framework.\n\nFor taking development and exposition of your project to the next level:\n\n- Try out some more badges, not only it looks good, but it also helps people better understand some intricate details on how your project works:\n  - You can look at dynamic badges available at [`Shields.io`][wn13];\n  - There is a myriad of standardised static badges at [`Simple Badges`][wn14];\n  - [`awesome-badges`][wn15] provides a lot of useful resources to help you deal with badges;\n- Add your project to [`OpenSSF Best Practices`][wn16] and [`OSSRank`][wn17] indexes. If you have greater ambitions for your project and/or expects it to scale at some point, it\'s worth considering adding it to these trackers;\n  - There are already badges for those set up in your `README.md` file, just waiting for you to update their URLs with your project\'s index in both services :beaming_face_with_smiling_eyes:\n- Setup a code coverage service for your tests, popular options include:\n  - [`Coveralls`][wn18] and [`Codecov`][wn19] if you need solely test coverage;\n  - [`Code Climate`][wn20] and [`Codacy`][wn21] for fully-featured code analysis;\n- Setup a sponsorship page and allow users and organisations who appreciate your project to help raise for its development (and add a badge in the process! :sunglasses:). Popular platforms are:\n  - [`Liberapay`][wn22];\n  - [`Open Collective`][wn23];\n  - [`Ko-fi`][wn24];\n  - You can set a [Sponsors account][hub3] directly integrated into GitHub;\n  - Of course, you can also set any kind of gateway you wish, what works best for you and your project!\n\nAnd here are a few articles which may help you:\n\n- [Open Source Guides][wn25];\n- [A handy guide to financial support for open source][wn26];\n- [GitHub Actions Documentation][hub4];\n- [Makefile tutorial][wn27];\n- [A Comprehensive Look at Testing in Software Development][wn28] is an article that lays out why testing is crucial for development success. Eric\'s blog is actually a great reference, covering topics ranging from the basics to advanced techniques and best practices;\n- Maybe you would like to add [gitmoji][wn29] to commit names. This is really funny. :grin:\n\n## :rocket: Features\n\n### Development features\n\n- Support for `Python 3.8` and higher;\n- [`Poetry`][ft1] as a dependencies manager. See configuration in [`pyproject.toml`][ft2];\n- Automatic code formatting with [`black`][fo1], [`isort`][fo2] and [`pyupgrade`][fo3], with ready-to-use [`pre-commit`][fo4] hooks;\n- Code and docstring linting with [`flake8`][li1], [`pydocstyle`][li2] and [`pydoclint`][li3];\n- Type checks with [`mypy`][ft3], security checks with [`safety`][ft4] and [`bandit`][ft5];\n- Testing with [`pytest`][ft6];\n- Ready-to-use [`.editorconfig`][ft7] and [`.gitignore`][ft8] files. You don\'t have to worry about those things.\n\n### Deployment features\n\n- Issue and Pull Request templates for easy integration with GitHub;\n- Predefined CI/CD build workflow for [`Github Actions`][hub5];\n- Everything is already set up for security checks, codestyle checks, code formatting, testing, linting etc with [`Makefile`][ft9]. More details in [makefile-usage][ft10];- Always up-to-date dependencies with [`Dependabot`][hub6]. You will only need to [enable it][hub1];\n- Automatic drafts of new releases with [`Release Drafter`][hub7]. You may see the list of labels in [`release-drafter.yml`][hub8]. Works perfectly with [Semantic Versions][fs4] specification.\n\n### Open source community features\n\n- Ready-to-use [Pull Request templates][ft11] and several [Issue templates][ft12].\n- Files such as: `LICENCE`, `CONTRIBUTING.md`, `CODE_OF_CONDUCT.md`, and `SECURITY.md` are generated automatically;\n- **Loads** of predefined [badges][ft13] to make your project stand out, you can either keep them, remove as you wish or be welcome to add even more;\n- [`Stale bot`][hub2] closes abandoned issues after a period of inactivity. Configuration is [here][hub9];\n- [Semantic Versions][fs4] specification with [`Release Drafter`][hub7].\n\n## Installation\n\n```bash\npip install -U opensr-degradation\n```\n\nor install with `Poetry`:\n\n```bash\npoetry add opensr-degradation\n```\n\n### Makefile usage\n\n[`Makefile`][ft9] contains a lot of functions for faster development.\n\n<details>\n<summary>1. Download and remove Poetry</summary>\n<p>\n\nTo download and install Poetry as a [standalone application][fs1] run:\n\n```bash\nmake poetry-download\n```\n\nTo uninstall\n\n```bash\nmake poetry-remove\n```\n\nOr you can install it with `pip` inside your virtual environment if you prefer.\n\n</p>\n</details>\n\n<details>\n<summary>2. Install all dependencies and pre-commit hooks</summary>\n<p>\n\nInstall requirements with\n\n```bash\nmake install\n```\n\nPre-commit hooks could be installed after `git init` via\n\n```bash\nmake pre-commit-install\n```\n\n</p>\n</details>\n<details>\n<summary>3. Codestyle</summary>\n<p>\n\nAutomatic formatting uses `pyupgrade`, `isort` and `black`, and can be run with\n\n```bash\nmake codestyle\n\n# or use synonym\nmake formatting\n```\n\nFor codestyle checks only, without rewriting files:\n\n```bash\nmake check-codestyle\n```\n\nUpdate all dev libraries to the latest version using one command\n\n```bash\nmake update-dev-deps\n```\n\n</p>\n</details>\n\n<details>\n<summary>4. Code security</summary>\n<p>\n\n```bash\nmake check-safety\n```\n\nThis command launches `Poetry` integrity checks as well as identifies security issues with `Safety` and `Bandit`.\n\n```bash\nmake check-safety\n```\n\n</p>\n</details>\n\n<details>\n<summary>5. Type checks</summary>\n<p>\n\nRun `mypy` static type checker with\n\n```bash\nmake mypy\n```\n\n</p>\n</details>\n\n<details>\n<summary>6. Tests with coverage badges</summary>\n<p>\n\nRun `pytest` with all essential parameters predefined with\n\n```bash\nmake test\n```\n\n</p>\n</details>\n<details>\n<summary>7. Linters</summary>\n<p>\n\nRun code and docstring linters with `flake8`, `pydocstyle` and `pydoclint`.\n\n```bash\nmake lint\n```\n\n</p>\n</details>\n\n<details>\n<summary>8. All linters</summary>\n<p>\n\nOf course there is a command to ~~rule~~ run all linters in one:\n\n```bash\nmake lint-all\n```\n\nthe same as:\n\n```bash\nmake test && make check-codestyle && make lint && make mypy && make check-safety\n```\n\n</p>\n</details>\n\n<details>\n<summary>10. Cleanup</summary>\n<p>\n\nDelete pycache files\n\n```bash\nmake pycache-remove\n```\n\nRemove package build\n\n```bash\nmake build-remove\n```\n\nDelete .DS_STORE files\n\n```bash\nmake dsstore-remove\n```\n\nRemove .mypycache\n\n```bash\nmake mypycache-remove\n```\n\nOr to remove all above run:\n\n```bash\nmake cleanup\n```\n\n</p>\n</details>\n\n## :chart_with_upwards_trend: Releases\n\nYou can see the list of available releases on the [GitHub Releases][r1] page.\n\nWe follow [Semantic Versions][fs4] specification.\nWe use [`Release Drafter`][hub7]. As pull requests are merged, a draft release is kept up-to-date listing the changes, ready to publish when you’re ready. With the categories option, you can categorize pull requests in release notes using labels.\n\n### List of labels and corresponding titles\n|               **Label**               |      **Title in Releases**      |\n| :-----------------------------------: | :-----------------------------: |\n| `enhancement`, `feature`              | :rocket: Features               |\n| `bug`, `refactoring`, `bugfix`, `fix` | :wrench: Fixes & Refactoring    |\n| `build`, `ci`, `testing`              | :package: Build System & CI/CD  |\n| `breaking`                            | :boom: Breaking Changes         |\n| `documentation`                       | :memo: Documentation            |\n| `dependencies`                        | :arrow_up: Dependencies updates |\nYou can update it in [`release-drafter.yml`][hub8].\n\nGitHub creates the `bug`, `enhancement`, and `documentation` labels for you. Dependabot creates the `dependencies` label. Create the remaining labels on the Issues tab of your GitHub repository, when you need them.\n## :shield: Licence\n\n[![Licence][blic1]][blic2]\n\nThis project is licenced under the terms of the `MIT` licence. See [LICENCE][blic2] for more details.\n## :page_with_curl: Citation\n\n```bibtex\n@misc{opensr-degradation,\n  author = {Cesar Aybar},\n  title = {A set of method to make NAIP look like Sentinel-2},\n  year = {2024},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/csaybar/opensr-degradation}}\n}\n```\n\n## Credits [![Expand your project structure from atoms of code to galactic dimensions.][bp6]][bp7]\n\nThis project was generated with [`galactipy`][bp7].\n\n<!-- Anchors -->\n\n[bp1]: https://img.shields.io/pypi/pyversions/opensr-degradation?style=for-the-badge\n[bp2]: https://pypi.org/project/opensr-degradation/\n[bp3]: https://img.shields.io/pypi/v/opensr-degradation?style=for-the-badge&logo=pypi&color=3775a9\n[bp4]: https://github.com/csaybar/opensr-degradation\n[bp5]: https://github.com/csaybar/opensr-degradation/releases\n[bp6]: https://img.shields.io/badge/made%20with-galactipy%20%F0%9F%8C%8C-179287?style=for-the-badge&labelColor=193A3E\n[bp7]: https://kutt.it/7fYqQl\n[bp8]: https://img.shields.io/static/v1.svg?label=Contributions&message=Welcome&color=0059b3&style=for-the-badge\n[bp9]: https://github.com/csaybar/opensr-degradation/blob/master/CONTRIBUTING.md\n[bp10]: https://github.com/csaybar/opensr-degradation/issues\n[bp11]: https://img.shields.io/endpoint?url=https://python-poetry.org/badge/v0.json&style=for-the-badge\n[bp12]: https://python-poetry.org/\n[bp13]: https://img.shields.io/badge/security-bandit-yellow?style=for-the-badge\n[bp14]: https://bandit.readthedocs.io/en/latest/\n[bp15]: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white&style=for-the-badge\n[bp16]: https://github.com/csaybar/opensr-degradation/blob/master/.pre-commit-config.yaml\n[bp17]: https://img.shields.io/badge/Editor%20Config-E0EFEF?style=for-the-badge&logo=editorconfig&logoColor=000\n[bp18]: https://github.com/csaybar/opensr-degradation/blob/master/.editorconfig\n\n[blic1]: https://img.shields.io/github/license/csaybar/opensr-degradation?style=for-the-badge\n[blic2]: https://github.com/csaybar/opensr-degradation/blob/master/LICENCE\n[blic3]: https://img.shields.io/badge/%F0%9F%93%A6-semantic%20versions-4053D6?style=for-the-badge\n\n<!-- UPDATEME by replacing `1` with your project\'s index at https://www.bestpractices.dev/en\n[boss1]: https://img.shields.io/cii/level/1?style=for-the-badge&logo=linux-foundation&label=openssf%20best%20practices\n[boss2]: https://www.bestpractices.dev/en/projects/1 -->\n<!-- UPDATEME by replacing `1` with your project\'s index at https://ossrank.com/\n[boss3]: https://shields.io/endpoint?url=https://ossrank.com/shield/1&style=for-the-badge\n[boss4]: https://ossrank.com/p/1 -->\n\n[fs1]: https://github.com/python-poetry/install.python-poetry.org\n[fs2]: https://python-poetry.org/docs/\n[fs3]: https://python-poetry.org/docs/cli/#commands\n[fs4]: https://semver.org/\n\n[wn1]: https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree\n[wn2]: https://github.com/tiangolo/typer\n[wn3]: https://github.com/willmcgugan/rich\n[wn4]: https://github.com/tqdm/tqdm\n[wn5]: https://github.com/prompt-toolkit/python-prompt-toolkit\n[wn6]: https://github.com/ijl/orjson\n[wn7]: https://github.com/samuelcolvin/pydantic/\n[wn8]: https://github.com/dry-python/returns\n[wn9]: https://github.com/Delgan/loguru\n[wn10]: https://github.com/gruns/icecream\n[wn11]: https://github.com/facebookresearch/hydra\n[wn12]: https://github.com/tiangolo/fastapi\n[wn13]: https://shields.io/badges/static-badge\n[wn14]: https://badges.pages.dev/\n[wn15]: https://github.com/badges/awesome-badges\n[wn16]: https://www.bestpractices.dev/en\n[wn17]: https://ossrank.com/\n[wn18]: https://coveralls.io/\n[wn19]: https://about.codecov.io/\n[wn20]: https://codeclimate.com/velocity/what-is-velocity\n[wn21]: https://www.codacy.com/\n[wn22]: https://liberapay.com/\n[wn23]: https://opencollective.com/\n[wn24]: https://ko-fi.com/\n[wn25]: https://opensource.guide/\n[wn26]: https://github.com/nayafia/lemonade-stand\n[wn27]: https://makefiletutorial.com/\n[wn28]: https://pytest-with-eric.com/introduction/types-of-software-testing/\n[wn29]: https://gitmoji.dev/\n\n[ft1]: https://python-poetry.org/\n[ft2]: https://github.com/csaybar/opensr-degradation/blob/master/pyproject.toml\n[ft3]: https://mypy.readthedocs.io\n[ft4]: https://docs.safetycli.com/safety-2/\n[ft5]: https://bandit.readthedocs.io/en/latest/\n[ft6]: https://docs.pytest.org/en/latest/\n[ft7]: https://github.com/csaybar/opensr-degradation/blob/master/.editorconfig\n[ft8]: https://github.com/csaybar/opensr-degradation/blob/master/.gitignore\n[ft9]: https://github.com/csaybar/opensr-degradation/blob/master/Makefile\n[ft10]: #makefile-usage\n[ft11]: https://github.com/csaybar/opensr-degradation/blob/master/.github/PULL_REQUEST_TEMPLATE.md\n[ft12]: https://github.com/csaybar/opensr-degradation/tree/master/.github/ISSUE_TEMPLATE\n[ft13]: https://shields.io/\n\n[r1]: https://github.com/csaybar/opensr-degradation/releases\n[bscm1]: https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white\n[bscm2]: https://img.shields.io/github/v/release/csaybar/opensr-degradation?style=for-the-badge&logo=semantic-release&color=347d39\n[bscm3]: https://img.shields.io/github/issues/csaybar/opensr-degradation?style=for-the-badge&color=347d39\n[bscm4]: https://img.shields.io/github/issues-pr/csaybar/opensr-degradation?style=for-the-badge&color=347d39\n[bscm5]: https://github.com/csaybar/opensr-degradation/pulls\n[bscm6]: https://img.shields.io/github/actions/workflow/status/csaybar/opensr-degradation/build.yml?style=for-the-badge&logo=github\n[bscm7]: https://github.com/csaybar/opensr-degradation/actions/workflows/build.yml\n\n[hub1]: https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates#enabling-dependabot-version-updates\n[hub2]: https://github.com/marketplace/actions/close-stale-issues\n[hub3]: https://github.com/sponsors\n[hub4]: https://help.github.com/en/actions\n[hub5]: https://github.com/csaybar/opensr-degradation/blob/master/.github/workflows/build.yml\n[hub6]: https://docs.github.com/en/code-security/dependabot\n[hub7]: https://github.com/marketplace/actions/release-drafter\n[hub8]: https://github.com/csaybar/opensr-degradation/blob/master/.github/release-drafter.yml\n[hub9]: https://github.com/csaybar/opensr-degradation/blob/master/.github/.stale.yml\n\n[bfo1]: https://img.shields.io/badge/code%20style-black-000000.svg?style=for-the-badge\n[bfo2]: https://black.readthedocs.io/en/stable/\n[bfo3]: https://img.shields.io/badge/imports-isort-1674b1?style=for-the-badge&labelColor=ef8336\n[bfo4]: https://pycqa.github.io/isort/\n\n[fo1]: https://black.readthedocs.io/en/stable/\n[fo2]: https://pycqa.github.io/isort/\n[fo3]: https://github.com/asottile/pyupgrade\n[fo4]: https://pre-commit.com/\n\n[bli1]: https://img.shields.io/badge/docstrings-google-ffbb00?style=for-the-badge&labelColor=00ac47\n[bli2]: https://google.github.io/styleguide/pyguide.html\n\n[li1]: https://flake8.pycqa.org/en/latest/\n[li2]: http://www.pydocstyle.org/en/stable/\n[li3]: https://github.com/jsh9/pydoclint\n',
    'author': 'Cesar Aybar',
    'author_email': 'cesar.aybar@uv.es',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/csaybar/opensr-degradation',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8',
}


setup(**setup_kwargs)
