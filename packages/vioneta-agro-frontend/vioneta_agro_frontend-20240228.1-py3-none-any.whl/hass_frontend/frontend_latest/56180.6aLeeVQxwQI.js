export const id=56180;export const ids=[56180];export const modules={56180:(t,i,e)=>{e.a(t,(async(t,s)=>{try{e.r(i);var n=e(5576),a=e(37668),o=e(54915),c=e(84244),r=e(55736),d=e(52672),h=e(39744),l=e(56552),u=e(38076),f=e(84056),_=e(42912),v=e(56836),p=e(47692),b=e(72268),g=e(34320),y=e(27176),k=t([g]);g=(k.then?(await k)():k)[0];(0,n.c)([(0,r.Kx)("hui-weather-entity-row")],(function(t,i){class e extends i{constructor(...i){super(...i),t(this)}}return{F:e,d:[{kind:"field",decorators:[(0,r.qq)({attribute:!1})],key:"hass",value:void 0},{kind:"field",decorators:[(0,r.K2)()],key:"_config",value:void 0},{kind:"field",decorators:[(0,r.K2)()],key:"_forecastEvent",value:void 0},{kind:"field",decorators:[(0,r.K2)()],key:"_subscribed",value:void 0},{kind:"method",key:"_unsubscribeForecastEvents",value:function(){this._subscribed&&(this._subscribed.then((t=>t())),this._subscribed=void 0)}},{kind:"method",key:"_subscribeForecastEvents",value:async function(){if(this._unsubscribeForecastEvents(),!this.hass||!this._config||!this.isConnected)return;const t=this.hass.states[this._config.entity],i=(0,f.qi)(t);i&&(this._subscribed=(0,f.SK)(this.hass,t.entity_id,i,(t=>{this._forecastEvent=t})))}},{kind:"method",key:"connectedCallback",value:function(){(0,a.c)((0,o.c)(e.prototype),"connectedCallback",this).call(this),this.hasUpdated&&this._subscribeForecastEvents()}},{kind:"method",key:"disconnectedCallback",value:function(){(0,a.c)((0,o.c)(e.prototype),"disconnectedCallback",this).call(this),this._unsubscribeForecastEvents()}},{kind:"method",key:"setConfig",value:function(t){if(null==t||!t.entity)throw new Error("Entity must be specified");this._config=t}},{kind:"method",key:"shouldUpdate",value:function(t){return(0,b.c7)(this,t)||t.size>1||!t.has("hass")}},{kind:"method",key:"updated",value:function(t){(0,a.c)((0,o.c)(e.prototype),"updated",this).call(this,t),!t.has("_config")&&this._subscribed||this._subscribeForecastEvents()}},{kind:"method",key:"render",value:function(){if(!this.hass||!this._config)return c.qs;const t=this.hass.states[this._config.entity];if(!t)return c.kP` <hui-warning> ${(0,y.G)(this.hass,this._config.entity)} </hui-warning> `;const i=!(this._config.tap_action&&"none"!==this._config.tap_action.action),e=this._config.secondary_info,s=(0,f.mQ)(t.state,this),n=(0,f.sx)(t.attributes,this._forecastEvent),a=null==n?void 0:n.forecast;return c.kP` <div class="icon-image ${(0,d.m)({pointer:i})}" @action="${this._handleAction}" .actionHandler="${(0,_._)({hasHold:(0,p.e)(this._config.hold_action),hasDoubleClick:(0,p.e)(this._config.double_tap_action)})}" tabindex="${(0,h.u)(i?"0":void 0)}"> ${s||c.kP` <ha-state-icon class="weather-icon" .stateObj="${t}" .hass="${this.hass}"></ha-state-icon> `} </div> <div class="info ${(0,d.m)({pointer:i,"text-content":!e})}" @action="${this._handleAction}" .actionHandler="${(0,_._)({hasHold:(0,p.e)(this._config.hold_action),hasDoubleClick:(0,p.e)(this._config.double_tap_action)})}"> ${this._config.name||(0,l.W)(t)} ${e?c.kP` <div class="secondary"> ${"entity-id"===this._config.secondary_info?t.entity_id:"last-changed"===this._config.secondary_info?c.kP` <ha-relative-time .hass="${this.hass}" .datetime="${t.last_changed}" capitalize></ha-relative-time> `:"last-updated"===this._config.secondary_info?c.kP` <ha-relative-time .hass="${this.hass}" .datetime="${t.last_updated}" capitalize></ha-relative-time> `:""} </div> `:""} </div> <div class="attributes ${(0,d.m)({pointer:i})}" @action="${this._handleAction}" .actionHandler="${(0,_._)({hasHold:(0,p.e)(this._config.hold_action),hasDoubleClick:(0,p.e)(this._config.double_tap_action)})}"> <div> ${(0,u.Rp)(t.state)||void 0===t.attributes.temperature||null===t.attributes.temperature?this.hass.formatEntityState(t):this.hass.formatEntityAttributeValue(t,"temperature")} </div> <div class="secondary"> ${(0,f.gl)(this.hass,t,a)} </div> </div> `}},{kind:"method",key:"_handleAction",value:function(t){(0,v.y)(this,this.hass,this._config,t.detail.action)}},{kind:"get",static:!0,key:"styles",value:function(){return[f.cB,c.gV`:host{display:flex;align-items:center;flex-direction:row}.info{margin-left:16px;margin-inline-start:16px;margin-inline-end:initial;flex:1 0 60px}.info,.info>*{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.icon-image{display:flex;align-items:center;min-width:40px}.icon-image>*{flex:0 0 40px;height:40px}.icon-image:focus{outline:0;background-color:var(--divider-color);border-radius:50%}.weather-icon{--mdc-icon-size:40px}.pointer{cursor:pointer}.attributes{display:flex;flex-direction:column;justify-content:center;text-align:right;margin-left:8px;margin-inline-start:8px;margin-inline-end:initial}.secondary{color:var(--secondary-text-color)}`]}}]}}),c.oH);s()}catch(t){s(t)}}))}};
//# sourceMappingURL=56180.6aLeeVQxwQI.js.map