{"version":3,"file":"lib_index_js.cdf6bcd1a6ad6a449a47.js","mappings":"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","sources":["webpack://myextension/./src/index.ts"],"sourcesContent":["import {\r\n  JupyterFrontEnd,\r\n  JupyterFrontEndPlugin\r\n} from '@jupyterlab/application';\r\nimport { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\r\nimport { Widget } from '@lumino/widgets';\r\n\r\ninterface APODResponse {\r\n  copyright: string;\r\n  date: string;\r\n  explanation: string;\r\n  media_type: 'video' | 'image';\r\n  title: string;\r\n  url: string;\r\n}\r\n\r\n/**\r\n * Initialization data for the myextension extension.\r\n */\r\nconst plugin: JupyterFrontEndPlugin<void> = {\r\n  id: 'myextension:plugin',\r\n  description: 'A JupyterLab extension.',\r\n  autoStart: true,\r\n  requires: [ICommandPalette],\r\n  activate: async (app: JupyterFrontEnd, palette: ICommandPalette) => {\r\n    console.log('JupyterLab extension jupyterlab_apod is activated!');\r\n\r\n    // Define a widget creator function,\r\n    // then call it to make a new widget\r\n    const newWidget = async () => {\r\n      // Create a blank content widget inside of a MainAreaWidget\r\n      const content = new Widget();\r\n      content.addClass('my-apodWidget');\r\n      const widget = new MainAreaWidget({ content });\r\n      widget.id = 'znn-test';\r\n      widget.title.label = '测试随机图片';\r\n      widget.title.closable = true;\r\n\r\n      // Add an image element to the content\r\n      let img = document.createElement('img');\r\n      content.node.appendChild(img);\r\n\r\n      let summary = document.createElement('p');\r\n      content.node.appendChild(summary);\r\n\r\n      // Get a random date string in YYYY-MM-DD format\r\n      function randomDate() {\r\n        const start = new Date(2010, 1, 1);\r\n        const end = new Date();\r\n        const randomDate = new Date(\r\n          start.getTime() + Math.random() * (end.getTime() - start.getTime())\r\n        );\r\n        return randomDate.toISOString().slice(0, 10);\r\n      }\r\n\r\n      // Fetch info about a random picture\r\n      const response = await fetch(\r\n        `https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&date=${randomDate()}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        if (data.error) {\r\n          summary.innerText = data.error.message;\r\n        } else {\r\n          summary.innerText = response.statusText;\r\n        }\r\n      } else {\r\n        const data = (await response.json()) as APODResponse;\r\n\r\n        if (data.media_type === 'image') {\r\n          // Populate the image\r\n          img.src = data.url;\r\n          img.title = data.title;\r\n          summary.innerText = data.title;\r\n          if (data.copyright) {\r\n            summary.innerText += ` (Copyright ${data.copyright})`;\r\n          }\r\n        } else {\r\n          summary.innerText = 'Random APOD fetched was not an image.';\r\n        }\r\n      }\r\n\r\n      return widget;\r\n    };\r\n    let widget = await newWidget();\r\n\r\n    // Add an application command\r\n    const command: string = 'znn:open';\r\n    app.commands.addCommand(command, {\r\n      label: '测试一下',\r\n      execute: async () => {\r\n        // Regenerate the widget if disposed\r\n        if (widget.isDisposed) {\r\n          widget = await newWidget();\r\n        }\r\n        if (!widget.isAttached) {\r\n          // Attach the widget to the main work area if it's not there\r\n          app.shell.add(widget, 'main');\r\n        }\r\n        // Activate the widget\r\n        app.shell.activateById(widget.id);\r\n      }\r\n    });\r\n\r\n    // Add the command to the palette.\r\n    palette.addItem({ command, category: 'Tutorial' });\r\n  }\r\n};\r\n\r\nexport default plugin;\r\n"],"names":[],"sourceRoot":""}