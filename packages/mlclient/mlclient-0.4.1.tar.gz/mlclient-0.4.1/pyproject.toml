[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mlclient"
version = "0.4.1"
description = "A python client managing your MarkLogic instance"
authors = ["Tomasz Anio≈Çowski <tomasz.maciej.aniolowski@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/monasticus/mlclient"
documentation = "https://mlclient.readthedocs.io/en/0.4.1"
keywords = ["MarkLogic", "marklogic", "database", "client", "data", "xml", "json", "NoSQL", "nosql"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Topic :: Database",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
packages = [
    { include = "mlclient" }
]
include = [
    "mlclient/resources/*"
]

[tool.poetry.dependencies]
python = "^3.8"
requests = "^2.31.0"
python-dateutil = "^2.8.2"
requests-toolbelt = "^1.0.0"
pydantic = "^2.5.2"
pyyaml = "^6.0.1"
cleo = "^2.0.1"
urllib3 = "^2.1.0"
xmltodict = "^0.13.0"

[tool.poetry.group.dev.dependencies]
ruff = "*"
isort = "^5.12.0"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"
pytest-benchmark = "^4.0.0"
pytest-bdd = "^7.0.1"
poetry-bumpversion = "<0.3.1"
responses = "^0.23.3"
deepdiff = "^6.7.1"
mimeograph = "^1.1.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.1.2"
sphinx-rtd-theme = "^1.3.0"
autodoc-pydantic = "^2.0.1"

[tool.poetry.group.sub.dependencies]
cryptography = "^42.0.4"

[tool.poetry.scripts]
ml = "mlclient.cli:main"

[tool.poetry_bumpversion.file."mlclient/__init__.py"]
[tool.poetry_bumpversion.file."docs/conf.py"]
[tool.poetry_bumpversion.file."pyproject.toml"]
[tool.poetry_bumpversion.file."README.md"]

[tool.pytest.ini_options]
pythonpath = ["."]
addopts = ["--strict-markers", "--benchmark-autosave"]
markers = [
    "ml_access" # marks tests requiring an ML access
]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "raise NotImplementedError$"
]

[tool.isort]
skip_glob=[
    # Disable imports' sorting when the import order is important
    "mlclient/calls/__init__.py",
    "mlclient/clients/__init__.py"
]

[tool.ruff]
lint.select = [
    "F", "E", "W", "C90", "N", "D", "UP", "B", "A", "COM", "C4", "EM", "EXE", "ISC", "G", "PIE", "T20",
    "PT", "Q", "RSE", "RET", "SLF", "SIM", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "RUF", "FLY",
    "ASYNC", "FA", "FIX", "PERF", "FURB", "LOG"
#    , "CPY"
]
lint.ignore = []
exclude = [
    ".git",
    ".github",
    ".idea",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".benchmarks",
    "__pycache__",
    "dist",
    "venv",
    "meta",
    "docs",
    "scripts"
]
lint.ignore-init-module-imports = true
target-version = "py38"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"mlclient/ml_config.py" = [
    "UP006", # allow using List instead of list for pydantic
    "PLR6301" # allow for a non-static method as it is defined by the Pydantic lib
]
"mlclient/calls/*" = [
    "PLR0913" # allow many arguments as they depend on ML REST resource
]
"mlclient/calls/model/*" = [
    "UP006", # allow using List instead of list for pydantic
    "UP007" # allow using Union instead of X | Y for pydantic
]
"mlclient/cli/commands/*" = [
    "RUF012"  # allow for missing ClassVar annotations as superclass does not use them
]
"mlclient/cli/app.py" = [
    "A002",  # allow for shadowing input builtin as it is superclass method definition
    "PLR6301"  # allow for a non-static method as it is defined in a superclass
]
"mlclient/clients/*" = [
    "PLR0913" # allow many arguments as they depend on ML REST resource
]
"mlclient/clients/eval_client.py" = [
    "A003", # allow shadowing eval builtin for consistency
]
"mlclient/clients/ml_client.py" = [
    "A003", # allow shadowing eval builtin for consistency
    "PLR0904"  # allow many public methods as MLResourcesClient is a fascade for all ML resources
]
"mlclient/model/*" = [
    "UP006", # allow using List instead of list for pydantic
    "UP007" # allow using Union instead of X | Y for pydantic
]
"mlclient/model/data.py" = [
    "PLR0913" # allow many arguments as they depend on ML structure
]
"tests/*" = [
    "D", # disable pydocstyle for tests
    "EM101", # allow string literals in exceptions' tests
    "PLC1901", # allow comparison to blank string in tests
    "PLR0915", # allow many statements in tests
    "PLR2004", # allow magic values in tests
    "SLF001" # allow private members access in tests
]
"tests/mlclient/calls/test_eval_call.py" = [
    "W291" # allow trailing whitespace in multiline string for testing purpose
]
"tests/utils/__init__.py" = [
    "T201" # allow printing by MLResponseBuilder
]
