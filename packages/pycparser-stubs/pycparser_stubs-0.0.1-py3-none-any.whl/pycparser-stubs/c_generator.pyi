from typing import Callable

from pycparser.c_ast import *


SimpleNode = Constant | ID | ArrayRef | StructRef | FuncCall
CompoundDataType = Struct | Union | Enum
TypeInfo = Typename | TypeSpecifier | Declarator


class CGenerator(object):
    """ Uses the same visitor pattern as NodeVisitor, but modified to
        return a value from each visit method, using string accumulation in
        generic_visit.
        Private methods are also type annotated for subclass usage.
    """
    def __init__(self, reduce_parentheses: bool = False):
        """ Constructs C-code generator

            reduce_parentheses:
                if True, eliminates needless parentheses on binary operators
        """
    def visit(self, node: Node) -> str: ...
    def generic_visit(self, node: Node) -> str: ...
    def visit_Constant(self, n: Constant) -> str: ...
    def visit_ID(self, n: ID) -> str: ...
    def visit_Pragma(self, n: Pragma) -> str: ...
    def visit_ArrayRef(self, n: ArrayRef) -> str: ...
    def visit_StructRef(self, n: StructRef) -> str: ...
    def visit_FuncCall(self, n: FuncCall) -> str: ...
    def visit_UnaryOp(self, n: UnaryOp) -> str: ...
    # Precedence map of binary operators:
    precedence_map: dict[str, int]
    def visit_BinaryOp(self, n: BinaryOp) -> str: ...
    def visit_Assignment(self, n: Assignment) -> str: ...
    def visit_IdentifierType(self, n: IdentifierType) -> str: ...
    def _visit_expr(self, n: Expression) -> str: ...
    def visit_Decl(self, n: Decl, no_type: bool = False) -> str: ...
    def visit_DeclList(self, n: DeclList) -> str: ...
    def visit_Typedef(self, n: Typedef) -> str: ...
    def visit_Cast(self, n: Cast) -> str: ...
    def visit_ExprList(self, n: ExprList) -> str: ...
    def visit_InitList(self, n: InitList) -> str: ...
    def visit_Enum(self, n: Enum) -> str: ...
    def visit_Alignas(self, n: Alignas) -> str: ...
    def visit_Enumerator(self, n: Enumerator) -> str: ...
    def visit_FuncDef(self, n: FuncDef) -> str: ...
    def visit_FileAST(self, n: FileAST) -> str: ...
    def visit_Compound(self, n: Compound) -> str: ...
    def visit_CompoundLiteral(self, n: CompoundLiteral) -> str: ...
    def visit_EmptyStatement(self, n: EmptyStatement) -> str: ...
    def visit_ParamList(self, n: ParamList) -> str: ...
    def visit_Return(self, n: Return) -> str: ...
    def visit_Break(self, n: Break) -> str: ...
    def visit_Continue(self, n: Continue) -> str: ...
    def visit_TernaryOp(self, n: TernaryOp) -> str: ...
    def visit_If(self, n: If) -> str: ...
    def visit_For(self, n: For) -> str: ...
    def visit_While(self, n: While) -> str: ...
    def visit_DoWhile(self, n: DoWhile) -> str: ...
    def visit_StaticAssert(self, n: StaticAssert) -> str: ...
    def visit_Switch(self, n: Switch) -> str: ...
    def visit_Case(self, n: Case) -> str: ...
    def visit_Default(self, n: Default) -> str: ...
    def visit_Label(self, n: Label) -> str: ...
    def visit_Goto(self, n: Goto) -> str: ...
    def visit_EllipsisParam(self, n: EllipsisParam) -> str: ...
    def visit_Struct(self, n: Struct) -> str: ...
    def visit_Typename(self, n: Typename) -> str: ...
    def visit_Union(self, n: Union) -> str: ...
    def visit_NamedInitializer(self, n: NamedInitializer) -> str: ...
    def visit_FuncDecl(self, n: FuncDecl) -> str: ...
    def visit_ArrayDecl(self, n: ArrayDecl) -> str: ...
    def visit_TypeDecl(self, n: TypeDecl) -> str: ...
    def visit_PtrDecl(self, n: PtrDecl) -> str: ...
    def _generate_struct_union_enum(self, n: CompoundDataType, name: str) -> str:
        """ Generates code for structs, unions, and enums. name should be
            'struct', 'union', or 'enum'.
        """
    def _generate_struct_union_body(self, members: list[Decl]) -> str: ...
    def _generate_enum_body(self, members: EnumeratorList) -> str: ...
    def _generate_stmt(self, n: Statement, add_indent: bool = False) -> str: ...
    def _generate_decl(self, n: Decl) -> str: ...
    def _generate_type(self, n: TypeInfo, modifiers: list[TypeModifier] = [], emit_declname: bool = True) -> str:
        """ Recursive generation from a type node. n is the type node.
            modifiers collects the PtrDecl, ArrayDecl and FuncDecl modifiers
            encountered on the way down to a TypeDecl, to allow proper
            generation from it.
        """
    def _parenthesize_if(self, n: Node, condition: Callable[[Node], bool]) -> str:
        """ Visits 'n' and returns its string representation, parenthesized
            if the condition function applied to the node returns True.
        """
    def _parenthesize_unless_simple(self, n: Node) -> str:
        """ Common use case for _parenthesize_if
        """
    def _is_simple_node(self, n: Node) -> bool:
        """ Returns True for nodes that are "simple" - i.e. nodes that always
            have higher precedence than operators.
        """
