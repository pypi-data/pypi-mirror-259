#

# build-system
[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

# project
[project]
authors = [{name = "Derek Wan", email = "d.wan@icloud.com"}]
dependencies = [
  "dycw-utilities >= 0.24.37, < 0.25",
  "tomlkit >= 0.12.3, < 0.13",
  "xdg-base-dirs >= 6.0.1, < 6.1",
]
dynamic = ["version"]
name = "dycw-pre-commit-hooks"
readme = "README.md"
requires-python = ">= 3.10"

[project.optional-dependencies]
dev = ["dycw-utilities[hatch,test]", "pre-commit"]

[project.scripts]
run-bump2version = "pre_commit_hooks.run_bump2version:main"
run-dockfmt = "pre_commit_hooks.run_dockfmt:main"
run-hatch-version = "pre_commit_hooks.run_hatch_version:main"
run-ruff-format = "pre_commit_hooks.run_ruff_format:main"
run-uv-pip-compile = "pre_commit_hooks.run_uv_pip_compile:main"

# coverage
[tool.coverage]

[tool.coverage.html]
directory = ".coverage/html"

[tool.coverage.report]
exclude_lines = ["# pragma: no cover", "@overload"]
fail_under = 100.0
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
data_file = ".coverage/data"
parallel = true

# hatch
[tool.hatch]

[tool.hatch.build]
sources = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/pre_commit_hooks"]

[tool.hatch.version]
path = "src/pre_commit_hooks/__init__.py"

# nitpick
[tool.nitpick]
style = [
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/3.10.toml",
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/common.toml",
]

# pyright
[tool.pyright]
exclude = ["**/__pycache__", ".direnv", ".git"]
executionEnvironments = [{root = "src"}]
include = ["src"]
pythonVersion = "3.10"
reportImplicitOverride = "error"
reportImportCycles = "error"
reportMissingSuperCall = "error"
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportPrivateUsage = false
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryTypeIgnoreComment = "error"
reportUntypedBaseClass = false
reportUnusedCallResult = "error"
typeCheckingMode = "strict"

# pytest
[tool.pytest]

[tool.pytest.ini_options]
addopts = ["-rsxX", "--color=auto", "--strict-markers"]
filterwarnings = ["error"]
minversion = "8.0"
testpaths = ["src/tests"]
xfail_strict = true

# ruff
[tool.ruff]
src = ["src"]
target-version = "py310"

[tool.ruff.lint]
ignore = [
  "ANN101",  # flake8-annotations, missing-type-self
  "ANN102",  # flake8-annotations, missing-type-cls
  "ANN401",  # flake8-annotations, dynamically-typed-expression
  "B008",  # flake8-bugbear, function-call-argument-default
  "COM812",  # flake8-commas, trailing-comma-missing
  "FIX002",  # flake8-fixme, line-contains-todo
  "PGH003",  # pygrep-hooks, blanket-type-ignore
  "PLR0913",  # refactor, too-many-arguments
  "PT012",  # flake8-pytest-style, raises-with-multiple-statements
  "PT013",  # flake8-pytest-style, incorrect-pytest-import
  "UP032",  # pyupgrade, f-string
  # formatter
  "E501",  # pycodestyle, line-too-long
  "ISC001",  # flake8-implicit-str-concat, single-line-implicit-string-concatenation
  "W191",  # pycodestyle, tab-indentation
]
select = [
  "A",  # flake8-builtins
  "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  "ASYNC",  # flake8-async
  "B",  # flake8-bugbear
  "BLE",  # flake8-blind-excpt
  "C4",  # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle
  "EM",  # flake8-errmsg
  "ERA",  # eradicate
  "EXE",  # flake8-executable
  "F",  # pyflakes
  "FA",  # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  "FIX",  # flake8-fixme
  "FLY",  # flynt
  "FURB",  # refurb
  "G",  # flake8-logging-format
  "I",  # isort
  "ICN",  # flake8-import-conventions
  "INP",  # flake8-no-pep420
  "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",  # pep8-naming
  "NPY",  # numpy-specific-rules
  "PERF",  # perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",  # flake8-bandit
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "SLOT",  # flake8-slots
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TD",  # flake8-todos
  "TID",  # flake8-tidy-imports
  "TRY",  # tryceratops
  "UP",  # pyupgrade
  "W",  # pycodestyle
  "YTT",  # flake8-2020
]

[tool.ruff.lint.extend-per-file-ignores]
"src/tests/**/*.py" = [
  "FBT001",  # flake8-boolean-trap, boolean-positional-arg-in-function-definition
  "FBT003",  # flake8-boolean-trap, boolean-positional-value-in-function-call
  "PLR2004",  # refactor, magic-value-comparison
  "S101",  # flake8-bandit, assert-used
]
"src/tests/luigi/test_*.py" = ["I002"]  # isort, missing-required-import
"src/tests/typed_settings/test_*.py" = ["I002"]  # isort, missing-required-import
"src/utilities/_luigi/typed_settings.py" = [
  "I002",
]  # isort, missing-required-import

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["utilities.typed_settings.click_field"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
