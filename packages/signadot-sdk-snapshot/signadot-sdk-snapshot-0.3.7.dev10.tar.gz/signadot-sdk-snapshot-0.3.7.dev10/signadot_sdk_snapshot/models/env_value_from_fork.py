# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk_snapshot.configuration import Configuration


class EnvValueFromFork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expression': 'str',
        'fork_of': 'ForkOf'
    }

    attribute_map = {
        'expression': 'expression',
        'fork_of': 'forkOf'
    }

    def __init__(self, expression=None, fork_of=None, _configuration=None):  # noqa: E501
        """EnvValueFromFork - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._expression = None
        self._fork_of = None
        self.discriminator = None

        if expression is not None:
            self.expression = expression
        if fork_of is not None:
            self.fork_of = fork_of

    @property
    def expression(self):
        """Gets the expression of this EnvValueFromFork.  # noqa: E501


        :return: The expression of this EnvValueFromFork.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this EnvValueFromFork.


        :param expression: The expression of this EnvValueFromFork.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def fork_of(self):
        """Gets the fork_of of this EnvValueFromFork.  # noqa: E501


        :return: The fork_of of this EnvValueFromFork.  # noqa: E501
        :rtype: ForkOf
        """
        return self._fork_of

    @fork_of.setter
    def fork_of(self, fork_of):
        """Sets the fork_of of this EnvValueFromFork.


        :param fork_of: The fork_of of this EnvValueFromFork.  # noqa: E501
        :type: ForkOf
        """

        self._fork_of = fork_of

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvValueFromFork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvValueFromFork):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnvValueFromFork):
            return True

        return self.to_dict() != other.to_dict()
