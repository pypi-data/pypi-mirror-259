# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CreatePreviewEndpointRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fork_of': 'ForkOf',
        'host': 'str',
        'name': 'str',
        'port': 'int',
        'protocol': 'str',
        'route_type': 'str'
    }

    attribute_map = {
        'fork_of': 'forkOf',
        'host': 'host',
        'name': 'name',
        'port': 'port',
        'protocol': 'protocol',
        'route_type': 'routeType'
    }

    def __init__(self, fork_of=None, host=None, name=None, port=None, protocol=None, route_type=None, _configuration=None):  # noqa: E501
        """CreatePreviewEndpointRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fork_of = None
        self._host = None
        self._name = None
        self._port = None
        self._protocol = None
        self._route_type = None
        self.discriminator = None

        if fork_of is not None:
            self.fork_of = fork_of
        if host is not None:
            self.host = host
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if protocol is not None:
            self.protocol = protocol
        self.route_type = route_type

    @property
    def fork_of(self):
        """Gets the fork_of of this CreatePreviewEndpointRequest.  # noqa: E501


        :return: The fork_of of this CreatePreviewEndpointRequest.  # noqa: E501
        :rtype: ForkOf
        """
        return self._fork_of

    @fork_of.setter
    def fork_of(self, fork_of):
        """Sets the fork_of of this CreatePreviewEndpointRequest.


        :param fork_of: The fork_of of this CreatePreviewEndpointRequest.  # noqa: E501
        :type: ForkOf
        """

        self._fork_of = fork_of

    @property
    def host(self):
        """Gets the host of this CreatePreviewEndpointRequest.  # noqa: E501

        Host is the host-name of a service within Kubernetes of the form `service-name.namespace.svc`. Only required when RouteType is 'static'  # noqa: E501

        :return: The host of this CreatePreviewEndpointRequest.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this CreatePreviewEndpointRequest.

        Host is the host-name of a service within Kubernetes of the form `service-name.namespace.svc`. Only required when RouteType is 'static'  # noqa: E501

        :param host: The host of this CreatePreviewEndpointRequest.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def name(self):
        """Gets the name of this CreatePreviewEndpointRequest.  # noqa: E501

        Name of this endpoint. If not specified, a name will be generated automatically.  # noqa: E501

        :return: The name of this CreatePreviewEndpointRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePreviewEndpointRequest.

        Name of this endpoint. If not specified, a name will be generated automatically.  # noqa: E501

        :param name: The name of this CreatePreviewEndpointRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this CreatePreviewEndpointRequest.  # noqa: E501

        Port is the port on the above host that the preview will point to. Only required when RouteType is 'static'  # noqa: E501

        :return: The port of this CreatePreviewEndpointRequest.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this CreatePreviewEndpointRequest.

        Port is the port on the above host that the preview will point to. Only required when RouteType is 'static'  # noqa: E501

        :param port: The port of this CreatePreviewEndpointRequest.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this CreatePreviewEndpointRequest.  # noqa: E501

        Protocol of the endpoint that we will be connecting to for this preview URL. One of 'http', 'https', or 'grpc'. If not specified, the default is 'http'.  # noqa: E501

        :return: The protocol of this CreatePreviewEndpointRequest.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this CreatePreviewEndpointRequest.

        Protocol of the endpoint that we will be connecting to for this preview URL. One of 'http', 'https', or 'grpc'. If not specified, the default is 'http'.  # noqa: E501

        :param protocol: The protocol of this CreatePreviewEndpointRequest.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def route_type(self):
        """Gets the route_type of this CreatePreviewEndpointRequest.  # noqa: E501

        RouteType is one of 'static' or 'fork'. If you choose a route of type 'static', this preview endpoint will route traffic to the Host / Port specified. If you choose a route of type 'fork', this preview endpoint will route traffic to a forked entity as specified in forkOf.  # noqa: E501

        :return: The route_type of this CreatePreviewEndpointRequest.  # noqa: E501
        :rtype: str
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this CreatePreviewEndpointRequest.

        RouteType is one of 'static' or 'fork'. If you choose a route of type 'static', this preview endpoint will route traffic to the Host / Port specified. If you choose a route of type 'fork', this preview endpoint will route traffic to a forked entity as specified in forkOf.  # noqa: E501

        :param route_type: The route_type of this CreatePreviewEndpointRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and route_type is None:
            raise ValueError("Invalid value for `route_type`, must not be `None`")  # noqa: E501

        self._route_type = route_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePreviewEndpointRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePreviewEndpointRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreatePreviewEndpointRequest):
            return True

        return self.to_dict() != other.to_dict()
