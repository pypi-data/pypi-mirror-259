# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk.configuration import Configuration


class SandboxTTL(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'str',
        'offset_from': 'str'
    }

    attribute_map = {
        'duration': 'duration',
        'offset_from': 'offsetFrom'
    }

    def __init__(self, duration=None, offset_from=None, _configuration=None):  # noqa: E501
        """SandboxTTL - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._duration = None
        self._offset_from = None
        self.discriminator = None

        if duration is not None:
            self.duration = duration
        if offset_from is not None:
            self.offset_from = offset_from

    @property
    def duration(self):
        """Gets the duration of this SandboxTTL.  # noqa: E501

        Duration represents the duration until sandbox end of life. It should be an unsigned integer not exceeding 32 bits followed by a units character, which can be one of the following.  - 'm' for minutes  - 'h' for hours  - 'd' for days  - 'w' for weeks  # noqa: E501

        :return: The duration of this SandboxTTL.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SandboxTTL.

        Duration represents the duration until sandbox end of life. It should be an unsigned integer not exceeding 32 bits followed by a units character, which can be one of the following.  - 'm' for minutes  - 'h' for hours  - 'd' for days  - 'w' for weeks  # noqa: E501

        :param duration: The duration of this SandboxTTL.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def offset_from(self):
        """Gets the offset_from of this SandboxTTL.  # noqa: E501

        OffsetFrom indicates what the Duration is relative to.  It may be the empty string or \"createdAt\".  The empty string defaults to meaning \"createdAt\".  # noqa: E501

        :return: The offset_from of this SandboxTTL.  # noqa: E501
        :rtype: str
        """
        return self._offset_from

    @offset_from.setter
    def offset_from(self, offset_from):
        """Sets the offset_from of this SandboxTTL.

        OffsetFrom indicates what the Duration is relative to.  It may be the empty string or \"createdAt\".  The empty string defaults to meaning \"createdAt\".  # noqa: E501

        :param offset_from: The offset_from of this SandboxTTL.  # noqa: E501
        :type: str
        """

        self._offset_from = offset_from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SandboxTTL, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SandboxTTL):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SandboxTTL):
            return True

        return self.to_dict() != other.to_dict()
