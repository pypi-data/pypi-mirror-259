# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk.configuration import Configuration


class RouteGroupSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster': 'str',
        'description': 'str',
        'endpoints': 'list[RouteGroupSpecEndpoint]',
        'match': 'RouteGroupMatch'
    }

    attribute_map = {
        'cluster': 'cluster',
        'description': 'description',
        'endpoints': 'endpoints',
        'match': 'match'
    }

    def __init__(self, cluster=None, description=None, endpoints=None, match=None, _configuration=None):  # noqa: E501
        """RouteGroupSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cluster = None
        self._description = None
        self._endpoints = None
        self._match = None
        self.discriminator = None

        if cluster is not None:
            self.cluster = cluster
        if description is not None:
            self.description = description
        if endpoints is not None:
            self.endpoints = endpoints
        if match is not None:
            self.match = match

    @property
    def cluster(self):
        """Gets the cluster of this RouteGroupSpec.  # noqa: E501

        Cluster gives the cluster to which the route group applies.  # noqa: E501

        :return: The cluster of this RouteGroupSpec.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this RouteGroupSpec.

        Cluster gives the cluster to which the route group applies.  # noqa: E501

        :param cluster: The cluster of this RouteGroupSpec.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def description(self):
        """Gets the description of this RouteGroupSpec.  # noqa: E501

        Description provides a short description of the route group.  # noqa: E501

        :return: The description of this RouteGroupSpec.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RouteGroupSpec.

        Description provides a short description of the route group.  # noqa: E501

        :param description: The description of this RouteGroupSpec.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def endpoints(self):
        """Gets the endpoints of this RouteGroupSpec.  # noqa: E501

        Endpoints define endpoints which target different in-cluster services.  # noqa: E501

        :return: The endpoints of this RouteGroupSpec.  # noqa: E501
        :rtype: list[RouteGroupSpecEndpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this RouteGroupSpec.

        Endpoints define endpoints which target different in-cluster services.  # noqa: E501

        :param endpoints: The endpoints of this RouteGroupSpec.  # noqa: E501
        :type: list[RouteGroupSpecEndpoint]
        """

        self._endpoints = endpoints

    @property
    def match(self):
        """Gets the match of this RouteGroupSpec.  # noqa: E501


        :return: The match of this RouteGroupSpec.  # noqa: E501
        :rtype: RouteGroupMatch
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this RouteGroupSpec.


        :param match: The match of this RouteGroupSpec.  # noqa: E501
        :type: RouteGroupMatch
        """

        self._match = match

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteGroupSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteGroupSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RouteGroupSpec):
            return True

        return self.to_dict() != other.to_dict()
