# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk.configuration import Configuration


class ClusterToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'id': 'str',
        'masked_value': 'str',
        'status': 'ClusterTokenStatus',
        'token': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'id': 'id',
        'masked_value': 'maskedValue',
        'status': 'status',
        'token': 'token'
    }

    def __init__(self, created_at=None, id=None, masked_value=None, status=None, token=None, _configuration=None):  # noqa: E501
        """ClusterToken - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._id = None
        self._masked_value = None
        self._status = None
        self._token = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if masked_value is not None:
            self.masked_value = masked_value
        if status is not None:
            self.status = status
        if token is not None:
            self.token = token

    @property
    def created_at(self):
        """Gets the created_at of this ClusterToken.  # noqa: E501

        The time when this cluster was registered with Signadot.  # noqa: E501

        :return: The created_at of this ClusterToken.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ClusterToken.

        The time when this cluster was registered with Signadot.  # noqa: E501

        :param created_at: The created_at of this ClusterToken.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this ClusterToken.  # noqa: E501

        The ID of this token  # noqa: E501

        :return: The id of this ClusterToken.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterToken.

        The ID of this token  # noqa: E501

        :param id: The id of this ClusterToken.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def masked_value(self):
        """Gets the masked_value of this ClusterToken.  # noqa: E501

        A Masked token value.  # noqa: E501

        :return: The masked_value of this ClusterToken.  # noqa: E501
        :rtype: str
        """
        return self._masked_value

    @masked_value.setter
    def masked_value(self, masked_value):
        """Sets the masked_value of this ClusterToken.

        A Masked token value.  # noqa: E501

        :param masked_value: The masked_value of this ClusterToken.  # noqa: E501
        :type: str
        """

        self._masked_value = masked_value

    @property
    def status(self):
        """Gets the status of this ClusterToken.  # noqa: E501


        :return: The status of this ClusterToken.  # noqa: E501
        :rtype: ClusterTokenStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterToken.


        :param status: The status of this ClusterToken.  # noqa: E501
        :type: ClusterTokenStatus
        """

        self._status = status

    @property
    def token(self):
        """Gets the token of this ClusterToken.  # noqa: E501

        The token value.  # noqa: E501

        :return: The token of this ClusterToken.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ClusterToken.

        The token value.  # noqa: E501

        :param token: The token of this ClusterToken.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterToken):
            return True

        return self.to_dict() != other.to_dict()
