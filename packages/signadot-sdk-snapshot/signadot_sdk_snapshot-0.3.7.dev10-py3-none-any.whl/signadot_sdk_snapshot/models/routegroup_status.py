# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk_snapshot.configuration import Configuration


class RoutegroupStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'matched_sandboxes': 'list[str]',
        'message': 'str',
        'ready': 'bool',
        'reason': 'str'
    }

    attribute_map = {
        'matched_sandboxes': 'matchedSandboxes',
        'message': 'message',
        'ready': 'ready',
        'reason': 'reason'
    }

    def __init__(self, matched_sandboxes=None, message=None, ready=None, reason=None, _configuration=None):  # noqa: E501
        """RoutegroupStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._matched_sandboxes = None
        self._message = None
        self._ready = None
        self._reason = None
        self.discriminator = None

        if matched_sandboxes is not None:
            self.matched_sandboxes = matched_sandboxes
        if message is not None:
            self.message = message
        if ready is not None:
            self.ready = ready
        if reason is not None:
            self.reason = reason

    @property
    def matched_sandboxes(self):
        """Gets the matched_sandboxes of this RoutegroupStatus.  # noqa: E501

        MatchedSandboxes gives the list of sandboxes whose labels were matched by the 'match' object in the spec.  # noqa: E501

        :return: The matched_sandboxes of this RoutegroupStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._matched_sandboxes

    @matched_sandboxes.setter
    def matched_sandboxes(self, matched_sandboxes):
        """Sets the matched_sandboxes of this RoutegroupStatus.

        MatchedSandboxes gives the list of sandboxes whose labels were matched by the 'match' object in the spec.  # noqa: E501

        :param matched_sandboxes: The matched_sandboxes of this RoutegroupStatus.  # noqa: E501
        :type: list[str]
        """

        self._matched_sandboxes = matched_sandboxes

    @property
    def message(self):
        """Gets the message of this RoutegroupStatus.  # noqa: E501

        Message is a human readable explanation of why the sandbox is healthy or not.  # noqa: E501

        :return: The message of this RoutegroupStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RoutegroupStatus.

        Message is a human readable explanation of why the sandbox is healthy or not.  # noqa: E501

        :param message: The message of this RoutegroupStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def ready(self):
        """Gets the ready of this RoutegroupStatus.  # noqa: E501

        Ready indicates whether the sandbox is ready, meaning that it can be used for testing.  # noqa: E501

        :return: The ready of this RoutegroupStatus.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready):
        """Sets the ready of this RoutegroupStatus.

        Ready indicates whether the sandbox is ready, meaning that it can be used for testing.  # noqa: E501

        :param ready: The ready of this RoutegroupStatus.  # noqa: E501
        :type: bool
        """

        self._ready = ready

    @property
    def reason(self):
        """Gets the reason of this RoutegroupStatus.  # noqa: E501

        Reason is a machine readable explanation of why the sandbox is healthy or not.  # noqa: E501

        :return: The reason of this RoutegroupStatus.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RoutegroupStatus.

        Reason is a machine readable explanation of why the sandbox is healthy or not.  # noqa: E501

        :param reason: The reason of this RoutegroupStatus.  # noqa: E501
        :type: str
        """

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoutegroupStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutegroupStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoutegroupStatus):
            return True

        return self.to_dict() != other.to_dict()
