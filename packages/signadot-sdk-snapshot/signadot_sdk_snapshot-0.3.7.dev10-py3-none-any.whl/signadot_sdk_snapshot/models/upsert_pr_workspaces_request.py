# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk_snapshot.configuration import Configuration


class UpsertPRWorkspacesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster': 'str',
        'default_service': 'str',
        'default_service_port': 'int',
        'description': 'str',
        'endpoints': 'list[CreatePreviewEndpointRequest]',
        'head_commit': 'str',
        'images': 'list[V1ImageReplacement]',
        'name': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'cluster': 'cluster',
        'default_service': 'defaultService',
        'default_service_port': 'defaultServicePort',
        'description': 'description',
        'endpoints': 'endpoints',
        'head_commit': 'headCommit',
        'images': 'images',
        'name': 'name',
        'namespace': 'namespace'
    }

    def __init__(self, cluster=None, default_service=None, default_service_port=None, description=None, endpoints=None, head_commit=None, images=None, name=None, namespace=None, _configuration=None):  # noqa: E501
        """UpsertPRWorkspacesRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cluster = None
        self._default_service = None
        self._default_service_port = None
        self._description = None
        self._endpoints = None
        self._head_commit = None
        self._images = None
        self._name = None
        self._namespace = None
        self.discriminator = None

        self.cluster = cluster
        if default_service is not None:
            self.default_service = default_service
        if default_service_port is not None:
            self.default_service_port = default_service_port
        if description is not None:
            self.description = description
        if endpoints is not None:
            self.endpoints = endpoints
        if head_commit is not None:
            self.head_commit = head_commit
        if images is not None:
            self.images = images
        if name is not None:
            self.name = name
        self.namespace = namespace

    @property
    def cluster(self):
        """Gets the cluster of this UpsertPRWorkspacesRequest.  # noqa: E501

        Cluster within which this workspace should be created  # noqa: E501

        :return: The cluster of this UpsertPRWorkspacesRequest.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this UpsertPRWorkspacesRequest.

        Cluster within which this workspace should be created  # noqa: E501

        :param cluster: The cluster of this UpsertPRWorkspacesRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")  # noqa: E501

        self._cluster = cluster

    @property
    def default_service(self):
        """Gets the default_service of this UpsertPRWorkspacesRequest.  # noqa: E501

        Deprecated. use endpoints instead.  # noqa: E501

        :return: The default_service of this UpsertPRWorkspacesRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_service

    @default_service.setter
    def default_service(self, default_service):
        """Sets the default_service of this UpsertPRWorkspacesRequest.

        Deprecated. use endpoints instead.  # noqa: E501

        :param default_service: The default_service of this UpsertPRWorkspacesRequest.  # noqa: E501
        :type: str
        """

        self._default_service = default_service

    @property
    def default_service_port(self):
        """Gets the default_service_port of this UpsertPRWorkspacesRequest.  # noqa: E501

        Deprecated. use endpoints instead.  # noqa: E501

        :return: The default_service_port of this UpsertPRWorkspacesRequest.  # noqa: E501
        :rtype: int
        """
        return self._default_service_port

    @default_service_port.setter
    def default_service_port(self, default_service_port):
        """Sets the default_service_port of this UpsertPRWorkspacesRequest.

        Deprecated. use endpoints instead.  # noqa: E501

        :param default_service_port: The default_service_port of this UpsertPRWorkspacesRequest.  # noqa: E501
        :type: int
        """

        self._default_service_port = default_service_port

    @property
    def description(self):
        """Gets the description of this UpsertPRWorkspacesRequest.  # noqa: E501

        Description of the purpose of this workspace.  # noqa: E501

        :return: The description of this UpsertPRWorkspacesRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpsertPRWorkspacesRequest.

        Description of the purpose of this workspace.  # noqa: E501

        :param description: The description of this UpsertPRWorkspacesRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def endpoints(self):
        """Gets the endpoints of this UpsertPRWorkspacesRequest.  # noqa: E501

        Each endpoint specifies a target service or workload corresponding to which a preview URL will be generated.  # noqa: E501

        :return: The endpoints of this UpsertPRWorkspacesRequest.  # noqa: E501
        :rtype: list[CreatePreviewEndpointRequest]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this UpsertPRWorkspacesRequest.

        Each endpoint specifies a target service or workload corresponding to which a preview URL will be generated.  # noqa: E501

        :param endpoints: The endpoints of this UpsertPRWorkspacesRequest.  # noqa: E501
        :type: list[CreatePreviewEndpointRequest]
        """

        self._endpoints = endpoints

    @property
    def head_commit(self):
        """Gets the head_commit of this UpsertPRWorkspacesRequest.  # noqa: E501

        HeadCommit is the commit hash of the current HEAD of the PR branch. It is automatically computed if not specified but it is recommended that you specify this.  # noqa: E501

        :return: The head_commit of this UpsertPRWorkspacesRequest.  # noqa: E501
        :rtype: str
        """
        return self._head_commit

    @head_commit.setter
    def head_commit(self, head_commit):
        """Sets the head_commit of this UpsertPRWorkspacesRequest.

        HeadCommit is the commit hash of the current HEAD of the PR branch. It is automatically computed if not specified but it is recommended that you specify this.  # noqa: E501

        :param head_commit: The head_commit of this UpsertPRWorkspacesRequest.  # noqa: E501
        :type: str
        """

        self._head_commit = head_commit

    @property
    def images(self):
        """Gets the images of this UpsertPRWorkspacesRequest.  # noqa: E501

        Image replacement rules that are used to create the workspace.  # noqa: E501

        :return: The images of this UpsertPRWorkspacesRequest.  # noqa: E501
        :rtype: list[V1ImageReplacement]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this UpsertPRWorkspacesRequest.

        Image replacement rules that are used to create the workspace.  # noqa: E501

        :param images: The images of this UpsertPRWorkspacesRequest.  # noqa: E501
        :type: list[V1ImageReplacement]
        """

        self._images = images

    @property
    def name(self):
        """Gets the name of this UpsertPRWorkspacesRequest.  # noqa: E501

        Human-readable name of this workspace  # noqa: E501

        :return: The name of this UpsertPRWorkspacesRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpsertPRWorkspacesRequest.

        Human-readable name of this workspace  # noqa: E501

        :param name: The name of this UpsertPRWorkspacesRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this UpsertPRWorkspacesRequest.  # noqa: E501

        Namespace within which this workspace should be created  # noqa: E501

        :return: The namespace of this UpsertPRWorkspacesRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this UpsertPRWorkspacesRequest.

        Namespace within which this workspace should be created  # noqa: E501

        :param namespace: The namespace of this UpsertPRWorkspacesRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpsertPRWorkspacesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpsertPRWorkspacesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpsertPRWorkspacesRequest):
            return True

        return self.to_dict() != other.to_dict()
