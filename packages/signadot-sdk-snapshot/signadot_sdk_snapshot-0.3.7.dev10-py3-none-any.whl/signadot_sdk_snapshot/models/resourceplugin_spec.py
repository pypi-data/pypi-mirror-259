# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk_snapshot.configuration import Configuration


class ResourcepluginSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'list[ResourcepluginStep]',
        'delete': 'list[ResourcepluginStep]',
        'description': 'str',
        'runner': 'ResourcepluginRunner'
    }

    attribute_map = {
        'create': 'create',
        'delete': 'delete',
        'description': 'description',
        'runner': 'runner'
    }

    def __init__(self, create=None, delete=None, description=None, runner=None, _configuration=None):  # noqa: E501
        """ResourcepluginSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create = None
        self._delete = None
        self._description = None
        self._runner = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if delete is not None:
            self.delete = delete
        if description is not None:
            self.description = description
        if runner is not None:
            self.runner = runner

    @property
    def create(self):
        """Gets the create of this ResourcepluginSpec.  # noqa: E501

        Create refers to the `create` steps for spinning up the resource  # noqa: E501

        :return: The create of this ResourcepluginSpec.  # noqa: E501
        :rtype: list[ResourcepluginStep]
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this ResourcepluginSpec.

        Create refers to the `create` steps for spinning up the resource  # noqa: E501

        :param create: The create of this ResourcepluginSpec.  # noqa: E501
        :type: list[ResourcepluginStep]
        """

        self._create = create

    @property
    def delete(self):
        """Gets the delete of this ResourcepluginSpec.  # noqa: E501

        Delete refers to the `delete` steps for spinning up the resource  # noqa: E501

        :return: The delete of this ResourcepluginSpec.  # noqa: E501
        :rtype: list[ResourcepluginStep]
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this ResourcepluginSpec.

        Delete refers to the `delete` steps for spinning up the resource  # noqa: E501

        :param delete: The delete of this ResourcepluginSpec.  # noqa: E501
        :type: list[ResourcepluginStep]
        """

        self._delete = delete

    @property
    def description(self):
        """Gets the description of this ResourcepluginSpec.  # noqa: E501

        Description for the resource  # noqa: E501

        :return: The description of this ResourcepluginSpec.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResourcepluginSpec.

        Description for the resource  # noqa: E501

        :param description: The description of this ResourcepluginSpec.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def runner(self):
        """Gets the runner of this ResourcepluginSpec.  # noqa: E501


        :return: The runner of this ResourcepluginSpec.  # noqa: E501
        :rtype: ResourcepluginRunner
        """
        return self._runner

    @runner.setter
    def runner(self, runner):
        """Sets the runner of this ResourcepluginSpec.


        :param runner: The runner of this ResourcepluginSpec.  # noqa: E501
        :type: ResourcepluginRunner
        """

        self._runner = runner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourcepluginSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourcepluginSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourcepluginSpec):
            return True

        return self.to_dict() != other.to_dict()
