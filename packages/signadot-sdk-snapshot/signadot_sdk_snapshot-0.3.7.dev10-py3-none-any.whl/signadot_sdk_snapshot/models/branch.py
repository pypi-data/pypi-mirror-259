# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk_snapshot.configuration import Configuration


class Branch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'head_commit': 'str',
        'pull_request': 'int',
        'vcs_name': 'str',
        'vcs_repo': 'str',
        'vcs_type': 'str'
    }

    attribute_map = {
        'head_commit': 'headCommit',
        'pull_request': 'pullRequest',
        'vcs_name': 'vcsName',
        'vcs_repo': 'vcsRepo',
        'vcs_type': 'vcsType'
    }

    def __init__(self, head_commit=None, pull_request=None, vcs_name=None, vcs_repo=None, vcs_type=None, _configuration=None):  # noqa: E501
        """Branch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._head_commit = None
        self._pull_request = None
        self._vcs_name = None
        self._vcs_repo = None
        self._vcs_type = None
        self.discriminator = None

        if head_commit is not None:
            self.head_commit = head_commit
        if pull_request is not None:
            self.pull_request = pull_request
        if vcs_name is not None:
            self.vcs_name = vcs_name
        if vcs_repo is not None:
            self.vcs_repo = vcs_repo
        if vcs_type is not None:
            self.vcs_type = vcs_type

    @property
    def head_commit(self):
        """Gets the head_commit of this Branch.  # noqa: E501


        :return: The head_commit of this Branch.  # noqa: E501
        :rtype: str
        """
        return self._head_commit

    @head_commit.setter
    def head_commit(self, head_commit):
        """Sets the head_commit of this Branch.


        :param head_commit: The head_commit of this Branch.  # noqa: E501
        :type: str
        """

        self._head_commit = head_commit

    @property
    def pull_request(self):
        """Gets the pull_request of this Branch.  # noqa: E501


        :return: The pull_request of this Branch.  # noqa: E501
        :rtype: int
        """
        return self._pull_request

    @pull_request.setter
    def pull_request(self, pull_request):
        """Sets the pull_request of this Branch.


        :param pull_request: The pull_request of this Branch.  # noqa: E501
        :type: int
        """

        self._pull_request = pull_request

    @property
    def vcs_name(self):
        """Gets the vcs_name of this Branch.  # noqa: E501


        :return: The vcs_name of this Branch.  # noqa: E501
        :rtype: str
        """
        return self._vcs_name

    @vcs_name.setter
    def vcs_name(self, vcs_name):
        """Sets the vcs_name of this Branch.


        :param vcs_name: The vcs_name of this Branch.  # noqa: E501
        :type: str
        """

        self._vcs_name = vcs_name

    @property
    def vcs_repo(self):
        """Gets the vcs_repo of this Branch.  # noqa: E501


        :return: The vcs_repo of this Branch.  # noqa: E501
        :rtype: str
        """
        return self._vcs_repo

    @vcs_repo.setter
    def vcs_repo(self, vcs_repo):
        """Sets the vcs_repo of this Branch.


        :param vcs_repo: The vcs_repo of this Branch.  # noqa: E501
        :type: str
        """

        self._vcs_repo = vcs_repo

    @property
    def vcs_type(self):
        """Gets the vcs_type of this Branch.  # noqa: E501


        :return: The vcs_type of this Branch.  # noqa: E501
        :rtype: str
        """
        return self._vcs_type

    @vcs_type.setter
    def vcs_type(self, vcs_type):
        """Sets the vcs_type of this Branch.


        :param vcs_type: The vcs_type of this Branch.  # noqa: E501
        :type: str
        """

        self._vcs_type = vcs_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Branch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Branch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Branch):
            return True

        return self.to_dict() != other.to_dict()
