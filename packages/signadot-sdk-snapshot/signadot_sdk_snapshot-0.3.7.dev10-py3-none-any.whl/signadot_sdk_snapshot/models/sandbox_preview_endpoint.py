# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk_snapshot.configuration import Configuration


class SandboxPreviewEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baseline_preview_url': 'str',
        'host': 'str',
        'name': 'str',
        'port': 'int',
        'preview_url': 'str',
        'protocol': 'str',
        'route_type': 'str'
    }

    attribute_map = {
        'baseline_preview_url': 'baselinePreviewURL',
        'host': 'host',
        'name': 'name',
        'port': 'port',
        'preview_url': 'previewURL',
        'protocol': 'protocol',
        'route_type': 'routeType'
    }

    def __init__(self, baseline_preview_url=None, host=None, name=None, port=None, preview_url=None, protocol=None, route_type=None, _configuration=None):  # noqa: E501
        """SandboxPreviewEndpoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._baseline_preview_url = None
        self._host = None
        self._name = None
        self._port = None
        self._preview_url = None
        self._protocol = None
        self._route_type = None
        self.discriminator = None

        if baseline_preview_url is not None:
            self.baseline_preview_url = baseline_preview_url
        if host is not None:
            self.host = host
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if preview_url is not None:
            self.preview_url = preview_url
        if protocol is not None:
            self.protocol = protocol
        if route_type is not None:
            self.route_type = route_type

    @property
    def baseline_preview_url(self):
        """Gets the baseline_preview_url of this SandboxPreviewEndpoint.  # noqa: E501


        :return: The baseline_preview_url of this SandboxPreviewEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._baseline_preview_url

    @baseline_preview_url.setter
    def baseline_preview_url(self, baseline_preview_url):
        """Sets the baseline_preview_url of this SandboxPreviewEndpoint.


        :param baseline_preview_url: The baseline_preview_url of this SandboxPreviewEndpoint.  # noqa: E501
        :type: str
        """

        self._baseline_preview_url = baseline_preview_url

    @property
    def host(self):
        """Gets the host of this SandboxPreviewEndpoint.  # noqa: E501


        :return: The host of this SandboxPreviewEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SandboxPreviewEndpoint.


        :param host: The host of this SandboxPreviewEndpoint.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def name(self):
        """Gets the name of this SandboxPreviewEndpoint.  # noqa: E501


        :return: The name of this SandboxPreviewEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SandboxPreviewEndpoint.


        :param name: The name of this SandboxPreviewEndpoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port(self):
        """Gets the port of this SandboxPreviewEndpoint.  # noqa: E501


        :return: The port of this SandboxPreviewEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SandboxPreviewEndpoint.


        :param port: The port of this SandboxPreviewEndpoint.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def preview_url(self):
        """Gets the preview_url of this SandboxPreviewEndpoint.  # noqa: E501


        :return: The preview_url of this SandboxPreviewEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url):
        """Sets the preview_url of this SandboxPreviewEndpoint.


        :param preview_url: The preview_url of this SandboxPreviewEndpoint.  # noqa: E501
        :type: str
        """

        self._preview_url = preview_url

    @property
    def protocol(self):
        """Gets the protocol of this SandboxPreviewEndpoint.  # noqa: E501


        :return: The protocol of this SandboxPreviewEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SandboxPreviewEndpoint.


        :param protocol: The protocol of this SandboxPreviewEndpoint.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def route_type(self):
        """Gets the route_type of this SandboxPreviewEndpoint.  # noqa: E501


        :return: The route_type of this SandboxPreviewEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._route_type

    @route_type.setter
    def route_type(self, route_type):
        """Sets the route_type of this SandboxPreviewEndpoint.


        :param route_type: The route_type of this SandboxPreviewEndpoint.  # noqa: E501
        :type: str
        """

        self._route_type = route_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SandboxPreviewEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SandboxPreviewEndpoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SandboxPreviewEndpoint):
            return True

        return self.to_dict() != other.to_dict()
