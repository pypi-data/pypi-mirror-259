# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk_snapshot.configuration import Configuration


class ResourcepluginStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inputs': 'list[ResourcepluginStepInput]',
        'name': 'str',
        'outputs': 'list[ResourcepluginStepOut]',
        'script': 'str'
    }

    attribute_map = {
        'inputs': 'inputs',
        'name': 'name',
        'outputs': 'outputs',
        'script': 'script'
    }

    def __init__(self, inputs=None, name=None, outputs=None, script=None, _configuration=None):  # noqa: E501
        """ResourcepluginStep - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._inputs = None
        self._name = None
        self._outputs = None
        self._script = None
        self.discriminator = None

        if inputs is not None:
            self.inputs = inputs
        if name is not None:
            self.name = name
        if outputs is not None:
            self.outputs = outputs
        if script is not None:
            self.script = script

    @property
    def inputs(self):
        """Gets the inputs of this ResourcepluginStep.  # noqa: E501

        Inputs for the step  # noqa: E501

        :return: The inputs of this ResourcepluginStep.  # noqa: E501
        :rtype: list[ResourcepluginStepInput]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this ResourcepluginStep.

        Inputs for the step  # noqa: E501

        :param inputs: The inputs of this ResourcepluginStep.  # noqa: E501
        :type: list[ResourcepluginStepInput]
        """

        self._inputs = inputs

    @property
    def name(self):
        """Gets the name of this ResourcepluginStep.  # noqa: E501

        Name for the step  # noqa: E501

        :return: The name of this ResourcepluginStep.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourcepluginStep.

        Name for the step  # noqa: E501

        :param name: The name of this ResourcepluginStep.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def outputs(self):
        """Gets the outputs of this ResourcepluginStep.  # noqa: E501

        Outputs for the step  # noqa: E501

        :return: The outputs of this ResourcepluginStep.  # noqa: E501
        :rtype: list[ResourcepluginStepOut]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ResourcepluginStep.

        Outputs for the step  # noqa: E501

        :param outputs: The outputs of this ResourcepluginStep.  # noqa: E501
        :type: list[ResourcepluginStepOut]
        """

        self._outputs = outputs

    @property
    def script(self):
        """Gets the script of this ResourcepluginStep.  # noqa: E501

        Script to execute in the step  # noqa: E501

        :return: The script of this ResourcepluginStep.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this ResourcepluginStep.

        Script to execute in the step  # noqa: E501

        :param script: The script of this ResourcepluginStep.  # noqa: E501
        :type: str
        """

        self._script = script

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourcepluginStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourcepluginStep):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourcepluginStep):
            return True

        return self.to_dict() != other.to_dict()
