# coding: utf-8

"""
    Signadot API

    API for Signadot Sandboxes  # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk_snapshot.configuration import Configuration


class SandboxLocalWorkloadStatusTunnelHealth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connected': 'bool',
        'last_check_time': 'str',
        'last_connected_time': 'str'
    }

    attribute_map = {
        'connected': 'connected',
        'last_check_time': 'lastCheckTime',
        'last_connected_time': 'lastConnectedTime'
    }

    def __init__(self, connected=None, last_check_time=None, last_connected_time=None, _configuration=None):  # noqa: E501
        """SandboxLocalWorkloadStatusTunnelHealth - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._connected = None
        self._last_check_time = None
        self._last_connected_time = None
        self.discriminator = None

        if connected is not None:
            self.connected = connected
        if last_check_time is not None:
            self.last_check_time = last_check_time
        if last_connected_time is not None:
            self.last_connected_time = last_connected_time

    @property
    def connected(self):
        """Gets the connected of this SandboxLocalWorkloadStatusTunnelHealth.  # noqa: E501


        :return: The connected of this SandboxLocalWorkloadStatusTunnelHealth.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this SandboxLocalWorkloadStatusTunnelHealth.


        :param connected: The connected of this SandboxLocalWorkloadStatusTunnelHealth.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def last_check_time(self):
        """Gets the last_check_time of this SandboxLocalWorkloadStatusTunnelHealth.  # noqa: E501


        :return: The last_check_time of this SandboxLocalWorkloadStatusTunnelHealth.  # noqa: E501
        :rtype: str
        """
        return self._last_check_time

    @last_check_time.setter
    def last_check_time(self, last_check_time):
        """Sets the last_check_time of this SandboxLocalWorkloadStatusTunnelHealth.


        :param last_check_time: The last_check_time of this SandboxLocalWorkloadStatusTunnelHealth.  # noqa: E501
        :type: str
        """

        self._last_check_time = last_check_time

    @property
    def last_connected_time(self):
        """Gets the last_connected_time of this SandboxLocalWorkloadStatusTunnelHealth.  # noqa: E501


        :return: The last_connected_time of this SandboxLocalWorkloadStatusTunnelHealth.  # noqa: E501
        :rtype: str
        """
        return self._last_connected_time

    @last_connected_time.setter
    def last_connected_time(self, last_connected_time):
        """Sets the last_connected_time of this SandboxLocalWorkloadStatusTunnelHealth.


        :param last_connected_time: The last_connected_time of this SandboxLocalWorkloadStatusTunnelHealth.  # noqa: E501
        :type: str
        """

        self._last_connected_time = last_connected_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SandboxLocalWorkloadStatusTunnelHealth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SandboxLocalWorkloadStatusTunnelHealth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SandboxLocalWorkloadStatusTunnelHealth):
            return True

        return self.to_dict() != other.to_dict()
