{"version":3,"file":"lib_index_js.7a2ba57c255aba3000aa.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AAES;AAExD;;;;;;GAMG;AACI,KAAK,UAAU,UAAU,CAC9B,QAAQ,GAAG,EAAE,EACb,OAAoB,EAAE;IAEtB,8BAA8B;IAC9B,MAAM,QAAQ,GAAG,kEAAgB,CAAC,YAAY,EAAE,CAAC;IACjD,MAAM,UAAU,GAAG,yDAAM,CAAC,IAAI,CAC5B,QAAQ,CAAC,OAAO,EAChB,mBAAmB,EAAE,gBAAgB;IACrC,QAAQ,CACT,CAAC;IAEF,IAAI,QAAkB,CAAC;IACvB,IAAI;QACF,QAAQ,GAAG,MAAM,kEAAgB,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC3E;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,kEAAgB,CAAC,YAAY,CAAC,KAAY,CAAC,CAAC;KACvD;IAED,IAAI,IAAI,GAAQ,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAEtC,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QACnB,IAAI;YACF,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,QAAQ,CAAC,CAAC;SACpD;KACF;IAED,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;QAChB,MAAM,IAAI,kEAAgB,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC;KAC1E;IAED,OAAO,IAAI,CAAC;AACd,CAAC;;;;;;;;;;;;;;;;;;;;ACzCwC;AACU;AAEZ;AAOvC;;GAEG;AACH,MAAM,MAAM,GAAgC;IAC1C,EAAE,EAAE,0BAA0B;IAC9B,WAAW,EACT,4EAA4E;IAC9E,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,6DAAU,CAAC;IACtB,QAAQ,EAAE,KAAK,EAAE,GAAoB,EAAE,SAA4B,EAAE,EAAE;;QACrE,MAAM,cAAc,GAAmB,MAAM,oDAAU,CAAM,MAAM,CAAC,CAAC;QAErE,MAAM,eAAe,GAAW,oBAAc,CAAC,IAAI,mCAAI,EAAE,CAAC;QAE1D,IAAI,SAAS,EAAE;YACb,MAAM,YAAY,GAAG,IAAI,mDAAM,EAAE,CAAC;YAClC,YAAY,CAAC,IAAI,CAAC,WAAW,GAAG,eAAe,CAAC;YAChD,YAAY,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;YAE5C,SAAS,CAAC,kBAAkB,CAAC,iBAAiB,EAAE;gBAC9C,IAAI,EAAE,YAAY;aACnB,CAAC,CAAC;SACJ;IACH,CAAC;CACF,CAAC;AAEF,iEAAe,MAAM,EAAC","sources":["webpack://lab_instance_name/./src/handler.ts","webpack://lab_instance_name/./src/index.ts"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\n\nimport { ServerConnection } from '@jupyterlab/services';\n\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI<T>(\n  endPoint = '',\n  init: RequestInit = {}\n): Promise<T> {\n  // Make request to Jupyter API\n  const settings = ServerConnection.makeSettings();\n  const requestUrl = URLExt.join(\n    settings.baseUrl,\n    'lab-instance-name', // API Namespace\n    endPoint\n  );\n\n  let response: Response;\n  try {\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    throw new ServerConnection.NetworkError(error as any);\n  }\n\n  let data: any = await response.text();\n\n  if (data.length > 0) {\n    try {\n      data = JSON.parse(data);\n    } catch (error) {\n      console.log('Not a JSON response body.', response);\n    }\n  }\n\n  if (!response.ok) {\n    throw new ServerConnection.ResponseError(response, data.message || data);\n  }\n\n  return data;\n}\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { Widget } from '@lumino/widgets';\nimport { IStatusBar } from '@jupyterlab/statusbar';\n\nimport { requestAPI } from './handler';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ninterface ServerResponse {\n  data: string;\n}\n\n/**\n * Initialization data for the lab_instance_name extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'lab_instance_name:plugin',\n  description:\n    'A JupyterLab extension for showing the lab instance name on the statusbar.',\n  autoStart: true,\n  optional: [IStatusBar],\n  activate: async (app: JupyterFrontEnd, statusBar: IStatusBar | null) => {\n    const serverResponse: ServerResponse = await requestAPI<any>('name');\n\n    const labInstanceName: string = serverResponse.data ?? '';\n\n    if (statusBar) {\n      const statusWidget = new Widget();\n      statusWidget.node.textContent = labInstanceName;\n      statusWidget.addClass('jp-LabInstanceName');\n\n      statusBar.registerStatusItem('labInstanceName', {\n        item: statusWidget\n      });\n    }\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}