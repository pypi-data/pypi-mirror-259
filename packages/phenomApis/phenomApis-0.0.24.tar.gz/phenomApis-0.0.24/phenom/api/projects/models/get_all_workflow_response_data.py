# coding: utf-8

"""
    projects-api

    These APIs allows you to create workflow statuses, which are then assigned to workflows. These workflows, containing multiple statuses, are subsequently linked to projects. Additionally, candidates are associated with projects, defining the path they are meant to follow within the established workflows.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: phenom
"""

import pprint
import re  # noqa: F401

import six

class GetAllWorkflowResponseData(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'workflow_name': 'str',
        'created_date': 'int',
        'updated_date': 'int',
        'stages': 'list[GetAllWorkflowResponseStages]',
        'created_by_recruiter_info': 'GetAllWorkflowResponseCreatedByRecruiterInfo',
        'workflow_id': 'str',
        'active_stages_count': 'int'
    }

    attribute_map = {
        'workflow_name': 'workflowName',
        'created_date': 'createdDate',
        'updated_date': 'updatedDate',
        'stages': 'stages',
        'created_by_recruiter_info': 'createdByRecruiterInfo',
        'workflow_id': 'workflowId',
        'active_stages_count': 'activeStagesCount'
    }

    def __init__(self, workflow_name=None, created_date=None, updated_date=None, stages=None, created_by_recruiter_info=None, workflow_id=None, active_stages_count=None):  # noqa: E501
        """GetAllWorkflowResponseData - a model defined in Swagger"""  # noqa: E501
        self._workflow_name = None
        self._created_date = None
        self._updated_date = None
        self._stages = None
        self._created_by_recruiter_info = None
        self._workflow_id = None
        self._active_stages_count = None
        self.discriminator = None
        if workflow_name is not None:
            self.workflow_name = workflow_name
        if created_date is not None:
            self.created_date = created_date
        if updated_date is not None:
            self.updated_date = updated_date
        if stages is not None:
            self.stages = stages
        if created_by_recruiter_info is not None:
            self.created_by_recruiter_info = created_by_recruiter_info
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if active_stages_count is not None:
            self.active_stages_count = active_stages_count

    @property
    def workflow_name(self):
        """Gets the workflow_name of this GetAllWorkflowResponseData.  # noqa: E501


        :return: The workflow_name of this GetAllWorkflowResponseData.  # noqa: E501
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this GetAllWorkflowResponseData.


        :param workflow_name: The workflow_name of this GetAllWorkflowResponseData.  # noqa: E501
        :type: str
        """

        self._workflow_name = workflow_name

    @property
    def created_date(self):
        """Gets the created_date of this GetAllWorkflowResponseData.  # noqa: E501


        :return: The created_date of this GetAllWorkflowResponseData.  # noqa: E501
        :rtype: int
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this GetAllWorkflowResponseData.


        :param created_date: The created_date of this GetAllWorkflowResponseData.  # noqa: E501
        :type: int
        """

        self._created_date = created_date

    @property
    def updated_date(self):
        """Gets the updated_date of this GetAllWorkflowResponseData.  # noqa: E501


        :return: The updated_date of this GetAllWorkflowResponseData.  # noqa: E501
        :rtype: int
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this GetAllWorkflowResponseData.


        :param updated_date: The updated_date of this GetAllWorkflowResponseData.  # noqa: E501
        :type: int
        """

        self._updated_date = updated_date

    @property
    def stages(self):
        """Gets the stages of this GetAllWorkflowResponseData.  # noqa: E501


        :return: The stages of this GetAllWorkflowResponseData.  # noqa: E501
        :rtype: list[GetAllWorkflowResponseStages]
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this GetAllWorkflowResponseData.


        :param stages: The stages of this GetAllWorkflowResponseData.  # noqa: E501
        :type: list[GetAllWorkflowResponseStages]
        """

        self._stages = stages

    @property
    def created_by_recruiter_info(self):
        """Gets the created_by_recruiter_info of this GetAllWorkflowResponseData.  # noqa: E501


        :return: The created_by_recruiter_info of this GetAllWorkflowResponseData.  # noqa: E501
        :rtype: GetAllWorkflowResponseCreatedByRecruiterInfo
        """
        return self._created_by_recruiter_info

    @created_by_recruiter_info.setter
    def created_by_recruiter_info(self, created_by_recruiter_info):
        """Sets the created_by_recruiter_info of this GetAllWorkflowResponseData.


        :param created_by_recruiter_info: The created_by_recruiter_info of this GetAllWorkflowResponseData.  # noqa: E501
        :type: GetAllWorkflowResponseCreatedByRecruiterInfo
        """

        self._created_by_recruiter_info = created_by_recruiter_info

    @property
    def workflow_id(self):
        """Gets the workflow_id of this GetAllWorkflowResponseData.  # noqa: E501


        :return: The workflow_id of this GetAllWorkflowResponseData.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this GetAllWorkflowResponseData.


        :param workflow_id: The workflow_id of this GetAllWorkflowResponseData.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def active_stages_count(self):
        """Gets the active_stages_count of this GetAllWorkflowResponseData.  # noqa: E501


        :return: The active_stages_count of this GetAllWorkflowResponseData.  # noqa: E501
        :rtype: int
        """
        return self._active_stages_count

    @active_stages_count.setter
    def active_stages_count(self, active_stages_count):
        """Sets the active_stages_count of this GetAllWorkflowResponseData.


        :param active_stages_count: The active_stages_count of this GetAllWorkflowResponseData.  # noqa: E501
        :type: int
        """

        self._active_stages_count = active_stages_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAllWorkflowResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAllWorkflowResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
