#
# build-system

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

# project
[project]
authors = [{name = "Derek Wan", email = "d.wan@icloud.com"}]
dependencies = [
  "atomicwrites >= 1.4.1",
  "beartype >= 0.17.2",
  "bidict >= 0.23.1",
  "cachetools >= 5.3.3",
  "click >= 8.1.7",
  "frozendict >= 2.4.0",
  "loguru >= 0.7.2",
  "more-itertools >= 10.2.0",
  "pathvalidate >= 3.2.0",
  "pyhumps >= 3.8.0",
  "semver >= 3.0.2",
  "tqdm >= 4.66.2",
  "typed-settings >= 24.1.0",
  "typing-extensions >= 4.9.0",
]
dynamic = ["version"]
name = "dycw-utilities"
readme = "README.md"
requires-python = ">= 3.10"

[project.optional-dependencies]
airium = ["airium >= 0.2.6"]
ast-comments = ["ast-comments >= 1.2.1"]
beautifulsoup4 = ["beautifulsoup4 >= 4.12.3"]
bottleneck = ["bottleneck >= 1.3.8"]
cryptography = ["cryptography >= 42.0.5"]
cvxpy = ["cvxpy >= 1.4.2"]
dev = [
  # core
  "airium >= 0.2.6",
  "ast-comments >= 1.2.1",
  "beautifulsoup4 >= 4.12.3",
  "bottleneck >= 1.3.8",
  "cryptography >= 42.0.5",
  "cvxpy >= 1.4.2",
  "fastapi >= 0.110.0",
  "fpdf2 >= 2.7.8",
  "hatch >= 1.9.3",
  "holoviews >= 1.18.1",
  "hypothesis >= 6.98.15",
  "luigi >= 3.5.0",
  "mdutils >= 1.6.0",
  "memory-profiler >= 0.61.0",
  "numbagg >= 0.8.0",
  "numpy >= 1.26.4",
  "pandas >= 2.2.1",
  "polars >= 0.20.13",
  "pqdm >= 0.2.0",
  "psutil >= 5.9.6",
  "pydantic >= 2.6.3",
  "pyinstrument >= 4.6.2",
  "pypiserver[passlib] >= 2.0.1",
  "pytest >= 8.0.2",
  "pytest-check >= 2.3.1",
  "scipy >= 1.12.0",
  "selenium >= 4.18.1",
  "sqlalchemy >= 2.0.27",
  "streamlit >= 1.31.1",
  "timeout-decorator >= 0.5.0",
  "xarray >= 2024.2.0",
  "xlrd >= 2.0.1",
  "zarr >= 2.16.1",
  # dev
  "nox",
  "pip-tools",
  # sqlalchemy-dbs
  "cx-oracle",
  "mysqlclient",  # ci-mac-disable
  "psycopg2-binary",
  "pyodbc",
  # test
  "coverage-conditional-plugin >= 0.9.0",
  "exceptiongroup >= 1.2.0",
  "freezegun >= 1.4.0",
  "pytest-cov >= 4.1.0",
  "pytest-instafail >= 0.5.0",
  "pytest-only >= 2.0.0",
  "pytest-randomly >= 3.15.0",
  "pytest-timeout >= 2.2.0",
  "pytest-xdist >= 3.3.1",
]
fastapi = ["fastapi >= 0.110.0"]
fpdf2 = ["fpdf2 >= 2.7.8", "holoviews >= 1.18.1", "selenium >= 4.18.1"]
hatch = ["hatch >= 1.9.3"]
holoviews = ["holoviews >= 1.18.1", "selenium >= 4.18.1"]
hypothesis = ["hypothesis >= 6.98.15"]
luigi = ["luigi >= 3.5.0"]
mdutils = ["mdutils >= 1.6.0"]
memory-profiler = ["memory-profiler >= 0.61.0"]
numbagg = ["numbagg >= 0.8.0"]
numpy = ["numpy >= 1.26.4"]
pandas = ["pandas >= 2.2.1"]
polars = ["polars >= 0.20.13"]
pqdm = ["pqdm >= 0.2.0"]
psutil = ["psutil >= 5.9.6"]
pydantic = ["pydantic >= 2.6.3"]
pyinstrument = ["pyinstrument >= 4.6.2"]
pypiserver = ["pypiserver[passlib] >= 2.0.1"]
pytest = ["pytest >= 8.0.2"]
pytest-check = ["pytest-check >= 2.3.1"]
scipy = ["scipy >= 1.12.0"]
scripts-csv-to-markdown = ["mdutils >= 1.6.0"]
scripts-generate-snippets = ["ast-comments >= 1.2.1"]
scripts-luigi = ["luigi >= 3.5.0"]
scripts-pypi = ["pypiserver[passlib] >= 2.0.1"]
selenium = ["selenium >= 4.18.1"]
sqlalchemy = ["sqlalchemy >= 2.0.27"]
sqlalchemy-dbs = ["cx-oracle", "mysqlclient", "psycopg2-binary", "pyodbc"]
streamlit = ["streamlit >= 1.31.1"]
test = [
  "exceptiongroup >= 1.2.0",
  "pytest >= 8.0.1",
  "pytest-instafail >= 0.5.0",
  "pytest-only >= 2.0.0",
  "pytest-randomly >= 3.15.0",
  "pytest-xdist >= 3.3.1",
]
xarray = ["xarray >= 2024.2.0"]
xlrd = ["xlrd >= 2.0.1"]
zarr = ["zarr >= 2.16.1"]

[project.scripts]
clean-dir = "utilities.scripts.clean_dir:main"
csv-to-markdown = "utilities.scripts.csv_to_markdown:main"
generate-snippets = "utilities.scripts.generate_snippets:main"
monitor-memory = "utilities.scripts.monitor_memory:main"
start-luigi-server = "utilities.scripts.luigi.server:main"
start-pypi-server = "utilities.scripts.pypi_server:main"

# coverage
[tool.coverage]

[tool.coverage.coverage_conditional_plugin.rules]
os-eq-linux = 'sys_platform == "linux"'
os-eq-macos = 'sys_platform == "darwin"'
os-eq-windows = 'sys_platform == "windows"'
os-ne-linux = 'sys_platform != "linux"'
os-ne-macos = 'sys_platform != "darwin"'
os-ne-windows = 'sys_platform != "windows"'
version-ge-311 = "sys_version_info >= (3, 11)"

[tool.coverage.html]
directory = ".coverage/html"

[tool.coverage.report]
exclude_lines = [
  "@overload",
  "# pragma: no cover",
  "assert_never",
  "case _ as never:",
]
fail_under = 100.0
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
data_file = ".coverage/data"
omit = ["src/utilities/clean_dir/__main__.py", "src/utilities/streamlit.py"]
parallel = true
plugins = ["coverage_conditional_plugin"]

# hatch
[tool.hatch]

[tool.hatch.build]
sources = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/utilities"]

[tool.hatch.version]
path = "src/utilities/__init__.py"

# nitpick
[tool.nitpick]
style = [
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/3.10.toml",
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/common.toml",
]

# pyright
[tool.pyright]
exclude = ["**/__pycache__", ".direnv", ".git", ".nox"]
executionEnvironments = [{root = "src"}]
include = ["src"]
pythonVersion = "3.10"
reportImplicitOverride = "error"
reportImportCycles = "error"
reportMissingSuperCall = "error"
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportPrivateUsage = false
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryTypeIgnoreComment = "error"
reportUntypedBaseClass = false
reportUnusedCallResult = "error"
typeCheckingMode = "strict"

# pytest
[tool.pytest]

[tool.pytest.ini_options]
addopts = [
  "-ra",
  "-vv",
  "--color=auto",
  "--cov=utilities",
  "--cov-config=pyproject.toml",
  "--cov-report=html",
  "--strict-markers",
]
filterwarnings = [
  "error",
  "ignore:The --rsyncdir command line argument and rsyncdirs config variable are deprecated:DeprecationWarning",
  "ignore:Implicitly cleaning up <TemporaryDirectory '.*'>:ResourceWarning",
]
minversion = "8.0"
testpaths = ["src/tests"]
timeout = 600
xfail_strict = true

# ruff
[tool.ruff]
src = ["src"]
target-version = "py310"

[tool.ruff.lint]
ignore = [
  "ANN101",  # flake8-annotations, missing-type-self
  "ANN102",  # flake8-annotations, missing-type-cls
  "ANN401",  # flake8-annotations, dynamically-typed-expression
  "B008",  # flake8-bugbear, function-call-argument-default
  "COM812",  # flake8-commas, trailing-comma-missing
  "FIX002",  # flake8-fixme, line-contains-todo
  "PGH003",  # pygrep-hooks, blanket-type-ignore
  "PLR0913",  # refactor, too-many-arguments
  "PT012",  # flake8-pytest-style, raises-with-multiple-statements
  "PT013",  # flake8-pytest-style, incorrect-pytest-import
  # formatter
  "E501",  # pycodestyle, line-too-long
  "ISC001",  # flake8-implicit-str-concat, single-line-implicit-string-concatenation
  "W191",  # pycodestyle, tab-indentation
]
select = [
  "A",  # flake8-builtins
  "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  "ASYNC",  # flake8-async
  "B",  # flake8-bugbear
  "BLE",  # flake8-blind-excpt
  "C4",  # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle
  "EM",  # flake8-errmsg
  "ERA",  # eradicate
  "EXE",  # flake8-executable
  "F",  # pyflakes
  "FA",  # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  "FIX",  # flake8-fixme
  "FLY",  # flynt
  "FURB",  # refurb
  "G",  # flake8-logging-format
  "I",  # isort
  "ICN",  # flake8-import-conventions
  "INP",  # flake8-no-pep420
  "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",  # pep8-naming
  "NPY",  # numpy-specific-rules
  "PERF",  # perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",  # flake8-bandit
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "SLOT",  # flake8-slots
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TD",  # flake8-todos
  "TID",  # flake8-tidy-imports
  "TRY",  # tryceratops
  "UP",  # pyupgrade
  "W",  # pycodestyle
  "YTT",  # flake8-2020
]

[tool.ruff.lint.extend-per-file-ignores]
"src/tests/**/*.py" = [
  "FBT001",  # flake8-boolean-trap, boolean-positional-arg-in-function-definition
  "FBT003",  # flake8-boolean-trap, boolean-positional-value-in-function-call
  "PLR2004",  # refactor, magic-value-comparison
  "S101",  # flake8-bandit, assert-used
]
"src/tests/luigi/test_*.py" = ["I002"]  # isort, missing-required-import
"src/tests/typed_settings/test_*.py" = ["I002"]  # isort, missing-required-import
"src/utilities/_luigi/typed_settings.py" = [
  "I002",
]  # isort, missing-required-import

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["utilities.typed_settings.click_field"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
