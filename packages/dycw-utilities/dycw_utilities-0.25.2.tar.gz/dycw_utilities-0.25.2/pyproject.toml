#
# build-system

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

# project
[project]
authors = [{name = "Derek Wan", email = "d.wan@icloud.com"}]
dependencies = ["typing-extensions"]
dynamic = ["version"]
name = "dycw-utilities"
readme = "README.md"
requires-python = ">= 3.10"

[project.optional-dependencies]
atomicwrites = ["atomicwrites"]
beartype = ["beartype"]
bidict = ["bidict"]
bottleneck = ["bottleneck"]
bs4 = ["beautifulsoup4"]
cacher = ["atomicwrites", "cachetools"]
cachetools = ["cachetools"]
click = ["click"]
cryptography = ["cryptography"]
cvxpy = ["cvxpy"]
dev = [
  "ast-comments",
  "atomicwrites",
  "beartype",
  "beautifulsoup4",
  "bidict",
  "bottleneck",
  "cachetools",
  "click",
  "cryptography",
  "cvxpy",
  "fastapi",
  "fpdf2",
  "frozendict",
  "hatch",
  "holoviews",
  "hypothesis",
  "loguru",
  "luigi",
  "mdutils",
  "memory-profiler",
  "more-itertools",
  "numbagg",
  "numpy",
  "pandas",
  "pathvalidate",
  "polars-lts-cpu",  # for CI
  "pqdm",
  "psutil",
  "pydantic",
  "pyhumps",
  "pyinstrument",
  "pypiserver[passlib]",
  "pytest",
  "pytest-check",
  "scipy",
  "selenium",
  "semver",
  "sqlalchemy",
  "streamlit",
  "typed-settings[click]",
  "xarray",
  "xlrd",
  "zarr",
  # test
  "coverage-conditional-plugin",
  "exceptiongroup",
  "freezegun",
  "pytest-cov",
  "pytest-instafail",
  "pytest-only",
  "pytest-randomly",
  "pytest-rerunfailures",
  "pytest-xdist",
  # CI
  "win32_setctime",  # https://github.com/Delgan/loguru/issues/147
]
fastapi = ["fastapi"]
fpdf2 = ["fpdf2", "holoviews", "selenium"]
frozendict = ["frozendict"]
hatch = ["hatch"]
holoviews = ["holoviews", "selenium"]
hypothesis = ["hypothesis"]
ipython = ["ipython"]
jupyter = ["jupyterlab", "jupyterlab-vim"]
loguru = ["loguru"]
luigi = ["luigi"]
mdutils = ["mdutils"]
memory-profiler = ["memory-profiler"]
more-itertools = ["more-itertools"]
numbagg = ["numbagg"]
numpy = ["numpy"]
pandas = ["pandas"]
pathvalidate = ["pathvalidate"]
polars = ["polars"]
pqdm = ["pqdm"]
pydantic = ["pydantic"]
pyhumps = ["pyhumps"]
pyinstrument = ["pyinstrument"]
pytest = ["pytest"]
pytest-check = ["pytest-check"]
scipy = ["scipy"]
scripts-clean-dir = ["loguru", "typed-settings[click]"]
scripts-csv-to-markdown = ["loguru", "mdutils", "typed-settings[click]"]
scripts-generate-snippets = [
  "ast-comments",
  "loguru",
  "pyhumps",
  "typed-settings[click]",
]
scripts-luigi-server = ["loguru", "luigi", "typed-settings[click]"]
scripts-monitor-memory = ["loguru", "psutil", "typed-settings[click]"]
scripts-pypi-server = ["loguru", "pypiserver[passlib]", "typed-settings[click]"]
selenium = ["selenium"]
semver = ["semver"]
sqlalchemy = ["sqlalchemy"]
sqlalchemy-polars = ["sqlalchemy", "polars"]
streamlit = ["streamlit"]
test = [
  "exceptiongroup",
  "hypothesis",
  "pytest",
  "pytest-randomly",
  "pytest-xdist",
]
typed-settings = ["typed-settings[click]"]
xarray = ["xarray"]
xlrd = ["xlrd"]
zarr = ["zarr"]
zzz-test-atomicwrites = []
zzz-test-beartype = []
zzz-test-bs4 = ["polars"]
zzz-test-cacher = []
zzz-test-cachetools = []
zzz-test-click = ["sqlalchemy"]
zzz-test-cryptography = []
zzz-test-cvxpy = ["pandas"]
zzz-test-fastapi = []
zzz-test-fpdf2 = []
zzz-test-hatch = []
zzz-test-holoviews = ["numbagg", "xarray"]
zzz-test-ipython = []
zzz-test-jupyter = ["pandas", "polars"]
zzz-test-loguru = []
zzz-test-luigi = ["freezegun", "semver", "sqlalchemy"]
zzz-test-memory-profiler = []
zzz-test-more-itertools = []
zzz-test-numpy = ["bottleneck", "numbagg", "pandas"]
zzz-test-pandas = []
zzz-test-pathvalidate = []
zzz-test-polars = []
zzz-test-pqdm = []
zzz-test-pydantic = ["atomicwrites"]
zzz-test-pyinstrument = ["atomicwrites"]
zzz-test-pytest-check = ["atomicwrites"]
zzz-test-scipy = []
zzz-test-scripts-clean-dir = ["freezegun"]
zzz-test-scripts-csv-to-markdown = []
zzz-test-scripts-generate-snippets = []
zzz-test-scripts-luigi-server = []
zzz-test-scripts-monitor-memory = []
zzz-test-scripts-pypi-server = []
zzz-test-semver = []
zzz-test-sqlalchemy = ["bidict", "pyhumps"]
zzz-test-sqlalchemy-polars = ["pyhumps"]
zzz-test-typed-settings = ["sqlalchemy"]
zzz-test-xarray = ["bottleneck", "numbagg"]
zzz-test-xlrd = []
zzz-test-zarr = ["atomicwrites"]

[project.scripts]
clean-dir = "utilities.scripts.clean_dir:main"
csv-to-markdown = "utilities.scripts.csv_to_markdown:main"
generate-snippets = "utilities.scripts.generate_snippets:main"
monitor-memory = "utilities.scripts.monitor_memory:main"
start-luigi-server = "utilities.scripts.luigi.server:main"
start-pypi-server = "utilities.scripts.pypi_server:main"

# coverage
[tool.coverage]

[tool.coverage.coverage_conditional_plugin.rules]
os-eq-linux = 'sys_platform == "linux"'
os-eq-macos = 'sys_platform == "darwin"'
os-eq-windows = 'sys_platform == "windows"'
os-ne-linux = 'sys_platform != "linux"'
os-ne-macos = 'sys_platform != "darwin"'
os-ne-windows = 'sys_platform != "windows"'
version-ge-311 = "sys_version_info >= (3, 11)"

[tool.coverage.html]
directory = ".coverage/html"

[tool.coverage.report]
exclude_also = [
  "@overload",
  "assert_never",
  "case _ as never:",
  "if TYPE_CHECKING:",
]
fail_under = 100.0
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
data_file = ".coverage/data"
omit = ["src/utilities/clean_dir/__main__.py", "src/utilities/streamlit.py"]
parallel = true
plugins = ["coverage_conditional_plugin"]

# hatch
[tool.hatch]

[tool.hatch.build]
sources = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/utilities"]

[tool.hatch.version]
path = "src/utilities/__init__.py"

# nitpick
[tool.nitpick]
style = [
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/3.10.toml",
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/common.toml",
]

# pyright
[tool.pyright]
exclude = ["**/__pycache__", ".direnv", ".git", ".nox"]
executionEnvironments = [{root = "src"}]
include = ["src"]
pythonVersion = "3.10"
reportImplicitOverride = "error"
reportImportCycles = "error"
reportMissingSuperCall = "error"
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportPrivateUsage = false
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryTypeIgnoreComment = "error"
reportUntypedBaseClass = false
reportUnusedCallResult = "error"
typeCheckingMode = "strict"

# pytest
[tool.pytest]

[tool.pytest.ini_options]
addopts = [
  "-ra",
  "-vv",
  "--color=auto",
  "--cov=utilities",
  "--cov-config=pyproject.toml",
  "--cov-report=html",
  "--strict-markers",
]
filterwarnings = [
  "error",
  "ignore:invalid escape sequence:DeprecationWarning",
  "ignore:The --rsyncdir command line argument and rsyncdirs config variable are deprecated:DeprecationWarning",
  "ignore:Implicitly cleaning up <TemporaryDirectory '.*'>:ResourceWarning",
]
minversion = "8.0"
testpaths = ["src/tests"]
xfail_strict = true

# ruff
[tool.ruff]
src = ["src"]
target-version = "py310"

[tool.ruff.lint]
ignore = [
  "ANN101",  # flake8-annotations, missing-type-self
  "ANN102",  # flake8-annotations, missing-type-cls
  "ANN401",  # flake8-annotations, dynamically-typed-expression
  "B008",  # flake8-bugbear, function-call-argument-default
  "COM812",  # flake8-commas, trailing-comma-missing
  "FIX002",  # flake8-fixme, line-contains-todo
  "PGH003",  # pygrep-hooks, blanket-type-ignore
  "PLR0913",  # refactor, too-many-arguments
  "PT012",  # flake8-pytest-style, raises-with-multiple-statements
  "PT013",  # flake8-pytest-style, incorrect-pytest-import
  # formatter
  "E501",  # pycodestyle, line-too-long
  "ISC001",  # flake8-implicit-str-concat, single-line-implicit-string-concatenation
  "W191",  # pycodestyle, tab-indentation
]
select = [
  "A",  # flake8-builtins
  "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  "ASYNC",  # flake8-async
  "B",  # flake8-bugbear
  "BLE",  # flake8-blind-excpt
  "C4",  # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle
  "EM",  # flake8-errmsg
  "ERA",  # eradicate
  "EXE",  # flake8-executable
  "F",  # pyflakes
  "FA",  # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  "FIX",  # flake8-fixme
  "FLY",  # flynt
  "FURB",  # refurb
  "G",  # flake8-logging-format
  "I",  # isort
  "ICN",  # flake8-import-conventions
  "INP",  # flake8-no-pep420
  "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",  # pep8-naming
  "NPY",  # numpy-specific-rules
  "PERF",  # perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",  # flake8-bandit
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "SLOT",  # flake8-slots
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TD",  # flake8-todos
  "TID",  # flake8-tidy-imports
  "TRY",  # tryceratops
  "UP",  # pyupgrade
  "W",  # pycodestyle
  "YTT",  # flake8-2020
]

[tool.ruff.lint.extend-per-file-ignores]
"src/tests/**/*.py" = [
  "FBT001",  # flake8-boolean-trap, boolean-positional-arg-in-function-definition
  "FBT003",  # flake8-boolean-trap, boolean-positional-value-in-function-call
  "PLR2004",  # refactor, magic-value-comparison
  "S101",  # flake8-bandit, assert-used
]
"src/tests/test_typed_settings.py" = ["I002"]  # isort, missing-required-import
"src/utilities/_luigi/typed_settings.py" = [
  "I002",
]  # isort, missing-required-import

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["utilities.typed_settings.click_field"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
