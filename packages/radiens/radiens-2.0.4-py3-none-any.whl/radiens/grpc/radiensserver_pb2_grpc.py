# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import biointerface_pb2 as biointerface__pb2
from . import common_pb2 as common__pb2
from . import datasource_pb2 as datasource__pb2
from . import radiens_dev_pb2 as radiens__dev__pb2
from . import radiensserver_pb2 as radiensserver__pb2
from . import spikesorter_pb2 as spikesorter__pb2


class RadiensCoreStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Healthcheck = channel.unary_unary(
                '/allego.RadiensCore/Healthcheck',
                request_serializer=radiensserver__pb2.RadiensHealthcheckRequest.SerializeToString,
                response_deserializer=radiensserver__pb2.RadiensHealthcheckSpec.FromString,
                )
        self.Initialize = channel.unary_unary(
                '/allego.RadiensCore/Initialize',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.Close = channel.unary_unary(
                '/allego.RadiensCore/Close',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.WorkspaceControl = channel.unary_unary(
                '/allego.RadiensCore/WorkspaceControl',
                request_serializer=common__pb2.WorkspaceControlRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.GetRadiensServers = channel.unary_unary(
                '/allego.RadiensCore/GetRadiensServers',
                request_serializer=common__pb2.GetRadiensServersRequest.SerializeToString,
                response_deserializer=common__pb2.RadiensServersReply.FromString,
                )
        self.GetWorkspace = channel.unary_unary(
                '/allego.RadiensCore/GetWorkspace',
                request_serializer=common__pb2.GetWorkspaceRequest.SerializeToString,
                response_deserializer=common__pb2.GetWorkspaceReply.FromString,
                )
        self.GetRadixEnvironment = channel.unary_unary(
                '/allego.RadiensCore/GetRadixEnvironment',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.RadixEnvironment.FromString,
                )
        self.ListDirectory = channel.unary_unary(
                '/allego.RadiensCore/ListDirectory',
                request_serializer=common__pb2.ListDataSourcesRequest.SerializeToString,
                response_deserializer=datasource__pb2.CpRmMvLsReply.FromString,
                )
        self.CopyDataSourceFile = channel.unary_unary(
                '/allego.RadiensCore/CopyDataSourceFile',
                request_serializer=datasource__pb2.CopyRemoveDataSourceFileRequest.SerializeToString,
                response_deserializer=datasource__pb2.CpRmMvLsReply.FromString,
                )
        self.RemoveDataSourceFile = channel.unary_unary(
                '/allego.RadiensCore/RemoveDataSourceFile',
                request_serializer=datasource__pb2.CopyRemoveDataSourceFileRequest.SerializeToString,
                response_deserializer=datasource__pb2.CpRmMvLsReply.FromString,
                )
        self.MoveDataSourceFile = channel.unary_unary(
                '/allego.RadiensCore/MoveDataSourceFile',
                request_serializer=datasource__pb2.MoveDataSourceFileRequest.SerializeToString,
                response_deserializer=datasource__pb2.CpRmMvLsReply.FromString,
                )
        self.SpikesListDirectory = channel.unary_unary(
                '/allego.RadiensCore/SpikesListDirectory',
                request_serializer=common__pb2.ListDataSourcesRequest.SerializeToString,
                response_deserializer=datasource__pb2.CpRmMvLsReply.FromString,
                )
        self.SpikesCopyFile = channel.unary_unary(
                '/allego.RadiensCore/SpikesCopyFile',
                request_serializer=datasource__pb2.CopyRemoveDataSourceFileRequest.SerializeToString,
                response_deserializer=datasource__pb2.CpRmMvLsReply.FromString,
                )
        self.SpikesRemoveFile = channel.unary_unary(
                '/allego.RadiensCore/SpikesRemoveFile',
                request_serializer=datasource__pb2.CopyRemoveDataSourceFileRequest.SerializeToString,
                response_deserializer=datasource__pb2.CpRmMvLsReply.FromString,
                )
        self.SpikesMoveFile = channel.unary_unary(
                '/allego.RadiensCore/SpikesMoveFile',
                request_serializer=datasource__pb2.MoveDataSourceFileRequest.SerializeToString,
                response_deserializer=datasource__pb2.CpRmMvLsReply.FromString,
                )
        self.ManageNodeOrganization = channel.unary_unary(
                '/allego.RadiensCore/ManageNodeOrganization',
                request_serializer=common__pb2.ManageNodeOrgRequest.SerializeToString,
                response_deserializer=common__pb2.ManageNodeOrgReply.FromString,
                )
        self.ManageNodeLab = channel.unary_unary(
                '/allego.RadiensCore/ManageNodeLab',
                request_serializer=common__pb2.ManageNodeLabRequest.SerializeToString,
                response_deserializer=common__pb2.ManageNodeLabReply.FromString,
                )
        self.ManageNodeUser = channel.unary_unary(
                '/allego.RadiensCore/ManageNodeUser',
                request_serializer=common__pb2.ManageNodeUserRequest.SerializeToString,
                response_deserializer=common__pb2.ManageNodeUserReply.FromString,
                )
        self.ManageNodeProbe = channel.unary_unary(
                '/allego.RadiensCore/ManageNodeProbe',
                request_serializer=common__pb2.ProbeNodeRequest.SerializeToString,
                response_deserializer=common__pb2.ProbeNodeReply.FromString,
                )
        self.ManageEdges = channel.unary_unary(
                '/allego.RadiensCore/ManageEdges',
                request_serializer=common__pb2.WorldEdgeRequest.SerializeToString,
                response_deserializer=common__pb2.WorldEdgeReply.FromString,
                )
        self.QueryWorld = channel.unary_unary(
                '/allego.RadiensCore/QueryWorld',
                request_serializer=common__pb2.QueryWorldRequest.SerializeToString,
                response_deserializer=common__pb2.QueryWorldReply.FromString,
                )
        self.GetWarehouseSensorComponent = channel.unary_unary(
                '/allego.RadiensCore/GetWarehouseSensorComponent',
                request_serializer=common__pb2.SensorCompRequest.SerializeToString,
                response_deserializer=common__pb2.GetSensorCompReply.FromString,
                )
        self.ListSensorSpecs = channel.unary_unary(
                '/allego.RadiensCore/ListSensorSpecs',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=common__pb2.ListSensorSpecsReply.FromString,
                )
        self.SetSensor = channel.unary_unary(
                '/allego.RadiensCore/SetSensor',
                request_serializer=common__pb2.SetSensorRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SetSensorPositionTcs = channel.unary_unary(
                '/allego.RadiensCore/SetSensorPositionTcs',
                request_serializer=common__pb2.SetSensorPositionTcsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SetSitePositionsTcs = channel.unary_unary(
                '/allego.RadiensCore/SetSitePositionsTcs',
                request_serializer=common__pb2.SetSitePositionsTcsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.UpdateSignalGroup = channel.unary_unary(
                '/allego.RadiensCore/UpdateSignalGroup',
                request_serializer=common__pb2.UpdateSignalGroupRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.GetSignalGroupIDs = channel.unary_unary(
                '/allego.RadiensCore/GetSignalGroupIDs',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.GetSignalGroupIDsReply.FromString,
                )
        self.GetSignalGroup = channel.unary_unary(
                '/allego.RadiensCore/GetSignalGroup',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=common__pb2.SignalGroup.FromString,
                )
        self.GetDataSourceParams = channel.unary_unary(
                '/allego.RadiensCore/GetDataSourceParams',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceParams.FromString,
                )
        self.GetSignals = channel.unary_unary(
                '/allego.RadiensCore/GetSignals',
                request_serializer=common__pb2.GetSignalsRequest.SerializeToString,
                response_deserializer=common__pb2.RawSignals.FromString,
                )
        self.SetDACStream = channel.unary_unary(
                '/allego.RadiensCore/SetDACStream',
                request_serializer=common__pb2.DACStreamRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.GetHDSnapshot = channel.unary_unary(
                '/allego.RadiensCore/GetHDSnapshot',
                request_serializer=common__pb2.HDSnapshotRequest.SerializeToString,
                response_deserializer=common__pb2.HDSnapshot.FromString,
                )
        self.SetDSPGroup = channel.unary_unary(
                '/allego.RadiensCore/SetDSPGroup',
                request_serializer=common__pb2.SetDSPGroupRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.GetDSPGroup = channel.unary_unary(
                '/allego.RadiensCore/GetDSPGroup',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=common__pb2.DSPGroup.FromString,
                )
        self.ListDataSource = channel.unary_unary(
                '/allego.RadiensCore/ListDataSource',
                request_serializer=datasource__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceStatusMap.FromString,
                )
        self.ListDataSourceIDs = channel.unary_unary(
                '/allego.RadiensCore/ListDataSourceIDs',
                request_serializer=datasource__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceIDReply.FromString,
                )
        self.SetDataSourceFromFile = channel.unary_unary(
                '/allego.RadiensCore/SetDataSourceFromFile',
                request_serializer=datasource__pb2.DataSourceSetSaveRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceSetSaveReply.FromString,
                )
        self.ClearDataSource = channel.unary_unary(
                '/allego.RadiensCore/ClearDataSource',
                request_serializer=datasource__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceIDReply.FromString,
                )
        self.RenameDataSource = channel.unary_unary(
                '/allego.RadiensCore/RenameDataSource',
                request_serializer=datasource__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceIDReply.FromString,
                )
        self.KpiClear = channel.unary_unary(
                '/allego.RadiensCore/KpiClear',
                request_serializer=common__pb2.KpiControlRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.KpiCalculate = channel.unary_unary(
                '/allego.RadiensCore/KpiCalculate',
                request_serializer=common__pb2.KpiControlRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.GetKpiStatus = channel.unary_unary(
                '/allego.RadiensCore/GetKpiStatus',
                request_serializer=common__pb2.GetKpiStatusRequest.SerializeToString,
                response_deserializer=common__pb2.KpiStatusReply.FromString,
                )
        self.KpiGetMetrics = channel.unary_unary(
                '/allego.RadiensCore/KpiGetMetrics',
                request_serializer=common__pb2.KpiMetricsReq.SerializeToString,
                response_deserializer=common__pb2.KpiBundlePacketMetrics.FromString,
                )
        self.SetKpiUpdatePeriod = channel.unary_unary(
                '/allego.RadiensCore/SetKpiUpdatePeriod',
                request_serializer=common__pb2.SetKpiUpdatePeriodRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SetKpiThreshold = channel.unary_unary(
                '/allego.RadiensCore/SetKpiThreshold',
                request_serializer=common__pb2.SetKpiThresholdRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SetKpiEventDetect = channel.unary_unary(
                '/allego.RadiensCore/SetKpiEventDetect',
                request_serializer=common__pb2.SetKpiEventDetectRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SetKpiEventShadow = channel.unary_unary(
                '/allego.RadiensCore/SetKpiEventShadow',
                request_serializer=common__pb2.SetKpiEventShadowRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SetKpiEventWindow = channel.unary_unary(
                '/allego.RadiensCore/SetKpiEventWindow',
                request_serializer=common__pb2.SetKpiEventWindowRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SpikesSaveToFile = channel.unary_unary(
                '/allego.RadiensCore/SpikesSaveToFile',
                request_serializer=datasource__pb2.DataSourceSetSaveRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceFileSetStat.FromString,
                )
        self.SpikesSetFromFile = channel.unary_unary(
                '/allego.RadiensCore/SpikesSetFromFile',
                request_serializer=datasource__pb2.DataSourceSetSaveRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceSetSaveReply.FromString,
                )
        self.SpikesGetIDs = channel.unary_unary(
                '/allego.RadiensCore/SpikesGetIDs',
                request_serializer=datasource__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceIDReply.FromString,
                )
        self.SpikesRenameID = channel.unary_unary(
                '/allego.RadiensCore/SpikesRenameID',
                request_serializer=datasource__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceIDReply.FromString,
                )
        self.SpikesGetAllSummaryInfo = channel.unary_unary(
                '/allego.RadiensCore/SpikesGetAllSummaryInfo',
                request_serializer=datasource__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceStatusMap.FromString,
                )
        self.SpikesGetSpec = channel.unary_unary(
                '/allego.RadiensCore/SpikesGetSpec',
                request_serializer=datasource__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=biointerface__pb2.SpikesSpecReply.FromString,
                )
        self.SpikesDeleteIDs = channel.unary_unary(
                '/allego.RadiensCore/SpikesDeleteIDs',
                request_serializer=datasource__pb2.DataSourceRequest.SerializeToString,
                response_deserializer=datasource__pb2.DataSourceIDReply.FromString,
                )
        self.BiointerfaceGetSpikesDense = channel.unary_unary(
                '/allego.RadiensCore/BiointerfaceGetSpikesDense',
                request_serializer=biointerface__pb2.BiointerfaceGetSpikesRequest.SerializeToString,
                response_deserializer=biointerface__pb2.BiointerfaceSpikeDataDenseReply.FromString,
                )
        self.BiointerfaceGetNeurons = channel.unary_unary(
                '/allego.RadiensCore/BiointerfaceGetNeurons',
                request_serializer=biointerface__pb2.BiointerfaceGetNeuronsRequest.SerializeToString,
                response_deserializer=biointerface__pb2.BiointerfaceGetNeuronsReply.FromString,
                )
        self.BiointerfaceSeekEndSpikeTimestamps = channel.unary_unary(
                '/allego.RadiensCore/BiointerfaceSeekEndSpikeTimestamps',
                request_serializer=biointerface__pb2.BiointerfaceSeekEndSpikeTimestampsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.BiointerfaceViz = channel.unary_unary(
                '/allego.RadiensCore/BiointerfaceViz',
                request_serializer=biointerface__pb2.BiointerfaceVizRequest.SerializeToString,
                response_deserializer=biointerface__pb2.BiointerfaceVizReply.FromString,
                )
        self.BiointerfaceListSensorSpecs = channel.unary_unary(
                '/allego.RadiensCore/BiointerfaceListSensorSpecs',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=common__pb2.ListSensorSpecsReply.FromString,
                )
        self.BiointerfaceSetSensor = channel.unary_unary(
                '/allego.RadiensCore/BiointerfaceSetSensor',
                request_serializer=common__pb2.SetSensorRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.BiointerfaceSetSensorPositionTcs = channel.unary_unary(
                '/allego.RadiensCore/BiointerfaceSetSensorPositionTcs',
                request_serializer=common__pb2.SetSensorPositionTcsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.BiointerfaceSetSitePositionsTcs = channel.unary_unary(
                '/allego.RadiensCore/BiointerfaceSetSitePositionsTcs',
                request_serializer=common__pb2.SetSitePositionsTcsRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.FeatureStart = channel.unary_unary(
                '/allego.RadiensCore/FeatureStart',
                request_serializer=common__pb2.FeatureStartStopRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.FeatureStop = channel.unary_unary(
                '/allego.RadiensCore/FeatureStop',
                request_serializer=common__pb2.FeatureStartStopRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.GetPrivacy = channel.unary_unary(
                '/allego.RadiensCore/GetPrivacy',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.PrivacyReply.FromString,
                )
        self.SetPrivacy = channel.unary_unary(
                '/allego.RadiensCore/SetPrivacy',
                request_serializer=common__pb2.SetPrivacyRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.DeleteSignalGroup = channel.unary_unary(
                '/allego.RadiensCore/DeleteSignalGroup',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SpikesGetSignalGroup = channel.unary_unary(
                '/allego.RadiensCore/SpikesGetSignalGroup',
                request_serializer=common__pb2.SignalGroupIDRequest.SerializeToString,
                response_deserializer=common__pb2.SignalGroup.FromString,
                )
        self.SetProtocol = channel.unary_unary(
                '/allego.RadiensCore/SetProtocol',
                request_serializer=common__pb2.Protocol.SerializeToString,
                response_deserializer=common__pb2.Protocol.FromString,
                )
        self.GetProtocol = channel.unary_unary(
                '/allego.RadiensCore/GetProtocol',
                request_serializer=common__pb2.ProtocolRequest.SerializeToString,
                response_deserializer=common__pb2.Protocol.FromString,
                )
        self.RenameProtocol = channel.unary_unary(
                '/allego.RadiensCore/RenameProtocol',
                request_serializer=common__pb2.RenameProtocolRequest.SerializeToString,
                response_deserializer=common__pb2.Protocol.FromString,
                )
        self.GetAllProtocols = channel.unary_unary(
                '/allego.RadiensCore/GetAllProtocols',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.GetAllProtocolsReply.FromString,
                )
        self.ApplyProtocol = channel.unary_stream(
                '/allego.RadiensCore/ApplyProtocol',
                request_serializer=common__pb2.ProtocolRequest.SerializeToString,
                response_deserializer=common__pb2.ApplyProtocolProgress.FromString,
                )


class RadiensCoreServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Healthcheck(self, request, context):
        """Lifecycle
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Initialize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WorkspaceControl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRadiensServers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRadixEnvironment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDirectory(self, request, context):
        """===================
        Radiens file system operations
        ===================

        time-series data sources
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CopyDataSourceFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDataSourceFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MoveDataSourceFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesListDirectory(self, request, context):
        """spikes/Biointerface data sources
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesCopyFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesRemoveFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesMoveFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageNodeOrganization(self, request, context):
        """!! experimental API functions to manage user profiles
        rpc ManageSession (ManageSessionRequest) returns (ManageSessionReply) {}
        rpc GetAllProfiles (StandardRequest) returns (GetAllProfilesReply) {}
        rpc GetProfile (StandardRequest) returns (GetCurrentProfileReply) {}
        rpc GetCurrentProfile (StandardRequest) returns (GetCurrentProfileReply) {}
        rpc SetCurrentProfile (SetCurrentProfileRequest) returns (StandardReply) {}

        !!experimental API functions for managing the Redis graph database
        Session, lab, and user API functions to interact with the radiens world database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageNodeLab(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageNodeUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageNodeProbe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ManageEdges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryWorld(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWarehouseSensorComponent(self, request, context):
        """Sensor API functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSensorSpecs(self, request, context):
        """===================
        TIME-SERIES DATASOURCE API functions
        ===================

        functions common with allegoserver
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSensorPositionTcs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSitePositionsTcs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSignalGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignalGroupIDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignalGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataSourceParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSignals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDACStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHDSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDSPGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDSPGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDataSource(self, request, context):
        """data source functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDataSourceIDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDataSourceFromFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearDataSource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameDataSource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KpiClear(self, request, context):
        """time series data source KPI functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KpiCalculate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKpiStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KpiGetMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKpiUpdatePeriod(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKpiThreshold(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKpiEventDetect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKpiEventShadow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKpiEventWindow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesSaveToFile(self, request, context):
        """===================
        SPIKES- and BIOINTERFACE-related API functions
        ===================

        == propoerties
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesSetFromFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesGetIDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesRenameID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesGetAllSummaryInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesGetSpec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesDeleteIDs(self, request, context):
        """== lifecycle functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceGetSpikesDense(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceGetNeurons(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceSeekEndSpikeTimestamps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceViz(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceListSensorSpecs(self, request, context):
        """!! implement these functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceSetSensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceSetSensorPositionTcs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BiointerfaceSetSitePositionsTcs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeatureStart(self, request, context):
        """Licensing and analytics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeatureStop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrivacy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPrivacy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSignalGroup(self, request, context):
        """functions specific to radiensserver
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesGetSignalGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetProtocol(self, request, context):
        """Protocols functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProtocol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameProtocol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllProtocols(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyProtocol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RadiensCoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Healthcheck': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthcheck,
                    request_deserializer=radiensserver__pb2.RadiensHealthcheckRequest.FromString,
                    response_serializer=radiensserver__pb2.RadiensHealthcheckSpec.SerializeToString,
            ),
            'Initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'WorkspaceControl': grpc.unary_unary_rpc_method_handler(
                    servicer.WorkspaceControl,
                    request_deserializer=common__pb2.WorkspaceControlRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetRadiensServers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRadiensServers,
                    request_deserializer=common__pb2.GetRadiensServersRequest.FromString,
                    response_serializer=common__pb2.RadiensServersReply.SerializeToString,
            ),
            'GetWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkspace,
                    request_deserializer=common__pb2.GetWorkspaceRequest.FromString,
                    response_serializer=common__pb2.GetWorkspaceReply.SerializeToString,
            ),
            'GetRadixEnvironment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRadixEnvironment,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.RadixEnvironment.SerializeToString,
            ),
            'ListDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDirectory,
                    request_deserializer=common__pb2.ListDataSourcesRequest.FromString,
                    response_serializer=datasource__pb2.CpRmMvLsReply.SerializeToString,
            ),
            'CopyDataSourceFile': grpc.unary_unary_rpc_method_handler(
                    servicer.CopyDataSourceFile,
                    request_deserializer=datasource__pb2.CopyRemoveDataSourceFileRequest.FromString,
                    response_serializer=datasource__pb2.CpRmMvLsReply.SerializeToString,
            ),
            'RemoveDataSourceFile': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDataSourceFile,
                    request_deserializer=datasource__pb2.CopyRemoveDataSourceFileRequest.FromString,
                    response_serializer=datasource__pb2.CpRmMvLsReply.SerializeToString,
            ),
            'MoveDataSourceFile': grpc.unary_unary_rpc_method_handler(
                    servicer.MoveDataSourceFile,
                    request_deserializer=datasource__pb2.MoveDataSourceFileRequest.FromString,
                    response_serializer=datasource__pb2.CpRmMvLsReply.SerializeToString,
            ),
            'SpikesListDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesListDirectory,
                    request_deserializer=common__pb2.ListDataSourcesRequest.FromString,
                    response_serializer=datasource__pb2.CpRmMvLsReply.SerializeToString,
            ),
            'SpikesCopyFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesCopyFile,
                    request_deserializer=datasource__pb2.CopyRemoveDataSourceFileRequest.FromString,
                    response_serializer=datasource__pb2.CpRmMvLsReply.SerializeToString,
            ),
            'SpikesRemoveFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesRemoveFile,
                    request_deserializer=datasource__pb2.CopyRemoveDataSourceFileRequest.FromString,
                    response_serializer=datasource__pb2.CpRmMvLsReply.SerializeToString,
            ),
            'SpikesMoveFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesMoveFile,
                    request_deserializer=datasource__pb2.MoveDataSourceFileRequest.FromString,
                    response_serializer=datasource__pb2.CpRmMvLsReply.SerializeToString,
            ),
            'ManageNodeOrganization': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageNodeOrganization,
                    request_deserializer=common__pb2.ManageNodeOrgRequest.FromString,
                    response_serializer=common__pb2.ManageNodeOrgReply.SerializeToString,
            ),
            'ManageNodeLab': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageNodeLab,
                    request_deserializer=common__pb2.ManageNodeLabRequest.FromString,
                    response_serializer=common__pb2.ManageNodeLabReply.SerializeToString,
            ),
            'ManageNodeUser': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageNodeUser,
                    request_deserializer=common__pb2.ManageNodeUserRequest.FromString,
                    response_serializer=common__pb2.ManageNodeUserReply.SerializeToString,
            ),
            'ManageNodeProbe': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageNodeProbe,
                    request_deserializer=common__pb2.ProbeNodeRequest.FromString,
                    response_serializer=common__pb2.ProbeNodeReply.SerializeToString,
            ),
            'ManageEdges': grpc.unary_unary_rpc_method_handler(
                    servicer.ManageEdges,
                    request_deserializer=common__pb2.WorldEdgeRequest.FromString,
                    response_serializer=common__pb2.WorldEdgeReply.SerializeToString,
            ),
            'QueryWorld': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryWorld,
                    request_deserializer=common__pb2.QueryWorldRequest.FromString,
                    response_serializer=common__pb2.QueryWorldReply.SerializeToString,
            ),
            'GetWarehouseSensorComponent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWarehouseSensorComponent,
                    request_deserializer=common__pb2.SensorCompRequest.FromString,
                    response_serializer=common__pb2.GetSensorCompReply.SerializeToString,
            ),
            'ListSensorSpecs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSensorSpecs,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=common__pb2.ListSensorSpecsReply.SerializeToString,
            ),
            'SetSensor': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSensor,
                    request_deserializer=common__pb2.SetSensorRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetSensorPositionTcs': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSensorPositionTcs,
                    request_deserializer=common__pb2.SetSensorPositionTcsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetSitePositionsTcs': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSitePositionsTcs,
                    request_deserializer=common__pb2.SetSitePositionsTcsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'UpdateSignalGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSignalGroup,
                    request_deserializer=common__pb2.UpdateSignalGroupRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetSignalGroupIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignalGroupIDs,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.GetSignalGroupIDsReply.SerializeToString,
            ),
            'GetSignalGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignalGroup,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=common__pb2.SignalGroup.SerializeToString,
            ),
            'GetDataSourceParams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDataSourceParams,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceParams.SerializeToString,
            ),
            'GetSignals': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSignals,
                    request_deserializer=common__pb2.GetSignalsRequest.FromString,
                    response_serializer=common__pb2.RawSignals.SerializeToString,
            ),
            'SetDACStream': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDACStream,
                    request_deserializer=common__pb2.DACStreamRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetHDSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHDSnapshot,
                    request_deserializer=common__pb2.HDSnapshotRequest.FromString,
                    response_serializer=common__pb2.HDSnapshot.SerializeToString,
            ),
            'SetDSPGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDSPGroup,
                    request_deserializer=common__pb2.SetDSPGroupRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetDSPGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDSPGroup,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=common__pb2.DSPGroup.SerializeToString,
            ),
            'ListDataSource': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDataSource,
                    request_deserializer=datasource__pb2.DataSourceRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceStatusMap.SerializeToString,
            ),
            'ListDataSourceIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDataSourceIDs,
                    request_deserializer=datasource__pb2.DataSourceRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceIDReply.SerializeToString,
            ),
            'SetDataSourceFromFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDataSourceFromFile,
                    request_deserializer=datasource__pb2.DataSourceSetSaveRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceSetSaveReply.SerializeToString,
            ),
            'ClearDataSource': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearDataSource,
                    request_deserializer=datasource__pb2.DataSourceRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceIDReply.SerializeToString,
            ),
            'RenameDataSource': grpc.unary_unary_rpc_method_handler(
                    servicer.RenameDataSource,
                    request_deserializer=datasource__pb2.DataSourceRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceIDReply.SerializeToString,
            ),
            'KpiClear': grpc.unary_unary_rpc_method_handler(
                    servicer.KpiClear,
                    request_deserializer=common__pb2.KpiControlRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'KpiCalculate': grpc.unary_unary_rpc_method_handler(
                    servicer.KpiCalculate,
                    request_deserializer=common__pb2.KpiControlRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetKpiStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKpiStatus,
                    request_deserializer=common__pb2.GetKpiStatusRequest.FromString,
                    response_serializer=common__pb2.KpiStatusReply.SerializeToString,
            ),
            'KpiGetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.KpiGetMetrics,
                    request_deserializer=common__pb2.KpiMetricsReq.FromString,
                    response_serializer=common__pb2.KpiBundlePacketMetrics.SerializeToString,
            ),
            'SetKpiUpdatePeriod': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKpiUpdatePeriod,
                    request_deserializer=common__pb2.SetKpiUpdatePeriodRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetKpiThreshold': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKpiThreshold,
                    request_deserializer=common__pb2.SetKpiThresholdRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetKpiEventDetect': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKpiEventDetect,
                    request_deserializer=common__pb2.SetKpiEventDetectRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetKpiEventShadow': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKpiEventShadow,
                    request_deserializer=common__pb2.SetKpiEventShadowRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SetKpiEventWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKpiEventWindow,
                    request_deserializer=common__pb2.SetKpiEventWindowRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpikesSaveToFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesSaveToFile,
                    request_deserializer=datasource__pb2.DataSourceSetSaveRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceFileSetStat.SerializeToString,
            ),
            'SpikesSetFromFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesSetFromFile,
                    request_deserializer=datasource__pb2.DataSourceSetSaveRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceSetSaveReply.SerializeToString,
            ),
            'SpikesGetIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesGetIDs,
                    request_deserializer=datasource__pb2.DataSourceRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceIDReply.SerializeToString,
            ),
            'SpikesRenameID': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesRenameID,
                    request_deserializer=datasource__pb2.DataSourceRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceIDReply.SerializeToString,
            ),
            'SpikesGetAllSummaryInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesGetAllSummaryInfo,
                    request_deserializer=datasource__pb2.DataSourceRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceStatusMap.SerializeToString,
            ),
            'SpikesGetSpec': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesGetSpec,
                    request_deserializer=datasource__pb2.DataSourceRequest.FromString,
                    response_serializer=biointerface__pb2.SpikesSpecReply.SerializeToString,
            ),
            'SpikesDeleteIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesDeleteIDs,
                    request_deserializer=datasource__pb2.DataSourceRequest.FromString,
                    response_serializer=datasource__pb2.DataSourceIDReply.SerializeToString,
            ),
            'BiointerfaceGetSpikesDense': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceGetSpikesDense,
                    request_deserializer=biointerface__pb2.BiointerfaceGetSpikesRequest.FromString,
                    response_serializer=biointerface__pb2.BiointerfaceSpikeDataDenseReply.SerializeToString,
            ),
            'BiointerfaceGetNeurons': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceGetNeurons,
                    request_deserializer=biointerface__pb2.BiointerfaceGetNeuronsRequest.FromString,
                    response_serializer=biointerface__pb2.BiointerfaceGetNeuronsReply.SerializeToString,
            ),
            'BiointerfaceSeekEndSpikeTimestamps': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceSeekEndSpikeTimestamps,
                    request_deserializer=biointerface__pb2.BiointerfaceSeekEndSpikeTimestampsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'BiointerfaceViz': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceViz,
                    request_deserializer=biointerface__pb2.BiointerfaceVizRequest.FromString,
                    response_serializer=biointerface__pb2.BiointerfaceVizReply.SerializeToString,
            ),
            'BiointerfaceListSensorSpecs': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceListSensorSpecs,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=common__pb2.ListSensorSpecsReply.SerializeToString,
            ),
            'BiointerfaceSetSensor': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceSetSensor,
                    request_deserializer=common__pb2.SetSensorRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'BiointerfaceSetSensorPositionTcs': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceSetSensorPositionTcs,
                    request_deserializer=common__pb2.SetSensorPositionTcsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'BiointerfaceSetSitePositionsTcs': grpc.unary_unary_rpc_method_handler(
                    servicer.BiointerfaceSetSitePositionsTcs,
                    request_deserializer=common__pb2.SetSitePositionsTcsRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'FeatureStart': grpc.unary_unary_rpc_method_handler(
                    servicer.FeatureStart,
                    request_deserializer=common__pb2.FeatureStartStopRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'FeatureStop': grpc.unary_unary_rpc_method_handler(
                    servicer.FeatureStop,
                    request_deserializer=common__pb2.FeatureStartStopRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'GetPrivacy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrivacy,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.PrivacyReply.SerializeToString,
            ),
            'SetPrivacy': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPrivacy,
                    request_deserializer=common__pb2.SetPrivacyRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'DeleteSignalGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSignalGroup,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpikesGetSignalGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesGetSignalGroup,
                    request_deserializer=common__pb2.SignalGroupIDRequest.FromString,
                    response_serializer=common__pb2.SignalGroup.SerializeToString,
            ),
            'SetProtocol': grpc.unary_unary_rpc_method_handler(
                    servicer.SetProtocol,
                    request_deserializer=common__pb2.Protocol.FromString,
                    response_serializer=common__pb2.Protocol.SerializeToString,
            ),
            'GetProtocol': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProtocol,
                    request_deserializer=common__pb2.ProtocolRequest.FromString,
                    response_serializer=common__pb2.Protocol.SerializeToString,
            ),
            'RenameProtocol': grpc.unary_unary_rpc_method_handler(
                    servicer.RenameProtocol,
                    request_deserializer=common__pb2.RenameProtocolRequest.FromString,
                    response_serializer=common__pb2.Protocol.SerializeToString,
            ),
            'GetAllProtocols': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllProtocols,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.GetAllProtocolsReply.SerializeToString,
            ),
            'ApplyProtocol': grpc.unary_stream_rpc_method_handler(
                    servicer.ApplyProtocol,
                    request_deserializer=common__pb2.ProtocolRequest.FromString,
                    response_serializer=common__pb2.ApplyProtocolProgress.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allego.RadiensCore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RadiensCore(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Healthcheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/Healthcheck',
            radiensserver__pb2.RadiensHealthcheckRequest.SerializeToString,
            radiensserver__pb2.RadiensHealthcheckSpec.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/Initialize',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/Close',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WorkspaceControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/WorkspaceControl',
            common__pb2.WorkspaceControlRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRadiensServers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetRadiensServers',
            common__pb2.GetRadiensServersRequest.SerializeToString,
            common__pb2.RadiensServersReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetWorkspace',
            common__pb2.GetWorkspaceRequest.SerializeToString,
            common__pb2.GetWorkspaceReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRadixEnvironment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetRadixEnvironment',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.RadixEnvironment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/ListDirectory',
            common__pb2.ListDataSourcesRequest.SerializeToString,
            datasource__pb2.CpRmMvLsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CopyDataSourceFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/CopyDataSourceFile',
            datasource__pb2.CopyRemoveDataSourceFileRequest.SerializeToString,
            datasource__pb2.CpRmMvLsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveDataSourceFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/RemoveDataSourceFile',
            datasource__pb2.CopyRemoveDataSourceFileRequest.SerializeToString,
            datasource__pb2.CpRmMvLsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MoveDataSourceFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/MoveDataSourceFile',
            datasource__pb2.MoveDataSourceFileRequest.SerializeToString,
            datasource__pb2.CpRmMvLsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesListDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesListDirectory',
            common__pb2.ListDataSourcesRequest.SerializeToString,
            datasource__pb2.CpRmMvLsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesCopyFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesCopyFile',
            datasource__pb2.CopyRemoveDataSourceFileRequest.SerializeToString,
            datasource__pb2.CpRmMvLsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesRemoveFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesRemoveFile',
            datasource__pb2.CopyRemoveDataSourceFileRequest.SerializeToString,
            datasource__pb2.CpRmMvLsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesMoveFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesMoveFile',
            datasource__pb2.MoveDataSourceFileRequest.SerializeToString,
            datasource__pb2.CpRmMvLsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ManageNodeOrganization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/ManageNodeOrganization',
            common__pb2.ManageNodeOrgRequest.SerializeToString,
            common__pb2.ManageNodeOrgReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ManageNodeLab(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/ManageNodeLab',
            common__pb2.ManageNodeLabRequest.SerializeToString,
            common__pb2.ManageNodeLabReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ManageNodeUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/ManageNodeUser',
            common__pb2.ManageNodeUserRequest.SerializeToString,
            common__pb2.ManageNodeUserReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ManageNodeProbe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/ManageNodeProbe',
            common__pb2.ProbeNodeRequest.SerializeToString,
            common__pb2.ProbeNodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ManageEdges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/ManageEdges',
            common__pb2.WorldEdgeRequest.SerializeToString,
            common__pb2.WorldEdgeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryWorld(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/QueryWorld',
            common__pb2.QueryWorldRequest.SerializeToString,
            common__pb2.QueryWorldReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWarehouseSensorComponent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetWarehouseSensorComponent',
            common__pb2.SensorCompRequest.SerializeToString,
            common__pb2.GetSensorCompReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSensorSpecs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/ListSensorSpecs',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            common__pb2.ListSensorSpecsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetSensor',
            common__pb2.SetSensorRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSensorPositionTcs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetSensorPositionTcs',
            common__pb2.SetSensorPositionTcsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSitePositionsTcs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetSitePositionsTcs',
            common__pb2.SetSitePositionsTcsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSignalGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/UpdateSignalGroup',
            common__pb2.UpdateSignalGroupRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSignalGroupIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetSignalGroupIDs',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.GetSignalGroupIDsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSignalGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetSignalGroup',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            common__pb2.SignalGroup.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDataSourceParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetDataSourceParams',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            datasource__pb2.DataSourceParams.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetSignals',
            common__pb2.GetSignalsRequest.SerializeToString,
            common__pb2.RawSignals.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDACStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetDACStream',
            common__pb2.DACStreamRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHDSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetHDSnapshot',
            common__pb2.HDSnapshotRequest.SerializeToString,
            common__pb2.HDSnapshot.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDSPGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetDSPGroup',
            common__pb2.SetDSPGroupRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDSPGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetDSPGroup',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            common__pb2.DSPGroup.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDataSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/ListDataSource',
            datasource__pb2.DataSourceRequest.SerializeToString,
            datasource__pb2.DataSourceStatusMap.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDataSourceIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/ListDataSourceIDs',
            datasource__pb2.DataSourceRequest.SerializeToString,
            datasource__pb2.DataSourceIDReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDataSourceFromFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetDataSourceFromFile',
            datasource__pb2.DataSourceSetSaveRequest.SerializeToString,
            datasource__pb2.DataSourceSetSaveReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearDataSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/ClearDataSource',
            datasource__pb2.DataSourceRequest.SerializeToString,
            datasource__pb2.DataSourceIDReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenameDataSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/RenameDataSource',
            datasource__pb2.DataSourceRequest.SerializeToString,
            datasource__pb2.DataSourceIDReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KpiClear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/KpiClear',
            common__pb2.KpiControlRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KpiCalculate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/KpiCalculate',
            common__pb2.KpiControlRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKpiStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetKpiStatus',
            common__pb2.GetKpiStatusRequest.SerializeToString,
            common__pb2.KpiStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KpiGetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/KpiGetMetrics',
            common__pb2.KpiMetricsReq.SerializeToString,
            common__pb2.KpiBundlePacketMetrics.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetKpiUpdatePeriod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetKpiUpdatePeriod',
            common__pb2.SetKpiUpdatePeriodRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetKpiThreshold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetKpiThreshold',
            common__pb2.SetKpiThresholdRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetKpiEventDetect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetKpiEventDetect',
            common__pb2.SetKpiEventDetectRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetKpiEventShadow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetKpiEventShadow',
            common__pb2.SetKpiEventShadowRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetKpiEventWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetKpiEventWindow',
            common__pb2.SetKpiEventWindowRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesSaveToFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesSaveToFile',
            datasource__pb2.DataSourceSetSaveRequest.SerializeToString,
            datasource__pb2.DataSourceFileSetStat.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesSetFromFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesSetFromFile',
            datasource__pb2.DataSourceSetSaveRequest.SerializeToString,
            datasource__pb2.DataSourceSetSaveReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesGetIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesGetIDs',
            datasource__pb2.DataSourceRequest.SerializeToString,
            datasource__pb2.DataSourceIDReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesRenameID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesRenameID',
            datasource__pb2.DataSourceRequest.SerializeToString,
            datasource__pb2.DataSourceIDReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesGetAllSummaryInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesGetAllSummaryInfo',
            datasource__pb2.DataSourceRequest.SerializeToString,
            datasource__pb2.DataSourceStatusMap.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesGetSpec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesGetSpec',
            datasource__pb2.DataSourceRequest.SerializeToString,
            biointerface__pb2.SpikesSpecReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesDeleteIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesDeleteIDs',
            datasource__pb2.DataSourceRequest.SerializeToString,
            datasource__pb2.DataSourceIDReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BiointerfaceGetSpikesDense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/BiointerfaceGetSpikesDense',
            biointerface__pb2.BiointerfaceGetSpikesRequest.SerializeToString,
            biointerface__pb2.BiointerfaceSpikeDataDenseReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BiointerfaceGetNeurons(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/BiointerfaceGetNeurons',
            biointerface__pb2.BiointerfaceGetNeuronsRequest.SerializeToString,
            biointerface__pb2.BiointerfaceGetNeuronsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BiointerfaceSeekEndSpikeTimestamps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/BiointerfaceSeekEndSpikeTimestamps',
            biointerface__pb2.BiointerfaceSeekEndSpikeTimestampsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BiointerfaceViz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/BiointerfaceViz',
            biointerface__pb2.BiointerfaceVizRequest.SerializeToString,
            biointerface__pb2.BiointerfaceVizReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BiointerfaceListSensorSpecs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/BiointerfaceListSensorSpecs',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            common__pb2.ListSensorSpecsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BiointerfaceSetSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/BiointerfaceSetSensor',
            common__pb2.SetSensorRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BiointerfaceSetSensorPositionTcs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/BiointerfaceSetSensorPositionTcs',
            common__pb2.SetSensorPositionTcsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BiointerfaceSetSitePositionsTcs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/BiointerfaceSetSitePositionsTcs',
            common__pb2.SetSitePositionsTcsRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeatureStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/FeatureStart',
            common__pb2.FeatureStartStopRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeatureStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/FeatureStop',
            common__pb2.FeatureStartStopRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrivacy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetPrivacy',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.PrivacyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPrivacy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetPrivacy',
            common__pb2.SetPrivacyRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSignalGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/DeleteSignalGroup',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesGetSignalGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SpikesGetSignalGroup',
            common__pb2.SignalGroupIDRequest.SerializeToString,
            common__pb2.SignalGroup.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetProtocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/SetProtocol',
            common__pb2.Protocol.SerializeToString,
            common__pb2.Protocol.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProtocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetProtocol',
            common__pb2.ProtocolRequest.SerializeToString,
            common__pb2.Protocol.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenameProtocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/RenameProtocol',
            common__pb2.RenameProtocolRequest.SerializeToString,
            common__pb2.Protocol.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllProtocols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensCore/GetAllProtocols',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.GetAllProtocolsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApplyProtocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/allego.RadiensCore/ApplyProtocol',
            common__pb2.ProtocolRequest.SerializeToString,
            common__pb2.ApplyProtocolProgress.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RadiensSpikeSorter1Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Healthcheck = channel.unary_unary(
                '/allego.RadiensSpikeSorter1/Healthcheck',
                request_serializer=radiensserver__pb2.RadiensHealthcheckRequest.SerializeToString,
                response_deserializer=radiensserver__pb2.RadiensHealthcheckSpec.FromString,
                )
        self.SpikeSorterCommand = channel.unary_unary(
                '/allego.RadiensSpikeSorter1/SpikeSorterCommand',
                request_serializer=spikesorter__pb2.SpikeSorterCommandRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SpikeSorterSetParam = channel.unary_unary(
                '/allego.RadiensSpikeSorter1/SpikeSorterSetParam',
                request_serializer=common__pb2.SpikeSorterSetParamRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SpikeSorterGetParam = channel.unary_unary(
                '/allego.RadiensSpikeSorter1/SpikeSorterGetParam',
                request_serializer=spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.GetSpikeSorterParamCommandReply.FromString,
                )
        self.SpikeSorterGetState = channel.unary_unary(
                '/allego.RadiensSpikeSorter1/SpikeSorterGetState',
                request_serializer=spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.SpikeSorterState.FromString,
                )
        self.SpikeSorterGetDashboard = channel.unary_unary(
                '/allego.RadiensSpikeSorter1/SpikeSorterGetDashboard',
                request_serializer=spikesorter__pb2.SpikeSorterGetDashboardRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.SpikeSorterGetDashboardReply.FromString,
                )
        self.SpikeSorterGetRasterData = channel.unary_unary(
                '/allego.RadiensSpikeSorter1/SpikeSorterGetRasterData',
                request_serializer=spikesorter__pb2.SpikeSorterGetRasterDataRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.SpikeSorterRasterDataReply.FromString,
                )
        self.SpikeSorterWrangleData = channel.unary_unary(
                '/allego.RadiensSpikeSorter1/SpikeSorterWrangleData',
                request_serializer=common__pb2.WrangleRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SpikeSorterLaunch = channel.unary_unary(
                '/allego.RadiensSpikeSorter1/SpikeSorterLaunch',
                request_serializer=spikesorter__pb2.SpikeSorterLaunchRequest.SerializeToString,
                response_deserializer=spikesorter__pb2.SpikeSorterGetIDsReply.FromString,
                )
        self.SpikeSorterDelete = channel.unary_unary(
                '/allego.RadiensSpikeSorter1/SpikeSorterDelete',
                request_serializer=spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )


class RadiensSpikeSorter1Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def Healthcheck(self, request, context):
        """Lifecycle
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterCommand(self, request, context):
        """common with allegoserver
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterSetParam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterGetParam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterGetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterGetDashboard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterGetRasterData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterWrangleData(self, request, context):
        """specific to radiensserver
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterLaunch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikeSorterDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RadiensSpikeSorter1Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Healthcheck': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthcheck,
                    request_deserializer=radiensserver__pb2.RadiensHealthcheckRequest.FromString,
                    response_serializer=radiensserver__pb2.RadiensHealthcheckSpec.SerializeToString,
            ),
            'SpikeSorterCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterCommand,
                    request_deserializer=spikesorter__pb2.SpikeSorterCommandRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpikeSorterSetParam': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterSetParam,
                    request_deserializer=common__pb2.SpikeSorterSetParamRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpikeSorterGetParam': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterGetParam,
                    request_deserializer=spikesorter__pb2.SpikeSorterStandardRequest.FromString,
                    response_serializer=spikesorter__pb2.GetSpikeSorterParamCommandReply.SerializeToString,
            ),
            'SpikeSorterGetState': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterGetState,
                    request_deserializer=spikesorter__pb2.SpikeSorterStandardRequest.FromString,
                    response_serializer=spikesorter__pb2.SpikeSorterState.SerializeToString,
            ),
            'SpikeSorterGetDashboard': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterGetDashboard,
                    request_deserializer=spikesorter__pb2.SpikeSorterGetDashboardRequest.FromString,
                    response_serializer=spikesorter__pb2.SpikeSorterGetDashboardReply.SerializeToString,
            ),
            'SpikeSorterGetRasterData': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterGetRasterData,
                    request_deserializer=spikesorter__pb2.SpikeSorterGetRasterDataRequest.FromString,
                    response_serializer=spikesorter__pb2.SpikeSorterRasterDataReply.SerializeToString,
            ),
            'SpikeSorterWrangleData': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterWrangleData,
                    request_deserializer=common__pb2.WrangleRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpikeSorterLaunch': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterLaunch,
                    request_deserializer=spikesorter__pb2.SpikeSorterLaunchRequest.FromString,
                    response_serializer=spikesorter__pb2.SpikeSorterGetIDsReply.SerializeToString,
            ),
            'SpikeSorterDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikeSorterDelete,
                    request_deserializer=spikesorter__pb2.SpikeSorterStandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allego.RadiensSpikeSorter1', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RadiensSpikeSorter1(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Healthcheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensSpikeSorter1/Healthcheck',
            radiensserver__pb2.RadiensHealthcheckRequest.SerializeToString,
            radiensserver__pb2.RadiensHealthcheckSpec.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikeSorterCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensSpikeSorter1/SpikeSorterCommand',
            spikesorter__pb2.SpikeSorterCommandRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikeSorterSetParam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensSpikeSorter1/SpikeSorterSetParam',
            common__pb2.SpikeSorterSetParamRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikeSorterGetParam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensSpikeSorter1/SpikeSorterGetParam',
            spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
            spikesorter__pb2.GetSpikeSorterParamCommandReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikeSorterGetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensSpikeSorter1/SpikeSorterGetState',
            spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
            spikesorter__pb2.SpikeSorterState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikeSorterGetDashboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensSpikeSorter1/SpikeSorterGetDashboard',
            spikesorter__pb2.SpikeSorterGetDashboardRequest.SerializeToString,
            spikesorter__pb2.SpikeSorterGetDashboardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikeSorterGetRasterData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensSpikeSorter1/SpikeSorterGetRasterData',
            spikesorter__pb2.SpikeSorterGetRasterDataRequest.SerializeToString,
            spikesorter__pb2.SpikeSorterRasterDataReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikeSorterWrangleData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensSpikeSorter1/SpikeSorterWrangleData',
            common__pb2.WrangleRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikeSorterLaunch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensSpikeSorter1/SpikeSorterLaunch',
            spikesorter__pb2.SpikeSorterLaunchRequest.SerializeToString,
            spikesorter__pb2.SpikeSorterGetIDsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikeSorterDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensSpikeSorter1/SpikeSorterDelete',
            spikesorter__pb2.SpikeSorterStandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RadiensDev1Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Healthcheck = channel.unary_unary(
                '/allego.RadiensDev1/Healthcheck',
                request_serializer=radiensserver__pb2.RadiensHealthcheckRequest.SerializeToString,
                response_deserializer=radiensserver__pb2.RadiensHealthcheckSpec.FromString,
                )
        self.SpkSortTrainerMakeNewModel = channel.unary_unary(
                '/allego.RadiensDev1/SpkSortTrainerMakeNewModel',
                request_serializer=radiens__dev__pb2.SpkSortTrainerNewReq.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SpkSortTrainerMakeDefaultProdModels = channel.unary_unary(
                '/allego.RadiensDev1/SpkSortTrainerMakeDefaultProdModels',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SpkSortTrainerListLocalNetworkModels = channel.unary_unary(
                '/allego.RadiensDev1/SpkSortTrainerListLocalNetworkModels',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=radiens__dev__pb2.SpkSortTrainerStatusReply.FromString,
                )
        self.SpkSortTrainerDeleteLocalNetworkModels = channel.unary_unary(
                '/allego.RadiensDev1/SpkSortTrainerDeleteLocalNetworkModels',
                request_serializer=radiens__dev__pb2.SpkSortTrainerDeleteModelReq.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.SpkSortTrainerGetStatus = channel.unary_unary(
                '/allego.RadiensDev1/SpkSortTrainerGetStatus',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=radiens__dev__pb2.SpkSortTrainerStatusReply.FromString,
                )


class RadiensDev1Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def Healthcheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpkSortTrainerMakeNewModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpkSortTrainerMakeDefaultProdModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpkSortTrainerListLocalNetworkModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpkSortTrainerDeleteLocalNetworkModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpkSortTrainerGetStatus(self, request, context):
        """getters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RadiensDev1Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Healthcheck': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthcheck,
                    request_deserializer=radiensserver__pb2.RadiensHealthcheckRequest.FromString,
                    response_serializer=radiensserver__pb2.RadiensHealthcheckSpec.SerializeToString,
            ),
            'SpkSortTrainerMakeNewModel': grpc.unary_unary_rpc_method_handler(
                    servicer.SpkSortTrainerMakeNewModel,
                    request_deserializer=radiens__dev__pb2.SpkSortTrainerNewReq.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpkSortTrainerMakeDefaultProdModels': grpc.unary_unary_rpc_method_handler(
                    servicer.SpkSortTrainerMakeDefaultProdModels,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpkSortTrainerListLocalNetworkModels': grpc.unary_unary_rpc_method_handler(
                    servicer.SpkSortTrainerListLocalNetworkModels,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=radiens__dev__pb2.SpkSortTrainerStatusReply.SerializeToString,
            ),
            'SpkSortTrainerDeleteLocalNetworkModels': grpc.unary_unary_rpc_method_handler(
                    servicer.SpkSortTrainerDeleteLocalNetworkModels,
                    request_deserializer=radiens__dev__pb2.SpkSortTrainerDeleteModelReq.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'SpkSortTrainerGetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SpkSortTrainerGetStatus,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=radiens__dev__pb2.SpkSortTrainerStatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allego.RadiensDev1', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RadiensDev1(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Healthcheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensDev1/Healthcheck',
            radiensserver__pb2.RadiensHealthcheckRequest.SerializeToString,
            radiensserver__pb2.RadiensHealthcheckSpec.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpkSortTrainerMakeNewModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensDev1/SpkSortTrainerMakeNewModel',
            radiens__dev__pb2.SpkSortTrainerNewReq.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpkSortTrainerMakeDefaultProdModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensDev1/SpkSortTrainerMakeDefaultProdModels',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpkSortTrainerListLocalNetworkModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensDev1/SpkSortTrainerListLocalNetworkModels',
            common__pb2.StandardRequest.SerializeToString,
            radiens__dev__pb2.SpkSortTrainerStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpkSortTrainerDeleteLocalNetworkModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensDev1/SpkSortTrainerDeleteLocalNetworkModels',
            radiens__dev__pb2.SpkSortTrainerDeleteModelReq.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpkSortTrainerGetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.RadiensDev1/SpkSortTrainerGetStatus',
            common__pb2.StandardRequest.SerializeToString,
            radiens__dev__pb2.SpkSortTrainerStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
