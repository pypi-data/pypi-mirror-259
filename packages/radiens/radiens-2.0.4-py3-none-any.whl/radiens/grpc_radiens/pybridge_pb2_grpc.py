# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import common_pb2 as common__pb2
from . import pybridge_pb2 as pybridge__pb2


class PyBridgeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Healthcheck = channel.unary_unary(
                '/allego.PyBridge/Healthcheck',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.Close = channel.unary_unary(
                '/allego.PyBridge/Close',
                request_serializer=common__pb2.StandardRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.IirFilterDesign = channel.unary_unary(
                '/allego.PyBridge/IirFilterDesign',
                request_serializer=pybridge__pb2.PyBridgeIirFilterDesignRequest.SerializeToString,
                response_deserializer=pybridge__pb2.PyBridgeIirFilterDesignReply.FromString,
                )
        self.FileOpen = channel.unary_unary(
                '/allego.PyBridge/FileOpen',
                request_serializer=pybridge__pb2.PyBridgeFileOpenRequest.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.FileGetStatus = channel.unary_unary(
                '/allego.PyBridge/FileGetStatus',
                request_serializer=pybridge__pb2.PyBridgeFileStandardRequest.SerializeToString,
                response_deserializer=pybridge__pb2.PyBridgeGetStatusReply.FromString,
                )
        self.FileGetSpec = channel.unary_unary(
                '/allego.PyBridge/FileGetSpec',
                request_serializer=pybridge__pb2.PyBridgeFileStandardRequest.SerializeToString,
                response_deserializer=pybridge__pb2.PyBridgeGetSpecReply.FromString,
                )
        self.FileGetSignals = channel.unary_unary(
                '/allego.PyBridge/FileGetSignals',
                request_serializer=pybridge__pb2.PyBridgeGetSignalsRequest.SerializeToString,
                response_deserializer=pybridge__pb2.PyBridgeGetSignalsReply.FromString,
                )
        self.SpikesPushToExportFile = channel.unary_unary(
                '/allego.PyBridge/SpikesPushToExportFile',
                request_serializer=pybridge__pb2.SpikesPushToExportReq.SerializeToString,
                response_deserializer=common__pb2.StandardReply.FromString,
                )
        self.StreamingRequest = channel.stream_unary(
                '/allego.PyBridge/StreamingRequest',
                request_serializer=pybridge__pb2.Request.SerializeToString,
                response_deserializer=pybridge__pb2.Reply.FromString,
                )
        self.StreamingReply = channel.unary_stream(
                '/allego.PyBridge/StreamingReply',
                request_serializer=pybridge__pb2.Request.SerializeToString,
                response_deserializer=pybridge__pb2.Reply.FromString,
                )
        self.StreamingBidirectional = channel.stream_stream(
                '/allego.PyBridge/StreamingBidirectional',
                request_serializer=pybridge__pb2.Request.SerializeToString,
                response_deserializer=pybridge__pb2.Reply.FromString,
                )


class PyBridgeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Healthcheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IirFilterDesign(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FileOpen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FileGetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FileGetSpec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FileGetSignals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpikesPushToExportFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingRequest(self, request_iterator, context):
        """template functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingReply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingBidirectional(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PyBridgeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Healthcheck': grpc.unary_unary_rpc_method_handler(
                    servicer.Healthcheck,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=common__pb2.StandardRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'IirFilterDesign': grpc.unary_unary_rpc_method_handler(
                    servicer.IirFilterDesign,
                    request_deserializer=pybridge__pb2.PyBridgeIirFilterDesignRequest.FromString,
                    response_serializer=pybridge__pb2.PyBridgeIirFilterDesignReply.SerializeToString,
            ),
            'FileOpen': grpc.unary_unary_rpc_method_handler(
                    servicer.FileOpen,
                    request_deserializer=pybridge__pb2.PyBridgeFileOpenRequest.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'FileGetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.FileGetStatus,
                    request_deserializer=pybridge__pb2.PyBridgeFileStandardRequest.FromString,
                    response_serializer=pybridge__pb2.PyBridgeGetStatusReply.SerializeToString,
            ),
            'FileGetSpec': grpc.unary_unary_rpc_method_handler(
                    servicer.FileGetSpec,
                    request_deserializer=pybridge__pb2.PyBridgeFileStandardRequest.FromString,
                    response_serializer=pybridge__pb2.PyBridgeGetSpecReply.SerializeToString,
            ),
            'FileGetSignals': grpc.unary_unary_rpc_method_handler(
                    servicer.FileGetSignals,
                    request_deserializer=pybridge__pb2.PyBridgeGetSignalsRequest.FromString,
                    response_serializer=pybridge__pb2.PyBridgeGetSignalsReply.SerializeToString,
            ),
            'SpikesPushToExportFile': grpc.unary_unary_rpc_method_handler(
                    servicer.SpikesPushToExportFile,
                    request_deserializer=pybridge__pb2.SpikesPushToExportReq.FromString,
                    response_serializer=common__pb2.StandardReply.SerializeToString,
            ),
            'StreamingRequest': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamingRequest,
                    request_deserializer=pybridge__pb2.Request.FromString,
                    response_serializer=pybridge__pb2.Reply.SerializeToString,
            ),
            'StreamingReply': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamingReply,
                    request_deserializer=pybridge__pb2.Request.FromString,
                    response_serializer=pybridge__pb2.Reply.SerializeToString,
            ),
            'StreamingBidirectional': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingBidirectional,
                    request_deserializer=pybridge__pb2.Request.FromString,
                    response_serializer=pybridge__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'allego.PyBridge', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PyBridge(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Healthcheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.PyBridge/Healthcheck',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.PyBridge/Close',
            common__pb2.StandardRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IirFilterDesign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.PyBridge/IirFilterDesign',
            pybridge__pb2.PyBridgeIirFilterDesignRequest.SerializeToString,
            pybridge__pb2.PyBridgeIirFilterDesignReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FileOpen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.PyBridge/FileOpen',
            pybridge__pb2.PyBridgeFileOpenRequest.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FileGetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.PyBridge/FileGetStatus',
            pybridge__pb2.PyBridgeFileStandardRequest.SerializeToString,
            pybridge__pb2.PyBridgeGetStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FileGetSpec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.PyBridge/FileGetSpec',
            pybridge__pb2.PyBridgeFileStandardRequest.SerializeToString,
            pybridge__pb2.PyBridgeGetSpecReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FileGetSignals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.PyBridge/FileGetSignals',
            pybridge__pb2.PyBridgeGetSignalsRequest.SerializeToString,
            pybridge__pb2.PyBridgeGetSignalsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SpikesPushToExportFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/allego.PyBridge/SpikesPushToExportFile',
            pybridge__pb2.SpikesPushToExportReq.SerializeToString,
            common__pb2.StandardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingRequest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/allego.PyBridge/StreamingRequest',
            pybridge__pb2.Request.SerializeToString,
            pybridge__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingReply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/allego.PyBridge/StreamingReply',
            pybridge__pb2.Request.SerializeToString,
            pybridge__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingBidirectional(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/allego.PyBridge/StreamingBidirectional',
            pybridge__pb2.Request.SerializeToString,
            pybridge__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
