# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import common_pb2 as common__pb2
from . import pyradiens_pb2 as pyradiens__pb2


class PyRadiensStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Healthcheck = channel.unary_unary(
        '/allego.PyRadiens/Healthcheck',
        request_serializer=common__pb2.StandardRequest.SerializeToString,
        response_deserializer=common__pb2.StandardReply.FromString,
        )
    self.Close = channel.unary_unary(
        '/allego.PyRadiens/Close',
        request_serializer=common__pb2.StandardRequest.SerializeToString,
        response_deserializer=common__pb2.StandardReply.FromString,
        )
    self.StreamingRequest = channel.stream_unary(
        '/allego.PyRadiens/StreamingRequest',
        request_serializer=pyradiens__pb2.Request2.SerializeToString,
        response_deserializer=pyradiens__pb2.Reply2.FromString,
        )
    self.StreamingReply = channel.unary_stream(
        '/allego.PyRadiens/StreamingReply',
        request_serializer=pyradiens__pb2.Request2.SerializeToString,
        response_deserializer=pyradiens__pb2.Reply2.FromString,
        )
    self.StreamingBidirectional = channel.stream_stream(
        '/allego.PyRadiens/StreamingBidirectional',
        request_serializer=pyradiens__pb2.Request2.SerializeToString,
        response_deserializer=pyradiens__pb2.Reply2.FromString,
        )


class PyRadiensServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Healthcheck(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Close(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamingRequest(self, request_iterator, context):
    """template functions
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamingReply(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamingBidirectional(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PyRadiensServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Healthcheck': grpc.unary_unary_rpc_method_handler(
          servicer.Healthcheck,
          request_deserializer=common__pb2.StandardRequest.FromString,
          response_serializer=common__pb2.StandardReply.SerializeToString,
      ),
      'Close': grpc.unary_unary_rpc_method_handler(
          servicer.Close,
          request_deserializer=common__pb2.StandardRequest.FromString,
          response_serializer=common__pb2.StandardReply.SerializeToString,
      ),
      'StreamingRequest': grpc.stream_unary_rpc_method_handler(
          servicer.StreamingRequest,
          request_deserializer=pyradiens__pb2.Request2.FromString,
          response_serializer=pyradiens__pb2.Reply2.SerializeToString,
      ),
      'StreamingReply': grpc.unary_stream_rpc_method_handler(
          servicer.StreamingReply,
          request_deserializer=pyradiens__pb2.Request2.FromString,
          response_serializer=pyradiens__pb2.Reply2.SerializeToString,
      ),
      'StreamingBidirectional': grpc.stream_stream_rpc_method_handler(
          servicer.StreamingBidirectional,
          request_deserializer=pyradiens__pb2.Request2.FromString,
          response_serializer=pyradiens__pb2.Reply2.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'allego.PyRadiens', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
