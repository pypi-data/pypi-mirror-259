# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from overseerr_api.models.plex_connection import PlexConnection

class PlexDevice(BaseModel):
    """
    PlexDevice
    """
    access_token: Optional[StrictStr] = Field(None, alias="accessToken")
    client_identifier: StrictStr = Field(..., alias="clientIdentifier")
    connection: conlist(PlexConnection) = Field(...)
    created_at: StrictStr = Field(..., alias="createdAt")
    device: StrictStr = Field(...)
    dns_rebinding_protection: Optional[StrictBool] = Field(None, alias="dnsRebindingProtection")
    home: Optional[StrictBool] = None
    https_required: Optional[StrictBool] = Field(None, alias="httpsRequired")
    last_seen_at: StrictStr = Field(..., alias="lastSeenAt")
    name: StrictStr = Field(...)
    nat_loopback_supported: Optional[StrictBool] = Field(None, alias="natLoopbackSupported")
    owned: StrictBool = Field(...)
    owner_id: Optional[StrictStr] = Field(None, alias="ownerID")
    platform: StrictStr = Field(...)
    platform_version: Optional[StrictStr] = Field(None, alias="platformVersion")
    presence: Optional[StrictBool] = None
    product: StrictStr = Field(...)
    product_version: StrictStr = Field(..., alias="productVersion")
    provides: conlist(StrictStr) = Field(...)
    public_address: Optional[StrictStr] = Field(None, alias="publicAddress")
    public_address_matches: Optional[StrictBool] = Field(None, alias="publicAddressMatches")
    relay: Optional[StrictBool] = None
    source_title: Optional[StrictStr] = Field(None, alias="sourceTitle")
    synced: Optional[StrictBool] = None
    __properties = ["accessToken", "clientIdentifier", "connection", "createdAt", "device", "dnsRebindingProtection", "home", "httpsRequired", "lastSeenAt", "name", "natLoopbackSupported", "owned", "ownerID", "platform", "platformVersion", "presence", "product", "productVersion", "provides", "publicAddress", "publicAddressMatches", "relay", "sourceTitle", "synced"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlexDevice:
        """Create an instance of PlexDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in connection (list)
        _items = []
        if self.connection:
            for _item in self.connection:
                if _item:
                    _items.append(_item.to_dict())
            _dict['connection'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlexDevice:
        """Create an instance of PlexDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlexDevice.parse_obj(obj)

        _obj = PlexDevice.parse_obj({
            "access_token": obj.get("accessToken"),
            "client_identifier": obj.get("clientIdentifier"),
            "connection": [PlexConnection.from_dict(_item) for _item in obj.get("connection")] if obj.get("connection") is not None else None,
            "created_at": obj.get("createdAt"),
            "device": obj.get("device"),
            "dns_rebinding_protection": obj.get("dnsRebindingProtection"),
            "home": obj.get("home"),
            "https_required": obj.get("httpsRequired"),
            "last_seen_at": obj.get("lastSeenAt"),
            "name": obj.get("name"),
            "nat_loopback_supported": obj.get("natLoopbackSupported"),
            "owned": obj.get("owned"),
            "owner_id": obj.get("ownerID"),
            "platform": obj.get("platform"),
            "platform_version": obj.get("platformVersion"),
            "presence": obj.get("presence"),
            "product": obj.get("product"),
            "product_version": obj.get("productVersion"),
            "provides": obj.get("provides"),
            "public_address": obj.get("publicAddress"),
            "public_address_matches": obj.get("publicAddressMatches"),
            "relay": obj.get("relay"),
            "source_title": obj.get("sourceTitle"),
            "synced": obj.get("synced")
        })
        return _obj


