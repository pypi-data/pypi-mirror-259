# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class Episode(BaseModel):
    """
    Episode
    """
    air_date: Optional[StrictStr] = Field(None, alias="airDate")
    episode_number: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="episodeNumber")
    id: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    overview: Optional[StrictStr] = None
    production_code: Optional[StrictStr] = Field(None, alias="productionCode")
    season_number: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="seasonNumber")
    show_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="showId")
    still_path: Optional[StrictStr] = Field(None, alias="stillPath")
    vote_average: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="voteAverage")
    vote_count: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="voteCount")
    __properties = ["airDate", "episodeNumber", "id", "name", "overview", "productionCode", "seasonNumber", "showId", "stillPath", "voteAverage", "voteCount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Episode:
        """Create an instance of Episode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if air_date (nullable) is None
        # and __fields_set__ contains the field
        if self.air_date is None and "air_date" in self.__fields_set__:
            _dict['airDate'] = None

        # set to None if still_path (nullable) is None
        # and __fields_set__ contains the field
        if self.still_path is None and "still_path" in self.__fields_set__:
            _dict['stillPath'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Episode:
        """Create an instance of Episode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Episode.parse_obj(obj)

        _obj = Episode.parse_obj({
            "air_date": obj.get("airDate"),
            "episode_number": obj.get("episodeNumber"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "overview": obj.get("overview"),
            "production_code": obj.get("productionCode"),
            "season_number": obj.get("seasonNumber"),
            "show_id": obj.get("showId"),
            "still_path": obj.get("stillPath"),
            "vote_average": obj.get("voteAverage"),
            "vote_count": obj.get("voteCount")
        })
        return _obj


