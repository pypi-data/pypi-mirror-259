# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class MediaInfo(BaseModel):
    """
    MediaInfo
    """
    created_at: Optional[StrictStr] = Field(None, alias="createdAt")
    id: Optional[Union[StrictFloat, StrictInt]] = None
    requests: Optional[conlist(MediaRequest)] = None
    status: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Availability of the media. 1 = `UNKNOWN`, 2 = `PENDING`, 3 = `PROCESSING`, 4 = `PARTIALLY_AVAILABLE`, 5 = `AVAILABLE`")
    tmdb_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="tmdbId")
    tvdb_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="tvdbId")
    updated_at: Optional[StrictStr] = Field(None, alias="updatedAt")
    __properties = ["createdAt", "id", "requests", "status", "tmdbId", "tvdbId", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MediaInfo:
        """Create an instance of MediaInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "created_at",
                            "id",
                            "requests",
                            "tmdb_id",
                            "tvdb_id",
                            "updated_at",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in requests (list)
        _items = []
        if self.requests:
            for _item in self.requests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['requests'] = _items
        # set to None if tvdb_id (nullable) is None
        # and __fields_set__ contains the field
        if self.tvdb_id is None and "tvdb_id" in self.__fields_set__:
            _dict['tvdbId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MediaInfo:
        """Create an instance of MediaInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MediaInfo.parse_obj(obj)

        _obj = MediaInfo.parse_obj({
            "created_at": obj.get("createdAt"),
            "id": obj.get("id"),
            "requests": [MediaRequest.from_dict(_item) for _item in obj.get("requests")] if obj.get("requests") is not None else None,
            "status": obj.get("status"),
            "tmdb_id": obj.get("tmdbId"),
            "tvdb_id": obj.get("tvdbId"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj

from overseerr_api.models.media_request import MediaRequest
MediaInfo.update_forward_refs()

