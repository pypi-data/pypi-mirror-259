# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from pydantic import StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union

from overseerr_api.models.discover_genreslider_movie_get200_response_inner import DiscoverGenresliderMovieGet200ResponseInner
from overseerr_api.models.discover_keyword_keyword_id_movies_get200_response import DiscoverKeywordKeywordIdMoviesGet200Response
from overseerr_api.models.discover_movies_genre_genre_id_get200_response import DiscoverMoviesGenreGenreIdGet200Response
from overseerr_api.models.discover_movies_language_language_get200_response import DiscoverMoviesLanguageLanguageGet200Response
from overseerr_api.models.discover_movies_studio_studio_id_get200_response import DiscoverMoviesStudioStudioIdGet200Response
from overseerr_api.models.discover_trending_get200_response import DiscoverTrendingGet200Response
from overseerr_api.models.discover_tv_genre_genre_id_get200_response import DiscoverTvGenreGenreIdGet200Response
from overseerr_api.models.discover_tv_get200_response import DiscoverTvGet200Response
from overseerr_api.models.discover_tv_language_language_get200_response import DiscoverTvLanguageLanguageGet200Response
from overseerr_api.models.discover_tv_network_network_id_get200_response import DiscoverTvNetworkNetworkIdGet200Response
from overseerr_api.models.discover_watchlist_get200_response import DiscoverWatchlistGet200Response
from overseerr_api.models.search_company_get200_response import SearchCompanyGet200Response
from overseerr_api.models.search_keyword_get200_response import SearchKeywordGet200Response

from overseerr_api.api_client import ApiClient
from overseerr_api.api_response import ApiResponse
from overseerr_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def discover_genreslider_movie_get(self, language : Optional[StrictStr] = None, **kwargs) -> List[DiscoverGenresliderMovieGet200ResponseInner]:  # noqa: E501
        """Get genre slider data for movies  # noqa: E501

        Returns a list of genres with backdrops attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_genreslider_movie_get(language, async_req=True)
        >>> result = thread.get()

        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[DiscoverGenresliderMovieGet200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_genreslider_movie_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_genreslider_movie_get_with_http_info(language, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_genreslider_movie_get_with_http_info(self, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get genre slider data for movies  # noqa: E501

        Returns a list of genres with backdrops attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_genreslider_movie_get_with_http_info(language, async_req=True)
        >>> result = thread.get()

        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[DiscoverGenresliderMovieGet200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_genreslider_movie_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[DiscoverGenresliderMovieGet200ResponseInner]",
        }

        return self.api_client.call_api(
            '/discover/genreslider/movie', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_genreslider_tv_get(self, language : Optional[StrictStr] = None, **kwargs) -> List[DiscoverGenresliderMovieGet200ResponseInner]:  # noqa: E501
        """Get genre slider data for TV series  # noqa: E501

        Returns a list of genres with backdrops attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_genreslider_tv_get(language, async_req=True)
        >>> result = thread.get()

        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[DiscoverGenresliderMovieGet200ResponseInner]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_genreslider_tv_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_genreslider_tv_get_with_http_info(language, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_genreslider_tv_get_with_http_info(self, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get genre slider data for TV series  # noqa: E501

        Returns a list of genres with backdrops attached  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_genreslider_tv_get_with_http_info(language, async_req=True)
        >>> result = thread.get()

        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[DiscoverGenresliderMovieGet200ResponseInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_genreslider_tv_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[DiscoverGenresliderMovieGet200ResponseInner]",
        }

        return self.api_client.call_api(
            '/discover/genreslider/tv', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_keyword_keyword_id_movies_get(self, keyword_id : Union[StrictFloat, StrictInt], page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> DiscoverKeywordKeywordIdMoviesGet200Response:  # noqa: E501
        """Get movies from keyword  # noqa: E501

        Returns list of movies based on the provided keyword ID a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_keyword_keyword_id_movies_get(keyword_id, page, language, async_req=True)
        >>> result = thread.get()

        :param keyword_id: (required)
        :type keyword_id: float
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverKeywordKeywordIdMoviesGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_keyword_keyword_id_movies_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_keyword_keyword_id_movies_get_with_http_info(keyword_id, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_keyword_keyword_id_movies_get_with_http_info(self, keyword_id : Union[StrictFloat, StrictInt], page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get movies from keyword  # noqa: E501

        Returns list of movies based on the provided keyword ID a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_keyword_keyword_id_movies_get_with_http_info(keyword_id, page, language, async_req=True)
        >>> result = thread.get()

        :param keyword_id: (required)
        :type keyword_id: float
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverKeywordKeywordIdMoviesGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'keyword_id',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_keyword_keyword_id_movies_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['keyword_id'] is not None:
            _path_params['keywordId'] = _params['keyword_id']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverKeywordKeywordIdMoviesGet200Response",
        }

        return self.api_client.call_api(
            '/discover/keyword/{keywordId}/movies', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_movies_genre_genre_id_get(self, genre_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> DiscoverMoviesGenreGenreIdGet200Response:  # noqa: E501
        """Discover movies by genre  # noqa: E501

        Returns a list of movies based on the provided genre ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_movies_genre_genre_id_get(genre_id, page, language, async_req=True)
        >>> result = thread.get()

        :param genre_id: (required)
        :type genre_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverMoviesGenreGenreIdGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_movies_genre_genre_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_movies_genre_genre_id_get_with_http_info(genre_id, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_movies_genre_genre_id_get_with_http_info(self, genre_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Discover movies by genre  # noqa: E501

        Returns a list of movies based on the provided genre ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_movies_genre_genre_id_get_with_http_info(genre_id, page, language, async_req=True)
        >>> result = thread.get()

        :param genre_id: (required)
        :type genre_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverMoviesGenreGenreIdGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'genre_id',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_movies_genre_genre_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['genre_id'] is not None:
            _path_params['genreId'] = _params['genre_id']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverMoviesGenreGenreIdGet200Response",
        }

        return self.api_client.call_api(
            '/discover/movies/genre/{genreId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_movies_get(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, genre : Optional[StrictStr] = None, studio : Optional[Union[StrictFloat, StrictInt]] = None, keywords : Optional[StrictStr] = None, sort_by : Optional[StrictStr] = None, primary_release_date_gte : Optional[StrictStr] = None, primary_release_date_lte : Optional[StrictStr] = None, with_runtime_gte : Optional[Union[StrictFloat, StrictInt]] = None, with_runtime_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_lte : Optional[Union[StrictFloat, StrictInt]] = None, watch_region : Optional[StrictStr] = None, watch_providers : Optional[StrictStr] = None, **kwargs) -> DiscoverKeywordKeywordIdMoviesGet200Response:  # noqa: E501
        """Discover movies  # noqa: E501

        Returns a list of movies in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_movies_get(page, language, genre, studio, keywords, sort_by, primary_release_date_gte, primary_release_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param genre:
        :type genre: str
        :param studio:
        :type studio: float
        :param keywords:
        :type keywords: str
        :param sort_by:
        :type sort_by: str
        :param primary_release_date_gte:
        :type primary_release_date_gte: str
        :param primary_release_date_lte:
        :type primary_release_date_lte: str
        :param with_runtime_gte:
        :type with_runtime_gte: float
        :param with_runtime_lte:
        :type with_runtime_lte: float
        :param vote_average_gte:
        :type vote_average_gte: float
        :param vote_average_lte:
        :type vote_average_lte: float
        :param vote_count_gte:
        :type vote_count_gte: float
        :param vote_count_lte:
        :type vote_count_lte: float
        :param watch_region:
        :type watch_region: str
        :param watch_providers:
        :type watch_providers: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverKeywordKeywordIdMoviesGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_movies_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_movies_get_with_http_info(page, language, genre, studio, keywords, sort_by, primary_release_date_gte, primary_release_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_movies_get_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, genre : Optional[StrictStr] = None, studio : Optional[Union[StrictFloat, StrictInt]] = None, keywords : Optional[StrictStr] = None, sort_by : Optional[StrictStr] = None, primary_release_date_gte : Optional[StrictStr] = None, primary_release_date_lte : Optional[StrictStr] = None, with_runtime_gte : Optional[Union[StrictFloat, StrictInt]] = None, with_runtime_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_lte : Optional[Union[StrictFloat, StrictInt]] = None, watch_region : Optional[StrictStr] = None, watch_providers : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Discover movies  # noqa: E501

        Returns a list of movies in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_movies_get_with_http_info(page, language, genre, studio, keywords, sort_by, primary_release_date_gte, primary_release_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param genre:
        :type genre: str
        :param studio:
        :type studio: float
        :param keywords:
        :type keywords: str
        :param sort_by:
        :type sort_by: str
        :param primary_release_date_gte:
        :type primary_release_date_gte: str
        :param primary_release_date_lte:
        :type primary_release_date_lte: str
        :param with_runtime_gte:
        :type with_runtime_gte: float
        :param with_runtime_lte:
        :type with_runtime_lte: float
        :param vote_average_gte:
        :type vote_average_gte: float
        :param vote_average_lte:
        :type vote_average_lte: float
        :param vote_count_gte:
        :type vote_count_gte: float
        :param vote_count_lte:
        :type vote_count_lte: float
        :param watch_region:
        :type watch_region: str
        :param watch_providers:
        :type watch_providers: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverKeywordKeywordIdMoviesGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'language',
            'genre',
            'studio',
            'keywords',
            'sort_by',
            'primary_release_date_gte',
            'primary_release_date_lte',
            'with_runtime_gte',
            'with_runtime_lte',
            'vote_average_gte',
            'vote_average_lte',
            'vote_count_gte',
            'vote_count_lte',
            'watch_region',
            'watch_providers'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_movies_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        if _params.get('genre') is not None:  # noqa: E501
            _query_params.append(('genre', _params['genre']))

        if _params.get('studio') is not None:  # noqa: E501
            _query_params.append(('studio', _params['studio']))

        if _params.get('keywords') is not None:  # noqa: E501
            _query_params.append(('keywords', _params['keywords']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sortBy', _params['sort_by']))

        if _params.get('primary_release_date_gte') is not None:  # noqa: E501
            _query_params.append(('primaryReleaseDateGte', _params['primary_release_date_gte']))

        if _params.get('primary_release_date_lte') is not None:  # noqa: E501
            _query_params.append(('primaryReleaseDateLte', _params['primary_release_date_lte']))

        if _params.get('with_runtime_gte') is not None:  # noqa: E501
            _query_params.append(('withRuntimeGte', _params['with_runtime_gte']))

        if _params.get('with_runtime_lte') is not None:  # noqa: E501
            _query_params.append(('withRuntimeLte', _params['with_runtime_lte']))

        if _params.get('vote_average_gte') is not None:  # noqa: E501
            _query_params.append(('voteAverageGte', _params['vote_average_gte']))

        if _params.get('vote_average_lte') is not None:  # noqa: E501
            _query_params.append(('voteAverageLte', _params['vote_average_lte']))

        if _params.get('vote_count_gte') is not None:  # noqa: E501
            _query_params.append(('voteCountGte', _params['vote_count_gte']))

        if _params.get('vote_count_lte') is not None:  # noqa: E501
            _query_params.append(('voteCountLte', _params['vote_count_lte']))

        if _params.get('watch_region') is not None:  # noqa: E501
            _query_params.append(('watchRegion', _params['watch_region']))

        if _params.get('watch_providers') is not None:  # noqa: E501
            _query_params.append(('watchProviders', _params['watch_providers']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverKeywordKeywordIdMoviesGet200Response",
        }

        return self.api_client.call_api(
            '/discover/movies', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_movies_language_language_get(self, language : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language2 : Optional[StrictStr] = None, **kwargs) -> DiscoverMoviesLanguageLanguageGet200Response:  # noqa: E501
        """Discover movies by original language  # noqa: E501

        Returns a list of movies based on the provided ISO 639-1 language code in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_movies_language_language_get(language, page, language2, async_req=True)
        >>> result = thread.get()

        :param language: (required)
        :type language: str
        :param page:
        :type page: float
        :param language2:
        :type language2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverMoviesLanguageLanguageGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_movies_language_language_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_movies_language_language_get_with_http_info(language, page, language2, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_movies_language_language_get_with_http_info(self, language : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language2 : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Discover movies by original language  # noqa: E501

        Returns a list of movies based on the provided ISO 639-1 language code in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_movies_language_language_get_with_http_info(language, page, language2, async_req=True)
        >>> result = thread.get()

        :param language: (required)
        :type language: str
        :param page:
        :type page: float
        :param language2:
        :type language2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverMoviesLanguageLanguageGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'language',
            'page',
            'language2'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_movies_language_language_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['language'] is not None:
            _path_params['language'] = _params['language']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language2') is not None:  # noqa: E501
            _query_params.append(('language', _params['language2']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverMoviesLanguageLanguageGet200Response",
        }

        return self.api_client.call_api(
            '/discover/movies/language/{language}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_movies_studio_studio_id_get(self, studio_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> DiscoverMoviesStudioStudioIdGet200Response:  # noqa: E501
        """Discover movies by studio  # noqa: E501

        Returns a list of movies based on the provided studio ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_movies_studio_studio_id_get(studio_id, page, language, async_req=True)
        >>> result = thread.get()

        :param studio_id: (required)
        :type studio_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverMoviesStudioStudioIdGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_movies_studio_studio_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_movies_studio_studio_id_get_with_http_info(studio_id, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_movies_studio_studio_id_get_with_http_info(self, studio_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Discover movies by studio  # noqa: E501

        Returns a list of movies based on the provided studio ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_movies_studio_studio_id_get_with_http_info(studio_id, page, language, async_req=True)
        >>> result = thread.get()

        :param studio_id: (required)
        :type studio_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverMoviesStudioStudioIdGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'studio_id',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_movies_studio_studio_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['studio_id'] is not None:
            _path_params['studioId'] = _params['studio_id']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverMoviesStudioStudioIdGet200Response",
        }

        return self.api_client.call_api(
            '/discover/movies/studio/{studioId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_movies_upcoming_get(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> DiscoverKeywordKeywordIdMoviesGet200Response:  # noqa: E501
        """Upcoming movies  # noqa: E501

        Returns a list of movies in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_movies_upcoming_get(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverKeywordKeywordIdMoviesGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_movies_upcoming_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_movies_upcoming_get_with_http_info(page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_movies_upcoming_get_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Upcoming movies  # noqa: E501

        Returns a list of movies in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_movies_upcoming_get_with_http_info(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverKeywordKeywordIdMoviesGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_movies_upcoming_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverKeywordKeywordIdMoviesGet200Response",
        }

        return self.api_client.call_api(
            '/discover/movies/upcoming', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_trending_get(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> DiscoverTrendingGet200Response:  # noqa: E501
        """Trending movies and TV  # noqa: E501

        Returns a list of movies and TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_trending_get(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverTrendingGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_trending_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_trending_get_with_http_info(page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_trending_get_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Trending movies and TV  # noqa: E501

        Returns a list of movies and TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_trending_get_with_http_info(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverTrendingGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_trending_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverTrendingGet200Response",
        }

        return self.api_client.call_api(
            '/discover/trending', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_tv_genre_genre_id_get(self, genre_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> DiscoverTvGenreGenreIdGet200Response:  # noqa: E501
        """Discover TV shows by genre  # noqa: E501

        Returns a list of TV shows based on the provided genre ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_tv_genre_genre_id_get(genre_id, page, language, async_req=True)
        >>> result = thread.get()

        :param genre_id: (required)
        :type genre_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverTvGenreGenreIdGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_tv_genre_genre_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_tv_genre_genre_id_get_with_http_info(genre_id, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_tv_genre_genre_id_get_with_http_info(self, genre_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Discover TV shows by genre  # noqa: E501

        Returns a list of TV shows based on the provided genre ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_tv_genre_genre_id_get_with_http_info(genre_id, page, language, async_req=True)
        >>> result = thread.get()

        :param genre_id: (required)
        :type genre_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverTvGenreGenreIdGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'genre_id',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_tv_genre_genre_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['genre_id'] is not None:
            _path_params['genreId'] = _params['genre_id']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverTvGenreGenreIdGet200Response",
        }

        return self.api_client.call_api(
            '/discover/tv/genre/{genreId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_tv_get(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, genre : Optional[StrictStr] = None, network : Optional[Union[StrictFloat, StrictInt]] = None, keywords : Optional[StrictStr] = None, sort_by : Optional[StrictStr] = None, first_air_date_gte : Optional[StrictStr] = None, first_air_date_lte : Optional[StrictStr] = None, with_runtime_gte : Optional[Union[StrictFloat, StrictInt]] = None, with_runtime_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_lte : Optional[Union[StrictFloat, StrictInt]] = None, watch_region : Optional[StrictStr] = None, watch_providers : Optional[StrictStr] = None, **kwargs) -> DiscoverTvGet200Response:  # noqa: E501
        """Discover TV shows  # noqa: E501

        Returns a list of TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_tv_get(page, language, genre, network, keywords, sort_by, first_air_date_gte, first_air_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param genre:
        :type genre: str
        :param network:
        :type network: float
        :param keywords:
        :type keywords: str
        :param sort_by:
        :type sort_by: str
        :param first_air_date_gte:
        :type first_air_date_gte: str
        :param first_air_date_lte:
        :type first_air_date_lte: str
        :param with_runtime_gte:
        :type with_runtime_gte: float
        :param with_runtime_lte:
        :type with_runtime_lte: float
        :param vote_average_gte:
        :type vote_average_gte: float
        :param vote_average_lte:
        :type vote_average_lte: float
        :param vote_count_gte:
        :type vote_count_gte: float
        :param vote_count_lte:
        :type vote_count_lte: float
        :param watch_region:
        :type watch_region: str
        :param watch_providers:
        :type watch_providers: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverTvGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_tv_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_tv_get_with_http_info(page, language, genre, network, keywords, sort_by, first_air_date_gte, first_air_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_tv_get_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, genre : Optional[StrictStr] = None, network : Optional[Union[StrictFloat, StrictInt]] = None, keywords : Optional[StrictStr] = None, sort_by : Optional[StrictStr] = None, first_air_date_gte : Optional[StrictStr] = None, first_air_date_lte : Optional[StrictStr] = None, with_runtime_gte : Optional[Union[StrictFloat, StrictInt]] = None, with_runtime_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_average_lte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_gte : Optional[Union[StrictFloat, StrictInt]] = None, vote_count_lte : Optional[Union[StrictFloat, StrictInt]] = None, watch_region : Optional[StrictStr] = None, watch_providers : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Discover TV shows  # noqa: E501

        Returns a list of TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_tv_get_with_http_info(page, language, genre, network, keywords, sort_by, first_air_date_gte, first_air_date_lte, with_runtime_gte, with_runtime_lte, vote_average_gte, vote_average_lte, vote_count_gte, vote_count_lte, watch_region, watch_providers, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param genre:
        :type genre: str
        :param network:
        :type network: float
        :param keywords:
        :type keywords: str
        :param sort_by:
        :type sort_by: str
        :param first_air_date_gte:
        :type first_air_date_gte: str
        :param first_air_date_lte:
        :type first_air_date_lte: str
        :param with_runtime_gte:
        :type with_runtime_gte: float
        :param with_runtime_lte:
        :type with_runtime_lte: float
        :param vote_average_gte:
        :type vote_average_gte: float
        :param vote_average_lte:
        :type vote_average_lte: float
        :param vote_count_gte:
        :type vote_count_gte: float
        :param vote_count_lte:
        :type vote_count_lte: float
        :param watch_region:
        :type watch_region: str
        :param watch_providers:
        :type watch_providers: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverTvGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'language',
            'genre',
            'network',
            'keywords',
            'sort_by',
            'first_air_date_gte',
            'first_air_date_lte',
            'with_runtime_gte',
            'with_runtime_lte',
            'vote_average_gte',
            'vote_average_lte',
            'vote_count_gte',
            'vote_count_lte',
            'watch_region',
            'watch_providers'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_tv_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        if _params.get('genre') is not None:  # noqa: E501
            _query_params.append(('genre', _params['genre']))

        if _params.get('network') is not None:  # noqa: E501
            _query_params.append(('network', _params['network']))

        if _params.get('keywords') is not None:  # noqa: E501
            _query_params.append(('keywords', _params['keywords']))

        if _params.get('sort_by') is not None:  # noqa: E501
            _query_params.append(('sortBy', _params['sort_by']))

        if _params.get('first_air_date_gte') is not None:  # noqa: E501
            _query_params.append(('firstAirDateGte', _params['first_air_date_gte']))

        if _params.get('first_air_date_lte') is not None:  # noqa: E501
            _query_params.append(('firstAirDateLte', _params['first_air_date_lte']))

        if _params.get('with_runtime_gte') is not None:  # noqa: E501
            _query_params.append(('withRuntimeGte', _params['with_runtime_gte']))

        if _params.get('with_runtime_lte') is not None:  # noqa: E501
            _query_params.append(('withRuntimeLte', _params['with_runtime_lte']))

        if _params.get('vote_average_gte') is not None:  # noqa: E501
            _query_params.append(('voteAverageGte', _params['vote_average_gte']))

        if _params.get('vote_average_lte') is not None:  # noqa: E501
            _query_params.append(('voteAverageLte', _params['vote_average_lte']))

        if _params.get('vote_count_gte') is not None:  # noqa: E501
            _query_params.append(('voteCountGte', _params['vote_count_gte']))

        if _params.get('vote_count_lte') is not None:  # noqa: E501
            _query_params.append(('voteCountLte', _params['vote_count_lte']))

        if _params.get('watch_region') is not None:  # noqa: E501
            _query_params.append(('watchRegion', _params['watch_region']))

        if _params.get('watch_providers') is not None:  # noqa: E501
            _query_params.append(('watchProviders', _params['watch_providers']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverTvGet200Response",
        }

        return self.api_client.call_api(
            '/discover/tv', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_tv_language_language_get(self, language : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language2 : Optional[StrictStr] = None, **kwargs) -> DiscoverTvLanguageLanguageGet200Response:  # noqa: E501
        """Discover TV shows by original language  # noqa: E501

        Returns a list of TV shows based on the provided ISO 639-1 language code in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_tv_language_language_get(language, page, language2, async_req=True)
        >>> result = thread.get()

        :param language: (required)
        :type language: str
        :param page:
        :type page: float
        :param language2:
        :type language2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverTvLanguageLanguageGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_tv_language_language_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_tv_language_language_get_with_http_info(language, page, language2, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_tv_language_language_get_with_http_info(self, language : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language2 : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Discover TV shows by original language  # noqa: E501

        Returns a list of TV shows based on the provided ISO 639-1 language code in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_tv_language_language_get_with_http_info(language, page, language2, async_req=True)
        >>> result = thread.get()

        :param language: (required)
        :type language: str
        :param page:
        :type page: float
        :param language2:
        :type language2: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverTvLanguageLanguageGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'language',
            'page',
            'language2'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_tv_language_language_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['language'] is not None:
            _path_params['language'] = _params['language']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language2') is not None:  # noqa: E501
            _query_params.append(('language', _params['language2']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverTvLanguageLanguageGet200Response",
        }

        return self.api_client.call_api(
            '/discover/tv/language/{language}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_tv_network_network_id_get(self, network_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> DiscoverTvNetworkNetworkIdGet200Response:  # noqa: E501
        """Discover TV shows by network  # noqa: E501

        Returns a list of TV shows based on the provided network ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_tv_network_network_id_get(network_id, page, language, async_req=True)
        >>> result = thread.get()

        :param network_id: (required)
        :type network_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverTvNetworkNetworkIdGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_tv_network_network_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_tv_network_network_id_get_with_http_info(network_id, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_tv_network_network_id_get_with_http_info(self, network_id : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Discover TV shows by network  # noqa: E501

        Returns a list of TV shows based on the provided network ID in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_tv_network_network_id_get_with_http_info(network_id, page, language, async_req=True)
        >>> result = thread.get()

        :param network_id: (required)
        :type network_id: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverTvNetworkNetworkIdGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'network_id',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_tv_network_network_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['network_id'] is not None:
            _path_params['networkId'] = _params['network_id']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverTvNetworkNetworkIdGet200Response",
        }

        return self.api_client.call_api(
            '/discover/tv/network/{networkId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_tv_upcoming_get(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> DiscoverTvGet200Response:  # noqa: E501
        """Discover Upcoming TV shows  # noqa: E501

        Returns a list of upcoming TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_tv_upcoming_get(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverTvGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_tv_upcoming_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_tv_upcoming_get_with_http_info(page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_tv_upcoming_get_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Discover Upcoming TV shows  # noqa: E501

        Returns a list of upcoming TV shows in a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_tv_upcoming_get_with_http_info(page, language, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverTvGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_tv_upcoming_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverTvGet200Response",
        }

        return self.api_client.call_api(
            '/discover/tv/upcoming', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def discover_watchlist_get(self, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> DiscoverWatchlistGet200Response:  # noqa: E501
        """Get the Plex watchlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_watchlist_get(page, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverWatchlistGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the discover_watchlist_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.discover_watchlist_get_with_http_info(page, **kwargs)  # noqa: E501

    @validate_arguments
    def discover_watchlist_get_with_http_info(self, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get the Plex watchlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discover_watchlist_get_with_http_info(page, async_req=True)
        >>> result = thread.get()

        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverWatchlistGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discover_watchlist_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverWatchlistGet200Response",
        }

        return self.api_client.call_api(
            '/discover/watchlist', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search_company_get(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> SearchCompanyGet200Response:  # noqa: E501
        """Search for companies  # noqa: E501

        Returns a list of TMDB companies matching the search query. (Will not return origin country)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_company_get(query, page, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SearchCompanyGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_company_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_company_get_with_http_info(query, page, **kwargs)  # noqa: E501

    @validate_arguments
    def search_company_get_with_http_info(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search for companies  # noqa: E501

        Returns a list of TMDB companies matching the search query. (Will not return origin country)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_company_get_with_http_info(query, page, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SearchCompanyGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_company_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "SearchCompanyGet200Response",
        }

        return self.api_client.call_api(
            '/search/company', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search_get(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> DiscoverTrendingGet200Response:  # noqa: E501
        """Search for movies, TV shows, or people  # noqa: E501

        Returns a list of movies, TV shows, or people a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_get(query, page, language, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DiscoverTrendingGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_get_with_http_info(query, page, language, **kwargs)  # noqa: E501

    @validate_arguments
    def search_get_with_http_info(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, language : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search for movies, TV shows, or people  # noqa: E501

        Returns a list of movies, TV shows, or people a JSON object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_get_with_http_info(query, page, language, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param language:
        :type language: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DiscoverTrendingGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'page',
            'language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('language') is not None:  # noqa: E501
            _query_params.append(('language', _params['language']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "DiscoverTrendingGet200Response",
        }

        return self.api_client.call_api(
            '/search', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search_keyword_get(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> SearchKeywordGet200Response:  # noqa: E501
        """Search for keywords  # noqa: E501

        Returns a list of TMDB keywords matching the search query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_keyword_get(query, page, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SearchKeywordGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_keyword_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_keyword_get_with_http_info(query, page, **kwargs)  # noqa: E501

    @validate_arguments
    def search_keyword_get_with_http_info(self, query : StrictStr, page : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Search for keywords  # noqa: E501

        Returns a list of TMDB keywords matching the search query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_keyword_get_with_http_info(query, page, async_req=True)
        >>> result = thread.get()

        :param query: (required)
        :type query: str
        :param page:
        :type page: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SearchKeywordGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_keyword_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['apiKey', 'cookieAuth']  # noqa: E501

        _response_types_map = {
            '200': "SearchKeywordGet200Response",
        }

        return self.api_client.call_api(
            '/search/keyword', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
