# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from overseerr_api.models.media_info import MediaInfo

class MovieResult(BaseModel):
    """
    MovieResult
    """
    adult: Optional[StrictBool] = None
    backdrop_path: Optional[StrictStr] = Field(None, alias="backdropPath")
    genre_ids: Optional[conlist(Union[StrictFloat, StrictInt])] = Field(None, alias="genreIds")
    id: Union[StrictFloat, StrictInt] = Field(...)
    media_info: Optional[MediaInfo] = Field(None, alias="mediaInfo")
    media_type: StrictStr = Field(..., alias="mediaType")
    original_language: Optional[StrictStr] = Field(None, alias="originalLanguage")
    original_title: Optional[StrictStr] = Field(None, alias="originalTitle")
    overview: Optional[StrictStr] = None
    popularity: Optional[Union[StrictFloat, StrictInt]] = None
    poster_path: Optional[StrictStr] = Field(None, alias="posterPath")
    release_date: Optional[StrictStr] = Field(None, alias="releaseDate")
    title: StrictStr = Field(...)
    video: Optional[StrictBool] = None
    vote_average: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="voteAverage")
    vote_count: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="voteCount")
    __properties = ["adult", "backdropPath", "genreIds", "id", "mediaInfo", "mediaType", "originalLanguage", "originalTitle", "overview", "popularity", "posterPath", "releaseDate", "title", "video", "voteAverage", "voteCount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MovieResult:
        """Create an instance of MovieResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of media_info
        if self.media_info:
            _dict['mediaInfo'] = self.media_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MovieResult:
        """Create an instance of MovieResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MovieResult.parse_obj(obj)

        _obj = MovieResult.parse_obj({
            "adult": obj.get("adult"),
            "backdrop_path": obj.get("backdropPath"),
            "genre_ids": obj.get("genreIds"),
            "id": obj.get("id"),
            "media_info": MediaInfo.from_dict(obj.get("mediaInfo")) if obj.get("mediaInfo") is not None else None,
            "media_type": obj.get("mediaType"),
            "original_language": obj.get("originalLanguage"),
            "original_title": obj.get("originalTitle"),
            "overview": obj.get("overview"),
            "popularity": obj.get("popularity"),
            "poster_path": obj.get("posterPath"),
            "release_date": obj.get("releaseDate"),
            "title": obj.get("title"),
            "video": obj.get("video"),
            "vote_average": obj.get("voteAverage"),
            "vote_count": obj.get("voteCount")
        })
        return _obj


