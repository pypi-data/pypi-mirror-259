# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from overseerr_api.models.episode import Episode
from overseerr_api.models.external_ids import ExternalIds
from overseerr_api.models.genre import Genre
from overseerr_api.models.keyword import Keyword
from overseerr_api.models.media_info import MediaInfo
from overseerr_api.models.movie_details_credits import MovieDetailsCredits
from overseerr_api.models.movie_details_production_countries_inner import MovieDetailsProductionCountriesInner
from overseerr_api.models.production_company import ProductionCompany
from overseerr_api.models.season import Season
from overseerr_api.models.spoken_language import SpokenLanguage
from overseerr_api.models.tv_details_content_ratings import TvDetailsContentRatings
from overseerr_api.models.tv_details_created_by_inner import TvDetailsCreatedByInner
from overseerr_api.models.watch_providers_inner import WatchProvidersInner

class TvDetails(BaseModel):
    """
    TvDetails
    """
    backdrop_path: Optional[StrictStr] = Field(None, alias="backdropPath")
    content_ratings: Optional[TvDetailsContentRatings] = Field(None, alias="contentRatings")
    created_by: Optional[conlist(TvDetailsCreatedByInner)] = Field(None, alias="createdBy")
    credits: Optional[MovieDetailsCredits] = None
    episode_run_time: Optional[conlist(Union[StrictFloat, StrictInt])] = Field(None, alias="episodeRunTime")
    external_ids: Optional[ExternalIds] = Field(None, alias="externalIds")
    first_air_date: Optional[StrictStr] = Field(None, alias="firstAirDate")
    genres: Optional[conlist(Genre)] = None
    homepage: Optional[StrictStr] = None
    id: Optional[Union[StrictFloat, StrictInt]] = None
    in_production: Optional[StrictBool] = Field(None, alias="inProduction")
    keywords: Optional[conlist(Keyword)] = None
    languages: Optional[conlist(StrictStr)] = None
    last_air_date: Optional[StrictStr] = Field(None, alias="lastAirDate")
    last_episode_to_air: Optional[Episode] = Field(None, alias="lastEpisodeToAir")
    media_info: Optional[MediaInfo] = Field(None, alias="mediaInfo")
    name: Optional[StrictStr] = None
    networks: Optional[conlist(ProductionCompany)] = None
    next_episode_to_air: Optional[Episode] = Field(None, alias="nextEpisodeToAir")
    number_of_episodes: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="numberOfEpisodes")
    number_of_season: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="numberOfSeason")
    origin_country: Optional[conlist(StrictStr)] = Field(None, alias="originCountry")
    original_language: Optional[StrictStr] = Field(None, alias="originalLanguage")
    original_name: Optional[StrictStr] = Field(None, alias="originalName")
    overview: Optional[StrictStr] = None
    popularity: Optional[Union[StrictFloat, StrictInt]] = None
    poster_path: Optional[StrictStr] = Field(None, alias="posterPath")
    production_companies: Optional[conlist(ProductionCompany)] = Field(None, alias="productionCompanies")
    production_countries: Optional[conlist(MovieDetailsProductionCountriesInner)] = Field(None, alias="productionCountries")
    seasons: Optional[conlist(Season)] = None
    spoken_languages: Optional[conlist(SpokenLanguage)] = Field(None, alias="spokenLanguages")
    status: Optional[StrictStr] = None
    tagline: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    vote_average: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="voteAverage")
    vote_count: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="voteCount")
    watch_providers: Optional[conlist(conlist(WatchProvidersInner))] = Field(None, alias="watchProviders")
    __properties = ["backdropPath", "contentRatings", "createdBy", "credits", "episodeRunTime", "externalIds", "firstAirDate", "genres", "homepage", "id", "inProduction", "keywords", "languages", "lastAirDate", "lastEpisodeToAir", "mediaInfo", "name", "networks", "nextEpisodeToAir", "numberOfEpisodes", "numberOfSeason", "originCountry", "originalLanguage", "originalName", "overview", "popularity", "posterPath", "productionCompanies", "productionCountries", "seasons", "spokenLanguages", "status", "tagline", "type", "voteAverage", "voteCount", "watchProviders"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TvDetails:
        """Create an instance of TvDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of content_ratings
        if self.content_ratings:
            _dict['contentRatings'] = self.content_ratings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in created_by (list)
        _items = []
        if self.created_by:
            for _item in self.created_by:
                if _item:
                    _items.append(_item.to_dict())
            _dict['createdBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of credits
        if self.credits:
            _dict['credits'] = self.credits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_ids
        if self.external_ids:
            _dict['externalIds'] = self.external_ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in genres (list)
        _items = []
        if self.genres:
            for _item in self.genres:
                if _item:
                    _items.append(_item.to_dict())
            _dict['genres'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in keywords (list)
        _items = []
        if self.keywords:
            for _item in self.keywords:
                if _item:
                    _items.append(_item.to_dict())
            _dict['keywords'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_episode_to_air
        if self.last_episode_to_air:
            _dict['lastEpisodeToAir'] = self.last_episode_to_air.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media_info
        if self.media_info:
            _dict['mediaInfo'] = self.media_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item in self.networks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['networks'] = _items
        # override the default output from pydantic by calling `to_dict()` of next_episode_to_air
        if self.next_episode_to_air:
            _dict['nextEpisodeToAir'] = self.next_episode_to_air.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in production_companies (list)
        _items = []
        if self.production_companies:
            for _item in self.production_companies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productionCompanies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in production_countries (list)
        _items = []
        if self.production_countries:
            for _item in self.production_countries:
                if _item:
                    _items.append(_item.to_dict())
            _dict['productionCountries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seasons (list)
        _items = []
        if self.seasons:
            for _item in self.seasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['seasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spoken_languages (list)
        _items = []
        if self.spoken_languages:
            for _item in self.spoken_languages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['spokenLanguages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in watch_providers (list of list)
        _items = []
        if self.watch_providers:
            for _item in self.watch_providers:
                if _item:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item if _inner_item is not None]
                    )
            _dict['watchProviders'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TvDetails:
        """Create an instance of TvDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TvDetails.parse_obj(obj)

        _obj = TvDetails.parse_obj({
            "backdrop_path": obj.get("backdropPath"),
            "content_ratings": TvDetailsContentRatings.from_dict(obj.get("contentRatings")) if obj.get("contentRatings") is not None else None,
            "created_by": [TvDetailsCreatedByInner.from_dict(_item) for _item in obj.get("createdBy")] if obj.get("createdBy") is not None else None,
            "credits": MovieDetailsCredits.from_dict(obj.get("credits")) if obj.get("credits") is not None else None,
            "episode_run_time": obj.get("episodeRunTime"),
            "external_ids": ExternalIds.from_dict(obj.get("externalIds")) if obj.get("externalIds") is not None else None,
            "first_air_date": obj.get("firstAirDate"),
            "genres": [Genre.from_dict(_item) for _item in obj.get("genres")] if obj.get("genres") is not None else None,
            "homepage": obj.get("homepage"),
            "id": obj.get("id"),
            "in_production": obj.get("inProduction"),
            "keywords": [Keyword.from_dict(_item) for _item in obj.get("keywords")] if obj.get("keywords") is not None else None,
            "languages": obj.get("languages"),
            "last_air_date": obj.get("lastAirDate"),
            "last_episode_to_air": Episode.from_dict(obj.get("lastEpisodeToAir")) if obj.get("lastEpisodeToAir") is not None else None,
            "media_info": MediaInfo.from_dict(obj.get("mediaInfo")) if obj.get("mediaInfo") is not None else None,
            "name": obj.get("name"),
            "networks": [ProductionCompany.from_dict(_item) for _item in obj.get("networks")] if obj.get("networks") is not None else None,
            "next_episode_to_air": Episode.from_dict(obj.get("nextEpisodeToAir")) if obj.get("nextEpisodeToAir") is not None else None,
            "number_of_episodes": obj.get("numberOfEpisodes"),
            "number_of_season": obj.get("numberOfSeason"),
            "origin_country": obj.get("originCountry"),
            "original_language": obj.get("originalLanguage"),
            "original_name": obj.get("originalName"),
            "overview": obj.get("overview"),
            "popularity": obj.get("popularity"),
            "poster_path": obj.get("posterPath"),
            "production_companies": [ProductionCompany.from_dict(_item) for _item in obj.get("productionCompanies")] if obj.get("productionCompanies") is not None else None,
            "production_countries": [MovieDetailsProductionCountriesInner.from_dict(_item) for _item in obj.get("productionCountries")] if obj.get("productionCountries") is not None else None,
            "seasons": [Season.from_dict(_item) for _item in obj.get("seasons")] if obj.get("seasons") is not None else None,
            "spoken_languages": [SpokenLanguage.from_dict(_item) for _item in obj.get("spokenLanguages")] if obj.get("spokenLanguages") is not None else None,
            "status": obj.get("status"),
            "tagline": obj.get("tagline"),
            "type": obj.get("type"),
            "vote_average": obj.get("voteAverage"),
            "vote_count": obj.get("voteCount"),
            "watch_providers": [
                    [WatchProvidersInner.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj.get("watchProviders")
                ] if obj.get("watchProviders") is not None else None
        })
        return _obj


