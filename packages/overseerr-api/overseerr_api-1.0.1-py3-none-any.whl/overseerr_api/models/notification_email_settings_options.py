# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class NotificationEmailSettingsOptions(BaseModel):
    """
    NotificationEmailSettingsOptions
    """
    allow_self_signed: Optional[StrictBool] = Field(None, alias="allowSelfSigned")
    auth_pass: Optional[StrictStr] = Field(None, alias="authPass")
    auth_user: Optional[StrictStr] = Field(None, alias="authUser")
    email_from: Optional[StrictStr] = Field(None, alias="emailFrom")
    ignore_tls: Optional[StrictBool] = Field(None, alias="ignoreTls")
    require_tls: Optional[StrictBool] = Field(None, alias="requireTls")
    secure: Optional[StrictBool] = None
    sender_name: Optional[StrictStr] = Field(None, alias="senderName")
    smtp_host: Optional[StrictStr] = Field(None, alias="smtpHost")
    smtp_port: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="smtpPort")
    __properties = ["allowSelfSigned", "authPass", "authUser", "emailFrom", "ignoreTls", "requireTls", "secure", "senderName", "smtpHost", "smtpPort"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationEmailSettingsOptions:
        """Create an instance of NotificationEmailSettingsOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if auth_pass (nullable) is None
        # and __fields_set__ contains the field
        if self.auth_pass is None and "auth_pass" in self.__fields_set__:
            _dict['authPass'] = None

        # set to None if auth_user (nullable) is None
        # and __fields_set__ contains the field
        if self.auth_user is None and "auth_user" in self.__fields_set__:
            _dict['authUser'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationEmailSettingsOptions:
        """Create an instance of NotificationEmailSettingsOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NotificationEmailSettingsOptions.parse_obj(obj)

        _obj = NotificationEmailSettingsOptions.parse_obj({
            "allow_self_signed": obj.get("allowSelfSigned"),
            "auth_pass": obj.get("authPass"),
            "auth_user": obj.get("authUser"),
            "email_from": obj.get("emailFrom"),
            "ignore_tls": obj.get("ignoreTls"),
            "require_tls": obj.get("requireTls"),
            "secure": obj.get("secure"),
            "sender_name": obj.get("senderName"),
            "smtp_host": obj.get("smtpHost"),
            "smtp_port": obj.get("smtpPort")
        })
        return _obj


