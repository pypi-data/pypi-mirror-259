# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class SonarrSettings(BaseModel):
    """
    SonarrSettings
    """
    active_anime_directory: Optional[StrictStr] = Field(None, alias="activeAnimeDirectory")
    active_anime_language_profile_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="activeAnimeLanguageProfileId")
    active_anime_profile_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="activeAnimeProfileId")
    active_anime_profile_name: Optional[StrictStr] = Field(None, alias="activeAnimeProfileName")
    active_directory: StrictStr = Field(..., alias="activeDirectory")
    active_language_profile_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="activeLanguageProfileId")
    active_profile_id: Union[StrictFloat, StrictInt] = Field(..., alias="activeProfileId")
    active_profile_name: StrictStr = Field(..., alias="activeProfileName")
    api_key: StrictStr = Field(..., alias="apiKey")
    base_url: Optional[StrictStr] = Field(None, alias="baseUrl")
    enable_season_folders: StrictBool = Field(..., alias="enableSeasonFolders")
    external_url: Optional[StrictStr] = Field(None, alias="externalUrl")
    hostname: StrictStr = Field(...)
    id: Optional[Union[StrictFloat, StrictInt]] = None
    is4k: StrictBool = Field(...)
    is_default: StrictBool = Field(..., alias="isDefault")
    name: StrictStr = Field(...)
    port: Union[StrictFloat, StrictInt] = Field(...)
    prevent_search: Optional[StrictBool] = Field(None, alias="preventSearch")
    sync_enabled: Optional[StrictBool] = Field(None, alias="syncEnabled")
    use_ssl: StrictBool = Field(..., alias="useSsl")
    __properties = ["activeAnimeDirectory", "activeAnimeLanguageProfileId", "activeAnimeProfileId", "activeAnimeProfileName", "activeDirectory", "activeLanguageProfileId", "activeProfileId", "activeProfileName", "apiKey", "baseUrl", "enableSeasonFolders", "externalUrl", "hostname", "id", "is4k", "isDefault", "name", "port", "preventSearch", "syncEnabled", "useSsl"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SonarrSettings:
        """Create an instance of SonarrSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        # set to None if active_anime_directory (nullable) is None
        # and __fields_set__ contains the field
        if self.active_anime_directory is None and "active_anime_directory" in self.__fields_set__:
            _dict['activeAnimeDirectory'] = None

        # set to None if active_anime_language_profile_id (nullable) is None
        # and __fields_set__ contains the field
        if self.active_anime_language_profile_id is None and "active_anime_language_profile_id" in self.__fields_set__:
            _dict['activeAnimeLanguageProfileId'] = None

        # set to None if active_anime_profile_id (nullable) is None
        # and __fields_set__ contains the field
        if self.active_anime_profile_id is None and "active_anime_profile_id" in self.__fields_set__:
            _dict['activeAnimeProfileId'] = None

        # set to None if active_anime_profile_name (nullable) is None
        # and __fields_set__ contains the field
        if self.active_anime_profile_name is None and "active_anime_profile_name" in self.__fields_set__:
            _dict['activeAnimeProfileName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SonarrSettings:
        """Create an instance of SonarrSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SonarrSettings.parse_obj(obj)

        _obj = SonarrSettings.parse_obj({
            "active_anime_directory": obj.get("activeAnimeDirectory"),
            "active_anime_language_profile_id": obj.get("activeAnimeLanguageProfileId"),
            "active_anime_profile_id": obj.get("activeAnimeProfileId"),
            "active_anime_profile_name": obj.get("activeAnimeProfileName"),
            "active_directory": obj.get("activeDirectory"),
            "active_language_profile_id": obj.get("activeLanguageProfileId"),
            "active_profile_id": obj.get("activeProfileId"),
            "active_profile_name": obj.get("activeProfileName"),
            "api_key": obj.get("apiKey"),
            "base_url": obj.get("baseUrl"),
            "enable_season_folders": obj.get("enableSeasonFolders"),
            "external_url": obj.get("externalUrl"),
            "hostname": obj.get("hostname"),
            "id": obj.get("id"),
            "is4k": obj.get("is4k"),
            "is_default": obj.get("isDefault"),
            "name": obj.get("name"),
            "port": obj.get("port"),
            "prevent_search": obj.get("preventSearch"),
            "sync_enabled": obj.get("syncEnabled"),
            "use_ssl": obj.get("useSsl")
        })
        return _obj


