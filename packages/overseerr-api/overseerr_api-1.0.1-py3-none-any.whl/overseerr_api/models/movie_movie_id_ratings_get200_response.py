# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator

class MovieMovieIdRatingsGet200Response(BaseModel):
    """
    MovieMovieIdRatingsGet200Response
    """
    audience_rating: Optional[StrictStr] = Field(None, alias="audienceRating")
    audience_score: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="audienceScore")
    critics_rating: Optional[StrictStr] = Field(None, alias="criticsRating")
    critics_score: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="criticsScore")
    title: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    year: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["audienceRating", "audienceScore", "criticsRating", "criticsScore", "title", "url", "year"]

    @validator('audience_rating')
    def audience_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Spilled', 'Upright'):
            raise ValueError("must be one of enum values ('Spilled', 'Upright')")
        return value

    @validator('critics_rating')
    def critics_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Rotten', 'Fresh', 'Certified Fresh'):
            raise ValueError("must be one of enum values ('Rotten', 'Fresh', 'Certified Fresh')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MovieMovieIdRatingsGet200Response:
        """Create an instance of MovieMovieIdRatingsGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MovieMovieIdRatingsGet200Response:
        """Create an instance of MovieMovieIdRatingsGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MovieMovieIdRatingsGet200Response.parse_obj(obj)

        _obj = MovieMovieIdRatingsGet200Response.parse_obj({
            "audience_rating": obj.get("audienceRating"),
            "audience_score": obj.get("audienceScore"),
            "critics_rating": obj.get("criticsRating"),
            "critics_score": obj.get("criticsScore"),
            "title": obj.get("title"),
            "url": obj.get("url"),
            "year": obj.get("year")
        })
        return _obj


