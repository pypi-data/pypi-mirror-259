# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from overseerr_api.models.tv_details import TvDetails  # noqa: E501

class TestTvDetails(unittest.TestCase):
    """TvDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TvDetails:
        """Test TvDetails
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TvDetails`
        """
        model = TvDetails()  # noqa: E501
        if include_optional:
            return TvDetails(
                backdrop_path = '',
                content_ratings = overseerr_api.models.tv_details_content_ratings.TvDetails_contentRatings(
                    results = [
                        overseerr_api.models.tv_details_content_ratings_results_inner.TvDetails_contentRatings_results_inner(
                            iso_3166_1 = 'US', 
                            rating = 'TV-14', )
                        ], ),
                created_by = [
                    overseerr_api.models.tv_details_created_by_inner.TvDetails_createdBy_inner(
                        gender = 1.337, 
                        id = 1.337, 
                        name = '', 
                        profile_path = '', )
                    ],
                credits = overseerr_api.models.movie_details_credits.MovieDetails_credits(
                    cast = [
                        overseerr_api.models.cast.Cast(
                            cast_id = 1, 
                            character = 'Some Character Name', 
                            credit_id = '', 
                            gender = 1.337, 
                            id = 123, 
                            name = 'Some Persons Name', 
                            order = 1.337, 
                            profile_path = '', )
                        ], 
                    crew = [
                        overseerr_api.models.crew.Crew(
                            credit_id = '', 
                            department = '', 
                            gender = 1.337, 
                            id = 123, 
                            job = '', 
                            name = 'Some Persons Name', 
                            profile_path = '', )
                        ], ),
                episode_run_time = [
                    1.337
                    ],
                external_ids = overseerr_api.models.external_ids.ExternalIds(
                    facebook_id = '', 
                    freebase_id = '', 
                    freebase_mid = '', 
                    imdb_id = '', 
                    instagram_id = '', 
                    tvdb_id = 1.337, 
                    tvrage_id = 1.337, 
                    twitter_id = '', ),
                first_air_date = '',
                genres = [
                    overseerr_api.models.genre.Genre(
                        id = 1, 
                        name = 'Adventure', )
                    ],
                homepage = '',
                id = 123,
                in_production = True,
                keywords = [
                    overseerr_api.models.keyword.Keyword(
                        id = 1, 
                        name = 'anime', )
                    ],
                languages = [
                    ''
                    ],
                last_air_date = '',
                last_episode_to_air = overseerr_api.models.episode.Episode(
                    air_date = '', 
                    episode_number = 1.337, 
                    id = 1.337, 
                    name = '', 
                    overview = '', 
                    production_code = '', 
                    season_number = 1.337, 
                    show_id = 1.337, 
                    still_path = '', 
                    vote_average = 1.337, 
                    vote_count = 1.337, ),
                media_info = overseerr_api.models.media_info.MediaInfo(
                    created_at = '2020-09-12T10:00:27.000Z', 
                    id = 1.337, 
                    requests = [
                        overseerr_api.models.media_request.MediaRequest(
                            created_at = '2020-09-12T10:00:27.000Z', 
                            id = 123, 
                            is4k = False, 
                            media = overseerr_api.models.media_info.MediaInfo(
                                created_at = '2020-09-12T10:00:27.000Z', 
                                id = 1.337, 
                                status = 0, 
                                tmdb_id = 1.337, 
                                tvdb_id = 1.337, 
                                updated_at = '2020-09-12T10:00:27.000Z', ), 
                            modified_by = null, 
                            profile_id = 1.337, 
                            requested_by = overseerr_api.models.user.User(
                                avatar = '', 
                                created_at = '2020-09-02T05:02:23.000Z', 
                                email = 'hey@itsme.com', 
                                id = 1, 
                                permissions = 0, 
                                plex_token = '', 
                                plex_username = '', 
                                request_count = 5, 
                                updated_at = '2020-09-02T05:02:23.000Z', 
                                user_type = 1, 
                                username = '', ), 
                            root_folder = '', 
                            server_id = 1.337, 
                            status = 0, 
                            updated_at = '2020-09-12T10:00:27.000Z', )
                        ], 
                    status = 0, 
                    tmdb_id = 1.337, 
                    tvdb_id = 1.337, 
                    updated_at = '2020-09-12T10:00:27.000Z', ),
                name = '',
                networks = [
                    overseerr_api.models.production_company.ProductionCompany(
                        id = 1, 
                        logo_path = '', 
                        name = '', 
                        origin_country = '', )
                    ],
                next_episode_to_air = overseerr_api.models.episode.Episode(
                    air_date = '', 
                    episode_number = 1.337, 
                    id = 1.337, 
                    name = '', 
                    overview = '', 
                    production_code = '', 
                    season_number = 1.337, 
                    show_id = 1.337, 
                    still_path = '', 
                    vote_average = 1.337, 
                    vote_count = 1.337, ),
                number_of_episodes = 1.337,
                number_of_season = 1.337,
                origin_country = [
                    ''
                    ],
                original_language = '',
                original_name = '',
                overview = '',
                popularity = 1.337,
                poster_path = '',
                production_companies = [
                    overseerr_api.models.production_company.ProductionCompany(
                        id = 1, 
                        logo_path = '', 
                        name = '', 
                        origin_country = '', )
                    ],
                production_countries = [
                    overseerr_api.models.movie_details_production_countries_inner.MovieDetails_productionCountries_inner(
                        iso_3166_1 = '', 
                        name = '', )
                    ],
                seasons = [
                    overseerr_api.models.season.Season(
                        air_date = '', 
                        episode_count = 1.337, 
                        episodes = [
                            overseerr_api.models.episode.Episode(
                                air_date = '', 
                                episode_number = 1.337, 
                                id = 1.337, 
                                name = '', 
                                overview = '', 
                                production_code = '', 
                                season_number = 1.337, 
                                show_id = 1.337, 
                                still_path = '', 
                                vote_average = 1.337, 
                                vote_count = 1.337, )
                            ], 
                        id = 1.337, 
                        name = '', 
                        overview = '', 
                        poster_path = '', 
                        season_number = 1.337, )
                    ],
                spoken_languages = [
                    overseerr_api.models.spoken_language.SpokenLanguage(
                        english_name = 'English', 
                        iso_639_1 = 'en', 
                        name = 'English', )
                    ],
                status = '',
                tagline = '',
                type = '',
                vote_average = 1.337,
                vote_count = 1.337,
                watch_providers = [
                    [
                        overseerr_api.models.watch_providers_inner.WatchProviders_inner(
                            buy = [
                                overseerr_api.models.watch_provider_details.WatchProviderDetails(
                                    display_priority = 1.337, 
                                    id = 1.337, 
                                    logo_path = '', 
                                    name = '', )
                                ], 
                            flatrate = [
                                overseerr_api.models.watch_provider_details.WatchProviderDetails(
                                    display_priority = 1.337, 
                                    id = 1.337, 
                                    logo_path = '', 
                                    name = '', )
                                ], 
                            iso_3166_1 = '', 
                            link = '', )
                        ]
                    ]
            )
        else:
            return TvDetails(
        )
        """

    def testTvDetails(self):
        """Test TvDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
