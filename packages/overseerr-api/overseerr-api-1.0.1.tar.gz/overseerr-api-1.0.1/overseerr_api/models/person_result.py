# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from overseerr_api.models.person_result_known_for_inner import PersonResultKnownForInner

class PersonResult(BaseModel):
    """
    PersonResult
    """
    adult: Optional[StrictBool] = None
    id: Optional[Union[StrictFloat, StrictInt]] = None
    known_for: Optional[conlist(PersonResultKnownForInner)] = Field(None, alias="knownFor")
    media_type: Optional[StrictStr] = Field('person', alias="mediaType")
    profile_path: Optional[StrictStr] = Field(None, alias="profilePath")
    __properties = ["adult", "id", "knownFor", "mediaType", "profilePath"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PersonResult:
        """Create an instance of PersonResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in known_for (list)
        _items = []
        if self.known_for:
            for _item in self.known_for:
                if _item:
                    _items.append(_item.to_dict())
            _dict['knownFor'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PersonResult:
        """Create an instance of PersonResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PersonResult.parse_obj(obj)

        _obj = PersonResult.parse_obj({
            "adult": obj.get("adult"),
            "id": obj.get("id"),
            "known_for": [PersonResultKnownForInner.from_dict(_item) for _item in obj.get("knownFor")] if obj.get("knownFor") is not None else None,
            "media_type": obj.get("mediaType") if obj.get("mediaType") is not None else 'person',
            "profile_path": obj.get("profilePath")
        })
        return _obj


