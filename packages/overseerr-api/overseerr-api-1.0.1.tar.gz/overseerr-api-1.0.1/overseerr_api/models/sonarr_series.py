# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from overseerr_api.models.sonarr_series_add_options_inner import SonarrSeriesAddOptionsInner
from overseerr_api.models.sonarr_series_images_inner import SonarrSeriesImagesInner
from overseerr_api.models.sonarr_series_ratings_inner import SonarrSeriesRatingsInner
from overseerr_api.models.sonarr_series_seasons_inner import SonarrSeriesSeasonsInner

class SonarrSeries(BaseModel):
    """
    SonarrSeries
    """
    add_options: Optional[conlist(SonarrSeriesAddOptionsInner)] = Field(None, alias="addOptions")
    added: Optional[StrictStr] = None
    air_time: Optional[StrictStr] = Field(None, alias="airTime")
    certification: Optional[StrictStr] = None
    clean_title: Optional[StrictStr] = Field(None, alias="cleanTitle")
    first_aired: Optional[StrictStr] = Field(None, alias="firstAired")
    genres: Optional[conlist(StrictStr)] = None
    id: Optional[Union[StrictFloat, StrictInt]] = None
    images: Optional[conlist(SonarrSeriesImagesInner)] = None
    imdb_id: Optional[StrictStr] = Field(None, alias="imdbId")
    language_profile_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="languageProfileId")
    last_info_sync: Optional[StrictStr] = Field(None, alias="lastInfoSync")
    monitored: Optional[StrictBool] = None
    network: Optional[StrictStr] = None
    overview: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    profile_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="profileId")
    quality_profile_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="qualityProfileId")
    ratings: Optional[conlist(SonarrSeriesRatingsInner)] = None
    remote_poster: Optional[StrictStr] = Field(None, alias="remotePoster")
    root_folder_path: Optional[StrictStr] = Field(None, alias="rootFolderPath")
    runtime: Optional[Union[StrictFloat, StrictInt]] = None
    season_count: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="seasonCount")
    season_folder: Optional[StrictBool] = Field(None, alias="seasonFolder")
    seasons: Optional[conlist(SonarrSeriesSeasonsInner)] = None
    series_type: Optional[StrictStr] = Field(None, alias="seriesType")
    sort_title: Optional[StrictStr] = Field(None, alias="sortTitle")
    status: Optional[StrictStr] = None
    tags: Optional[conlist(StrictStr)] = None
    title: Optional[StrictStr] = None
    title_slug: Optional[StrictStr] = Field(None, alias="titleSlug")
    tv_maze_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="tvMazeId")
    tv_rage_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="tvRageId")
    tvdb_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="tvdbId")
    use_scene_numbering: Optional[StrictBool] = Field(None, alias="useSceneNumbering")
    year: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["addOptions", "added", "airTime", "certification", "cleanTitle", "firstAired", "genres", "id", "images", "imdbId", "languageProfileId", "lastInfoSync", "monitored", "network", "overview", "path", "profileId", "qualityProfileId", "ratings", "remotePoster", "rootFolderPath", "runtime", "seasonCount", "seasonFolder", "seasons", "seriesType", "sortTitle", "status", "tags", "title", "titleSlug", "tvMazeId", "tvRageId", "tvdbId", "useSceneNumbering", "year"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SonarrSeries:
        """Create an instance of SonarrSeries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in add_options (list)
        _items = []
        if self.add_options:
            for _item in self.add_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ratings (list)
        _items = []
        if self.ratings:
            for _item in self.ratings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ratings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seasons (list)
        _items = []
        if self.seasons:
            for _item in self.seasons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['seasons'] = _items
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if last_info_sync (nullable) is None
        # and __fields_set__ contains the field
        if self.last_info_sync is None and "last_info_sync" in self.__fields_set__:
            _dict['lastInfoSync'] = None

        # set to None if root_folder_path (nullable) is None
        # and __fields_set__ contains the field
        if self.root_folder_path is None and "root_folder_path" in self.__fields_set__:
            _dict['rootFolderPath'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SonarrSeries:
        """Create an instance of SonarrSeries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SonarrSeries.parse_obj(obj)

        _obj = SonarrSeries.parse_obj({
            "add_options": [SonarrSeriesAddOptionsInner.from_dict(_item) for _item in obj.get("addOptions")] if obj.get("addOptions") is not None else None,
            "added": obj.get("added"),
            "air_time": obj.get("airTime"),
            "certification": obj.get("certification"),
            "clean_title": obj.get("cleanTitle"),
            "first_aired": obj.get("firstAired"),
            "genres": obj.get("genres"),
            "id": obj.get("id"),
            "images": [SonarrSeriesImagesInner.from_dict(_item) for _item in obj.get("images")] if obj.get("images") is not None else None,
            "imdb_id": obj.get("imdbId"),
            "language_profile_id": obj.get("languageProfileId"),
            "last_info_sync": obj.get("lastInfoSync"),
            "monitored": obj.get("monitored"),
            "network": obj.get("network"),
            "overview": obj.get("overview"),
            "path": obj.get("path"),
            "profile_id": obj.get("profileId"),
            "quality_profile_id": obj.get("qualityProfileId"),
            "ratings": [SonarrSeriesRatingsInner.from_dict(_item) for _item in obj.get("ratings")] if obj.get("ratings") is not None else None,
            "remote_poster": obj.get("remotePoster"),
            "root_folder_path": obj.get("rootFolderPath"),
            "runtime": obj.get("runtime"),
            "season_count": obj.get("seasonCount"),
            "season_folder": obj.get("seasonFolder"),
            "seasons": [SonarrSeriesSeasonsInner.from_dict(_item) for _item in obj.get("seasons")] if obj.get("seasons") is not None else None,
            "series_type": obj.get("seriesType"),
            "sort_title": obj.get("sortTitle"),
            "status": obj.get("status"),
            "tags": obj.get("tags"),
            "title": obj.get("title"),
            "title_slug": obj.get("titleSlug"),
            "tv_maze_id": obj.get("tvMazeId"),
            "tv_rage_id": obj.get("tvRageId"),
            "tvdb_id": obj.get("tvdbId"),
            "use_scene_numbering": obj.get("useSceneNumbering"),
            "year": obj.get("year")
        })
        return _obj


