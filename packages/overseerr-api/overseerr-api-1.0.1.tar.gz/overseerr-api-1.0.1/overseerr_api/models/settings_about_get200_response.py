# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class SettingsAboutGet200Response(BaseModel):
    """
    SettingsAboutGet200Response
    """
    app_data_path: Optional[StrictStr] = Field(None, alias="appDataPath")
    total_media_items: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalMediaItems")
    total_requests: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="totalRequests")
    tz: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    __properties = ["appDataPath", "totalMediaItems", "totalRequests", "tz", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SettingsAboutGet200Response:
        """Create an instance of SettingsAboutGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if tz (nullable) is None
        # and __fields_set__ contains the field
        if self.tz is None and "tz" in self.__fields_set__:
            _dict['tz'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SettingsAboutGet200Response:
        """Create an instance of SettingsAboutGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SettingsAboutGet200Response.parse_obj(obj)

        _obj = SettingsAboutGet200Response.parse_obj({
            "app_data_path": obj.get("appDataPath"),
            "total_media_items": obj.get("totalMediaItems"),
            "total_requests": obj.get("totalRequests"),
            "tz": obj.get("tz"),
            "version": obj.get("version")
        })
        return _obj


