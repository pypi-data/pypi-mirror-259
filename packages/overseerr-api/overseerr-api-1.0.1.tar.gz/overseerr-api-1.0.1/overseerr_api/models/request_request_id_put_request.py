# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, confloat, conint, conlist, validator

class RequestRequestIdPutRequest(BaseModel):
    """
    RequestRequestIdPutRequest
    """
    is4k: Optional[StrictBool] = None
    language_profile_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="languageProfileId")
    media_type: StrictStr = Field(..., alias="mediaType")
    profile_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="profileId")
    root_folder: Optional[StrictStr] = Field(None, alias="rootFolder")
    seasons: Optional[conlist(Union[confloat(ge=1, strict=True), conint(ge=1, strict=True)])] = None
    server_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="serverId")
    user_id: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="userId")
    __properties = ["is4k", "languageProfileId", "mediaType", "profileId", "rootFolder", "seasons", "serverId", "userId"]

    @validator('media_type')
    def media_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('movie', 'tv'):
            raise ValueError("must be one of enum values ('movie', 'tv')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RequestRequestIdPutRequest:
        """Create an instance of RequestRequestIdPutRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if user_id (nullable) is None
        # and __fields_set__ contains the field
        if self.user_id is None and "user_id" in self.__fields_set__:
            _dict['userId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RequestRequestIdPutRequest:
        """Create an instance of RequestRequestIdPutRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RequestRequestIdPutRequest.parse_obj(obj)

        _obj = RequestRequestIdPutRequest.parse_obj({
            "is4k": obj.get("is4k"),
            "language_profile_id": obj.get("languageProfileId"),
            "media_type": obj.get("mediaType"),
            "profile_id": obj.get("profileId"),
            "root_folder": obj.get("rootFolder"),
            "seasons": obj.get("seasons"),
            "server_id": obj.get("serverId"),
            "user_id": obj.get("userId")
        })
        return _obj


