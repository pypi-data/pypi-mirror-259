# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist

class PersonDetails(BaseModel):
    """
    PersonDetails
    """
    adult: Optional[StrictBool] = None
    also_known_as: Optional[conlist(StrictStr)] = Field(None, alias="alsoKnownAs")
    biography: Optional[StrictStr] = None
    deathday: Optional[StrictStr] = None
    gender: Optional[StrictStr] = None
    homepage: Optional[StrictStr] = None
    id: Optional[Union[StrictFloat, StrictInt]] = None
    imdb_id: Optional[StrictStr] = Field(None, alias="imdbId")
    known_for_department: Optional[StrictStr] = Field(None, alias="knownForDepartment")
    name: Optional[StrictStr] = None
    place_of_birth: Optional[StrictStr] = Field(None, alias="placeOfBirth")
    popularity: Optional[StrictStr] = None
    profile_path: Optional[StrictStr] = Field(None, alias="profilePath")
    __properties = ["adult", "alsoKnownAs", "biography", "deathday", "gender", "homepage", "id", "imdbId", "knownForDepartment", "name", "placeOfBirth", "popularity", "profilePath"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PersonDetails:
        """Create an instance of PersonDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PersonDetails:
        """Create an instance of PersonDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PersonDetails.parse_obj(obj)

        _obj = PersonDetails.parse_obj({
            "adult": obj.get("adult"),
            "also_known_as": obj.get("alsoKnownAs"),
            "biography": obj.get("biography"),
            "deathday": obj.get("deathday"),
            "gender": obj.get("gender"),
            "homepage": obj.get("homepage"),
            "id": obj.get("id"),
            "imdb_id": obj.get("imdbId"),
            "known_for_department": obj.get("knownForDepartment"),
            "name": obj.get("name"),
            "place_of_birth": obj.get("placeOfBirth"),
            "popularity": obj.get("popularity"),
            "profile_path": obj.get("profilePath")
        })
        return _obj


