# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from overseerr_api.models.plex_device import PlexDevice  # noqa: E501

class TestPlexDevice(unittest.TestCase):
    """PlexDevice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlexDevice:
        """Test PlexDevice
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlexDevice`
        """
        model = PlexDevice()  # noqa: E501
        if include_optional:
            return PlexDevice(
                access_token = 'supersecretaccesstoken',
                client_identifier = '85a943ce-a0cc-4d2a-a4ec-f74f06e40feb',
                connection = [
                    overseerr_api.models.plex_connection.PlexConnection(
                        address = '127.0.0.1', 
                        local = True, 
                        message = 'OK', 
                        port = 32400, 
                        protocol = 'https', 
                        status = 200, 
                        uri = 'https://127-0-0-1.2ab6ce1a093d465e910def96cf4e4799.plex.direct:32400', )
                    ],
                created_at = '2021-01-01T00:00:00.000Z',
                device = 'PC',
                dns_rebinding_protection = False,
                home = True,
                https_required = True,
                last_seen_at = '2021-01-01T00:00:00.000Z',
                name = 'My Plex Server',
                nat_loopback_supported = False,
                owned = True,
                owner_id = '12345',
                platform = 'Linux',
                platform_version = 'default/linux/amd64/17.1/systemd',
                presence = True,
                product = 'Plex Media Server',
                product_version = '1.21',
                provides = [
                    'server'
                    ],
                public_address = '127.0.0.1',
                public_address_matches = False,
                relay = True,
                source_title = 'xyzabc',
                synced = True
            )
        else:
            return PlexDevice(
                client_identifier = '85a943ce-a0cc-4d2a-a4ec-f74f06e40feb',
                connection = [
                    overseerr_api.models.plex_connection.PlexConnection(
                        address = '127.0.0.1', 
                        local = True, 
                        message = 'OK', 
                        port = 32400, 
                        protocol = 'https', 
                        status = 200, 
                        uri = 'https://127-0-0-1.2ab6ce1a093d465e910def96cf4e4799.plex.direct:32400', )
                    ],
                created_at = '2021-01-01T00:00:00.000Z',
                device = 'PC',
                last_seen_at = '2021-01-01T00:00:00.000Z',
                name = 'My Plex Server',
                owned = True,
                platform = 'Linux',
                product = 'Plex Media Server',
                product_version = '1.21',
                provides = [
                    'server'
                    ],
        )
        """

    def testPlexDevice(self):
        """Test PlexDevice"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
