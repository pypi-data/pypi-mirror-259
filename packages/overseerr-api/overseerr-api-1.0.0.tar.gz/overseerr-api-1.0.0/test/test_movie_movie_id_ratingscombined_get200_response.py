# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from overseerr_api.models.movie_movie_id_ratingscombined_get200_response import MovieMovieIdRatingscombinedGet200Response  # noqa: E501

class TestMovieMovieIdRatingscombinedGet200Response(unittest.TestCase):
    """MovieMovieIdRatingscombinedGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MovieMovieIdRatingscombinedGet200Response:
        """Test MovieMovieIdRatingscombinedGet200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MovieMovieIdRatingscombinedGet200Response`
        """
        model = MovieMovieIdRatingscombinedGet200Response()  # noqa: E501
        if include_optional:
            return MovieMovieIdRatingscombinedGet200Response(
                imdb = overseerr_api.models._movie__movie_id__ratingscombined_get_200_response_imdb._movie__movieId__ratingscombined_get_200_response_imdb(
                    critics_score = 6.5, 
                    title = 'I am Legend', 
                    url = 'https://www.imdb.com/title/tt0480249', ),
                rt = overseerr_api.models._movie__movie_id__ratings_get_200_response._movie__movieId__ratings_get_200_response(
                    audience_rating = 'Spilled', 
                    audience_score = 65, 
                    critics_rating = 'Rotten', 
                    critics_score = 85, 
                    title = 'Mulan', 
                    url = 'http://www.rottentomatoes.com/m/mulan_2020/', 
                    year = 2020, )
            )
        else:
            return MovieMovieIdRatingscombinedGet200Response(
        )
        """

    def testMovieMovieIdRatingscombinedGet200Response(self):
        """Test MovieMovieIdRatingscombinedGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
