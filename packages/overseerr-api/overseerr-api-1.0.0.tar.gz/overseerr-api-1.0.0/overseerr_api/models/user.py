# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class User(BaseModel):
    """
    User
    """
    avatar: Optional[StrictStr] = None
    created_at: StrictStr = Field(..., alias="createdAt")
    email: StrictStr = Field(...)
    id: StrictInt = Field(...)
    permissions: Optional[Union[StrictFloat, StrictInt]] = None
    plex_token: Optional[StrictStr] = Field(None, alias="plexToken")
    plex_username: Optional[StrictStr] = Field(None, alias="plexUsername")
    request_count: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="requestCount")
    updated_at: StrictStr = Field(..., alias="updatedAt")
    user_type: Optional[StrictInt] = Field(None, alias="userType")
    username: Optional[StrictStr] = None
    __properties = ["avatar", "createdAt", "email", "id", "permissions", "plexToken", "plexUsername", "requestCount", "updatedAt", "userType", "username"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "avatar",
                            "created_at",
                            "email",
                            "id",
                            "plex_token",
                            "plex_username",
                            "request_count",
                            "updated_at",
                            "user_type",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "avatar": obj.get("avatar"),
            "created_at": obj.get("createdAt"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "permissions": obj.get("permissions"),
            "plex_token": obj.get("plexToken"),
            "plex_username": obj.get("plexUsername"),
            "request_count": obj.get("requestCount"),
            "updated_at": obj.get("updatedAt"),
            "user_type": obj.get("userType"),
            "username": obj.get("username")
        })
        return _obj


