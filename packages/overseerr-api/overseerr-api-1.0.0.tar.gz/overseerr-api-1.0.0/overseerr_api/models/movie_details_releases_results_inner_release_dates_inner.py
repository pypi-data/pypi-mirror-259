# coding: utf-8

"""
    Overseerr API

    This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr

class MovieDetailsReleasesResultsInnerReleaseDatesInner(BaseModel):
    """
    MovieDetailsReleasesResultsInnerReleaseDatesInner
    """
    certification: Optional[StrictStr] = None
    iso_639_1: Optional[StrictStr] = None
    note: Optional[StrictStr] = None
    release_date: Optional[StrictStr] = None
    type: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["certification", "iso_639_1", "note", "release_date", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MovieDetailsReleasesResultsInnerReleaseDatesInner:
        """Create an instance of MovieDetailsReleasesResultsInnerReleaseDatesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if iso_639_1 (nullable) is None
        # and __fields_set__ contains the field
        if self.iso_639_1 is None and "iso_639_1" in self.__fields_set__:
            _dict['iso_639_1'] = None

        # set to None if note (nullable) is None
        # and __fields_set__ contains the field
        if self.note is None and "note" in self.__fields_set__:
            _dict['note'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MovieDetailsReleasesResultsInnerReleaseDatesInner:
        """Create an instance of MovieDetailsReleasesResultsInnerReleaseDatesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MovieDetailsReleasesResultsInnerReleaseDatesInner.parse_obj(obj)

        _obj = MovieDetailsReleasesResultsInnerReleaseDatesInner.parse_obj({
            "certification": obj.get("certification"),
            "iso_639_1": obj.get("iso_639_1"),
            "note": obj.get("note"),
            "release_date": obj.get("release_date"),
            "type": obj.get("type")
        })
        return _obj


