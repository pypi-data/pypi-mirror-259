# coding: utf-8

"""
    SmartHome

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from mpsmarthome.models.meter_reading_data import MeterReadingData

class MeterReadingResponseData(BaseModel):
    """
    MeterReadingResponseData
    """
    address_meter_id: Optional[StrictStr] = Field(None, alias="addressMeterId")
    readings: Optional[conlist(MeterReadingData)] = None
    status: Optional[StrictStr] = None
    __properties = ["addressMeterId", "readings", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MeterReadingResponseData:
        """Create an instance of MeterReadingResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in readings (list)
        _items = []
        if self.readings:
            for _item in self.readings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['readings'] = _items
        # set to None if readings (nullable) is None
        # and __fields_set__ contains the field
        if self.readings is None and "readings" in self.__fields_set__:
            _dict['readings'] = None

        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MeterReadingResponseData:
        """Create an instance of MeterReadingResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MeterReadingResponseData.parse_obj(obj)

        _obj = MeterReadingResponseData.parse_obj({
            "address_meter_id": obj.get("addressMeterId"),
            "readings": [MeterReadingData.from_dict(_item) for _item in obj.get("readings")] if obj.get("readings") is not None else None,
            "status": obj.get("status")
        })
        return _obj


