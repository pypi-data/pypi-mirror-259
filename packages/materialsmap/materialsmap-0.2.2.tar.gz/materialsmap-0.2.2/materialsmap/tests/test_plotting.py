import unittest
import os
import numpy as np
from pathlib import Path
from materialsmap.core.pycalphad_run import pycalphad_eq,pycalphad_scheil
from importlib_resources import files
from materialsmap.plot.FeasibilityMap import plotScheilEqFeasibilityMap,getSolidLiquidTFromScheil,plotScheilTemperature,plotScheilPhase,plotHotTearingSusceptibilityMap,getCriteria


class BaseTestCase(unittest.TestCase):
    
    def assertIsFile(self, path):
        if not Path(path).resolve().is_file():
            raise AssertionError("This plot is not work %s" % str(path))
        else:
            os.remove(path)


class TestCalculations(BaseTestCase):
    
    def setUp(self):
        self.path = str(files('materialsmap').joinpath('tests/testsCaseFiles'))

    def test_plotScheilEqFeasibilityMap(self):
        coord,EqMaxBadPhaseAmount,ScheilMaxBadPhaseAmount,EqThrshold,ScheilThreshold,xComp,yComp,dynamicTRange,comps,dynamicRatio = ([(0, 0), (0, 1), (1, 0)],[0, 0, 1],[0.9999982643265233, 0.0, 0.0],0.1,0.05,'Ag','Al',True,['Cu', 'Ag', 'Al'],0.6666666666666666)
        plotScheilEqFeasibilityMap(self.path,coord,EqMaxBadPhaseAmount,ScheilMaxBadPhaseAmount,EqThrshold,ScheilThreshold,xComp,yComp,dynamicTRange,comps,dynamicRatio)
        fmtted_comps = '-'.join(sorted(set(comps)))
        self.assertIsFile(f'{self.path}/{fmtted_comps}-EqScheil-dynamic_{round(dynamicRatio,3)}.tif')

    def test_getSolidLiquidTFromScheil(self):
        ScheilResult,solidCriterion = ({'Point0': {'TK': [1360.0, 1360.0, 1359.0, 1358.0, 1357.0, 1356.0, 1355.0, 1354.0, 1353.0, 1352.0, 1351.0, 1350.0, 1349.0, 1348.0, 1347.0, 1346.0, 1345.0, 1344.0, 1343.0, 1342.0, 1341.0, 1340.0, 1339.0, 1338.0, 1337.0, 1336.0, 1335.0, 1334.0, 1333.0, 1332.0, 1331.0, 1330.0, 1329.0, 1328.0, 1327.0, 1326.0, 1325.0, 1324.0, 1323.0, 1322.0, 1321.0, 1320.0, 1319.0, 1318.0, 1317.0, 1316.0, 1315.0, 1314.0, 1313.0, 1312.0, 1311.0, 1310.0, 1309.0, 1308.0, 1307.0, 1306.0, 1305.0, 1304.0, 1303.0, 1302.0, 1301.0, 1300.0, 1299.0, 1298.0, 1297.0, 1296.0, 1295.0, 1295.0], 'FCC_A1': [0.0, 0.0, 0.0, 0.0, 0.9911679225754808, 0.004991652968250936, 0.001389181744056791, 0.0006524414136968075, 0.00037894410175076014, 0.00024761869675969086, 0.00017447856781697326, 0.00012957423157970632, 0.00010002891591446283, 7.955503496242828e-05, 6.478375435532943e-05, 5.3777214571932024e-05, 4.535625168021678e-05, 3.87698401461458e-05, 3.3521170462583664e-05, 2.9270950388479672e-05, 2.5781037050036724e-05, 2.2880293451091874e-05, 2.0443167966425254e-05, 1.837586027170161e-05, 1.6607152564797816e-05, 1.5082181162027752e-05, 1.3758129511978454e-05, 1.2601186418923326e-05, 1.158436908552931e-05, 1.0685925705462722e-05, 9.888170205372153e-06, 9.176599053761725e-06, 8.539229332342043e-06, 7.966092340390005e-06, 7.448837398761144e-06, 6.980428305283345e-06, 6.55490371996342e-06, 6.167183098414483e-06, 5.812918596187049e-06, 5.488367822507496e-06, 5.190299248124238e-06, 4.915907727521978e-06, 4.662751040974493e-06, 4.428692631011166e-06, 4.211859346296699e-06, 4.0106017557287294e-06, 3.823462483543437e-06, 3.649152004583372e-06, 3.486523476504187e-06, 3.3345566473684083e-06, 3.1923392109031307e-06, 3.0590551319021333e-06, 2.9339715361543653e-06, 2.8164291974307258e-06, 2.705834487642211e-06, 2.601649832218918e-06, 2.503390105361375e-06, 2.410614047291154e-06, 2.3229215136606927e-06, 2.239947618123508e-06, 2.161359968888482e-06, 2.086855032437895e-06, 2.0161547154790615e-06, 1.9490046748536408e-06, 1.8851709236120934e-06, 1.8244388553623927e-06, 1.7666111189308948e-06, 1.735673476702751e-06], 'LIQUID': [1.0, 1.0, 1.0, 1.0, 0.008832077424519191, 0.00384042445626831, 0.002451242712211532, 0.0017988012985147295, 0.0014198571967639628, 0.0011722385000042523, 0.0009977599321873143, 0.0008681857006076488, 0.0007681567846932191, 0.0006886017497308439, 0.0006238179953754752, 0.0005700407808035823, 0.0005246845291233537, 0.0004859146889771848, 0.00045239351851456, 0.0004231225681260442, 0.0003973415310759565, 0.00037446123762485684, 0.00035401806965840166, 0.00033564220938675504, 0.0003190350568219591, 0.0003039528756599852, 0.0002901947461479981, 0.0002775935597291168, 0.000266009190643568, 0.0002553232649381565, 0.0002454350947327377, 0.00023625849567898705, 0.00022771926634668205, 0.00021975317400624306, 0.00021230433660746062, 0.00020532390830219072, 0.00019876900458226654, 0.00019260182148383986, 0.00018678890288770233, 0.0001813005350651542, 0.00017611023581698415, 0.00017119432808943014, 0.00016653157704848986, 0.00016210288441742549, 0.00015789102507113295, 0.0001538804233154334, 0.00015005696083192355, 0.0001464078088273535, 0.00014292128535087212, 0.0001395867287035113, 0.00013639438949264449, 0.0001333353343607735, 0.0001304013628246059, 0.00012758493362718948, 0.00012487909913949657, 0.00012227744930726203, 0.00011977405920193807, 0.00011736344515467234, 0.00011504052364097461, 0.00011280057602280902, 0.00011063921605392046, 0.00010855236102147447, 0.00010653620630596272, 0.00010458720163109003, 0.00010270203070750217, 0.0001008775918521776, 9.911098073323021e-05, 0.0]}, 'Point1': {'TK': [940.0, 940.0, 939.0, 938.0, 937.0, 936.0, 935.0, 934.0, 934.0, 934.0, 934.0, 934.0, 933.5177469135803, 933.5177469135803, 933.5177469135803, 933.5177469135803, 933.5177469135803, 933.5177469135803, 933.3239402141124], 'FCC_A1': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'LIQUID': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0]}, 'Point2': {'TK': [1240.0, 1240.0, 1239.0, 1238.0, 1237.0, 1236.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1234.8061933005322], 'FCC_A1': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000344123], 'LIQUID': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0]}},0.001)
        solidusT_re,liquidusT_re = ([1351.0, 933.3239402141124, 1234.8061933005322],[1357.0, 933.3239402141124, 1234.8061933005322])
        solidusT,liquidusT = getSolidLiquidTFromScheil(ScheilResult,solidCriterion)
        with self.subTest():
            self.assertEqual(solidusT,solidusT_re)
        with self.subTest():
            self.assertEqual(liquidusT,liquidusT_re)
    
    def test_plotScheilTemperature(self):
        solidusT,liquidusT = ([1351.0, 933.3239402141124, 1234.8061933005322],[1357.0, 933.3239402141124, 1234.8061933005322])
        coord,xComp,yComp,solidCriterion = ([(0, 0), (0, 1), (1, 0)],'Ag','Al',0.001)
        plotScheilTemperature(self.path,solidusT,liquidusT,coord,xComp,yComp,solidCriterion)
        self.assertIsFile(f'{self.path}/solidusT (K).tif')
        self.assertIsFile(f'{self.path}/liquidusT (K).tif')

    def test_plotScheilPhase(self):
        finalScheilResults,allowedPhases, coord,xComp,yComp = ({'Point': [0, 1, 2], 'FCC_A1': [1.735673476702751e-06, 1.0, 0.0], 'LIQUID': [0.0, 0.0, 1.0]},['LIQUID', 'FCC_A1'],[(0, 0), (0, 1), (1, 0)],'Ag','Al')
        plotScheilPhase(self.path, finalScheilResults,allowedPhases, coord,xComp,yComp)
        self.assertIsFile(f'{self.path}/ScheilPhaseHeatMap.tif')      

    def test_plotHotTearingSusceptibilityMap(self):
        hotTeartSettings = {'numDataThreshold':10,'CSCPoints':[0.4,0.9,0.99], 'KouPoints':[0.93,0.98], 'CDPoints':[0.7,0.98]}
        solidusT,liquidusT = ([1351.0, 933.3239402141124, 1234.8061933005322],[1357.0, 933.3239402141124, 1234.8061933005322])
        ScheilResult,solidCriterion = ({'Point0': {'TK': [1360.0, 1360.0, 1359.0, 1358.0, 1357.0, 1356.0, 1355.0, 1354.0, 1353.0, 1352.0, 1351.0, 1350.0, 1349.0, 1348.0, 1347.0, 1346.0, 1345.0, 1344.0, 1343.0, 1342.0, 1341.0, 1340.0, 1339.0, 1338.0, 1337.0, 1336.0, 1335.0, 1334.0, 1333.0, 1332.0, 1331.0, 1330.0, 1329.0, 1328.0, 1327.0, 1326.0, 1325.0, 1324.0, 1323.0, 1322.0, 1321.0, 1320.0, 1319.0, 1318.0, 1317.0, 1316.0, 1315.0, 1314.0, 1313.0, 1312.0, 1311.0, 1310.0, 1309.0, 1308.0, 1307.0, 1306.0, 1305.0, 1304.0, 1303.0, 1302.0, 1301.0, 1300.0, 1299.0, 1298.0, 1297.0, 1296.0, 1295.0, 1295.0], 'FCC_A1': [0.0, 0.0, 0.0, 0.0, 0.9911679225754808, 0.004991652968250936, 0.001389181744056791, 0.0006524414136968075, 0.00037894410175076014, 0.00024761869675969086, 0.00017447856781697326, 0.00012957423157970632, 0.00010002891591446283, 7.955503496242828e-05, 6.478375435532943e-05, 5.3777214571932024e-05, 4.535625168021678e-05, 3.87698401461458e-05, 3.3521170462583664e-05, 2.9270950388479672e-05, 2.5781037050036724e-05, 2.2880293451091874e-05, 2.0443167966425254e-05, 1.837586027170161e-05, 1.6607152564797816e-05, 1.5082181162027752e-05, 1.3758129511978454e-05, 1.2601186418923326e-05, 1.158436908552931e-05, 1.0685925705462722e-05, 9.888170205372153e-06, 9.176599053761725e-06, 8.539229332342043e-06, 7.966092340390005e-06, 7.448837398761144e-06, 6.980428305283345e-06, 6.55490371996342e-06, 6.167183098414483e-06, 5.812918596187049e-06, 5.488367822507496e-06, 5.190299248124238e-06, 4.915907727521978e-06, 4.662751040974493e-06, 4.428692631011166e-06, 4.211859346296699e-06, 4.0106017557287294e-06, 3.823462483543437e-06, 3.649152004583372e-06, 3.486523476504187e-06, 3.3345566473684083e-06, 3.1923392109031307e-06, 3.0590551319021333e-06, 2.9339715361543653e-06, 2.8164291974307258e-06, 2.705834487642211e-06, 2.601649832218918e-06, 2.503390105361375e-06, 2.410614047291154e-06, 2.3229215136606927e-06, 2.239947618123508e-06, 2.161359968888482e-06, 2.086855032437895e-06, 2.0161547154790615e-06, 1.9490046748536408e-06, 1.8851709236120934e-06, 1.8244388553623927e-06, 1.7666111189308948e-06, 1.735673476702751e-06], 'LIQUID': [1.0, 1.0, 1.0, 1.0, 0.008832077424519191, 0.00384042445626831, 0.002451242712211532, 0.0017988012985147295, 0.0014198571967639628, 0.0011722385000042523, 0.0009977599321873143, 0.0008681857006076488, 0.0007681567846932191, 0.0006886017497308439, 0.0006238179953754752, 0.0005700407808035823, 0.0005246845291233537, 0.0004859146889771848, 0.00045239351851456, 0.0004231225681260442, 0.0003973415310759565, 0.00037446123762485684, 0.00035401806965840166, 0.00033564220938675504, 0.0003190350568219591, 0.0003039528756599852, 0.0002901947461479981, 0.0002775935597291168, 0.000266009190643568, 0.0002553232649381565, 0.0002454350947327377, 0.00023625849567898705, 0.00022771926634668205, 0.00021975317400624306, 0.00021230433660746062, 0.00020532390830219072, 0.00019876900458226654, 0.00019260182148383986, 0.00018678890288770233, 0.0001813005350651542, 0.00017611023581698415, 0.00017119432808943014, 0.00016653157704848986, 0.00016210288441742549, 0.00015789102507113295, 0.0001538804233154334, 0.00015005696083192355, 0.0001464078088273535, 0.00014292128535087212, 0.0001395867287035113, 0.00013639438949264449, 0.0001333353343607735, 0.0001304013628246059, 0.00012758493362718948, 0.00012487909913949657, 0.00012227744930726203, 0.00011977405920193807, 0.00011736344515467234, 0.00011504052364097461, 0.00011280057602280902, 0.00011063921605392046, 0.00010855236102147447, 0.00010653620630596272, 0.00010458720163109003, 0.00010270203070750217, 0.0001008775918521776, 9.911098073323021e-05, 0.0]}, 'Point1': {'TK': [940.0, 940.0, 939.0, 938.0, 937.0, 936.0, 935.0, 934.0, 934.0, 934.0, 934.0, 934.0, 933.5177469135803, 933.5177469135803, 933.5177469135803, 933.5177469135803, 933.5177469135803, 933.5177469135803, 933.3239402141124], 'FCC_A1': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], 'LIQUID': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0]}, 'Point2': {'TK': [1240.0, 1240.0, 1239.0, 1238.0, 1237.0, 1236.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1235.0, 1234.8061933005322], 'FCC_A1': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0000000000344123], 'LIQUID': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0]}},0.001)
        FR_re, CSC_re, Kou_re, iCSC_re, sRDG_re = ([6.0, 0.0, 0.0],[-0.0938680875903521, 0.1, 0.09999999999995622],[2.8036046755815147, 13.047120908158863, 10.150332105288118],[0, 0.0, 0.0],[0, 0.0, 0.0])
        FR, CSC, Kou, iCSC, sRDG = getCriteria(ScheilResult,solidusT,liquidusT,numDataThreshold = hotTeartSettings['numDataThreshold']
                                           ,CSCPoints = hotTeartSettings['CSCPoints'],KouPoints = hotTeartSettings['KouPoints'],CDPoints = hotTeartSettings['CDPoints'])
        coord, xComp, yComp, FR1, CSC1, Kou1, iCSC1, sRDG1 = ([(0, 0), (0, 1), (1, 0)],'Ag','Al',[6.0, 0.0, 0.0],[-0.0938680875903521, 0.1, 0.09999999999995622],[2.8036046755815147, 13.047120908158863, 10.150332105288118],[0, 0.0, 0.0],[0, 0.0, 0.0])
        plotHotTearingSusceptibilityMap(self.path, coord, xComp, yComp, FR1, CSC1, Kou1, iCSC1, sRDG1)
        with self.subTest():
            self.assertEqual(FR,FR_re)
        with self.subTest():
            self.assertEqual(CSC,CSC_re)
        with self.subTest():
            self.assertEqual(Kou,Kou_re)
        with self.subTest():
            self.assertEqual(iCSC,iCSC_re)
        with self.subTest():
            self.assertEqual(sRDG,sRDG_re)
        with self.subTest():
            self.assertIsFile(f'{self.path}/hotTearing_normal.tif')      

if __name__ == '__main__':
    unittest.main()