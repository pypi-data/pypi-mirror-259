[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs",
  "hatchling",
]

[project]
name = "pep610"
description = "PEP 610 Direct URL data parser"
readme = "README.md"
keywords = [
  "pep",
  "pep610",
]
license = {file = "LICENSE"}
authors = [{ name = "Edgar Ramírez Mondragón", email = "edgarrmondragon@hey.com" }]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Typing :: Typed",
]
dynamic = [
  "version",
]
dependencies = [
]
optional-dependencies.dev = [
  "coverage[toml]>=7.4.2",
  "hypothesis",
  "hypothesis-jsonschema",
  'importlib-resources>=5.3; python_version < "3.9"',
  "pytest",
]
optional-dependencies.docs = [
  "furo==2024.1.29",
  "myst-parser==2",
  "sphinx==7.2.6",
  "sphinx-copybutton==0.5.2",
  "sphinx_design==0.5",
]
urls.Documentation = "https://pep610.readthedocs.io"
urls.Issues = "https://github.com/edgarrmondragon/pep610/issues"
urls.Source = "https://github.com/edgarrmondragon/pep610"

[tool.hatch.version]
source = "vcs"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=7.4.2",
]
features = ["dev"]
[tool.hatch.envs.default.env-vars]
COVERAGE_CORE = "sysmon"
[tool.hatch.envs.default.overrides]
env.GITHUB_ACTIONS.dev-mode = { value = false, if = ["true"] }
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
doctest = "pytest --doctest-modules {args:src/pep610}"
cov = "coverage run -m pytest {args:tests}"

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13", "pypy3.10"]

[tool.hatch.envs.coverage]
dependencies = [
  "coverage[toml]>=7.4.2",
]
detached = true
[tool.hatch.envs.coverage.scripts]
json = "coverage json"
xml = "coverage xml"
report = ["coverage combine", "coverage report --show-missing"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "mypy>=1.0.0",
  "hypothesis",
  "hypothesis-jsonschema",
  "pytest",
  "ruff>=0.1.0",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/pep610 tests}"
style = [
  "ruff check {args:.}",
  "ruff format --check --diff {args:.}",
]
fmt = ["ruff check --fix {args:.}", "ruff format {args:.}", "style"]
all = ["style", "typing"]

[tool.hatch.envs.docs]
features = ["docs"]
template = "docs"
[tool.hatch.envs.docs.scripts]
build = "sphinx-build -W -b html docs docs/_build"

[tool.ruff]
line-length = 100
preview = true

[tool.ruff.lint]
ignore = [
  "COM812",  # missing-trailing-comma
  "ISC001",  # single-line-implicit-string-concatenation
]
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "D",
  "UP",
  "YTT",
  "ANN",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "EM",
  "FA",
  "ISC",
  "ICN",
  "G",
  "INP",
  "PIE",
  "T20",
  "PT",
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SIM",
  "TID",
  "TCH",
  "INT",
  "ARG",
  "PTH",
  "TD",
  "FIX",
  "ERA",
  "PGH",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "TRY",
  "FLY",
  "PERF",
  "FURB",
  "RUF",
]
unfixable = [
  "ERA", # commented-out-code
]

[tool.ruff.lint.isort]
known-first-party = ["pep610"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
  "PLR2004", # magic-value-comparison
  "S101",    # assert
  "TID252",  # relative-imports
  "D100",    # undocumented-public-module
  "D104",	   # undocumented-public-package
  "ANN201",  # missing-return-type-undocumented-public-function
]
"docs/conf.py" = [
  "INP001", # Not an implicit namespace packages
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pyproject-fmt]
max_supported_python = "3.13"

[tool.pytest.ini_options]
addopts = "-v"

[tool.coverage.run]
source_pkgs = ["pep610", "tests"]
branch = true
omit = [
  # omit type definitions
  "*/pep610/_types.py",
]
parallel = true
relative_files = true

[tool.coverage.paths]
pep610 = ["src/pep610", "*/pep610"]
tests = ["tests", "*/tests"]

[tool.coverage.report]
exclude_also = [
  "no cov",
  "if __name__ == .__main__.:",
  "if t.TYPE_CHECKING:",
]
show_missing = true
